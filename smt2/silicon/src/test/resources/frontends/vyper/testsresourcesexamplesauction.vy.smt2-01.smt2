(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-29 14:44:07
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Contract 0)
(declare-sort $Blockchain 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
(declare-sort $PSF<$accessible$withdraw> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<$accessible$withdraw>To$Snap ($PSF<$accessible$withdraw>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap) $PSF<$accessible$withdraw>)
(assert (forall ((x $PSF<$accessible$withdraw>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<$accessible$withdraw>($SortWrappers.$PSF<$accessible$withdraw>To$Snap x)))
    :pattern (($SortWrappers.$PSF<$accessible$withdraw>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<$accessible$withdraw>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<$accessible$withdraw>To$Snap($SortWrappers.$SnapTo$PSF<$accessible$withdraw> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<$accessible$withdraw> x))
    :qid |$Snap.$PSF<$accessible$withdraw>To$SnapTo$PSF<$accessible$withdraw>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun s$struct$self$init<$Struct> (Int Int Int Int Int Bool $Map<Int~_Int> Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
; /predicate_snap_functions_declarations.smt2 [$accessible$withdraw: Snap]
(declare-fun $PSF.domain_$accessible$withdraw ($PSF<$accessible$withdraw>) Set<$Snap>)
(declare-fun $PSF.lookup_$accessible$withdraw ($PSF<$accessible$withdraw> $Snap) $Snap)
(declare-fun $PSF.after_$accessible$withdraw ($PSF<$accessible$withdraw> $PSF<$accessible$withdraw>) Bool)
(declare-fun $PSF.loc_$accessible$withdraw ($Snap $Snap) Bool)
(declare-fun $PSF.perm_$accessible$withdraw ($PPM $Snap) $Perm)
(declare-const $psfTOP_$accessible$withdraw $PSF<$accessible$withdraw>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$bid%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$bid_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$withdraw%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$withdraw_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$endAuction%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$endAuction_0%trigger ($Snap Int Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 Int) ($arg_3 Int) ($arg_4 Int) ($arg_5 Bool) ($arg_6 $Map<Int~_Int>) ($arg_7 Int) ($arg_8 Int) ($arg_9 Bool) ($arg_10 $Map<Int~_Int>) ($arg_11 $Map<Int~_Int>) ($arg_12 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 1))
          $arg_1)
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 2))
            $arg_2)
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 3))
              $arg_3)
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 4))
                $arg_4)
              (and
                (=
                  ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 8))
                        $arg_8)
                      (and
                        (=
                          ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 9))
                          $arg_9)
                        (and
                          (=
                            ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 10))
                            $arg_10)
                          (and
                            (=
                              ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 11))
                              $arg_11)
                            (=
                              ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 12))
                              $arg_12))))))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 2))
                ($struct_get<Int> ($struct_loc<Int> $r 2)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> $l 3))
                  ($struct_get<Int> ($struct_loc<Int> $r 3)))
                (and
                  (=
                    ($struct_get<Int> ($struct_loc<Int> $l 4))
                    ($struct_get<Int> ($struct_loc<Int> $r 4)))
                  (and
                    (=
                      ($struct_get<Bool> ($struct_loc<Int> $l 5))
                      ($struct_get<Bool> ($struct_loc<Int> $r 5)))
                    (and
                      ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 6)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 6)))
                      (and
                        (=
                          ($struct_get<Int> ($struct_loc<Int> $l 7))
                          ($struct_get<Int> ($struct_loc<Int> $r 7)))
                        (and
                          (=
                            ($struct_get<Int> ($struct_loc<Int> $l 8))
                            ($struct_get<Int> ($struct_loc<Int> $r 8)))
                          (and
                            (=
                              ($struct_get<Bool> ($struct_loc<Int> $l 9))
                              ($struct_get<Bool> ($struct_loc<Int> $r 9)))
                            (and
                              ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 10)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 10)))
                              (and
                                ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 11)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 11)))
                                (=
                                  ($struct_get<Bool> ($struct_loc<Int> $l 12))
                                  ($struct_get<Bool> ($struct_loc<Int> $r 12))))))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
; /predicate_snap_functions_axioms.smt2 [$accessible$withdraw: Snap]
(assert (forall ((vs $PSF<$accessible$withdraw>) (ws $PSF<$accessible$withdraw>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_$accessible$withdraw vs) ($PSF.domain_$accessible$withdraw ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_$accessible$withdraw vs))
            (= ($PSF.lookup_$accessible$withdraw vs x) ($PSF.lookup_$accessible$withdraw ws x)))
          :pattern (($PSF.lookup_$accessible$withdraw vs x) ($PSF.lookup_$accessible$withdraw ws x))
          :qid |qp.$PSF<$accessible$withdraw>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<$accessible$withdraw>To$Snap vs)
              ($SortWrappers.$PSF<$accessible$withdraw>To$Snap ws)
              )
    :qid |qp.$PSF<$accessible$withdraw>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_$accessible$withdraw pm s))
    :pattern (($PSF.perm_$accessible$withdraw pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_$accessible$withdraw f s) true)
    :pattern (($PSF.loc_$accessible$withdraw f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-930|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-931|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-936|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-937|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-932|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-933|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-938|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-939|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-934|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-935|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-940|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-941|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))))
(assert (= ($Snap.second $t@10@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 3)): Int) &&
;   ($struct_get($struct_loc($self$0, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 ($Snap.combine ($Snap.first $t@11@01) ($Snap.second $t@11@01))))
(assert (= ($Snap.first $t@11@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
(assert (= ($Snap.second $t@11@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))
(assert (= ($Snap.second $t@12@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@14@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
(push) ; 4
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 6)), $q0@14@01)) | live]
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 6)), $q0@14@01) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 6)), $q0@14@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 6)), $q0@14@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@14@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@615@11@615@354-aux|)))
(assert (forall (($q0@14@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@14@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@615@11@615@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int))
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int))
(declare-const $q0@16@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@16@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@16@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) $q0@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@616@11@616@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 7)): Int) &&
;   ($struct_get($struct_loc($self$0, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 ($Snap.combine ($Snap.first $t@17@01) ($Snap.second $t@17@01))))
(assert (= ($Snap.first $t@17@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 7))))
(assert (= ($Snap.second $t@17@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 8)): Int) &&
;   ($struct_get($struct_loc($self$0, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@18@01 $Snap)
(assert (= $t@18@01 ($Snap.combine ($Snap.first $t@18@01) ($Snap.second $t@18@01))))
(assert (= ($Snap.first $t@18@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] $struct_loc($self$0, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 8))))
(assert (= ($Snap.second $t@18@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] $struct_loc($self$0, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@20@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(push) ; 4
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 10)), $q1@20@01)) | live]
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 10)), $q1@20@01) | live]
(push) ; 5
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 10)), $q1@20@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 10)), $q1@20@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@20@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@619@11@619@357-aux|)))
(assert (forall (($q1@20@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@619@11@619@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int))
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int))
(declare-const $q1@22@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@22@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@22@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q1@22@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@620@11@620@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@24@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(push) ; 4
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), $q2@24@01)) | live]
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), $q2@24@01) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), $q2@24@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), $q2@24@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@24@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@621@11@621@357-aux|)))
(assert (forall (($q2@24@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@24@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@621@11@621@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int))
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int))
(declare-const $q2@26@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@26@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@26@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q2@26@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@622@11@622@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 ($Snap.combine ($Snap.first $t@28@01) ($Snap.second $t@28@01))))
(assert (= ($Snap.first $t@28@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@28@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 ($Snap.combine ($Snap.first $t@29@01) ($Snap.second $t@29@01))))
(assert (= ($Snap.first $t@29@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@29@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 ($Snap.combine ($Snap.first $t@30@01) ($Snap.second $t@30@01))))
(assert (= ($Snap.first $t@30@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))))
(assert (= ($Snap.second $t@30@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 3)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 ($Snap.combine ($Snap.first $t@31@01) ($Snap.second $t@31@01))))
(assert (= ($Snap.first $t@31@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
(assert (= ($Snap.second $t@31@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 ($Snap.combine ($Snap.first $t@32@01) ($Snap.second $t@32@01))))
(assert (= ($Snap.first $t@32@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))))
(assert (= ($Snap.second $t@32@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@34@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 6)), $q0@34@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 6)), $q0@34@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 6)), $q0@34@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 6)), $q0@34@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@34@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@629@11@629@354-aux|)))
(assert (forall (($q0@34@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@629@11@629@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int))
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int))
(declare-const $q0@36@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@36@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@36@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) $q0@36@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@630@11@630@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 7)): Int) &&
;   ($struct_get($struct_loc($self$1, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 ($Snap.combine ($Snap.first $t@37@01) ($Snap.second $t@37@01))))
(assert (= ($Snap.first $t@37@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 7))))
(assert (= ($Snap.second $t@37@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 8)): Int) &&
;   ($struct_get($struct_loc($self$1, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 ($Snap.combine ($Snap.first $t@38@01) ($Snap.second $t@38@01))))
(assert (= ($Snap.first $t@38@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] $struct_loc($self$1, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 8))))
(assert (= ($Snap.second $t@38@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] $struct_loc($self$1, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@40@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 10)), $q1@40@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 10)), $q1@40@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 10)), $q1@40@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 10)), $q1@40@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@40@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@633@11@633@357-aux|)))
(assert (forall (($q1@40@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@40@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@633@11@633@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int))
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int))
(declare-const $q1@42@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@42@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@42@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q1@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@634@11@634@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@44@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(push) ; 4
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), $q2@44@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), $q2@44@01) | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), $q2@44@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), $q2@44@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@44@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@635@11@635@357-aux|)))
(assert (forall (($q2@44@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@635@11@635@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int))
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int))
(declare-const $q2@46@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@46@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@46@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q2@46@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@636@11@636@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@48@01 $Snap)
(assert (= $t@48@01 ($Snap.combine ($Snap.first $t@48@01) ($Snap.second $t@48@01))))
(assert (= ($Snap.first $t@48@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@48@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 ($Snap.combine ($Snap.first $t@49@01) ($Snap.second $t@49@01))))
(assert (= ($Snap.first $t@49@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@49@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 2)): Int) &&
;   ($struct_get($struct_loc($self$2, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 ($Snap.combine ($Snap.first $t@50@01) ($Snap.second $t@50@01))))
(assert (= ($Snap.first $t@50@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))))
(assert (= ($Snap.second $t@50@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 3)): Int) &&
;   ($struct_get($struct_loc($self$2, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 ($Snap.combine ($Snap.first $t@51@01) ($Snap.second $t@51@01))))
(assert (= ($Snap.first $t@51@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
(assert (= ($Snap.second $t@51@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 4)): Int) &&
;   ($struct_get($struct_loc($self$2, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 ($Snap.combine ($Snap.first $t@52@01) ($Snap.second $t@52@01))))
(assert (= ($Snap.first $t@52@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))))
(assert (= ($Snap.second $t@52@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@54@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
(push) ; 4
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), $q0@54@01)) | live]
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), $q0@54@01) | live]
(push) ; 5
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), $q0@54@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), $q0@54@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@54@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@643@11@643@354-aux|)))
(assert (forall (($q0@54@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@54@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@643@11@643@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int))
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int))
(declare-const $q0@56@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@56@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@56@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) $q0@56@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@644@11@644@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 7)): Int) &&
;   ($struct_get($struct_loc($self$2, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 ($Snap.combine ($Snap.first $t@57@01) ($Snap.second $t@57@01))))
(assert (= ($Snap.first $t@57@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 7))))
(assert (= ($Snap.second $t@57@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 8)): Int) &&
;   ($struct_get($struct_loc($self$2, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 ($Snap.combine ($Snap.first $t@58@01) ($Snap.second $t@58@01))))
(assert (= ($Snap.first $t@58@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 8)): Int)
; [eval] $struct_loc($self$2, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 8))))
(assert (= ($Snap.second $t@58@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 8)): Int)
; [eval] $struct_loc($self$2, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@60@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(push) ; 4
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 10)), $q1@60@01)) | live]
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 10)), $q1@60@01) | live]
(push) ; 5
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 10)), $q1@60@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 10)), $q1@60@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@60@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@647@11@647@357-aux|)))
(assert (forall (($q1@60@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@60@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@647@11@647@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int))
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int))
(declare-const $q1@62@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@62@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@62@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q1@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@648@11@648@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@64@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(push) ; 4
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), $q2@64@01)) | live]
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), $q2@64@01) | live]
(push) ; 5
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), $q2@64@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), $q2@64@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@64@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@649@11@649@357-aux|)))
(assert (forall (($q2@64@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@64@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@649@11@649@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int))
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int))
(declare-const $q2@66@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@66@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@66@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q2@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@650@11@650@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 ($Snap.combine ($Snap.first $t@68@01) ($Snap.second $t@68@01))))
(assert (= ($Snap.first $t@68@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@68@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@69@01 $Snap)
(assert (= $t@69@01 ($Snap.combine ($Snap.first $t@69@01) ($Snap.second $t@69@01))))
(assert (= ($Snap.first $t@69@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@69@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 ($Snap.combine ($Snap.first $t@70@01) ($Snap.second $t@70@01))))
(assert (= ($Snap.first $t@70@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@70@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 ($Snap.combine ($Snap.first $t@72@01) ($Snap.second $t@72@01))))
(assert (= ($Snap.first $t@72@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@72@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@75@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc($self$0, 4)): Int) == 0
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) == 0 ==> ($struct_get($struct_loc($self$0, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) == 0
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) == 0 | live]
; [else-branch: 9 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 9 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)) 0))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 9 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 0)): Int) ==
;   ($struct_get($struct_loc($self$0, 0)): Int)
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) == ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$0, 5)): Bool)
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
; [else-branch: 10 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 10 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   ($struct_get($struct_loc($self$0, 7)): Int)
(declare-const $t@79@01 $Snap)
(assert (= $t@79@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$0, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$0, 4)): Int) <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] !($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
; [else-branch: 11 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 11 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$0, 4)): Int) <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 11 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$0, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$0, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$0, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
; [else-branch: 12 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 12 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$0, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 12 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc($self$0, 7)): Int)
(declare-const $t@81@01 $Snap)
(assert (= $t@81@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
; [else-branch: 13 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 13 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 13 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 4)): Int) >=
;   ($struct_get($struct_loc($self$0, 4)): Int)
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) >= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$0, 4)): Int) ==
;   ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 3)): Int) ==
;   ($struct_get($struct_loc($self$0, 3)): Int)
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($struct_get($struct_loc($self$0, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int) && ($struct_get($struct_loc($self$0, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
; [else-branch: 14 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 14 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int) && ($struct_get($struct_loc($self$0, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(push) ; 5
; [then-branch: 15 | False | live]
; [else-branch: 15 | True | live]
(push) ; 6
; [then-branch: 15 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 15 | True]
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 0)): Int) != 0
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Int) !=
;   ($struct_get($struct_loc($self$0, 0)): Int)
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) != ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$0,
;   0)): Int)): Int) ==
;   0
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0,
;   0)): Int)): Int) ==
;   0
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$0, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
; [else-branch: 16 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 16 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 16 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc($self$0, 4)): Int)
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 0)): Int)): Int) == ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
; [else-branch: 17 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 17 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 0)): Int)): Int) == ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 17 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc($self$0, 4)): Int) +
;   ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$0,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$0,
;   3)): Int)): Int)
(declare-const $t@89@01 $Snap)
(assert (= $t@89@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int) + ($struct_get($struct_loc($self$0, 4)): Int) + ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int) + ($struct_get($struct_loc($self$0, 4)): Int) + ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int) + ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$0, 3)): Int) &&
;     q$a != ($struct_get($struct_loc($self$0, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$0, 3)): Int) && q$a != ($struct_get($struct_loc($self$0, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@91@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$0, 3)): Int) && q$a != ($struct_get($struct_loc($self$0, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 18 | !(0 <= q$a@91@01) | live]
; [else-branch: 18 | 0 <= q$a@91@01 | live]
(push) ; 5
; [then-branch: 18 | !(0 <= q$a@91@01)]
(assert (not (<= 0 q$a@91@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | 0 <= q$a@91@01]
(assert (<= 0 q$a@91@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@91@01) (not (<= 0 q$a@91@01))))
(push) ; 4
; [then-branch: 19 | 0 <= q$a@91@01 && q$a@91@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 19 | !(0 <= q$a@91@01 && q$a@91@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 19 | 0 <= q$a@91@01 && q$a@91@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@91@01)
  (<= q$a@91@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$0, 3)): Int) && q$a != ($struct_get($struct_loc($self$0, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc($self$0, 3)): Int) && q$a != ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(push) ; 6
; [then-branch: 20 | q$a@91@01 == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 20 | q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) | live]
(push) ; 7
; [then-branch: 20 | q$a@91@01 == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3))]
(assert (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 20 | q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3))]
(assert (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)))))
; [eval] q$a != ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
  (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)))))
(push) ; 6
; [then-branch: 21 | q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) && q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)) | live]
; [else-branch: 21 | !(q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) && q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0))) | live]
(push) ; 7
; [then-branch: 21 | q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) && q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0))]
(assert (and
  (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
  (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 21 | !(q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 3)) && q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)))]
(assert (not
  (and
    (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
    (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
      (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))
  (and
    (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
    (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | !(0 <= q$a@91@01 && q$a@91@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@91@01)
    (<= q$a@91@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@91@01)
    (<= q$a@91@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@91@01)
    (<= q$a@91@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
      (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
          (not
            (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))
      (and
        (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
        (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@91@01)
      (<= q$a@91@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@91@01)
    (<= q$a@91@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@91@01 Int)) (!
  (and
    (or (<= 0 q$a@91@01) (not (<= 0 q$a@91@01)))
    (=>
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
          (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@91@01
                  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
              (not
                (=
                  q$a@91@01
                  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))
          (and
            (not
              (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
            (not
              (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@91@01)
          (<= q$a@91@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@91@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@673@11@673@531-aux|)))
(assert (forall ((q$a@91@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
        (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) q$a@91@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@91@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@91@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@91@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@673@11@673@531|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@93@01 $Snap)
(assert (= $t@93@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@94@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 22 | !(0 <= q$a@94@01) | live]
; [else-branch: 22 | 0 <= q$a@94@01 | live]
(push) ; 5
; [then-branch: 22 | !(0 <= q$a@94@01)]
(assert (not (<= 0 q$a@94@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 22 | 0 <= q$a@94@01]
(assert (<= 0 q$a@94@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@94@01) (not (<= 0 q$a@94@01))))
(push) ; 4
; [then-branch: 23 | 0 <= q$a@94@01 && q$a@94@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 23 | !(0 <= q$a@94@01 && q$a@94@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 23 | 0 <= q$a@94@01 && q$a@94@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@94@01)
  (<= q$a@94@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
(push) ; 6
; [then-branch: 24 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 6)), q$a@94@01) != 0 | live]
; [else-branch: 24 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 6)), q$a@94@01) == 0 | live]
(push) ; 7
; [then-branch: 24 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 6)), q$a@94@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 24 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 6)), q$a@94@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 23 | !(0 <= q$a@94@01 && q$a@94@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@94@01)
    (<= q$a@94@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@94@01)
    (<= q$a@94@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@94@01)
    (<= q$a@94@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@94@01)
      (<= q$a@94@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@94@01)
    (<= q$a@94@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@94@01 Int)) (!
  (and
    (or (<= 0 q$a@94@01) (not (<= 0 q$a@94@01)))
    (=>
      (and
        (<= 0 q$a@94@01)
        (<= q$a@94@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@94@01)
        (<= q$a@94@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@94@01)
          (<= q$a@94@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@94@01)
        (<= q$a@94@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@675@11@675@352-aux|)))
(assert (forall ((q$a@94@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@94@01)
        (<= q$a@94@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@94@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@675@11@675@352|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$0, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@95@01 $Snap)
(assert (= $t@95@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$0, 0)): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@96@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$0, 0)): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 25 | !(0 <= q$a@96@01) | live]
; [else-branch: 25 | 0 <= q$a@96@01 | live]
(push) ; 5
; [then-branch: 25 | !(0 <= q$a@96@01)]
(assert (not (<= 0 q$a@96@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 25 | 0 <= q$a@96@01]
(assert (<= 0 q$a@96@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@96@01) (not (<= 0 q$a@96@01))))
(push) ; 4
; [then-branch: 26 | 0 <= q$a@96@01 && q$a@96@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 26 | !(0 <= q$a@96@01 && q$a@96@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 26 | 0 <= q$a@96@01 && q$a@96@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@96@01)
  (<= q$a@96@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$0, 0)): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$0, 0)): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(push) ; 6
; [then-branch: 27 | q$a@96@01 == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)) | live]
; [else-branch: 27 | q$a@96@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)) | live]
(push) ; 7
; [then-branch: 27 | q$a@96@01 == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0))]
(assert (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 27 | q$a@96@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0))]
(assert (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
  (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
(push) ; 6
; [then-branch: 28 | q$a@96@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), q$a@96@01) == 0 | live]
; [else-branch: 28 | !(q$a@96@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), q$a@96@01) == 0) | live]
(push) ; 7
; [then-branch: 28 | q$a@96@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), q$a@96@01) == 0]
(assert (and
  (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 28 | !(q$a@96@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), q$a@96@01) == 0)]
(assert (not
  (and
    (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
        0)))
  (and
    (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 26 | !(0 <= q$a@96@01 && q$a@96@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@96@01)
    (<= q$a@96@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@96@01)
    (<= q$a@96@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@96@01)
    (<= q$a@96@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
      (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
            0)))
      (and
        (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@96@01)
      (<= q$a@96@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@96@01)
    (<= q$a@96@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@96@01 Int)) (!
  (and
    (or (<= 0 q$a@96@01) (not (<= 0 q$a@96@01)))
    (=>
      (and
        (<= 0 q$a@96@01)
        (<= q$a@96@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@96@01)
        (<= q$a@96@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
          (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@96@01
                  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
                0)))
          (and
            (not
              (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@96@01)
          (<= q$a@96@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@96@01)
        (<= q$a@96@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@676@11@676@408-aux|)))
(assert (forall ((q$a@96@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@96@01)
        (<= q$a@96@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@96@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) q$a@96@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) q$a@96@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@676@11@676@408|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(18, q$a, q$v), write))
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 ($Snap.combine ($Snap.first $t@97@01) ($Snap.second $t@97@01))))
(assert (= ($Snap.first $t@97@01) $Snap.unit))
(declare-const q$a@98@01 Int)
(declare-const q$v@99@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 29 | !(0 <= q$a@98@01) | live]
; [else-branch: 29 | 0 <= q$a@98@01 | live]
(push) ; 5
; [then-branch: 29 | !(0 <= q$a@98@01)]
(assert (not (<= 0 q$a@98@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | 0 <= q$a@98@01]
(assert (<= 0 q$a@98@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 30 | !(q$a@98@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 30 | q$a@98@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 30 | !(q$a@98@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@98@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 30 | q$a@98@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@98@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 31 | !(0 <= q$v@99@01) | live]
; [else-branch: 31 | 0 <= q$v@99@01 | live]
(push) ; 9
; [then-branch: 31 | !(0 <= q$v@99@01)]
(assert (not (<= 0 q$v@99@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 31 | 0 <= q$v@99@01]
(assert (<= 0 q$v@99@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 32 | !(q$v@99@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 32 | q$v@99@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 32 | !(q$v@99@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@99@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 32 | q$v@99@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@99@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@99@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@99@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@99@01)
  (and
    (<= 0 q$v@99@01)
    (or
      (<=
        q$v@99@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@99@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@99@01) (not (<= 0 q$v@99@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@99@01)
      (and
        (<= 0 q$v@99@01)
        (or
          (<=
            q$v@99@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@99@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@99@01) (not (<= 0 q$v@99@01))))))
(assert (or
  (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@98@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@98@01)
  (and
    (<= 0 q$a@98@01)
    (=>
      (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@99@01)
          (and
            (<= 0 q$v@99@01)
            (or
              (<=
                q$v@99@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@99@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@99@01) (not (<= 0 q$v@99@01)))))
    (or
      (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@98@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@98@01) (not (<= 0 q$a@98@01))))
(assert (and
  (<= 0 q$a@98@01)
  (and
    (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@99@01)
      (and
        (<=
          q$v@99@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@99@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@98@01)))))))
(declare-const sm@100@01 $PSF<$accessible$withdraw>)
(declare-const s@101@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@102@01 (Int Int Int) Int)
(declare-fun img@103@01 (Int Int Int) Bool)
(declare-fun inv@104@01 (Int Int Int) Int)
(declare-fun img@105@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@98@01 Int) (q$v@99@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@98@01)
      (and
        (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@99@01)
          (and
            (<=
              q$v@99@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@99@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@98@01))))))
    (and
      (=>
        (<= 0 q$a@98@01)
        (and
          (<= 0 q$a@98@01)
          (=>
            (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@99@01)
                (and
                  (<= 0 q$v@99@01)
                  (or
                    (<=
                      q$v@99@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@99@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@99@01) (not (<= 0 q$v@99@01)))))
          (or
            (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@98@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@98@01) (not (<= 0 q$a@98@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@98@01))
    ($SortWrappers.IntTo$Snap q$v@99@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@98@01))
    ($SortWrappers.IntTo$Snap q$v@99@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@98@01 Int) (q$v1@99@01 Int) (q$a2@98@01 Int) (q$v2@99@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@98@01)
        (and
          (<= q$a1@98@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@99@01)
            (and
              (<=
                q$v1@99@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@99@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a1@98@01))))))
      (and
        (<= 0 q$a2@98@01)
        (and
          (<= q$a2@98@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@99@01)
            (and
              (<=
                q$v2@99@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@99@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a2@98@01))))))
      (and (= q$a1@98@01 q$a2@98@01) (= q$v1@99@01 q$v2@99@01)))
    (and (= q$a1@98@01 q$a2@98@01) (= q$v1@99@01 q$v2@99@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@98@01 Int) (q$v@99@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@98@01)
      (and
        (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@99@01)
          (and
            (<=
              q$v@99@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@99@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) q$a@98@01))))))
    (and
      (and
        (= (inv@102@01 18 q$a@98@01 q$v@99@01) q$a@98@01)
        (= (inv@104@01 18 q$a@98@01 q$v@99@01) q$v@99@01))
      (and
        (img@103@01 18 q$a@98@01 q$v@99@01)
        (img@105@01 18 q$a@98@01 q$v@99@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@98@01))
    ($SortWrappers.IntTo$Snap q$v@99@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@98@01))
    ($SortWrappers.IntTo$Snap q$v@99@01))))
  :qid |quant-u-943|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@103@01 $tag $to $amount) (img@105@01 $tag $to $amount))
      (and
        (<= 0 (inv@102@01 $tag $to $amount))
        (and
          (<=
            (inv@102@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@104@01 $tag $to $amount))
            (and
              (<=
                (inv@104@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@104@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 $tag $to $amount))))))))
    (and
      (= 18 $tag)
      (= (inv@102@01 $tag $to $amount) $to)
      (= (inv@104@01 $tag $to $amount) $amount)))
  :pattern ((inv@102@01 $tag $to $amount))
  :pattern ((inv@104@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(declare-const sm@106@01 $PSF<$accessible$withdraw>)
(declare-const s@107@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@107@01 $Snap)) (!
  (=>
    (and
      (and
        (img@103@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second s@107@01)))
        (img@105@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second s@107@01))))
      (and
        (<=
          0
          (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second s@107@01))))
        (and
          (<=
            (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second s@107@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second s@107@01))))
            (and
              (<=
                (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second s@107@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second s@107@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@107@01))) ($SortWrappers.$SnapToInt ($Snap.second s@107@01))))))))))
    (and
      (not (= s@107@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@106@01  $PSF<$accessible$withdraw>) s@107@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@107@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@106@01  $PSF<$accessible$withdraw>) s@107@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@107@01))
  :qid |qp.psmValDef1|)))
(assert (forall ((s@107@01 $Snap)) (!
  ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@107@01) s@107@01)
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@106@01  $PSF<$accessible$withdraw>) s@107@01))
  :qid |qp.psmResTrgDef2|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@102@01 $tag $to $amount))
      (and
        (<=
          (inv@102@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@104@01 $tag $to $amount))
          (and
            (<=
              (inv@104@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@104@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@106@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@102@01 $tag $to $amount) (inv@104@01 $tag $to $amount))
  :qid |quant-u-944|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@109@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@109@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $a@109@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $a@109@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $a@109@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@678@11@678@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc($self$1, 4)): Int) == 0
(declare-const $t@110@01 $Snap)
(assert (= $t@110@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == 0 ==> ($struct_get($struct_loc($self$1, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) == 0 | live]
; [else-branch: 33 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 33 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)) 0))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 33 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 0)): Int) ==
;   ($struct_get($struct_loc($self$0, 0)): Int)
(declare-const $t@111@01 $Snap)
(assert (= $t@111@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) == ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 5)): Bool)
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
; [else-branch: 34 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 34 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 34 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   ($struct_get($struct_loc($self$1, 7)): Int)
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))) | live]
; [else-branch: 35 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 35 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 35 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)))
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))) | live]
; [else-branch: 36 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 36 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 36 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)))
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc($self$1, 7)): Int)
(declare-const $t@115@01 $Snap)
(assert (= $t@115@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)) | live]
; [else-branch: 37 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 37 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 37 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 4)): Int) >=
;   ($struct_get($struct_loc($self$0, 4)): Int)
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) >= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 4)): Int) ==
;   ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) ==
;   ($struct_get($struct_loc($self$0, 3)): Int)
(declare-const $t@117@01 $Snap)
(assert (= $t@117@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int) && ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
; [else-branch: 38 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 38 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int) && ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(push) ; 5
; [then-branch: 39 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 4)) != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 4)) | live]
; [else-branch: 39 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 4)) == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 4)) | live]
(push) ; 6
; [then-branch: 39 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 4)) != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))))
(pop) ; 6
(push) ; 6
; [else-branch: 39 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 4)) == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))))
(pop) ; 4
(push) ; 4
; [else-branch: 38 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
        ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
          ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 0)): Int) != 0
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Int) !=
;   ($struct_get($struct_loc($self$1, 0)): Int)
(declare-const $t@119@01 $Snap)
(assert (= $t@119@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   0
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   0
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))) | live]
; [else-branch: 40 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 40 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 40 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc($self$1, 4)): Int)
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)) | live]
; [else-branch: 41 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 41 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 41 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) +
;   ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int)
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)))
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$1, 3)): Int) &&
;     q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@125@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 42 | !(0 <= q$a@125@01) | live]
; [else-branch: 42 | 0 <= q$a@125@01 | live]
(push) ; 5
; [then-branch: 42 | !(0 <= q$a@125@01)]
(assert (not (<= 0 q$a@125@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 42 | 0 <= q$a@125@01]
(assert (<= 0 q$a@125@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@125@01) (not (<= 0 q$a@125@01))))
(push) ; 4
; [then-branch: 43 | 0 <= q$a@125@01 && q$a@125@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 43 | !(0 <= q$a@125@01 && q$a@125@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 43 | 0 <= q$a@125@01 && q$a@125@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@125@01)
  (<= q$a@125@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(push) ; 6
; [then-branch: 44 | q$a@125@01 == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 44 | q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) | live]
(push) ; 7
; [then-branch: 44 | q$a@125@01 == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3))]
(assert (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 44 | q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3))]
(assert (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)))))
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
  (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3)))))
(push) ; 6
; [then-branch: 45 | q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) && q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)) | live]
; [else-branch: 45 | !(q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) && q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0))) | live]
(push) ; 7
; [then-branch: 45 | q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) && q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0))]
(assert (and
  (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
  (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 45 | !(q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 3)) && q$a@125@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)))]
(assert (not
  (and
    (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
    (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
      (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
  (and
    (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
    (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 43 | !(0 <= q$a@125@01 && q$a@125@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@125@01)
    (<= q$a@125@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@125@01)
    (<= q$a@125@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@125@01)
    (<= q$a@125@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
      (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
          (not
            (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
      (and
        (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
        (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@125@01)
      (<= q$a@125@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@125@01)
    (<= q$a@125@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@125@01 Int)) (!
  (and
    (or (<= 0 q$a@125@01) (not (<= 0 q$a@125@01)))
    (=>
      (and
        (<= 0 q$a@125@01)
        (<= q$a@125@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@125@01)
        (<= q$a@125@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
          (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@125@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
              (not
                (=
                  q$a@125@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
          (and
            (not
              (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
            (not
              (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@125@01)
          (<= q$a@125@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@125@01)
        (<= q$a@125@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@693@11@693@531-aux|)))
(assert (forall ((q$a@125@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@125@01)
        (<= q$a@125@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
        (not (= q$a@125@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) q$a@125@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@125@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@125@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@693@11@693@531|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@128@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 46 | !(0 <= q$a@128@01) | live]
; [else-branch: 46 | 0 <= q$a@128@01 | live]
(push) ; 5
; [then-branch: 46 | !(0 <= q$a@128@01)]
(assert (not (<= 0 q$a@128@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 46 | 0 <= q$a@128@01]
(assert (<= 0 q$a@128@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@128@01) (not (<= 0 q$a@128@01))))
(push) ; 4
; [then-branch: 47 | 0 <= q$a@128@01 && q$a@128@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 47 | !(0 <= q$a@128@01 && q$a@128@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 47 | 0 <= q$a@128@01 && q$a@128@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@128@01)
  (<= q$a@128@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(push) ; 6
; [then-branch: 48 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 6)), q$a@128@01) != 0 | live]
; [else-branch: 48 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 6)), q$a@128@01) == 0 | live]
(push) ; 7
; [then-branch: 48 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 6)), q$a@128@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 48 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 6)), q$a@128@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 47 | !(0 <= q$a@128@01 && q$a@128@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@128@01)
    (<= q$a@128@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@128@01)
    (<= q$a@128@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@128@01)
    (<= q$a@128@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@128@01)
      (<= q$a@128@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@128@01)
    (<= q$a@128@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@128@01 Int)) (!
  (and
    (or (<= 0 q$a@128@01) (not (<= 0 q$a@128@01)))
    (=>
      (and
        (<= 0 q$a@128@01)
        (<= q$a@128@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@128@01)
        (<= q$a@128@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@128@01)
          (<= q$a@128@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@128@01)
        (<= q$a@128@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@695@11@695@352-aux|)))
(assert (forall ((q$a@128@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@128@01)
        (<= q$a@128@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@128@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@128@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@695@11@695@352|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$1, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@129@01 $Snap)
(assert (= $t@129@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@130@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 49 | !(0 <= q$a@130@01) | live]
; [else-branch: 49 | 0 <= q$a@130@01 | live]
(push) ; 5
; [then-branch: 49 | !(0 <= q$a@130@01)]
(assert (not (<= 0 q$a@130@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 49 | 0 <= q$a@130@01]
(assert (<= 0 q$a@130@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@130@01) (not (<= 0 q$a@130@01))))
(push) ; 4
; [then-branch: 50 | 0 <= q$a@130@01 && q$a@130@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 50 | !(0 <= q$a@130@01 && q$a@130@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 50 | 0 <= q$a@130@01 && q$a@130@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@130@01)
  (<= q$a@130@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(push) ; 6
; [then-branch: 51 | q$a@130@01 == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)) | live]
; [else-branch: 51 | q$a@130@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)) | live]
(push) ; 7
; [then-branch: 51 | q$a@130@01 == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0))]
(assert (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 51 | q$a@130@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0))]
(assert (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
  (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))
(push) ; 6
; [then-branch: 52 | q$a@130@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), q$a@130@01) == 0 | live]
; [else-branch: 52 | !(q$a@130@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), q$a@130@01) == 0) | live]
(push) ; 7
; [then-branch: 52 | q$a@130@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), q$a@130@01) == 0]
(assert (and
  (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 52 | !(q$a@130@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), q$a@130@01) == 0)]
(assert (not
  (and
    (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
        0)))
  (and
    (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 50 | !(0 <= q$a@130@01 && q$a@130@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@130@01)
    (<= q$a@130@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@130@01)
    (<= q$a@130@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@130@01)
    (<= q$a@130@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
      (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
            0)))
      (and
        (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@130@01)
      (<= q$a@130@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@130@01)
    (<= q$a@130@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@130@01 Int)) (!
  (and
    (or (<= 0 q$a@130@01) (not (<= 0 q$a@130@01)))
    (=>
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
          (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@130@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
                0)))
          (and
            (not
              (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@130@01)
          (<= q$a@130@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@696@11@696@408-aux|)))
(assert (forall ((q$a@130@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) q$a@130@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) q$a@130@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@696@11@696@408|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(18, q$a, q$v), write))
(declare-const $t@131@01 $Snap)
(assert (= $t@131@01 ($Snap.combine ($Snap.first $t@131@01) ($Snap.second $t@131@01))))
(assert (= ($Snap.first $t@131@01) $Snap.unit))
(declare-const q$a@132@01 Int)
(declare-const q$v@133@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 53 | !(0 <= q$a@132@01) | live]
; [else-branch: 53 | 0 <= q$a@132@01 | live]
(push) ; 5
; [then-branch: 53 | !(0 <= q$a@132@01)]
(assert (not (<= 0 q$a@132@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 53 | 0 <= q$a@132@01]
(assert (<= 0 q$a@132@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 54 | !(q$a@132@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 54 | q$a@132@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 54 | !(q$a@132@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@132@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 54 | q$a@132@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@132@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 55 | !(0 <= q$v@133@01) | live]
; [else-branch: 55 | 0 <= q$v@133@01 | live]
(push) ; 9
; [then-branch: 55 | !(0 <= q$v@133@01)]
(assert (not (<= 0 q$v@133@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 55 | 0 <= q$v@133@01]
(assert (<= 0 q$v@133@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 56 | !(q$v@133@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 56 | q$v@133@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 56 | !(q$v@133@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@133@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 56 | q$v@133@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@133@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@133@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@133@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@133@01)
  (and
    (<= 0 q$v@133@01)
    (or
      (<=
        q$v@133@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@133@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@133@01) (not (<= 0 q$v@133@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@133@01)
      (and
        (<= 0 q$v@133@01)
        (or
          (<=
            q$v@133@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@133@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@133@01) (not (<= 0 q$v@133@01))))))
(assert (or
  (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@132@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@132@01)
  (and
    (<= 0 q$a@132@01)
    (=>
      (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@133@01)
          (and
            (<= 0 q$v@133@01)
            (or
              (<=
                q$v@133@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@133@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@133@01) (not (<= 0 q$v@133@01)))))
    (or
      (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@132@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@132@01) (not (<= 0 q$a@132@01))))
(assert (and
  (<= 0 q$a@132@01)
  (and
    (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@133@01)
      (and
        (<=
          q$v@133@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@133@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@132@01)))))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@134@01 (Int Int Int) Int)
(declare-fun img@135@01 (Int Int Int) Bool)
(declare-fun inv@136@01 (Int Int Int) Int)
(declare-fun img@137@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@132@01 Int) (q$v@133@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@132@01)
      (and
        (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@133@01)
          (and
            (<=
              q$v@133@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@133@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@132@01))))))
    (and
      (=>
        (<= 0 q$a@132@01)
        (and
          (<= 0 q$a@132@01)
          (=>
            (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@133@01)
                (and
                  (<= 0 q$v@133@01)
                  (or
                    (<=
                      q$v@133@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@133@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@133@01) (not (<= 0 q$v@133@01)))))
          (or
            (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@132@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@132@01) (not (<= 0 q$a@132@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@131@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@132@01))
    ($SortWrappers.IntTo$Snap q$v@133@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@132@01))
    ($SortWrappers.IntTo$Snap q$v@133@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@132@01 Int) (q$v1@133@01 Int) (q$a2@132@01 Int) (q$v2@133@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@132@01)
        (and
          (<= q$a1@132@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@133@01)
            (and
              (<=
                q$v1@133@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@133@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a1@132@01))))))
      (and
        (<= 0 q$a2@132@01)
        (and
          (<= q$a2@132@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@133@01)
            (and
              (<=
                q$v2@133@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@133@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a2@132@01))))))
      (and (= q$a1@132@01 q$a2@132@01) (= q$v1@133@01 q$v2@133@01)))
    (and (= q$a1@132@01 q$a2@132@01) (= q$v1@133@01 q$v2@133@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@132@01 Int) (q$v@133@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@132@01)
      (and
        (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@133@01)
          (and
            (<=
              q$v@133@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@133@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) q$a@132@01))))))
    (and
      (and
        (= (inv@134@01 18 q$a@132@01 q$v@133@01) q$a@132@01)
        (= (inv@136@01 18 q$a@132@01 q$v@133@01) q$v@133@01))
      (and
        (img@135@01 18 q$a@132@01 q$v@133@01)
        (img@137@01 18 q$a@132@01 q$v@133@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@131@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@132@01))
    ($SortWrappers.IntTo$Snap q$v@133@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@132@01))
    ($SortWrappers.IntTo$Snap q$v@133@01))))
  :qid |quant-u-946|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@135@01 $tag $to $amount) (img@137@01 $tag $to $amount))
      (and
        (<= 0 (inv@134@01 $tag $to $amount))
        (and
          (<=
            (inv@134@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@136@01 $tag $to $amount))
            (and
              (<=
                (inv@136@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@136@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) (inv@134@01 $tag $to $amount))))))))
    (and
      (= 18 $tag)
      (= (inv@134@01 $tag $to $amount) $to)
      (= (inv@136@01 $tag $to $amount) $amount)))
  :pattern ((inv@134@01 $tag $to $amount))
  :pattern ((inv@136@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (and
      (and (img@135@01 $tag $to $amount) (img@137@01 $tag $to $amount))
      (and
        (<= 0 (inv@134@01 $tag $to $amount))
        (and
          (<=
            (inv@134@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@136@01 $tag $to $amount))
            (and
              (<=
                (inv@136@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@136@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) (inv@134@01 $tag $to $amount))))))))
    (and
      (and (img@103@01 $tag $to $amount) (img@105@01 $tag $to $amount))
      (and
        (<= 0 (inv@102@01 $tag $to $amount))
        (and
          (<=
            (inv@102@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@104@01 $tag $to $amount))
            (and
              (<=
                (inv@104@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@104@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 $tag $to $amount)))))))))
  
  :qid |quant-u-947|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@138@01 $PSF<$accessible$withdraw>)
(declare-const s@139@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@139@01 $Snap)) (!
  (=>
    (and
      (and
        (img@103@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01)))
        (img@105@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01))))
      (and
        (<=
          0
          (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01))))
        (and
          (<=
            (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01))))
            (and
              (<=
                (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01))))))))))
    (and
      (not (= s@139@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@138@01  $PSF<$accessible$withdraw>) s@139@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@139@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@138@01  $PSF<$accessible$withdraw>) s@139@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@139@01))
  :qid |qp.psmValDef3|)))
(assert (forall ((s@139@01 $Snap)) (!
  (=>
    (and
      (and
        (img@135@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01)))
        (img@137@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01))))
      (and
        (<=
          0
          (inv@134@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01))))
        (and
          (<=
            (inv@134@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@136@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01))))
            (and
              (<=
                (inv@136@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@136@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) (inv@134@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@139@01))) ($SortWrappers.$SnapToInt ($Snap.second s@139@01))))))))))
    (and
      (not (= s@139@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@138@01  $PSF<$accessible$withdraw>) s@139@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@131@01)) s@139@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@138@01  $PSF<$accessible$withdraw>) s@139@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@131@01)) s@139@01))
  :qid |qp.psmValDef4|)))
(assert (forall ((s@139@01 $Snap)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@139@01) s@139@01)
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@131@01)) s@139@01) s@139@01))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@138@01  $PSF<$accessible$withdraw>) s@139@01))
  :qid |qp.psmResTrgDef5|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@134@01 $tag $to $amount))
      (and
        (<=
          (inv@134@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@136@01 $tag $to $amount))
          (and
            (<=
              (inv@136@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@136@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) (inv@134@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@138@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@134@01 $tag $to $amount) (inv@136@01 $tag $to $amount))
  :qid |quant-u-948|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@141@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@141@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $a@141@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $a@141@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $a@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@698@11@698@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc($self$2, 4)): Int) == 0
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) == 0 ==> ($struct_get($struct_loc($self$2, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) == 0 | live]
; [else-branch: 57 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 57 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 57 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 0)): Int) ==
;   ($struct_get($struct_loc($self$1, 0)): Int)
(declare-const $t@143@01 $Snap)
(assert (= $t@143@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) == ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Bool)
(declare-const $t@144@01 $Snap)
(assert (= $t@144@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)) | live]
; [else-branch: 58 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 58 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 58 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$2, 4)): Int) <=
;   ($struct_get($struct_loc($self$2, 7)): Int)
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int) <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
; [else-branch: 59 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 59 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int) <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 59 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)))
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4)))
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$2, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
; [else-branch: 60 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 60 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 60 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)))
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc($self$2, 7)): Int)
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
; [else-branch: 61 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 61 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 61 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)))
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 4)): Int) >=
;   ($struct_get($struct_loc($self$1, 4)): Int)
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) >= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 4)): Int) ==
;   ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$2, 3)): Int) ==
;   ($struct_get($struct_loc($self$1, 3)): Int)
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($struct_get($struct_loc($self$2, 4)): Int) == ($struct_get($struct_loc($self$1, 4)): Int) && ($struct_get($struct_loc($self$2, 3)): Int) == ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)) | live]
; [else-branch: 62 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 62 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5)))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) == ($struct_get($struct_loc($self$1, 4)): Int) && ($struct_get($struct_loc($self$2, 3)): Int) == ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) == ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(push) ; 5
; [then-branch: 63 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 4)) != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 4)) | live]
; [else-branch: 63 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 4)) == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 4)) | live]
(push) ; 6
; [then-branch: 63 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 4)) != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)))))
(pop) ; 6
(push) ; 6
; [else-branch: 63 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 4)) == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) == ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))))))
(pop) ; 4
(push) ; 4
; [else-branch: 62 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
        ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
          ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))))))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))
      ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 0)): Int) != 0
(declare-const $t@150@01 $Snap)
(assert (= $t@150@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) != 0
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Int) !=
;   ($struct_get($struct_loc($self$2, 0)): Int)
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) != ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   0)): Int)): Int) ==
;   0
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   0)): Int)): Int) ==
;   0
(declare-const $t@153@01 $Snap)
(assert (= $t@153@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
; [else-branch: 64 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 64 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 64 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc($self$2, 4)): Int)
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
; [else-branch: 65 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 65 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 65 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc($self$2, 4)): Int) +
;   ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   3)): Int)): Int)
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int) + ($struct_get($struct_loc($self$2, 4)): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int) + ($struct_get($struct_loc($self$2, 4)): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int) + ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)))
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$2, 3)): Int) &&
;     q$a != ($struct_get($struct_loc($self$2, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@156@01 $Snap)
(assert (= $t@156@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$2, 3)): Int) && q$a != ($struct_get($struct_loc($self$2, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@157@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$2, 3)): Int) && q$a != ($struct_get($struct_loc($self$2, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 66 | !(0 <= q$a@157@01) | live]
; [else-branch: 66 | 0 <= q$a@157@01 | live]
(push) ; 5
; [then-branch: 66 | !(0 <= q$a@157@01)]
(assert (not (<= 0 q$a@157@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 66 | 0 <= q$a@157@01]
(assert (<= 0 q$a@157@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@157@01) (not (<= 0 q$a@157@01))))
(push) ; 4
; [then-branch: 67 | 0 <= q$a@157@01 && q$a@157@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 67 | !(0 <= q$a@157@01 && q$a@157@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 67 | 0 <= q$a@157@01 && q$a@157@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@157@01)
  (<= q$a@157@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$2, 3)): Int) && q$a != ($struct_get($struct_loc($self$2, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc($self$2, 3)): Int) && q$a != ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
; [then-branch: 68 | q$a@157@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 68 | q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) | live]
(push) ; 7
; [then-branch: 68 | q$a@157@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3))]
(assert (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 68 | q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3))]
(assert (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)))))
; [eval] q$a != ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
  (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)))))
(push) ; 6
; [then-branch: 69 | q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) && q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) | live]
; [else-branch: 69 | !(q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) && q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))) | live]
(push) ; 7
; [then-branch: 69 | q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) && q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))]
(assert (and
  (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
  (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 69 | !(q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) && q$a@157@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))]
(assert (not
  (and
    (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
    (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
      (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (and
    (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
    (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 67 | !(0 <= q$a@157@01 && q$a@157@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@157@01)
    (<= q$a@157@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@157@01)
    (<= q$a@157@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@157@01)
    (<= q$a@157@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
      (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
          (not
            (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
      (and
        (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
        (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@157@01)
      (<= q$a@157@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@157@01)
    (<= q$a@157@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@157@01 Int)) (!
  (and
    (or (<= 0 q$a@157@01) (not (<= 0 q$a@157@01)))
    (=>
      (and
        (<= 0 q$a@157@01)
        (<= q$a@157@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@157@01)
        (<= q$a@157@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
          (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@157@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
              (not
                (=
                  q$a@157@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
          (and
            (not
              (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
            (not
              (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@157@01)
          (<= q$a@157@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@157@01)
        (<= q$a@157@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@157@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@713@11@713@531-aux|)))
(assert (forall ((q$a@157@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@157@01)
        (<= q$a@157@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
        (not (= q$a@157@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) q$a@157@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@157@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@157@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@157@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@713@11@713@531|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@160@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 70 | !(0 <= q$a@160@01) | live]
; [else-branch: 70 | 0 <= q$a@160@01 | live]
(push) ; 5
; [then-branch: 70 | !(0 <= q$a@160@01)]
(assert (not (<= 0 q$a@160@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 70 | 0 <= q$a@160@01]
(assert (<= 0 q$a@160@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@160@01) (not (<= 0 q$a@160@01))))
(push) ; 4
; [then-branch: 71 | 0 <= q$a@160@01 && q$a@160@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 71 | !(0 <= q$a@160@01 && q$a@160@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 71 | 0 <= q$a@160@01 && q$a@160@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@160@01)
  (<= q$a@160@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
(push) ; 6
; [then-branch: 72 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), q$a@160@01) != 0 | live]
; [else-branch: 72 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), q$a@160@01) == 0 | live]
(push) ; 7
; [then-branch: 72 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), q$a@160@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 72 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), q$a@160@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 71 | !(0 <= q$a@160@01 && q$a@160@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@160@01)
    (<= q$a@160@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@160@01)
    (<= q$a@160@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@160@01)
    (<= q$a@160@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@160@01)
      (<= q$a@160@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@160@01)
    (<= q$a@160@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@160@01 Int)) (!
  (and
    (or (<= 0 q$a@160@01) (not (<= 0 q$a@160@01)))
    (=>
      (and
        (<= 0 q$a@160@01)
        (<= q$a@160@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@160@01)
        (<= q$a@160@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@160@01)
          (<= q$a@160@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@160@01)
        (<= q$a@160@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@715@11@715@352-aux|)))
(assert (forall ((q$a@160@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@160@01)
        (<= q$a@160@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@160@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@715@11@715@352|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$2, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$2, 0)): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@162@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$2, 0)): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 73 | !(0 <= q$a@162@01) | live]
; [else-branch: 73 | 0 <= q$a@162@01 | live]
(push) ; 5
; [then-branch: 73 | !(0 <= q$a@162@01)]
(assert (not (<= 0 q$a@162@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 73 | 0 <= q$a@162@01]
(assert (<= 0 q$a@162@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@162@01) (not (<= 0 q$a@162@01))))
(push) ; 4
; [then-branch: 74 | 0 <= q$a@162@01 && q$a@162@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 74 | !(0 <= q$a@162@01 && q$a@162@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 74 | 0 <= q$a@162@01 && q$a@162@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@162@01)
  (<= q$a@162@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$2, 0)): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$2, 0)): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 6
; [then-branch: 75 | q$a@162@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) | live]
; [else-branch: 75 | q$a@162@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) | live]
(push) ; 7
; [then-branch: 75 | q$a@162@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))]
(assert (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 75 | q$a@162@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))]
(assert (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
  (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
(push) ; 6
; [then-branch: 76 | q$a@162@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), q$a@162@01) == 0 | live]
; [else-branch: 76 | !(q$a@162@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), q$a@162@01) == 0) | live]
(push) ; 7
; [then-branch: 76 | q$a@162@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), q$a@162@01) == 0]
(assert (and
  (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 76 | !(q$a@162@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), q$a@162@01) == 0)]
(assert (not
  (and
    (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
        0)))
  (and
    (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 74 | !(0 <= q$a@162@01 && q$a@162@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@162@01)
    (<= q$a@162@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@162@01)
    (<= q$a@162@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@162@01)
    (<= q$a@162@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
      (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
            0)))
      (and
        (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@162@01)
      (<= q$a@162@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@162@01)
    (<= q$a@162@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@162@01 Int)) (!
  (and
    (or (<= 0 q$a@162@01) (not (<= 0 q$a@162@01)))
    (=>
      (and
        (<= 0 q$a@162@01)
        (<= q$a@162@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@162@01)
        (<= q$a@162@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
          (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@162@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
                0)))
          (and
            (not
              (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@162@01)
          (<= q$a@162@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@162@01)
        (<= q$a@162@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@716@11@716@408-aux|)))
(assert (forall ((q$a@162@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@162@01)
        (<= q$a@162@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@162@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) q$a@162@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@162@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@716@11@716@408|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(18, q$a, q$v), write))
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 ($Snap.combine ($Snap.first $t@163@01) ($Snap.second $t@163@01))))
(assert (= ($Snap.first $t@163@01) $Snap.unit))
(declare-const q$a@164@01 Int)
(declare-const q$v@165@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 77 | !(0 <= q$a@164@01) | live]
; [else-branch: 77 | 0 <= q$a@164@01 | live]
(push) ; 5
; [then-branch: 77 | !(0 <= q$a@164@01)]
(assert (not (<= 0 q$a@164@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 77 | 0 <= q$a@164@01]
(assert (<= 0 q$a@164@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 78 | !(q$a@164@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 78 | q$a@164@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 78 | !(q$a@164@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@164@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 78 | q$a@164@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@164@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 79 | !(0 <= q$v@165@01) | live]
; [else-branch: 79 | 0 <= q$v@165@01 | live]
(push) ; 9
; [then-branch: 79 | !(0 <= q$v@165@01)]
(assert (not (<= 0 q$v@165@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 79 | 0 <= q$v@165@01]
(assert (<= 0 q$v@165@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 80 | !(q$v@165@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 80 | q$v@165@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 80 | !(q$v@165@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@165@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 80 | q$v@165@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@165@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@165@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@165@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@165@01)
  (and
    (<= 0 q$v@165@01)
    (or
      (<=
        q$v@165@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@165@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@165@01) (not (<= 0 q$v@165@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@165@01)
      (and
        (<= 0 q$v@165@01)
        (or
          (<=
            q$v@165@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@165@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@165@01) (not (<= 0 q$v@165@01))))))
(assert (or
  (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@164@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@164@01)
  (and
    (<= 0 q$a@164@01)
    (=>
      (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@165@01)
          (and
            (<= 0 q$v@165@01)
            (or
              (<=
                q$v@165@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@165@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@165@01) (not (<= 0 q$v@165@01)))))
    (or
      (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@164@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@164@01) (not (<= 0 q$a@164@01))))
(assert (and
  (<= 0 q$a@164@01)
  (and
    (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@165@01)
      (and
        (<=
          q$v@165@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@165@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@164@01)))))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@166@01 (Int Int Int) Int)
(declare-fun img@167@01 (Int Int Int) Bool)
(declare-fun inv@168@01 (Int Int Int) Int)
(declare-fun img@169@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@164@01 Int) (q$v@165@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@164@01)
      (and
        (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@165@01)
          (and
            (<=
              q$v@165@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@165@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@164@01))))))
    (and
      (=>
        (<= 0 q$a@164@01)
        (and
          (<= 0 q$a@164@01)
          (=>
            (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@165@01)
                (and
                  (<= 0 q$v@165@01)
                  (or
                    (<=
                      q$v@165@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@165@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@165@01) (not (<= 0 q$v@165@01)))))
          (or
            (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@164@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@164@01) (not (<= 0 q$a@164@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@163@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@164@01))
    ($SortWrappers.IntTo$Snap q$v@165@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@164@01))
    ($SortWrappers.IntTo$Snap q$v@165@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@164@01 Int) (q$v1@165@01 Int) (q$a2@164@01 Int) (q$v2@165@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@164@01)
        (and
          (<= q$a1@164@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@165@01)
            (and
              (<=
                q$v1@165@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@165@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a1@164@01))))))
      (and
        (<= 0 q$a2@164@01)
        (and
          (<= q$a2@164@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@165@01)
            (and
              (<=
                q$v2@165@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@165@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a2@164@01))))))
      (and (= q$a1@164@01 q$a2@164@01) (= q$v1@165@01 q$v2@165@01)))
    (and (= q$a1@164@01 q$a2@164@01) (= q$v1@165@01 q$v2@165@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@164@01 Int) (q$v@165@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@164@01)
      (and
        (<= q$a@164@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@165@01)
          (and
            (<=
              q$v@165@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@165@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@164@01))))))
    (and
      (and
        (= (inv@166@01 18 q$a@164@01 q$v@165@01) q$a@164@01)
        (= (inv@168@01 18 q$a@164@01 q$v@165@01) q$v@165@01))
      (and
        (img@167@01 18 q$a@164@01 q$v@165@01)
        (img@169@01 18 q$a@164@01 q$v@165@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@163@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@164@01))
    ($SortWrappers.IntTo$Snap q$v@165@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@164@01))
    ($SortWrappers.IntTo$Snap q$v@165@01))))
  :qid |quant-u-950|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@167@01 $tag $to $amount) (img@169@01 $tag $to $amount))
      (and
        (<= 0 (inv@166@01 $tag $to $amount))
        (and
          (<=
            (inv@166@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@168@01 $tag $to $amount))
            (and
              (<=
                (inv@168@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@168@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@166@01 $tag $to $amount))))))))
    (and
      (= 18 $tag)
      (= (inv@166@01 $tag $to $amount) $to)
      (= (inv@168@01 $tag $to $amount) $amount)))
  :pattern ((inv@166@01 $tag $to $amount))
  :pattern ((inv@168@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (and
      (and (img@167@01 $tag $to $amount) (img@169@01 $tag $to $amount))
      (and
        (<= 0 (inv@166@01 $tag $to $amount))
        (and
          (<=
            (inv@166@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@168@01 $tag $to $amount))
            (and
              (<=
                (inv@168@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@168@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@166@01 $tag $to $amount))))))))
    (and
      (and (img@135@01 $tag $to $amount) (img@137@01 $tag $to $amount))
      (and
        (<= 0 (inv@134@01 $tag $to $amount))
        (and
          (<=
            (inv@134@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@136@01 $tag $to $amount))
            (and
              (<=
                (inv@136@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@136@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) (inv@134@01 $tag $to $amount)))))))))
  
  :qid |quant-u-951|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (and
      (and (img@167@01 $tag $to $amount) (img@169@01 $tag $to $amount))
      (and
        (<= 0 (inv@166@01 $tag $to $amount))
        (and
          (<=
            (inv@166@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@168@01 $tag $to $amount))
            (and
              (<=
                (inv@168@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@168@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@166@01 $tag $to $amount))))))))
    (and
      (and (img@103@01 $tag $to $amount) (img@105@01 $tag $to $amount))
      (and
        (<= 0 (inv@102@01 $tag $to $amount))
        (and
          (<=
            (inv@102@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@104@01 $tag $to $amount))
            (and
              (<=
                (inv@104@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@104@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 $tag $to $amount)))))))))
  
  :qid |quant-u-952|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@170@01 $PSF<$accessible$withdraw>)
(declare-const s@171@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@171@01 $Snap)) (!
  (=>
    (and
      (and
        (img@103@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
        (img@105@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
      (and
        (<=
          0
          (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
        (and
          (<=
            (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
            (and
              (<=
                (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@104@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))))))))
    (and
      (not (= s@171@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) s@171@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@171@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) s@171@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@171@01))
  :qid |qp.psmValDef6|)))
(assert (forall ((s@171@01 $Snap)) (!
  (=>
    (and
      (and
        (img@135@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
        (img@137@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
      (and
        (<=
          0
          (inv@134@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
        (and
          (<=
            (inv@134@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@136@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
            (and
              (<=
                (inv@136@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@136@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) (inv@134@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))))))))
    (and
      (not (= s@171@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) s@171@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@131@01)) s@171@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) s@171@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@131@01)) s@171@01))
  :qid |qp.psmValDef7|)))
(assert (forall ((s@171@01 $Snap)) (!
  (=>
    (and
      (and
        (img@167@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
        (img@169@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
      (and
        (<=
          0
          (inv@166@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
        (and
          (<=
            (inv@166@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@168@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))
            (and
              (<=
                (inv@168@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@168@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@166@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@171@01))) ($SortWrappers.$SnapToInt ($Snap.second s@171@01))))))))))
    (and
      (not (= s@171@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) s@171@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@163@01)) s@171@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) s@171@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@163@01)) s@171@01))
  :qid |qp.psmValDef8|)))
(assert (forall ((s@171@01 $Snap)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@171@01) s@171@01)
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@131@01)) s@171@01) s@171@01)
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@163@01)) s@171@01) s@171@01))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) s@171@01))
  :qid |qp.psmResTrgDef9|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@166@01 $tag $to $amount))
      (and
        (<=
          (inv@166@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@168@01 $tag $to $amount))
          (and
            (<=
              (inv@168@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@168@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@166@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@166@01 $tag $to $amount) (inv@168@01 $tag $to $amount))
  :qid |quant-u-953|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc($self$2, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) == 0 ==> ($struct_get($struct_loc($self$2, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) == 0 | live]
; [else-branch: 81 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 81 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 81 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 0)): Int) ==
;   ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) == ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(push) ; 3
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
; [exec]
; assert ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
; [else-branch: 82 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 82 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 82 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$2, 4)): Int) <=
;   ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int) <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
; [else-branch: 83 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 83 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int) <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 83 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$2, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
; [else-branch: 84 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 84 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 84 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
; [else-branch: 85 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 85 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 85 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 4)): Int) >=
;   ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) >= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(push) ; 3
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))
; [exec]
; assert ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 4)): Int) ==
;   ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$2, 3)): Int) ==
;   ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($struct_get($struct_loc($self$2, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int) && ($struct_get($struct_loc($self$2, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)) | live]
; [else-branch: 86 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 86 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5)))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int) && ($struct_get($struct_loc($self$2, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(push) ; 5
; [then-branch: 87 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 4)) != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 4)) | live]
; [else-branch: 87 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 4)) == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 4)) | live]
(push) ; 6
; [then-branch: 87 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 4)) != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))))
(pop) ; 6
(push) ; 6
; [else-branch: 87 | $struct_get[Int]($struct_loc[Int]($self$2@4@01, 4)) == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))))
(pop) ; 4
(push) ; 4
; [else-branch: 86 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
        ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
          ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))))))
; Joined path conditions
(push) ; 3
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))
      ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 0)): Int) != 0
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) != 0
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Int) !=
;   ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) != ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [exec]
; assert ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [exec]
; assert !($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
; [else-branch: 88 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 88 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 88 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Bool)
; [eval] $struct_loc($self$2, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)) | live]
; [else-branch: 89 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 89 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int) == ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 89 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc($self$2, 4)): Int) +
;   ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int) + ($struct_get($struct_loc($self$2, 4)): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int) + ($struct_get($struct_loc($self$2, 4)): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int) + ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$2, 3)): Int) &&
;     q$a != ($struct_get($struct_loc($self$2, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$2, 3)): Int) && q$a != ($struct_get($struct_loc($self$2, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@172@01 Int)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$2, 3)): Int) && q$a != ($struct_get($struct_loc($self$2, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 90 | !(0 <= q$a@172@01) | live]
; [else-branch: 90 | 0 <= q$a@172@01 | live]
(push) ; 5
; [then-branch: 90 | !(0 <= q$a@172@01)]
(assert (not (<= 0 q$a@172@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 90 | 0 <= q$a@172@01]
(assert (<= 0 q$a@172@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@172@01) (not (<= 0 q$a@172@01))))
(push) ; 4
; [then-branch: 91 | 0 <= q$a@172@01 && q$a@172@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 91 | !(0 <= q$a@172@01 && q$a@172@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 91 | 0 <= q$a@172@01 && q$a@172@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@172@01)
  (<= q$a@172@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$2, 3)): Int) && q$a != ($struct_get($struct_loc($self$2, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc($self$2, 3)): Int) && q$a != ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
; [then-branch: 92 | q$a@172@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 92 | q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) | live]
(push) ; 7
; [then-branch: 92 | q$a@172@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3))]
(assert (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 92 | q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3))]
(assert (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)))))
; [eval] q$a != ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
  (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3)))))
(push) ; 6
; [then-branch: 93 | q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) && q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) | live]
; [else-branch: 93 | !(q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) && q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))) | live]
(push) ; 7
; [then-branch: 93 | q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) && q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))]
(assert (and
  (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
  (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 93 | !(q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 3)) && q$a@172@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))]
(assert (not
  (and
    (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
    (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
      (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (and
    (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
    (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 91 | !(0 <= q$a@172@01 && q$a@172@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@172@01)
    (<= q$a@172@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@172@01)
    (<= q$a@172@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@172@01)
    (<= q$a@172@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
      (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
          (not
            (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
      (and
        (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
        (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@172@01)
      (<= q$a@172@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@172@01)
    (<= q$a@172@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@172@01 Int)) (!
  (and
    (or (<= 0 q$a@172@01) (not (<= 0 q$a@172@01)))
    (=>
      (and
        (<= 0 q$a@172@01)
        (<= q$a@172@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@172@01)
        (<= q$a@172@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
          (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@172@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
              (not
                (=
                  q$a@172@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
          (and
            (not
              (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
            (not
              (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@172@01)
          (<= q$a@172@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@172@01)
        (<= q$a@172@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@172@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@732@11@732@531-aux|)))
(push) ; 3
(assert (not (forall ((q$a@172@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@172@01)
        (<= q$a@172@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
        (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) q$a@172@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@172@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@172@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@172@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@732@11@732@531|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@172@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@172@01)
        (<= q$a@172@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
        (not (= q$a@172@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) q$a@172@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@172@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@172@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@172@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@732@11@732@531|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@173@01 Int)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 94 | !(0 <= q$a@173@01) | live]
; [else-branch: 94 | 0 <= q$a@173@01 | live]
(push) ; 5
; [then-branch: 94 | !(0 <= q$a@173@01)]
(assert (not (<= 0 q$a@173@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 94 | 0 <= q$a@173@01]
(assert (<= 0 q$a@173@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@173@01) (not (<= 0 q$a@173@01))))
(push) ; 4
; [then-branch: 95 | 0 <= q$a@173@01 && q$a@173@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 95 | !(0 <= q$a@173@01 && q$a@173@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 95 | 0 <= q$a@173@01 && q$a@173@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@173@01)
  (<= q$a@173@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
(push) ; 6
; [then-branch: 96 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), q$a@173@01) != 0 | live]
; [else-branch: 96 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), q$a@173@01) == 0 | live]
(push) ; 7
; [then-branch: 96 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), q$a@173@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 96 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 6)), q$a@173@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 95 | !(0 <= q$a@173@01 && q$a@173@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@173@01)
    (<= q$a@173@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@173@01)
    (<= q$a@173@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@173@01)
    (<= q$a@173@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@173@01)
      (<= q$a@173@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@173@01)
    (<= q$a@173@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@173@01 Int)) (!
  (and
    (or (<= 0 q$a@173@01) (not (<= 0 q$a@173@01)))
    (=>
      (and
        (<= 0 q$a@173@01)
        (<= q$a@173@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@173@01)
        (<= q$a@173@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@173@01)
          (<= q$a@173@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@173@01)
        (<= q$a@173@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@734@11@734@352-aux|)))
(push) ; 3
(assert (not (forall ((q$a@173@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@173@01)
        (<= q$a@173@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@173@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@734@11@734@352|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@173@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@173@01)
        (<= q$a@173@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@173@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@173@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@734@11@734@352|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$2, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$2, 0)): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@174@01 Int)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$2, 0)): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 97 | !(0 <= q$a@174@01) | live]
; [else-branch: 97 | 0 <= q$a@174@01 | live]
(push) ; 5
; [then-branch: 97 | !(0 <= q$a@174@01)]
(assert (not (<= 0 q$a@174@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 97 | 0 <= q$a@174@01]
(assert (<= 0 q$a@174@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@174@01) (not (<= 0 q$a@174@01))))
(push) ; 4
; [then-branch: 98 | 0 <= q$a@174@01 && q$a@174@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 98 | !(0 <= q$a@174@01 && q$a@174@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 98 | 0 <= q$a@174@01 && q$a@174@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@174@01)
  (<= q$a@174@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$2, 0)): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$2, 0)): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 6
; [then-branch: 99 | q$a@174@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) | live]
; [else-branch: 99 | q$a@174@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) | live]
(push) ; 7
; [then-branch: 99 | q$a@174@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))]
(assert (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 99 | q$a@174@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))]
(assert (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
  (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
(push) ; 6
; [then-branch: 100 | q$a@174@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), q$a@174@01) == 0 | live]
; [else-branch: 100 | !(q$a@174@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), q$a@174@01) == 0) | live]
(push) ; 7
; [then-branch: 100 | q$a@174@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), q$a@174@01) == 0]
(assert (and
  (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 100 | !(q$a@174@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), q$a@174@01) == 0)]
(assert (not
  (and
    (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
        0)))
  (and
    (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 98 | !(0 <= q$a@174@01 && q$a@174@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@174@01)
    (<= q$a@174@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@174@01)
    (<= q$a@174@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@174@01)
    (<= q$a@174@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
      (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
            0)))
      (and
        (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@174@01)
      (<= q$a@174@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@174@01)
    (<= q$a@174@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@174@01 Int)) (!
  (and
    (or (<= 0 q$a@174@01) (not (<= 0 q$a@174@01)))
    (=>
      (and
        (<= 0 q$a@174@01)
        (<= q$a@174@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@174@01)
        (<= q$a@174@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
          (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@174@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
                0)))
          (and
            (not
              (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@174@01)
          (<= q$a@174@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@174@01)
        (<= q$a@174@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@735@11@735@408-aux|)))
(push) ; 3
(assert (not (forall ((q$a@174@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@174@01)
        (<= q$a@174@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) q$a@174@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@735@11@735@408|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@174@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@174@01)
        (<= q$a@174@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@174@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) q$a@174@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) q$a@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@735@11@735@408|)))
; [exec]
; assert true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(18, q$a, q$v), write))
(declare-const q$a@175@01 Int)
(declare-const q$v@176@01 Int)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 101 | !(0 <= q$a@175@01) | live]
; [else-branch: 101 | 0 <= q$a@175@01 | live]
(push) ; 5
; [then-branch: 101 | !(0 <= q$a@175@01)]
(assert (not (<= 0 q$a@175@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 101 | 0 <= q$a@175@01]
(assert (<= 0 q$a@175@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 102 | !(q$a@175@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 102 | q$a@175@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 102 | !(q$a@175@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@175@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 102 | q$a@175@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@175@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 103 | !(0 <= q$v@176@01) | live]
; [else-branch: 103 | 0 <= q$v@176@01 | live]
(push) ; 9
; [then-branch: 103 | !(0 <= q$v@176@01)]
(assert (not (<= 0 q$v@176@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 103 | 0 <= q$v@176@01]
(assert (<= 0 q$v@176@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 104 | !(q$v@176@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 104 | q$v@176@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 104 | !(q$v@176@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@176@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 104 | q$v@176@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@176@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 6)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@176@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@176@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@176@01)
  (and
    (<= 0 q$v@176@01)
    (or
      (<=
        q$v@176@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@176@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@176@01) (not (<= 0 q$v@176@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@176@01)
      (and
        (<= 0 q$v@176@01)
        (or
          (<=
            q$v@176@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@176@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@176@01) (not (<= 0 q$v@176@01))))))
(assert (or
  (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@175@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@175@01)
  (and
    (<= 0 q$a@175@01)
    (=>
      (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@176@01)
          (and
            (<= 0 q$v@176@01)
            (or
              (<=
                q$v@176@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@176@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@176@01) (not (<= 0 q$v@176@01)))))
    (or
      (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@175@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@175@01) (not (<= 0 q$a@175@01))))
(assert (and
  (<= 0 q$a@175@01)
  (and
    (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@176@01)
      (and
        (<=
          q$v@176@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@176@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@175@01)))))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@177@01 (Int Int Int) Int)
(declare-fun img@178@01 (Int Int Int) Bool)
(declare-fun inv@179@01 (Int Int Int) Int)
(declare-fun img@180@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@175@01 Int) (q$v@176@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@175@01)
      (and
        (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@176@01)
          (and
            (<=
              q$v@176@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@176@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@175@01))))))
    (and
      (=>
        (<= 0 q$a@175@01)
        (and
          (<= 0 q$a@175@01)
          (=>
            (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@176@01)
                (and
                  (<= 0 q$v@176@01)
                  (or
                    (<=
                      q$v@176@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@176@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@176@01) (not (<= 0 q$v@176@01)))))
          (or
            (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@175@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@175@01) (not (<= 0 q$a@175@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@175@01))
    ($SortWrappers.IntTo$Snap q$v@176@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@175@01))
    ($SortWrappers.IntTo$Snap q$v@176@01))))
  :qid |$accessible$withdraw-aux|)))
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@175@01 Int) (q$v1@176@01 Int) (q$a2@175@01 Int) (q$v2@176@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 q$a1@175@01)
          (and
            (<= q$a1@175@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v1@176@01)
              (and
                (<=
                  q$v1@176@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  q$v1@176@01
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a1@175@01))))))
        ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap q$a1@175@01))
          ($SortWrappers.IntTo$Snap q$v1@176@01))) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap q$a1@175@01))
          ($SortWrappers.IntTo$Snap q$v1@176@01))))
      (and
        (and
          (<= 0 q$a2@175@01)
          (and
            (<= q$a2@175@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v2@176@01)
              (and
                (<=
                  q$v2@176@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  q$v2@176@01
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a2@175@01))))))
        ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap q$a2@175@01))
          ($SortWrappers.IntTo$Snap q$v2@176@01))) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap q$a2@175@01))
          ($SortWrappers.IntTo$Snap q$v2@176@01))))
      (and (= q$a1@175@01 q$a2@175@01) (= q$v1@176@01 q$v2@176@01)))
    (and (= q$a1@175@01 q$a2@175@01) (= q$v1@176@01 q$v2@176@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@175@01 Int) (q$v@176@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@175@01)
      (and
        (<= q$a@175@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@176@01)
          (and
            (<=
              q$v@176@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@176@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) q$a@175@01))))))
    (and
      (and
        (= (inv@177@01 18 q$a@175@01 q$v@176@01) q$a@175@01)
        (= (inv@179@01 18 q$a@175@01 q$v@176@01) q$v@176@01))
      (and
        (img@178@01 18 q$a@175@01 q$v@176@01)
        (img@180@01 18 q$a@175@01 q$v@176@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@175@01))
    ($SortWrappers.IntTo$Snap q$v@176@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@175@01))
    ($SortWrappers.IntTo$Snap q$v@176@01))))
  :qid |$accessible$withdraw-invOfFct|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@178@01 $tag $to $amount) (img@180@01 $tag $to $amount))
      (and
        (<= 0 (inv@177@01 $tag $to $amount))
        (and
          (<=
            (inv@177@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@179@01 $tag $to $amount))
            (and
              (<=
                (inv@179@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@179@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@177@01 $tag $to $amount))))))))
    (and
      (= 18 $tag)
      (= (inv@177@01 $tag $to $amount) $to)
      (= (inv@179@01 $tag $to $amount) $amount)))
  :pattern ((inv@177@01 $tag $to $amount))
  :pattern ((inv@179@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@177@01 $tag $to $amount))
      (and
        (<=
          (inv@177@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@179@01 $tag $to $amount))
          (and
            (<=
              (inv@179@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@179@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@177@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@170@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@177@01 $tag $to $amount) (inv@179@01 $tag $to $amount))
  :qid |quant-u-955|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@181@01 (($tag Int) ($to Int) ($amount Int)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@177@01 $tag $to $amount))
        (and
          (<=
            (inv@177@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@179@01 $tag $to $amount))
            (and
              (<=
                (inv@179@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@179@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@177@01 $tag $to $amount)))))))
      (and (img@178@01 $tag $to $amount) (img@180@01 $tag $to $amount))
      (and
        (= $tag 18)
        (= $to (inv@177@01 $tag $to $amount))
        (= $amount (inv@179@01 $tag $to $amount))))
    ($Perm.min
      (ite
        (and
          (and (img@103@01 $tag $to $amount) (img@105@01 $tag $to $amount))
          (and
            (<= 0 (inv@102@01 $tag $to $amount))
            (and
              (<=
                (inv@102@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@104@01 $tag $to $amount))
                (and
                  (<=
                    (inv@104@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@104@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@182@01 (($tag Int) ($to Int) ($amount Int)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@177@01 $tag $to $amount))
        (and
          (<=
            (inv@177@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@179@01 $tag $to $amount))
            (and
              (<=
                (inv@179@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@179@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@177@01 $tag $to $amount)))))))
      (and (img@178@01 $tag $to $amount) (img@180@01 $tag $to $amount))
      (and
        (= $tag 18)
        (= $to (inv@177@01 $tag $to $amount))
        (= $amount (inv@179@01 $tag $to $amount))))
    ($Perm.min
      (ite
        (and
          (and (img@135@01 $tag $to $amount) (img@137@01 $tag $to $amount))
          (and
            (<= 0 (inv@134@01 $tag $to $amount))
            (and
              (<=
                (inv@134@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@136@01 $tag $to $amount))
                (and
                  (<=
                    (inv@136@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@136@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) (inv@134@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@181@01 $tag $to $amount)))
    $Perm.No))
(define-fun pTaken@183@01 (($tag Int) ($to Int) ($amount Int)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@177@01 $tag $to $amount))
        (and
          (<=
            (inv@177@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@179@01 $tag $to $amount))
            (and
              (<=
                (inv@179@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@179@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@177@01 $tag $to $amount)))))))
      (and (img@178@01 $tag $to $amount) (img@180@01 $tag $to $amount))
      (and
        (= $tag 18)
        (= $to (inv@177@01 $tag $to $amount))
        (= $amount (inv@179@01 $tag $to $amount))))
    ($Perm.min
      (ite
        (and
          (and (img@167@01 $tag $to $amount) (img@169@01 $tag $to $amount))
          (and
            (<= 0 (inv@166@01 $tag $to $amount))
            (and
              (<=
                (inv@166@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@168@01 $tag $to $amount))
                (and
                  (<=
                    (inv@168@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@168@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@166@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (-
        (- $Perm.Write (pTaken@181@01 $tag $to $amount))
        (pTaken@182@01 $tag $to $amount)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (-
      (ite
        (and
          (and (img@103@01 $tag $to $amount) (img@105@01 $tag $to $amount))
          (and
            (<= 0 (inv@102@01 $tag $to $amount))
            (and
              (<=
                (inv@102@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@104@01 $tag $to $amount))
                (and
                  (<=
                    (inv@104@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@104@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 6)) (inv@102@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@181@01 $tag $to $amount))
    $Perm.No)
  
  :qid |quant-u-957|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (= (pTaken@181@01 $tag $to $amount) $Perm.No)
  
  :qid |quant-u-958|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and
        (<= 0 (inv@177@01 $tag $to $amount))
        (and
          (<=
            (inv@177@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@179@01 $tag $to $amount))
            (and
              (<=
                (inv@179@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@179@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@177@01 $tag $to $amount)))))))
      (and (img@178@01 $tag $to $amount) (img@180@01 $tag $to $amount))
      (and
        (= $tag 18)
        (= $to (inv@177@01 $tag $to $amount))
        (= $amount (inv@179@01 $tag $to $amount))))
    (= (- $Perm.Write (pTaken@181@01 $tag $to $amount)) $Perm.No))
  
  :qid |quant-u-959|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (-
      (ite
        (and
          (and (img@135@01 $tag $to $amount) (img@137@01 $tag $to $amount))
          (and
            (<= 0 (inv@134@01 $tag $to $amount))
            (and
              (<=
                (inv@134@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@136@01 $tag $to $amount))
                (and
                  (<=
                    (inv@136@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@136@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 6)) (inv@134@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@182@01 $tag $to $amount))
    $Perm.No)
  
  :qid |quant-u-960|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (= (pTaken@182@01 $tag $to $amount) $Perm.No)
  
  :qid |quant-u-961|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and
        (<= 0 (inv@177@01 $tag $to $amount))
        (and
          (<=
            (inv@177@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@179@01 $tag $to $amount))
            (and
              (<=
                (inv@179@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@179@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@177@01 $tag $to $amount)))))))
      (and (img@178@01 $tag $to $amount) (img@180@01 $tag $to $amount))
      (and
        (= $tag 18)
        (= $to (inv@177@01 $tag $to $amount))
        (= $amount (inv@179@01 $tag $to $amount))))
    (=
      (-
        (- $Perm.Write (pTaken@181@01 $tag $to $amount))
        (pTaken@182@01 $tag $to $amount))
      $Perm.No))
  
  :qid |quant-u-962|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (-
      (ite
        (and
          (and (img@167@01 $tag $to $amount) (img@169@01 $tag $to $amount))
          (and
            (<= 0 (inv@166@01 $tag $to $amount))
            (and
              (<=
                (inv@166@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@168@01 $tag $to $amount))
                (and
                  (<=
                    (inv@168@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@168@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@166@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@183@01 $tag $to $amount))
    $Perm.No)
  
  :qid |quant-u-963|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (= (pTaken@183@01 $tag $to $amount) $Perm.No)
  
  :qid |quant-u-964|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and
        (<= 0 (inv@177@01 $tag $to $amount))
        (and
          (<=
            (inv@177@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@179@01 $tag $to $amount))
            (and
              (<=
                (inv@179@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@179@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 6)) (inv@177@01 $tag $to $amount)))))))
      (and (img@178@01 $tag $to $amount) (img@180@01 $tag $to $amount))
      (and
        (= $tag 18)
        (= $to (inv@177@01 $tag $to $amount))
        (= $amount (inv@179@01 $tag $to $amount))))
    (=
      (-
        (-
          (- $Perm.Write (pTaken@181@01 $tag $to $amount))
          (pTaken@182@01 $tag $to $amount))
        (pTaken@183@01 $tag $to $amount))
      $Perm.No))
  
  :qid |quant-u-965|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@184@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@185@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@186@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@187@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@188@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@189@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@190@01 $Snap)
(assert (= $t@190@01 ($Snap.combine ($Snap.first $t@190@01) ($Snap.second $t@190@01))))
(assert (= ($Snap.first $t@190@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 0))))
(assert (= ($Snap.second $t@190@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@191@01 $Snap)
(assert (= $t@191@01 ($Snap.combine ($Snap.first $t@191@01) ($Snap.second $t@191@01))))
(assert (= ($Snap.first $t@191@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 1))))
(assert (= ($Snap.second $t@191@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@192@01 $Snap)
(assert (= $t@192@01 ($Snap.combine ($Snap.first $t@192@01) ($Snap.second $t@192@01))))
(assert (= ($Snap.first $t@192@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 2))))
(assert (= ($Snap.second $t@192@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 3)): Int) &&
;   ($struct_get($struct_loc($self$0, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@193@01 $Snap)
(assert (= $t@193@01 ($Snap.combine ($Snap.first $t@193@01) ($Snap.second $t@193@01))))
(assert (= ($Snap.first $t@193@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 3))))
(assert (= ($Snap.second $t@193@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@194@01 $Snap)
(assert (= $t@194@01 ($Snap.combine ($Snap.first $t@194@01) ($Snap.second $t@194@01))))
(assert (= ($Snap.first $t@194@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4))))
(assert (= ($Snap.second $t@194@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@195@01 $Snap)
(assert (= $t@195@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@196@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
(push) ; 4
; [then-branch: 105 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 6)), $q0@196@01)) | live]
; [else-branch: 105 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 6)), $q0@196@01) | live]
(push) ; 5
; [then-branch: 105 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 6)), $q0@196@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 105 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 6)), $q0@196@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@196@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@752@11@752@354-aux|)))
(assert (forall (($q0@196@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@752@11@752@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int))
(declare-const $t@197@01 $Snap)
(assert (= $t@197@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int))
(declare-const $q0@198@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@198@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@198@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 6)) $q0@198@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@753@11@753@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 7)): Int) &&
;   ($struct_get($struct_loc($self$0, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@199@01 $Snap)
(assert (= $t@199@01 ($Snap.combine ($Snap.first $t@199@01) ($Snap.second $t@199@01))))
(assert (= ($Snap.first $t@199@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 7))))
(assert (= ($Snap.second $t@199@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 8)): Int) &&
;   ($struct_get($struct_loc($self$0, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@200@01 $Snap)
(assert (= $t@200@01 ($Snap.combine ($Snap.first $t@200@01) ($Snap.second $t@200@01))))
(assert (= ($Snap.first $t@200@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] $struct_loc($self$0, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 8))))
(assert (= ($Snap.second $t@200@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] $struct_loc($self$0, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@201@01 $Snap)
(assert (= $t@201@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@202@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(push) ; 4
; [then-branch: 106 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 10)), $q1@202@01)) | live]
; [else-branch: 106 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 10)), $q1@202@01) | live]
(push) ; 5
; [then-branch: 106 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 10)), $q1@202@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 106 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 10)), $q1@202@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@202@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@756@11@756@357-aux|)))
(assert (forall (($q1@202@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@756@11@756@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int))
(declare-const $t@203@01 $Snap)
(assert (= $t@203@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int))
(declare-const $q1@204@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@204@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@204@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $q1@204@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@757@11@757@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@206@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(push) ; 4
; [then-branch: 107 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 11)), $q2@206@01)) | live]
; [else-branch: 107 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 11)), $q2@206@01) | live]
(push) ; 5
; [then-branch: 107 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 11)), $q2@206@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 107 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@184@01, 11)), $q2@206@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@206@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@758@11@758@357-aux|)))
(assert (forall (($q2@206@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@206@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@758@11@758@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int))
(declare-const $t@207@01 $Snap)
(assert (= $t@207@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int))
(declare-const $q2@208@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@208@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@208@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 11)) $q2@208@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@759@11@759@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@209@01 $Snap)
(assert (= $t@209@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@210@01 $Snap)
(assert (= $t@210@01 ($Snap.combine ($Snap.first $t@210@01) ($Snap.second $t@210@01))))
(assert (= ($Snap.first $t@210@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
(assert (= ($Snap.second $t@210@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 ($Snap.combine ($Snap.first $t@211@01) ($Snap.second $t@211@01))))
(assert (= ($Snap.first $t@211@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 1))))
(assert (= ($Snap.second $t@211@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 ($Snap.combine ($Snap.first $t@212@01) ($Snap.second $t@212@01))))
(assert (= ($Snap.first $t@212@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 2))))
(assert (= ($Snap.second $t@212@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 3)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@213@01 $Snap)
(assert (= $t@213@01 ($Snap.combine ($Snap.first $t@213@01) ($Snap.second $t@213@01))))
(assert (= ($Snap.first $t@213@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
(assert (= ($Snap.second $t@213@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 ($Snap.combine ($Snap.first $t@214@01) ($Snap.second $t@214@01))))
(assert (= ($Snap.first $t@214@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))))
(assert (= ($Snap.second $t@214@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@215@01 $Snap)
(assert (= $t@215@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@216@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(push) ; 4
; [then-branch: 108 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), $q0@216@01)) | live]
; [else-branch: 108 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), $q0@216@01) | live]
(push) ; 5
; [then-branch: 108 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), $q0@216@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 108 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), $q0@216@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@216@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@766@11@766@354-aux|)))
(assert (forall (($q0@216@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@216@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@766@11@766@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int))
(declare-const $t@217@01 $Snap)
(assert (= $t@217@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int))
(declare-const $q0@218@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@218@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@218@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) $q0@218@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@767@11@767@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 7)): Int) &&
;   ($struct_get($struct_loc($self$1, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 ($Snap.combine ($Snap.first $t@219@01) ($Snap.second $t@219@01))))
(assert (= ($Snap.first $t@219@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 7))))
(assert (= ($Snap.second $t@219@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 8)): Int) &&
;   ($struct_get($struct_loc($self$1, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 ($Snap.combine ($Snap.first $t@220@01) ($Snap.second $t@220@01))))
(assert (= ($Snap.first $t@220@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] $struct_loc($self$1, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 8))))
(assert (= ($Snap.second $t@220@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] $struct_loc($self$1, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@221@01 $Snap)
(assert (= $t@221@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@222@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 109 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 10)), $q1@222@01)) | live]
; [else-branch: 109 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 10)), $q1@222@01) | live]
(push) ; 5
; [then-branch: 109 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 10)), $q1@222@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 109 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 10)), $q1@222@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@222@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@770@11@770@357-aux|)))
(assert (forall (($q1@222@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@222@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@770@11@770@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int))
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int))
(declare-const $q1@224@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@224@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@224@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $q1@224@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@771@11@771@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@226@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(push) ; 4
; [then-branch: 110 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), $q2@226@01)) | live]
; [else-branch: 110 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), $q2@226@01) | live]
(push) ; 5
; [then-branch: 110 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), $q2@226@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 110 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), $q2@226@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@226@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@772@11@772@357-aux|)))
(assert (forall (($q2@226@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@226@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@772@11@772@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int))
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int))
(declare-const $q2@228@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@228@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@228@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) $q2@228@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@773@11@773@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@229@01 $Snap)
(assert (= $t@229@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@230@01 $Snap)
(assert (= $t@230@01 ($Snap.combine ($Snap.first $t@230@01) ($Snap.second $t@230@01))))
(assert (= ($Snap.first $t@230@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@188@01 0))))
(assert (= ($Snap.second $t@230@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@188@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@231@01 $Snap)
(assert (= $t@231@01 ($Snap.combine ($Snap.first $t@231@01) ($Snap.second $t@231@01))))
(assert (= ($Snap.first $t@231@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@188@01 1))))
(assert (= ($Snap.second $t@231@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@188@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@232@01 $Snap)
(assert (= $t@232@01 ($Snap.combine ($Snap.first $t@232@01) ($Snap.second $t@232@01))))
(assert (= ($Snap.first $t@232@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@188@01 2))))
(assert (= ($Snap.second $t@232@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@188@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@233@01 $Snap)
(assert (= $t@233@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@188@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@234@01 $Snap)
(assert (= $t@234@01 ($Snap.combine ($Snap.first $t@234@01) ($Snap.second $t@234@01))))
(assert (= ($Snap.first $t@234@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@188@01 4))))
(assert (= ($Snap.second $t@234@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@188@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@235@01 $Snap)
(assert (= $t@235@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@188@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@236@01 $Snap)
(assert (= $t@236@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@237@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@237@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $a@237@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@184@01 10)) $a@237@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) $a@237@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@781@11@781@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc($self$1, 4)): Int) == 0
(declare-const $t@238@01 $Snap)
(assert (= $t@238@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == 0 ==> ($struct_get($struct_loc($self$1, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) == 0 | live]
; [else-branch: 111 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 111 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 111 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 0)): Int) ==
;   ($struct_get($struct_loc($self$0, 0)): Int)
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) == ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 5)): Bool)
(declare-const $t@240@01 $Snap)
(assert (= $t@240@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | $struct_get[Bool]($struct_loc[Int]($self$0@184@01, 5)) | live]
; [else-branch: 112 | !($struct_get[Bool]($struct_loc[Int]($self$0@184@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 112 | $struct_get[Bool]($struct_loc[Int]($self$0@184@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5)))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 112 | !($struct_get[Bool]($struct_loc[Int]($self$0@184@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   ($struct_get($struct_loc($self$1, 7)): Int)
(declare-const $t@241@01 $Snap)
(assert (= $t@241@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 113 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
; [else-branch: 113 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 113 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 113 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)))
      ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4)))
    ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
(declare-const $t@242@01 $Snap)
(assert (= $t@242@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
; [else-branch: 114 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 114 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 114 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)))
      ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc($self$1, 7)): Int)
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
; [else-branch: 115 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 115 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 115 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)))
    ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 4)): Int) >=
;   ($struct_get($struct_loc($self$0, 4)): Int)
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) >= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 4)): Int) ==
;   ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) ==
;   ($struct_get($struct_loc($self$0, 3)): Int)
(declare-const $t@245@01 $Snap)
(assert (= $t@245@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool) ==> ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int) && ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Bool)
; [eval] $struct_loc($self$0, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | $struct_get[Bool]($struct_loc[Int]($self$0@184@01, 5)) | live]
; [else-branch: 116 | !($struct_get[Bool]($struct_loc[Int]($self$0@184@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 116 | $struct_get[Bool]($struct_loc[Int]($self$0@184@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5)))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int) && ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(push) ; 5
; [then-branch: 117 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 4)) != $struct_get[Int]($struct_loc[Int]($self$0@184@01, 4)) | live]
; [else-branch: 117 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 4)) == $struct_get[Int]($struct_loc[Int]($self$0@184@01, 4)) | live]
(push) ; 6
; [then-branch: 117 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 4)) != $struct_get[Int]($struct_loc[Int]($self$0@184@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
    ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4)))))
(pop) ; 6
(push) ; 6
; [else-branch: 117 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 4)) == $struct_get[Int]($struct_loc[Int]($self$0@184@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
  ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
    ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4))))))
(pop) ; 4
(push) ; 4
; [else-branch: 116 | !($struct_get[Bool]($struct_loc[Int]($self$0@184@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
        ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
          ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4))))))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@184@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4))
      ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))
      ($struct_get<Int> ($struct_loc<Int> $self$0@184@01 3))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 0)): Int) != 0
(declare-const $t@246@01 $Snap)
(assert (= $t@246@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Int) !=
;   ($struct_get($struct_loc($self$1, 0)): Int)
(declare-const $t@247@01 $Snap)
(assert (= $t@247@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))
    ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   0
(declare-const $t@248@01 $Snap)
(assert (= $t@248@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   0
(declare-const $t@249@01 $Snap)
(assert (= $t@249@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
; [else-branch: 118 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 118 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 118 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc($self$1, 4)): Int)
(declare-const $t@250@01 $Snap)
(assert (= $t@250@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
; [else-branch: 119 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 119 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 119 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))
    ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) +
;   ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int)
(declare-const $t@251@01 $Snap)
(assert (= $t@251@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)))
      ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$1, 3)): Int) &&
;     q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@252@01 $Snap)
(assert (= $t@252@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@253@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 120 | !(0 <= q$a@253@01) | live]
; [else-branch: 120 | 0 <= q$a@253@01 | live]
(push) ; 5
; [then-branch: 120 | !(0 <= q$a@253@01)]
(assert (not (<= 0 q$a@253@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 120 | 0 <= q$a@253@01]
(assert (<= 0 q$a@253@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@253@01) (not (<= 0 q$a@253@01))))
(push) ; 4
; [then-branch: 121 | 0 <= q$a@253@01 && q$a@253@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 121 | !(0 <= q$a@253@01 && q$a@253@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 121 | 0 <= q$a@253@01 && q$a@253@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@253@01)
  (<= q$a@253@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(push) ; 6
; [then-branch: 122 | q$a@253@01 == $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) | live]
; [else-branch: 122 | q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) | live]
(push) ; 7
; [then-branch: 122 | q$a@253@01 == $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3))]
(assert (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 122 | q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3))]
(assert (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)))))
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
  (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)))))
(push) ; 6
; [then-branch: 123 | q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) && q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) | live]
; [else-branch: 123 | !(q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) && q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0))) | live]
(push) ; 7
; [then-branch: 123 | q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) && q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0))]
(assert (and
  (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
  (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 123 | !(q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) && q$a@253@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)))]
(assert (not
  (and
    (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
    (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
      (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
  (and
    (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
    (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 121 | !(0 <= q$a@253@01 && q$a@253@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@253@01)
    (<= q$a@253@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@253@01)
    (<= q$a@253@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@253@01)
    (<= q$a@253@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
      (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
          (not
            (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
      (and
        (not
          (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
        (not
          (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@253@01)
      (<= q$a@253@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@253@01)
    (<= q$a@253@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@253@01 Int)) (!
  (and
    (or (<= 0 q$a@253@01) (not (<= 0 q$a@253@01)))
    (=>
      (and
        (<= 0 q$a@253@01)
        (<= q$a@253@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@253@01)
        (<= q$a@253@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
          (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@253@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
              (not
                (=
                  q$a@253@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
          (and
            (not
              (=
                q$a@253@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
            (not
              (=
                q$a@253@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@253@01)
          (<= q$a@253@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@253@01)
        (<= q$a@253@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@253@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@796@11@796@531-aux|)))
(assert (forall ((q$a@253@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@253@01)
        (<= q$a@253@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
        (not
          (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) q$a@253@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@253@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@253@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@253@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@796@11@796@531|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@255@01 $Snap)
(assert (= $t@255@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@256@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 124 | !(0 <= q$a@256@01) | live]
; [else-branch: 124 | 0 <= q$a@256@01 | live]
(push) ; 5
; [then-branch: 124 | !(0 <= q$a@256@01)]
(assert (not (<= 0 q$a@256@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 124 | 0 <= q$a@256@01]
(assert (<= 0 q$a@256@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@256@01) (not (<= 0 q$a@256@01))))
(push) ; 4
; [then-branch: 125 | 0 <= q$a@256@01 && q$a@256@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 125 | !(0 <= q$a@256@01 && q$a@256@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 125 | 0 <= q$a@256@01 && q$a@256@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@256@01)
  (<= q$a@256@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(push) ; 6
; [then-branch: 126 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), q$a@256@01) != 0 | live]
; [else-branch: 126 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), q$a@256@01) == 0 | live]
(push) ; 7
; [then-branch: 126 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), q$a@256@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 126 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), q$a@256@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 125 | !(0 <= q$a@256@01 && q$a@256@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@256@01)
    (<= q$a@256@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@256@01)
    (<= q$a@256@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@256@01)
    (<= q$a@256@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@256@01)
      (<= q$a@256@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@256@01)
    (<= q$a@256@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@256@01 Int)) (!
  (and
    (or (<= 0 q$a@256@01) (not (<= 0 q$a@256@01)))
    (=>
      (and
        (<= 0 q$a@256@01)
        (<= q$a@256@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@256@01)
        (<= q$a@256@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@256@01)
          (<= q$a@256@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@256@01)
        (<= q$a@256@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@798@11@798@352-aux|)))
(assert (forall ((q$a@256@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@256@01)
        (<= q$a@256@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@256@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@256@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@798@11@798@352|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$1, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@257@01 $Snap)
(assert (= $t@257@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@258@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 127 | !(0 <= q$a@258@01) | live]
; [else-branch: 127 | 0 <= q$a@258@01 | live]
(push) ; 5
; [then-branch: 127 | !(0 <= q$a@258@01)]
(assert (not (<= 0 q$a@258@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 127 | 0 <= q$a@258@01]
(assert (<= 0 q$a@258@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@258@01) (not (<= 0 q$a@258@01))))
(push) ; 4
; [then-branch: 128 | 0 <= q$a@258@01 && q$a@258@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 128 | !(0 <= q$a@258@01 && q$a@258@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 128 | 0 <= q$a@258@01 && q$a@258@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@258@01)
  (<= q$a@258@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(push) ; 6
; [then-branch: 129 | q$a@258@01 == $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) | live]
; [else-branch: 129 | q$a@258@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) | live]
(push) ; 7
; [then-branch: 129 | q$a@258@01 == $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0))]
(assert (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 129 | q$a@258@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0))]
(assert (not (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
  (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))
(push) ; 6
; [then-branch: 130 | q$a@258@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), q$a@258@01) == 0 | live]
; [else-branch: 130 | !(q$a@258@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), q$a@258@01) == 0) | live]
(push) ; 7
; [then-branch: 130 | q$a@258@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), q$a@258@01) == 0]
(assert (and
  (not (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 130 | !(q$a@258@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), q$a@258@01) == 0)]
(assert (not
  (and
    (not (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
        0)))
  (and
    (not (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 128 | !(0 <= q$a@258@01 && q$a@258@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@258@01)
    (<= q$a@258@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@258@01)
    (<= q$a@258@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@258@01)
    (<= q$a@258@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
      (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
            0)))
      (and
        (not
          (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@258@01)
      (<= q$a@258@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@258@01)
    (<= q$a@258@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@258@01 Int)) (!
  (and
    (or (<= 0 q$a@258@01) (not (<= 0 q$a@258@01)))
    (=>
      (and
        (<= 0 q$a@258@01)
        (<= q$a@258@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@258@01)
        (<= q$a@258@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
          (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@258@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
                0)))
          (and
            (not
              (=
                q$a@258@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@258@01)
          (<= q$a@258@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@258@01)
        (<= q$a@258@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@799@11@799@408-aux|)))
(assert (forall ((q$a@258@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@258@01)
        (<= q$a@258@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@258@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) q$a@258@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@799@11@799@408|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(18, q$a, q$v), write))
(declare-const $t@259@01 $Snap)
(assert (= $t@259@01 ($Snap.combine ($Snap.first $t@259@01) ($Snap.second $t@259@01))))
(assert (= ($Snap.first $t@259@01) $Snap.unit))
(declare-const q$a@260@01 Int)
(declare-const q$v@261@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 131 | !(0 <= q$a@260@01) | live]
; [else-branch: 131 | 0 <= q$a@260@01 | live]
(push) ; 5
; [then-branch: 131 | !(0 <= q$a@260@01)]
(assert (not (<= 0 q$a@260@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 131 | 0 <= q$a@260@01]
(assert (<= 0 q$a@260@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 132 | !(q$a@260@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 132 | q$a@260@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 132 | !(q$a@260@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@260@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 132 | q$a@260@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@260@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 133 | !(0 <= q$v@261@01) | live]
; [else-branch: 133 | 0 <= q$v@261@01 | live]
(push) ; 9
; [then-branch: 133 | !(0 <= q$v@261@01)]
(assert (not (<= 0 q$v@261@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 133 | 0 <= q$v@261@01]
(assert (<= 0 q$v@261@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 134 | !(q$v@261@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 134 | q$v@261@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 134 | !(q$v@261@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@261@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 134 | q$v@261@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@261@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@261@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@261@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@261@01)
  (and
    (<= 0 q$v@261@01)
    (or
      (<=
        q$v@261@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@261@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@261@01) (not (<= 0 q$v@261@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@261@01)
      (and
        (<= 0 q$v@261@01)
        (or
          (<=
            q$v@261@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@261@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@261@01) (not (<= 0 q$v@261@01))))))
(assert (or
  (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@260@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@260@01)
  (and
    (<= 0 q$a@260@01)
    (=>
      (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@261@01)
          (and
            (<= 0 q$v@261@01)
            (or
              (<=
                q$v@261@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@261@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@261@01) (not (<= 0 q$v@261@01)))))
    (or
      (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@260@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@260@01) (not (<= 0 q$a@260@01))))
(assert (and
  (<= 0 q$a@260@01)
  (and
    (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@261@01)
      (and
        (<=
          q$v@261@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@261@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@260@01)))))))
(declare-const sm@262@01 $PSF<$accessible$withdraw>)
(declare-const s@263@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@264@01 (Int Int Int) Int)
(declare-fun img@265@01 (Int Int Int) Bool)
(declare-fun inv@266@01 (Int Int Int) Int)
(declare-fun img@267@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@260@01 Int) (q$v@261@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@260@01)
      (and
        (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@261@01)
          (and
            (<=
              q$v@261@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@261@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@260@01))))))
    (and
      (=>
        (<= 0 q$a@260@01)
        (and
          (<= 0 q$a@260@01)
          (=>
            (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@261@01)
                (and
                  (<= 0 q$v@261@01)
                  (or
                    (<=
                      q$v@261@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@261@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@261@01) (not (<= 0 q$v@261@01)))))
          (or
            (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@260@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@260@01) (not (<= 0 q$a@260@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@259@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@260@01))
    ($SortWrappers.IntTo$Snap q$v@261@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@260@01))
    ($SortWrappers.IntTo$Snap q$v@261@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@260@01 Int) (q$v1@261@01 Int) (q$a2@260@01 Int) (q$v2@261@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@260@01)
        (and
          (<= q$a1@260@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@261@01)
            (and
              (<=
                q$v1@261@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@261@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a1@260@01))))))
      (and
        (<= 0 q$a2@260@01)
        (and
          (<= q$a2@260@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@261@01)
            (and
              (<=
                q$v2@261@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@261@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a2@260@01))))))
      (and (= q$a1@260@01 q$a2@260@01) (= q$v1@261@01 q$v2@261@01)))
    (and (= q$a1@260@01 q$a2@260@01) (= q$v1@261@01 q$v2@261@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@260@01 Int) (q$v@261@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@260@01)
      (and
        (<= q$a@260@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@261@01)
          (and
            (<=
              q$v@261@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@261@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@260@01))))))
    (and
      (and
        (= (inv@264@01 18 q$a@260@01 q$v@261@01) q$a@260@01)
        (= (inv@266@01 18 q$a@260@01 q$v@261@01) q$v@261@01))
      (and
        (img@265@01 18 q$a@260@01 q$v@261@01)
        (img@267@01 18 q$a@260@01 q$v@261@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@259@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@260@01))
    ($SortWrappers.IntTo$Snap q$v@261@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@260@01))
    ($SortWrappers.IntTo$Snap q$v@261@01))))
  :qid |quant-u-967|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@265@01 $tag $to $amount) (img@267@01 $tag $to $amount))
      (and
        (<= 0 (inv@264@01 $tag $to $amount))
        (and
          (<=
            (inv@264@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@266@01 $tag $to $amount))
            (and
              (<=
                (inv@266@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@266@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@264@01 $tag $to $amount))))))))
    (and
      (= 18 $tag)
      (= (inv@264@01 $tag $to $amount) $to)
      (= (inv@266@01 $tag $to $amount) $amount)))
  :pattern ((inv@264@01 $tag $to $amount))
  :pattern ((inv@266@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(declare-const sm@268@01 $PSF<$accessible$withdraw>)
(declare-const s@269@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@269@01 $Snap)) (!
  (=>
    (and
      (and
        (img@265@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second s@269@01)))
        (img@267@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second s@269@01))))
      (and
        (<=
          0
          (inv@264@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second s@269@01))))
        (and
          (<=
            (inv@264@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second s@269@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@266@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second s@269@01))))
            (and
              (<=
                (inv@266@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second s@269@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@266@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second s@269@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@264@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@269@01))) ($SortWrappers.$SnapToInt ($Snap.second s@269@01))))))))))
    (and
      (not (= s@269@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) s@269@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@259@01)) s@269@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) s@269@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@259@01)) s@269@01))
  :qid |qp.psmValDef11|)))
(assert (forall ((s@269@01 $Snap)) (!
  ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@259@01)) s@269@01) s@269@01)
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) s@269@01))
  :qid |qp.psmResTrgDef12|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@264@01 $tag $to $amount))
      (and
        (<=
          (inv@264@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@266@01 $tag $to $amount))
          (and
            (<=
              (inv@266@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@266@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@264@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@264@01 $tag $to $amount) (inv@266@01 $tag $to $amount))
  :qid |quant-u-968|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc($self$1, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == 0 ==> ($struct_get($struct_loc($self$1, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) == 0 | live]
; [else-branch: 135 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 135 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 135 | $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$1, 0)): Int) ==
;   ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) == ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [exec]
; assert ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
; [else-branch: 136 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 136 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 136 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
; [else-branch: 137 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 137 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 137 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
; [else-branch: 138 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 138 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int) == ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 138 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
; [else-branch: 139 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 139 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 139 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$1, 4)): Int) >=
;   ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) >= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [exec]
; assert ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 4)): Int) ==
;   ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) ==
;   ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$1, 4)): Int) && ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
; [else-branch: 140 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 140 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$1, 4)): Int) && ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) == ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(push) ; 5
; [then-branch: 141 | False | live]
; [else-branch: 141 | True | live]
(push) ; 6
; [then-branch: 141 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 141 | True]
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) == ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 140 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$1, 0)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Int) !=
;   ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [exec]
; assert ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [exec]
; assert !($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
; [else-branch: 142 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 142 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 142 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$1, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Bool)
; [eval] $struct_loc($self$1, 5)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)) | live]
; [else-branch: 143 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 143 | $struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int) == ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 143 | !($struct_get[Bool]($struct_loc[Int]($self$1@186@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@186@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc($self$1, 4)): Int) +
;   ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int) + ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$1, 3)): Int) &&
;     q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@270@01 Int)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 144 | !(0 <= q$a@270@01) | live]
; [else-branch: 144 | 0 <= q$a@270@01 | live]
(push) ; 5
; [then-branch: 144 | !(0 <= q$a@270@01)]
(assert (not (<= 0 q$a@270@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 144 | 0 <= q$a@270@01]
(assert (<= 0 q$a@270@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@270@01) (not (<= 0 q$a@270@01))))
(push) ; 4
; [then-branch: 145 | 0 <= q$a@270@01 && q$a@270@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 145 | !(0 <= q$a@270@01 && q$a@270@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 145 | 0 <= q$a@270@01 && q$a@270@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@270@01)
  (<= q$a@270@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int) ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int) && q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(push) ; 6
; [then-branch: 146 | q$a@270@01 == $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) | live]
; [else-branch: 146 | q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) | live]
(push) ; 7
; [then-branch: 146 | q$a@270@01 == $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3))]
(assert (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 146 | q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3))]
(assert (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)))))
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
  (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3)))))
(push) ; 6
; [then-branch: 147 | q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) && q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) | live]
; [else-branch: 147 | !(q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) && q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0))) | live]
(push) ; 7
; [then-branch: 147 | q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) && q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0))]
(assert (and
  (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
  (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 147 | !(q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 3)) && q$a@270@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)))]
(assert (not
  (and
    (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
    (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
      (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
  (and
    (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
    (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 145 | !(0 <= q$a@270@01 && q$a@270@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@270@01)
    (<= q$a@270@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@270@01)
    (<= q$a@270@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@270@01)
    (<= q$a@270@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
      (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
          (not
            (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
      (and
        (not
          (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
        (not
          (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@270@01)
      (<= q$a@270@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@270@01)
    (<= q$a@270@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@270@01 Int)) (!
  (and
    (or (<= 0 q$a@270@01) (not (<= 0 q$a@270@01)))
    (=>
      (and
        (<= 0 q$a@270@01)
        (<= q$a@270@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@270@01)
        (<= q$a@270@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
          (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@270@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
              (not
                (=
                  q$a@270@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
          (and
            (not
              (=
                q$a@270@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
            (not
              (=
                q$a@270@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@270@01)
          (<= q$a@270@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@270@01)
        (<= q$a@270@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@270@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@815@11@815@531-aux|)))
(push) ; 3
(assert (not (forall ((q$a@270@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@270@01)
        (<= q$a@270@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
        (not
          (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) q$a@270@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@270@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@270@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@270@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@815@11@815@531|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@270@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@270@01)
        (<= q$a@270@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 3))))
        (not
          (= q$a@270@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) q$a@270@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@270@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@270@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@270@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@815@11@815@531|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@271@01 Int)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 148 | !(0 <= q$a@271@01) | live]
; [else-branch: 148 | 0 <= q$a@271@01 | live]
(push) ; 5
; [then-branch: 148 | !(0 <= q$a@271@01)]
(assert (not (<= 0 q$a@271@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 148 | 0 <= q$a@271@01]
(assert (<= 0 q$a@271@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@271@01) (not (<= 0 q$a@271@01))))
(push) ; 4
; [then-branch: 149 | 0 <= q$a@271@01 && q$a@271@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 149 | !(0 <= q$a@271@01 && q$a@271@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 149 | 0 <= q$a@271@01 && q$a@271@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@271@01)
  (<= q$a@271@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(push) ; 6
; [then-branch: 150 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), q$a@271@01) != 0 | live]
; [else-branch: 150 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), q$a@271@01) == 0 | live]
(push) ; 7
; [then-branch: 150 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), q$a@271@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 150 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 6)), q$a@271@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 149 | !(0 <= q$a@271@01 && q$a@271@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@271@01)
    (<= q$a@271@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@271@01)
    (<= q$a@271@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@271@01)
    (<= q$a@271@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@271@01)
      (<= q$a@271@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@271@01)
    (<= q$a@271@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@271@01 Int)) (!
  (and
    (or (<= 0 q$a@271@01) (not (<= 0 q$a@271@01)))
    (=>
      (and
        (<= 0 q$a@271@01)
        (<= q$a@271@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@271@01)
        (<= q$a@271@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@271@01)
          (<= q$a@271@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@271@01)
        (<= q$a@271@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@817@11@817@352-aux|)))
(push) ; 3
(assert (not (forall ((q$a@271@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@271@01)
        (<= q$a@271@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@271@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@817@11@817@352|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@271@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@271@01)
        (<= q$a@271@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@271@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@271@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@817@11@817@352|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc($self$1, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@272@01 Int)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 151 | !(0 <= q$a@272@01) | live]
; [else-branch: 151 | 0 <= q$a@272@01 | live]
(push) ; 5
; [then-branch: 151 | !(0 <= q$a@272@01)]
(assert (not (<= 0 q$a@272@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 151 | 0 <= q$a@272@01]
(assert (<= 0 q$a@272@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@272@01) (not (<= 0 q$a@272@01))))
(push) ; 4
; [then-branch: 152 | 0 <= q$a@272@01 && q$a@272@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 152 | !(0 <= q$a@272@01 && q$a@272@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 152 | 0 <= q$a@272@01 && q$a@272@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@272@01)
  (<= q$a@272@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(push) ; 6
; [then-branch: 153 | q$a@272@01 == $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) | live]
; [else-branch: 153 | q$a@272@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) | live]
(push) ; 7
; [then-branch: 153 | q$a@272@01 == $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0))]
(assert (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 153 | q$a@272@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0))]
(assert (not (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
  (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0)))))
(push) ; 6
; [then-branch: 154 | q$a@272@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), q$a@272@01) == 0 | live]
; [else-branch: 154 | !(q$a@272@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), q$a@272@01) == 0) | live]
(push) ; 7
; [then-branch: 154 | q$a@272@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), q$a@272@01) == 0]
(assert (and
  (not (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 154 | !(q$a@272@01 != $struct_get[Int]($struct_loc[Int]($self$1@186@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@186@01, 11)), q$a@272@01) == 0)]
(assert (not
  (and
    (not (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
        0)))
  (and
    (not (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 152 | !(0 <= q$a@272@01 && q$a@272@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@272@01)
    (<= q$a@272@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@272@01)
    (<= q$a@272@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@272@01)
    (<= q$a@272@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
      (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
            0)))
      (and
        (not
          (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@272@01)
      (<= q$a@272@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@272@01)
    (<= q$a@272@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@272@01 Int)) (!
  (and
    (or (<= 0 q$a@272@01) (not (<= 0 q$a@272@01)))
    (=>
      (and
        (<= 0 q$a@272@01)
        (<= q$a@272@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@272@01)
        (<= q$a@272@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
          (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@272@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
                0)))
          (and
            (not
              (=
                q$a@272@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@272@01)
          (<= q$a@272@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@272@01)
        (<= q$a@272@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@818@11@818@408-aux|)))
(push) ; 3
(assert (not (forall ((q$a@272@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@272@01)
        (<= q$a@272@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) q$a@272@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@818@11@818@408|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@272@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@272@01)
        (<= q$a@272@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@272@01 ($struct_get<Int> ($struct_loc<Int> $self$1@186@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 10)) q$a@272@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 11)) q$a@272@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@818@11@818@408|)))
; [exec]
; assert true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(18, q$a, q$v), write))
(declare-const q$a@273@01 Int)
(declare-const q$v@274@01 Int)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 155 | !(0 <= q$a@273@01) | live]
; [else-branch: 155 | 0 <= q$a@273@01 | live]
(push) ; 5
; [then-branch: 155 | !(0 <= q$a@273@01)]
(assert (not (<= 0 q$a@273@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 155 | 0 <= q$a@273@01]
(assert (<= 0 q$a@273@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 156 | !(q$a@273@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 156 | q$a@273@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 156 | !(q$a@273@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@273@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 156 | q$a@273@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@273@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 157 | !(0 <= q$v@274@01) | live]
; [else-branch: 157 | 0 <= q$v@274@01 | live]
(push) ; 9
; [then-branch: 157 | !(0 <= q$v@274@01)]
(assert (not (<= 0 q$v@274@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 157 | 0 <= q$v@274@01]
(assert (<= 0 q$v@274@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 158 | !(q$v@274@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 158 | q$v@274@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 158 | !(q$v@274@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@274@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 158 | q$v@274@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@274@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 6)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 6)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@274@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@274@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@274@01)
  (and
    (<= 0 q$v@274@01)
    (or
      (<=
        q$v@274@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@274@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@274@01) (not (<= 0 q$v@274@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@274@01)
      (and
        (<= 0 q$v@274@01)
        (or
          (<=
            q$v@274@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@274@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@274@01) (not (<= 0 q$v@274@01))))))
(assert (or
  (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@273@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@273@01)
  (and
    (<= 0 q$a@273@01)
    (=>
      (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@274@01)
          (and
            (<= 0 q$v@274@01)
            (or
              (<=
                q$v@274@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@274@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@274@01) (not (<= 0 q$v@274@01)))))
    (or
      (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@273@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@273@01) (not (<= 0 q$a@273@01))))
(assert (and
  (<= 0 q$a@273@01)
  (and
    (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@274@01)
      (and
        (<=
          q$v@274@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@274@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@273@01)))))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@275@01 (Int Int Int) Int)
(declare-fun img@276@01 (Int Int Int) Bool)
(declare-fun inv@277@01 (Int Int Int) Int)
(declare-fun img@278@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@273@01 Int) (q$v@274@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@273@01)
      (and
        (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@274@01)
          (and
            (<=
              q$v@274@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@274@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@273@01))))))
    (and
      (=>
        (<= 0 q$a@273@01)
        (and
          (<= 0 q$a@273@01)
          (=>
            (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@274@01)
                (and
                  (<= 0 q$v@274@01)
                  (or
                    (<=
                      q$v@274@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@274@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@274@01) (not (<= 0 q$v@274@01)))))
          (or
            (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@273@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@273@01) (not (<= 0 q$a@273@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@273@01))
    ($SortWrappers.IntTo$Snap q$v@274@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@273@01))
    ($SortWrappers.IntTo$Snap q$v@274@01))))
  :qid |$accessible$withdraw-aux|)))
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@273@01 Int) (q$v1@274@01 Int) (q$a2@273@01 Int) (q$v2@274@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 q$a1@273@01)
          (and
            (<= q$a1@273@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v1@274@01)
              (and
                (<=
                  q$v1@274@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  q$v1@274@01
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a1@273@01))))))
        ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap q$a1@273@01))
          ($SortWrappers.IntTo$Snap q$v1@274@01))) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap q$a1@273@01))
          ($SortWrappers.IntTo$Snap q$v1@274@01))))
      (and
        (and
          (<= 0 q$a2@273@01)
          (and
            (<= q$a2@273@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v2@274@01)
              (and
                (<=
                  q$v2@274@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  q$v2@274@01
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a2@273@01))))))
        ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap q$a2@273@01))
          ($SortWrappers.IntTo$Snap q$v2@274@01))) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap q$a2@273@01))
          ($SortWrappers.IntTo$Snap q$v2@274@01))))
      (and (= q$a1@273@01 q$a2@273@01) (= q$v1@274@01 q$v2@274@01)))
    (and (= q$a1@273@01 q$a2@273@01) (= q$v1@274@01 q$v2@274@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@273@01 Int) (q$v@274@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@273@01)
      (and
        (<= q$a@273@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@274@01)
          (and
            (<=
              q$v@274@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@274@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) q$a@273@01))))))
    (and
      (and
        (= (inv@275@01 18 q$a@273@01 q$v@274@01) q$a@273@01)
        (= (inv@277@01 18 q$a@273@01 q$v@274@01) q$v@274@01))
      (and
        (img@276@01 18 q$a@273@01 q$v@274@01)
        (img@278@01 18 q$a@273@01 q$v@274@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@273@01))
    ($SortWrappers.IntTo$Snap q$v@274@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@273@01))
    ($SortWrappers.IntTo$Snap q$v@274@01))))
  :qid |$accessible$withdraw-invOfFct|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@276@01 $tag $to $amount) (img@278@01 $tag $to $amount))
      (and
        (<= 0 (inv@275@01 $tag $to $amount))
        (and
          (<=
            (inv@275@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@277@01 $tag $to $amount))
            (and
              (<=
                (inv@277@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@277@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@275@01 $tag $to $amount))))))))
    (and
      (= 18 $tag)
      (= (inv@275@01 $tag $to $amount) $to)
      (= (inv@277@01 $tag $to $amount) $amount)))
  :pattern ((inv@275@01 $tag $to $amount))
  :pattern ((inv@277@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@275@01 $tag $to $amount))
      (and
        (<=
          (inv@275@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@277@01 $tag $to $amount))
          (and
            (<=
              (inv@277@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@277@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@275@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@268@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@275@01 $tag $to $amount) (inv@277@01 $tag $to $amount))
  :qid |quant-u-970|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@279@01 (($tag Int) ($to Int) ($amount Int)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@275@01 $tag $to $amount))
        (and
          (<=
            (inv@275@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@277@01 $tag $to $amount))
            (and
              (<=
                (inv@277@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@277@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@275@01 $tag $to $amount)))))))
      (and (img@276@01 $tag $to $amount) (img@278@01 $tag $to $amount))
      (and
        (= $tag 18)
        (= $to (inv@275@01 $tag $to $amount))
        (= $amount (inv@277@01 $tag $to $amount))))
    ($Perm.min
      (ite
        (and
          (and (img@265@01 $tag $to $amount) (img@267@01 $tag $to $amount))
          (and
            (<= 0 (inv@264@01 $tag $to $amount))
            (and
              (<=
                (inv@264@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@266@01 $tag $to $amount))
                (and
                  (<=
                    (inv@266@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@266@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@264@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (-
      (ite
        (and
          (and (img@265@01 $tag $to $amount) (img@267@01 $tag $to $amount))
          (and
            (<= 0 (inv@264@01 $tag $to $amount))
            (and
              (<=
                (inv@264@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@266@01 $tag $to $amount))
                (and
                  (<=
                    (inv@266@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@266@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@264@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@279@01 $tag $to $amount))
    $Perm.No)
  
  :qid |quant-u-972|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and
        (<= 0 (inv@275@01 $tag $to $amount))
        (and
          (<=
            (inv@275@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@277@01 $tag $to $amount))
            (and
              (<=
                (inv@277@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@277@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@186@01 6)) (inv@275@01 $tag $to $amount)))))))
      (and (img@276@01 $tag $to $amount) (img@278@01 $tag $to $amount))
      (and
        (= $tag 18)
        (= $to (inv@275@01 $tag $to $amount))
        (= $amount (inv@277@01 $tag $to $amount))))
    (= (- $Perm.Write (pTaken@279@01 $tag $to $amount)) $Perm.No))
  
  :qid |quant-u-973|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@280@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@281@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@282@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@283@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@284@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@285@01 Int)
; [exec]
; var block: $Struct
(declare-const block@286@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@287@01 $Snap)
(assert (= $t@287@01 ($Snap.combine ($Snap.first $t@287@01) ($Snap.second $t@287@01))))
(assert (= ($Snap.first $t@287@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
(assert (= ($Snap.second $t@287@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@280@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 ($Snap.combine ($Snap.first $t@288@01) ($Snap.second $t@288@01))))
(assert (= ($Snap.first $t@288@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@280@01 1))))
(assert (= ($Snap.second $t@288@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@280@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 ($Snap.combine ($Snap.first $t@289@01) ($Snap.second $t@289@01))))
(assert (= ($Snap.first $t@289@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@280@01 2))))
(assert (= ($Snap.second $t@289@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@280@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 ($Snap.combine ($Snap.first $t@290@01) ($Snap.second $t@290@01))))
(assert (= ($Snap.first $t@290@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
(assert (= ($Snap.second $t@290@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@280@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 ($Snap.combine ($Snap.first $t@291@01) ($Snap.second $t@291@01))))
(assert (= ($Snap.first $t@291@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@280@01 4))))
(assert (= ($Snap.second $t@291@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@280@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@292@01 $Snap)
(assert (= $t@292@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@293@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 4
; [then-branch: 159 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 6)), $q0@293@01)) | live]
; [else-branch: 159 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 6)), $q0@293@01) | live]
(push) ; 5
; [then-branch: 159 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 6)), $q0@293@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 159 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 6)), $q0@293@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@293@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@836@11@836@345-aux|)))
(assert (forall (($q0@293@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@293@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@836@11@836@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $t@294@01 $Snap)
(assert (= $t@294@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $q0@295@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@295@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@295@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) $q0@295@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@837@11@837@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@296@01 $Snap)
(assert (= $t@296@01 ($Snap.combine ($Snap.first $t@296@01) ($Snap.second $t@296@01))))
(assert (= ($Snap.first $t@296@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@280@01 7))))
(assert (= ($Snap.second $t@296@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@280@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 ($Snap.combine ($Snap.first $t@297@01) ($Snap.second $t@297@01))))
(assert (= ($Snap.first $t@297@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@280@01 8))))
(assert (= ($Snap.second $t@297@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@280@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@298@01 $Snap)
(assert (= $t@298@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@299@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 160 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 10)), $q1@299@01)) | live]
; [else-branch: 160 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 10)), $q1@299@01) | live]
(push) ; 5
; [then-branch: 160 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 10)), $q1@299@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 160 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 10)), $q1@299@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@299@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@840@11@840@348-aux|)))
(assert (forall (($q1@299@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@299@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@840@11@840@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@300@01 $Snap)
(assert (= $t@300@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q1@301@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@301@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@301@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) $q1@301@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@841@11@841@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@303@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 161 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 11)), $q2@303@01)) | live]
; [else-branch: 161 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 11)), $q2@303@01) | live]
(push) ; 5
; [then-branch: 161 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 11)), $q2@303@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 161 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 11)), $q2@303@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@303@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@842@11@842@348-aux|)))
(assert (forall (($q2@303@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@303@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@842@11@842@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q2@305@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@305@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@305@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) $q2@305@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@843@11@843@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@280@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@307@01 $Snap)
(assert (= $t@307@01 ($Snap.combine ($Snap.first $t@307@01) ($Snap.second $t@307@01))))
(assert (= ($Snap.first $t@307@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 0))))
(assert (= ($Snap.second $t@307@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@308@01 $Snap)
(assert (= $t@308@01 ($Snap.combine ($Snap.first $t@308@01) ($Snap.second $t@308@01))))
(assert (= ($Snap.first $t@308@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 1))))
(assert (= ($Snap.second $t@308@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 2)): Int) &&
;   ($struct_get($struct_loc($pre_self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 ($Snap.combine ($Snap.first $t@309@01) ($Snap.second $t@309@01))))
(assert (= ($Snap.first $t@309@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 2))))
(assert (= ($Snap.second $t@309@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 3)): Int) &&
;   ($struct_get($struct_loc($pre_self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@310@01 $Snap)
(assert (= $t@310@01 ($Snap.combine ($Snap.first $t@310@01) ($Snap.second $t@310@01))))
(assert (= ($Snap.first $t@310@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] $struct_loc($pre_self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 3))))
(assert (= ($Snap.second $t@310@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] $struct_loc($pre_self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc($pre_self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 ($Snap.combine ($Snap.first $t@311@01) ($Snap.second $t@311@01))))
(assert (= ($Snap.first $t@311@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 4))))
(assert (= ($Snap.second $t@311@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@313@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 6)
(push) ; 4
; [then-branch: 162 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 6)), $q0@313@01)) | live]
; [else-branch: 162 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 6)), $q0@313@01) | live]
(push) ; 5
; [then-branch: 162 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 6)), $q0@313@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 162 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 6)), $q0@313@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@313@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@850@11@850@360-aux|)))
(assert (forall (($q0@313@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@313@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@850@11@850@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int])): Int))
(declare-const $t@314@01 $Snap)
(assert (= $t@314@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int])): Int))
(declare-const $q0@315@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 6)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 6)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@315@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@315@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 6)) $q0@315@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@851@11@851@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 7)): Int) &&
;   ($struct_get($struct_loc($pre_self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 ($Snap.combine ($Snap.first $t@316@01) ($Snap.second $t@316@01))))
(assert (= ($Snap.first $t@316@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] $struct_loc($pre_self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 7))))
(assert (= ($Snap.second $t@316@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] $struct_loc($pre_self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 8)): Int) &&
;   ($struct_get($struct_loc($pre_self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@317@01 $Snap)
(assert (= $t@317@01 ($Snap.combine ($Snap.first $t@317@01) ($Snap.second $t@317@01))))
(assert (= ($Snap.first $t@317@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 8)): Int)
; [eval] $struct_loc($pre_self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 8))))
(assert (= ($Snap.second $t@317@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 8)): Int)
; [eval] $struct_loc($pre_self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@318@01 $Snap)
(assert (= $t@318@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@319@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(push) ; 4
; [then-branch: 163 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 10)), $q1@319@01)) | live]
; [else-branch: 163 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 10)), $q1@319@01) | live]
(push) ; 5
; [then-branch: 163 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 10)), $q1@319@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 163 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 10)), $q1@319@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@319@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@854@11@854@363-aux|)))
(assert (forall (($q1@319@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@319@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@854@11@854@363|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int))
(declare-const $t@320@01 $Snap)
(assert (= $t@320@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int))
(declare-const $q1@321@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@321@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@321@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 10)) $q1@321@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@855@11@855@271|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@323@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 11)
(push) ; 4
; [then-branch: 164 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 11)), $q2@323@01)) | live]
; [else-branch: 164 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 11)), $q2@323@01) | live]
(push) ; 5
; [then-branch: 164 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 11)), $q2@323@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 164 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@282@01, 11)), $q2@323@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@323@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@856@11@856@363-aux|)))
(assert (forall (($q2@323@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@323@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@856@11@856@363|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])): Int))
(declare-const $t@324@01 $Snap)
(assert (= $t@324@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])): Int))
(declare-const $q2@325@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 11)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@325@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@325@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@282@01 11)) $q2@325@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@857@11@857@271|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@326@01 $Snap)
(assert (= $t@326@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@282@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@327@01 $Snap)
(assert (= $t@327@01 ($Snap.combine ($Snap.first $t@327@01) ($Snap.second $t@327@01))))
(assert (= ($Snap.first $t@327@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@286@01 0))))
(assert (= ($Snap.second $t@327@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@286@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@328@01 $Snap)
(assert (= $t@328@01 ($Snap.combine ($Snap.first $t@328@01) ($Snap.second $t@328@01))))
(assert (= ($Snap.first $t@328@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@286@01 1))))
(assert (= ($Snap.second $t@328@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@286@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 ($Snap.combine ($Snap.first $t@329@01) ($Snap.second $t@329@01))))
(assert (= ($Snap.first $t@329@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@286@01 2))))
(assert (= ($Snap.second $t@329@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@286@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@330@01 $Snap)
(assert (= $t@330@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@286@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 ($Snap.combine ($Snap.first $t@331@01) ($Snap.second $t@331@01))))
(assert (= ($Snap.first $t@331@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@286@01 4))))
(assert (= ($Snap.second $t@331@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@286@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@286@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@285@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@334@01 $Snap)
(assert (= $t@334@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@335@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
(declare-const $t@336@01 $Snap)
(assert (= $t@336@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@280@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@280@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | $struct_get[Int]($struct_loc[Int](self@280@01, 3)) == 0 | live]
; [else-branch: 165 | $struct_get[Int]($struct_loc[Int](self@280@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 165 | $struct_get[Int]($struct_loc[Int](self@280@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@280@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 165 | $struct_get[Int]($struct_loc[Int](self@280@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@280@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@280@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@280@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@280@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@280@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@337@01 $Snap)
(assert (= $t@337@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
(declare-const $t@338@01 $Snap)
(assert (= $t@338@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5)) | live]
; [else-branch: 166 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 166 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 166 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@339@01 $Snap)
(assert (= $t@339@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 167 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5))) | live]
; [else-branch: 167 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 167 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 167 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@280@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@280@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(declare-const $t@340@01 $Snap)
(assert (= $t@340@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5))) | live]
; [else-branch: 168 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 168 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 168 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@280@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5)) | live]
; [else-branch: 169 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 169 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 169 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@280@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
(declare-const $t@343@01 $Snap)
(assert (= $t@343@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5)) | live]
; [else-branch: 170 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 170 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 171 | False | live]
; [else-branch: 171 | True | live]
(push) ; 6
; [then-branch: 171 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 171 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 170 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) != 0
(declare-const $t@344@01 $Snap)
(assert (= $t@344@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@280@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@345@01 $Snap)
(assert (= $t@345@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@280@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@346@01 $Snap)
(assert (= $t@346@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@347@01 $Snap)
(assert (= $t@347@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5))) | live]
; [else-branch: 172 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 172 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 172 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5)) | live]
; [else-branch: 173 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 173 | $struct_get[Bool]($struct_loc[Int](self@280@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@280@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 173 | !($struct_get[Bool]($struct_loc[Int](self@280@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@280@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@280@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
(declare-const $t@349@01 $Snap)
(assert (= $t@349@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) ($struct_get<Int> ($struct_loc<Int> self@280@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@280@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) ($struct_get<Int> ($struct_loc<Int> self@280@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@350@01 $Snap)
(assert (= $t@350@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@351@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 174 | !(0 <= q$a@351@01) | live]
; [else-branch: 174 | 0 <= q$a@351@01 | live]
(push) ; 5
; [then-branch: 174 | !(0 <= q$a@351@01)]
(assert (not (<= 0 q$a@351@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 174 | 0 <= q$a@351@01]
(assert (<= 0 q$a@351@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@351@01) (not (<= 0 q$a@351@01))))
(push) ; 4
; [then-branch: 175 | 0 <= q$a@351@01 && q$a@351@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 175 | !(0 <= q$a@351@01 && q$a@351@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 175 | 0 <= q$a@351@01 && q$a@351@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@351@01)
  (<= q$a@351@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 176 | q$a@351@01 == $struct_get[Int]($struct_loc[Int](self@280@01, 3)) | live]
; [else-branch: 176 | q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 3)) | live]
(push) ; 7
; [then-branch: 176 | q$a@351@01 == $struct_get[Int]($struct_loc[Int](self@280@01, 3))]
(assert (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 176 | q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 3))]
(assert (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
  (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3)))))
(push) ; 6
; [then-branch: 177 | q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 3)) && q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0)) | live]
; [else-branch: 177 | !(q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 3)) && q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0))) | live]
(push) ; 7
; [then-branch: 177 | q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 3)) && q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0))]
(assert (and
  (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
  (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 177 | !(q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 3)) && q$a@351@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0)))]
(assert (not
  (and
    (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
    (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
      (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))))
  (and
    (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
    (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 175 | !(0 <= q$a@351@01 && q$a@351@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@351@01)
    (<= q$a@351@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@351@01)
    (<= q$a@351@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@351@01)
    (<= q$a@351@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
      (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
          (not
            (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))))
      (and
        (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
        (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@351@01)
      (<= q$a@351@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@351@01)
    (<= q$a@351@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@351@01 Int)) (!
  (and
    (or (<= 0 q$a@351@01) (not (<= 0 q$a@351@01)))
    (=>
      (and
        (<= 0 q$a@351@01)
        (<= q$a@351@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@351@01)
        (<= q$a@351@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
          (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@351@01
                  ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
              (not
                (=
                  q$a@351@01
                  ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))))
          (and
            (not
              (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
            (not
              (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@351@01)
          (<= q$a@351@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@351@01)
        (<= q$a@351@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@881@11@881@513-aux|)))
(assert (forall ((q$a@351@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@351@01)
        (<= q$a@351@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 3))))
        (not (= q$a@351@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) q$a@351@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@351@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@351@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@881@11@881@513|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@353@01 $Snap)
(assert (= $t@353@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@354@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 178 | !(0 <= q$a@354@01) | live]
; [else-branch: 178 | 0 <= q$a@354@01 | live]
(push) ; 5
; [then-branch: 178 | !(0 <= q$a@354@01)]
(assert (not (<= 0 q$a@354@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 178 | 0 <= q$a@354@01]
(assert (<= 0 q$a@354@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@354@01) (not (<= 0 q$a@354@01))))
(push) ; 4
; [then-branch: 179 | 0 <= q$a@354@01 && q$a@354@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 179 | !(0 <= q$a@354@01 && q$a@354@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 179 | 0 <= q$a@354@01 && q$a@354@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@354@01)
  (<= q$a@354@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 6
; [then-branch: 180 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 6)), q$a@354@01) != 0 | live]
; [else-branch: 180 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 6)), q$a@354@01) == 0 | live]
(push) ; 7
; [then-branch: 180 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 6)), q$a@354@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 180 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 6)), q$a@354@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 179 | !(0 <= q$a@354@01 && q$a@354@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@354@01)
    (<= q$a@354@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@354@01)
    (<= q$a@354@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@354@01)
    (<= q$a@354@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@354@01)
      (<= q$a@354@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@354@01)
    (<= q$a@354@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@354@01 Int)) (!
  (and
    (or (<= 0 q$a@354@01) (not (<= 0 q$a@354@01)))
    (=>
      (and
        (<= 0 q$a@354@01)
        (<= q$a@354@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@354@01)
        (<= q$a@354@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@354@01)
          (<= q$a@354@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@354@01)
        (<= q$a@354@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@883@11@883@343-aux|)))
(assert (forall ((q$a@354@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@354@01)
        (<= q$a@354@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@354@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@354@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@883@11@883@343|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@355@01 $Snap)
(assert (= $t@355@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@356@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 181 | !(0 <= q$a@356@01) | live]
; [else-branch: 181 | 0 <= q$a@356@01 | live]
(push) ; 5
; [then-branch: 181 | !(0 <= q$a@356@01)]
(assert (not (<= 0 q$a@356@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 181 | 0 <= q$a@356@01]
(assert (<= 0 q$a@356@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@356@01) (not (<= 0 q$a@356@01))))
(push) ; 4
; [then-branch: 182 | 0 <= q$a@356@01 && q$a@356@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 182 | !(0 <= q$a@356@01 && q$a@356@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 182 | 0 <= q$a@356@01 && q$a@356@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@356@01)
  (<= q$a@356@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
; [then-branch: 183 | q$a@356@01 == $struct_get[Int]($struct_loc[Int](self@280@01, 0)) | live]
; [else-branch: 183 | q$a@356@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0)) | live]
(push) ; 7
; [then-branch: 183 | q$a@356@01 == $struct_get[Int]($struct_loc[Int](self@280@01, 0))]
(assert (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 183 | q$a@356@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0))]
(assert (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
  (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0)))))
(push) ; 6
; [then-branch: 184 | q$a@356@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 11)), q$a@356@01) == 0 | live]
; [else-branch: 184 | !(q$a@356@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 11)), q$a@356@01) == 0) | live]
(push) ; 7
; [then-branch: 184 | q$a@356@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 11)), q$a@356@01) == 0]
(assert (and
  (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 184 | !(q$a@356@01 != $struct_get[Int]($struct_loc[Int](self@280@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@280@01, 11)), q$a@356@01) == 0)]
(assert (not
  (and
    (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
        0)))
  (and
    (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 182 | !(0 <= q$a@356@01 && q$a@356@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@356@01)
    (<= q$a@356@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@356@01)
    (<= q$a@356@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@356@01)
    (<= q$a@356@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
      (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
            0)))
      (and
        (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@356@01)
      (<= q$a@356@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@356@01)
    (<= q$a@356@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@356@01 Int)) (!
  (and
    (or (<= 0 q$a@356@01) (not (<= 0 q$a@356@01)))
    (=>
      (and
        (<= 0 q$a@356@01)
        (<= q$a@356@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@356@01)
        (<= q$a@356@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
          (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@356@01
                  ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
                0)))
          (and
            (not
              (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@356@01)
          (<= q$a@356@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@356@01)
        (<= q$a@356@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@884@11@884@396-aux|)))
(assert (forall ((q$a@356@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@356@01)
        (<= q$a@356@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@356@01 ($struct_get<Int> ($struct_loc<Int> self@280@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 10)) q$a@356@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 11)) q$a@356@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@884@11@884@396|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(18, q$a, q$v), write))
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 ($Snap.combine ($Snap.first $t@357@01) ($Snap.second $t@357@01))))
(assert (= ($Snap.first $t@357@01) $Snap.unit))
(declare-const q$a@358@01 Int)
(declare-const q$v@359@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 185 | !(0 <= q$a@358@01) | live]
; [else-branch: 185 | 0 <= q$a@358@01 | live]
(push) ; 5
; [then-branch: 185 | !(0 <= q$a@358@01)]
(assert (not (<= 0 q$a@358@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 185 | 0 <= q$a@358@01]
(assert (<= 0 q$a@358@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 186 | !(q$a@358@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 186 | q$a@358@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 186 | !(q$a@358@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@358@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 186 | q$a@358@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@358@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 187 | !(0 <= q$v@359@01) | live]
; [else-branch: 187 | 0 <= q$v@359@01 | live]
(push) ; 9
; [then-branch: 187 | !(0 <= q$v@359@01)]
(assert (not (<= 0 q$v@359@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 187 | 0 <= q$v@359@01]
(assert (<= 0 q$v@359@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 188 | !(q$v@359@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 188 | q$v@359@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 188 | !(q$v@359@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@359@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 188 | q$v@359@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@359@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@359@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@359@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@359@01)
  (and
    (<= 0 q$v@359@01)
    (or
      (<=
        q$v@359@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@359@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@359@01) (not (<= 0 q$v@359@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@359@01)
      (and
        (<= 0 q$v@359@01)
        (or
          (<=
            q$v@359@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@359@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@359@01) (not (<= 0 q$v@359@01))))))
(assert (or
  (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@358@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@358@01)
  (and
    (<= 0 q$a@358@01)
    (=>
      (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@359@01)
          (and
            (<= 0 q$v@359@01)
            (or
              (<=
                q$v@359@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@359@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@359@01) (not (<= 0 q$v@359@01)))))
    (or
      (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@358@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@358@01) (not (<= 0 q$a@358@01))))
(assert (and
  (<= 0 q$a@358@01)
  (and
    (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@359@01)
      (and
        (<=
          q$v@359@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@359@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@358@01)))))))
(declare-const sm@360@01 $PSF<$accessible$withdraw>)
(declare-const s@361@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@362@01 (Int Int Int) Int)
(declare-fun img@363@01 (Int Int Int) Bool)
(declare-fun inv@364@01 (Int Int Int) Int)
(declare-fun img@365@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@358@01 Int) (q$v@359@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@358@01)
      (and
        (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@359@01)
          (and
            (<=
              q$v@359@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@359@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@358@01))))))
    (and
      (=>
        (<= 0 q$a@358@01)
        (and
          (<= 0 q$a@358@01)
          (=>
            (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@359@01)
                (and
                  (<= 0 q$v@359@01)
                  (or
                    (<=
                      q$v@359@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@359@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@359@01) (not (<= 0 q$v@359@01)))))
          (or
            (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@358@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@358@01) (not (<= 0 q$a@358@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@357@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@358@01))
    ($SortWrappers.IntTo$Snap q$v@359@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@358@01))
    ($SortWrappers.IntTo$Snap q$v@359@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@358@01 Int) (q$v1@359@01 Int) (q$a2@358@01 Int) (q$v2@359@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@358@01)
        (and
          (<= q$a1@358@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@359@01)
            (and
              (<=
                q$v1@359@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@359@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a1@358@01))))))
      (and
        (<= 0 q$a2@358@01)
        (and
          (<= q$a2@358@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@359@01)
            (and
              (<=
                q$v2@359@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@359@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a2@358@01))))))
      (and (= q$a1@358@01 q$a2@358@01) (= q$v1@359@01 q$v2@359@01)))
    (and (= q$a1@358@01 q$a2@358@01) (= q$v1@359@01 q$v2@359@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@358@01 Int) (q$v@359@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@358@01)
      (and
        (<= q$a@358@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@359@01)
          (and
            (<=
              q$v@359@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@359@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) q$a@358@01))))))
    (and
      (and
        (= (inv@362@01 18 q$a@358@01 q$v@359@01) q$a@358@01)
        (= (inv@364@01 18 q$a@358@01 q$v@359@01) q$v@359@01))
      (and
        (img@363@01 18 q$a@358@01 q$v@359@01)
        (img@365@01 18 q$a@358@01 q$v@359@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@357@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@358@01))
    ($SortWrappers.IntTo$Snap q$v@359@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@358@01))
    ($SortWrappers.IntTo$Snap q$v@359@01))))
  :qid |quant-u-975|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@363@01 $tag $to $amount) (img@365@01 $tag $to $amount))
      (and
        (<= 0 (inv@362@01 $tag $to $amount))
        (and
          (<=
            (inv@362@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@364@01 $tag $to $amount))
            (and
              (<=
                (inv@364@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@364@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) (inv@362@01 $tag $to $amount))))))))
    (and
      (= 18 $tag)
      (= (inv@362@01 $tag $to $amount) $to)
      (= (inv@364@01 $tag $to $amount) $amount)))
  :pattern ((inv@362@01 $tag $to $amount))
  :pattern ((inv@364@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(declare-const sm@366@01 $PSF<$accessible$withdraw>)
(declare-const s@367@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@367@01 $Snap)) (!
  (=>
    (and
      (and
        (img@363@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second s@367@01)))
        (img@365@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second s@367@01))))
      (and
        (<=
          0
          (inv@362@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second s@367@01))))
        (and
          (<=
            (inv@362@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second s@367@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@364@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second s@367@01))))
            (and
              (<=
                (inv@364@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second s@367@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@364@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second s@367@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) (inv@362@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@367@01))) ($SortWrappers.$SnapToInt ($Snap.second s@367@01))))))))))
    (and
      (not (= s@367@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@366@01  $PSF<$accessible$withdraw>) s@367@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@357@01)) s@367@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@366@01  $PSF<$accessible$withdraw>) s@367@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@357@01)) s@367@01))
  :qid |qp.psmValDef14|)))
(assert (forall ((s@367@01 $Snap)) (!
  ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@357@01)) s@367@01) s@367@01)
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@366@01  $PSF<$accessible$withdraw>) s@367@01))
  :qid |qp.psmResTrgDef15|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@362@01 $tag $to $amount))
      (and
        (<=
          (inv@362@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@364@01 $tag $to $amount))
          (and
            (<=
              (inv@364@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@364@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@280@01 6)) (inv@362@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@366@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@362@01 $tag $to $amount) (inv@364@01 $tag $to $amount))
  :qid |quant-u-976|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@368@01 $Struct)
(assert (=
  self@368@01
  ($struct_set<$Struct> self@280@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@280@01 7))
    $havoc@285@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const l$_beneficiary@369@01 Int)
(declare-const l$_bidding_time@370@01 $Int)
(declare-const $succ@371@01 Bool)
(declare-const l$_beneficiary@372@01 Int)
(declare-const l$_bidding_time@373@01 $Int)
(declare-const $succ@374@01 Bool)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@375@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@376@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@377@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@378@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@379@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@380@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@381@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@382@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@383@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@384@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@385@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@386@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@387@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@388@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@389@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@390@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@391@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@392@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@393@01 $Snap)
(assert (= $t@393@01 ($Snap.combine ($Snap.first $t@393@01) ($Snap.second $t@393@01))))
(assert (= ($Snap.first $t@393@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@379@01 0))))
(assert (= ($Snap.second $t@393@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@394@01 $Snap)
(assert (= $t@394@01 ($Snap.combine ($Snap.first $t@394@01) ($Snap.second $t@394@01))))
(assert (= ($Snap.first $t@394@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@379@01 1))))
(assert (= ($Snap.second $t@394@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@395@01 $Snap)
(assert (= $t@395@01 ($Snap.combine ($Snap.first $t@395@01) ($Snap.second $t@395@01))))
(assert (= ($Snap.first $t@395@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@379@01 2))))
(assert (= ($Snap.second $t@395@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@396@01 $Snap)
(assert (= $t@396@01 ($Snap.combine ($Snap.first $t@396@01) ($Snap.second $t@396@01))))
(assert (= ($Snap.first $t@396@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@379@01 3))))
(assert (= ($Snap.second $t@396@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 ($Snap.combine ($Snap.first $t@397@01) ($Snap.second $t@397@01))))
(assert (= ($Snap.first $t@397@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@379@01 4))))
(assert (= ($Snap.second $t@397@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@398@01 $Snap)
(assert (= $t@398@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@399@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 4
; [then-branch: 189 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 6)), $q0@399@01)) | live]
; [else-branch: 189 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 6)), $q0@399@01) | live]
(push) ; 5
; [then-branch: 189 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 6)), $q0@399@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 189 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 6)), $q0@399@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@399@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@918@11@918@345-aux|)))
(assert (forall (($q0@399@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@399@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@918@11@918@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $t@400@01 $Snap)
(assert (= $t@400@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $q0@401@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@401@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@401@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 6)) $q0@401@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@919@11@919@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 ($Snap.combine ($Snap.first $t@402@01) ($Snap.second $t@402@01))))
(assert (= ($Snap.first $t@402@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@379@01 7))))
(assert (= ($Snap.second $t@402@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@403@01 $Snap)
(assert (= $t@403@01 ($Snap.combine ($Snap.first $t@403@01) ($Snap.second $t@403@01))))
(assert (= ($Snap.first $t@403@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@379@01 8))))
(assert (= ($Snap.second $t@403@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@404@01 $Snap)
(assert (= $t@404@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@405@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 190 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 10)), $q1@405@01)) | live]
; [else-branch: 190 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 10)), $q1@405@01) | live]
(push) ; 5
; [then-branch: 190 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 10)), $q1@405@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 190 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 10)), $q1@405@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@405@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@922@11@922@348-aux|)))
(assert (forall (($q1@405@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@405@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@922@11@922@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@406@01 $Snap)
(assert (= $t@406@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q1@407@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@407@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@407@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 10)) $q1@407@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@923@11@923@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@408@01 $Snap)
(assert (= $t@408@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@409@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 191 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 11)), $q2@409@01)) | live]
; [else-branch: 191 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 11)), $q2@409@01) | live]
(push) ; 5
; [then-branch: 191 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 11)), $q2@409@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 191 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@379@01, 11)), $q2@409@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@409@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@924@11@924@348-aux|)))
(assert (forall (($q2@409@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@409@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@924@11@924@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q2@411@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@411@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@411@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 11)) $q2@411@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@925@11@925@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@413@01 $Snap)
(assert (= $t@413@01 ($Snap.combine ($Snap.first $t@413@01) ($Snap.second $t@413@01))))
(assert (= ($Snap.first $t@413@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@413@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$_beneficiary &&
;   l$_beneficiary <= 1461501637330902918203684832716283019655932542975
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 ($Snap.combine ($Snap.first $t@414@01) ($Snap.second $t@414@01))))
(assert (= ($Snap.first $t@414@01) $Snap.unit))
; [eval] 0 <= l$_beneficiary
(assert (<= 0 l$_beneficiary@372@01))
(assert (= ($Snap.second $t@414@01) $Snap.unit))
; [eval] l$_beneficiary <= 1461501637330902918203684832716283019655932542975
(assert (<= l$_beneficiary@372@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$_bidding_time) &&
;   $unwrap(l$_bidding_time) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@415@01 $Snap)
(assert (= $t@415@01 ($Snap.combine ($Snap.first $t@415@01) ($Snap.second $t@415@01))))
(assert (= ($Snap.first $t@415@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$_bidding_time)
; [eval] $unwrap(l$_bidding_time)
(assert (<= 0 ($unwrap<Int> l$_bidding_time@373@01)))
(assert (= ($Snap.second $t@415@01) $Snap.unit))
; [eval] $unwrap(l$_bidding_time) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$_bidding_time)
(assert (<=
  ($unwrap<Int> l$_bidding_time@373@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@416@01 $Snap)
(assert (= $t@416@01 ($Snap.combine ($Snap.first $t@416@01) ($Snap.second $t@416@01))))
(assert (= ($Snap.first $t@416@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@376@01 0))))
(assert (= ($Snap.second $t@416@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@376@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@417@01 $Snap)
(assert (= $t@417@01 ($Snap.combine ($Snap.first $t@417@01) ($Snap.second $t@417@01))))
(assert (= ($Snap.first $t@417@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@376@01 1))))
(assert (= ($Snap.second $t@417@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@376@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@418@01 $Snap)
(assert (= $t@418@01 ($Snap.combine ($Snap.first $t@418@01) ($Snap.second $t@418@01))))
(assert (= ($Snap.first $t@418@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@376@01 2))))
(assert (= ($Snap.second $t@418@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@376@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@419@01 $Snap)
(assert (= $t@419@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@376@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@420@01 $Snap)
(assert (= $t@420@01 ($Snap.combine ($Snap.first $t@420@01) ($Snap.second $t@420@01))))
(assert (= ($Snap.first $t@420@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@376@01 4))))
(assert (= ($Snap.second $t@420@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@376@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@421@01 $Snap)
(assert (= $t@421@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@376@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@422@01 $Snap)
(assert (= $t@422@01 ($Snap.combine ($Snap.first $t@422@01) ($Snap.second $t@422@01))))
(assert (= ($Snap.first $t@422@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@375@01 0))))
(assert (= ($Snap.second $t@422@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@375@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@423@01 $Snap)
(assert (= $t@423@01 ($Snap.combine ($Snap.first $t@423@01) ($Snap.second $t@423@01))))
(assert (= ($Snap.first $t@423@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))))
(assert (= ($Snap.second $t@423@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@424@01 $Snap)
(assert (= $t@424@01 ($Snap.combine ($Snap.first $t@424@01) ($Snap.second $t@424@01))))
(assert (= ($Snap.first $t@424@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@375@01 2))))
(assert (= ($Snap.second $t@424@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@375@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@425@01 $Snap)
(assert (= $t@425@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@375@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@426@01 $Snap)
(assert (= $t@426@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@375@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, 0, 0, 0, false, ($map_init(0): $Map[Int, Int]),
;   0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]),
;   false)
; [eval] s$struct$self$init(0, 0, 0, 0, 0, false, ($map_init(0): $Map[Int, Int]), 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@427@01 $Struct)
(assert (=
  self@427@01
  (s$struct$self$init<$Struct> 0 0 0 0 0 false ($map_init<$Map<Int~_Int>> 0) 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@428@01 $Snap)
(assert (= $t@428@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@389@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@429@01 $Struct)
(assert (=
  self@429@01
  ($struct_set<$Struct> self@427@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@427@01 7))
    l$havoc@389@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@430@01 $Snap)
(assert (= $t@430@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@375@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(l$_beneficiary != 0)
; [eval] l$_beneficiary != 0
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= l$_beneficiary@372@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= l$_beneficiary@372@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | l$_beneficiary@372@01 == 0 | live]
; [else-branch: 192 | l$_beneficiary@372@01 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 192 | l$_beneficiary@372@01 == 0]
(assert (= l$_beneficiary@372@01 0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | True | live]
; [else-branch: 193 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 193 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ ==> $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
(push) ; 5
; [then-branch: 194 | False | dead]
; [else-branch: 194 | True | live]
(push) ; 6
; [else-branch: 194 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | True | live]
; [else-branch: 195 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 195 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@431@01 $Snap)
(assert (= $t@431@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@391@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@432@01 $Struct)
(assert (=
  self@432@01
  ($struct_set<$Struct> self@379@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@379@01 7))
    l$havoc$1@391@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | True | live]
; [else-branch: 196 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 196 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
(push) ; 7
; [then-branch: 197 | False | dead]
; [else-branch: 197 | True | live]
(push) ; 8
; [else-branch: 197 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
(push) ; 7
; [then-branch: 198 | False | dead]
; [else-branch: 198 | True | live]
(push) ; 8
; [else-branch: 198 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
(push) ; 7
; [then-branch: 199 | False | dead]
; [else-branch: 199 | True | live]
(push) ; 8
; [else-branch: 199 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
(push) ; 7
; [then-branch: 200 | False | dead]
; [else-branch: 200 | True | live]
(push) ; 8
; [else-branch: 200 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(push) ; 7
; [then-branch: 201 | False | dead]
; [else-branch: 201 | True | live]
(push) ; 8
; [else-branch: 201 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
(push) ; 7
; [then-branch: 202 | False | dead]
; [else-branch: 202 | True | live]
(push) ; 8
; [else-branch: 202 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
(push) ; 7
; [then-branch: 203 | False | dead]
; [else-branch: 203 | True | live]
(push) ; 8
; [else-branch: 203 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
(push) ; 7
; [then-branch: 204 | False | dead]
; [else-branch: 204 | True | live]
(push) ; 8
; [else-branch: 204 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==> ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) != 0
(push) ; 7
; [then-branch: 205 | False | dead]
; [else-branch: 205 | True | live]
(push) ; 8
; [else-branch: 205 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
(push) ; 7
; [then-branch: 206 | False | dead]
; [else-branch: 206 | True | live]
(push) ; 8
; [else-branch: 206 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
(push) ; 7
; [then-branch: 207 | False | dead]
; [else-branch: 207 | True | live]
(push) ; 8
; [else-branch: 207 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
(push) ; 7
; [then-branch: 208 | False | dead]
; [else-branch: 208 | True | live]
(push) ; 8
; [else-branch: 208 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
(push) ; 7
; [then-branch: 209 | False | dead]
; [else-branch: 209 | True | live]
(push) ; 8
; [else-branch: 209 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
(push) ; 7
; [then-branch: 210 | False | dead]
; [else-branch: 210 | True | live]
(push) ; 8
; [else-branch: 210 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(push) ; 7
; [then-branch: 211 | False | dead]
; [else-branch: 211 | True | live]
(push) ; 8
; [else-branch: 211 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
(push) ; 7
; [then-branch: 212 | False | dead]
; [else-branch: 212 | True | live]
(push) ; 8
; [else-branch: 212 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(push) ; 7
; [then-branch: 213 | False | dead]
; [else-branch: 213 | True | live]
(push) ; 8
; [else-branch: 213 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(push) ; 7
; [then-branch: 214 | False | dead]
; [else-branch: 214 | True | live]
(push) ; 8
; [else-branch: 214 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] $succ ==> (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(push) ; 7
; [then-branch: 215 | False | dead]
; [else-branch: 215 | True | live]
(push) ; 8
; [else-branch: 215 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 216 | False | dead]
; [else-branch: 216 | True | live]
(push) ; 6
; [else-branch: 216 | True]
(pop) ; 6
(pop) ; 5
; [then-branch: 217 | False | dead]
; [else-branch: 217 | True | live]
(push) ; 5
; [else-branch: 217 | True]
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 218 | False | dead]
; [else-branch: 218 | True | live]
(push) ; 4
; [else-branch: 218 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 192 | l$_beneficiary@372@01 != 0]
(assert (not (= l$_beneficiary@372@01 0)))
(pop) ; 3
; [eval] !!(l$_beneficiary != 0)
; [eval] !(l$_beneficiary != 0)
; [eval] l$_beneficiary != 0
(push) ; 3
(set-option :timeout 10)
(assert (not (= l$_beneficiary@372@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= l$_beneficiary@372@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 219 | l$_beneficiary@372@01 != 0 | live]
; [else-branch: 219 | l$_beneficiary@372@01 == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 219 | l$_beneficiary@372@01 != 0]
(assert (not (= l$_beneficiary@372@01 0)))
; [exec]
; self := ($struct_set(self, 0, l$_beneficiary): $Struct)
; [eval] ($struct_set(self, 0, l$_beneficiary): $Struct)
(declare-const self@433@01 $Struct)
(assert (= self@433@01 ($struct_set<$Struct> self@429@01 0 l$_beneficiary@372@01)))
; [exec]
; self := ($struct_set(self, 1, $unwrap($wrap(($struct_get($struct_loc(block,
;   4)): Int)))): $Struct)
; [eval] ($struct_set(self, 1, $unwrap($wrap(($struct_get($struct_loc(block, 4)): Int)))): $Struct)
; [eval] $unwrap($wrap(($struct_get($struct_loc(block, 4)): Int)))
; [eval] $wrap(($struct_get($struct_loc(block, 4)): Int))
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(declare-const self@434@01 $Struct)
(assert (=
  self@434@01
  ($struct_set<$Struct> self@433@01 1 ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> block@376@01 4)))))))
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time) < 0
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap(l$_bidding_time)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
      ($unwrap<Int> l$_bidding_time@373@01))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | $struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) < 0 | dead]
; [else-branch: 220 | !($struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) < 0) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 220 | !($struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) < 0)]
(assert (not
  (<
    (+
      ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
      ($unwrap<Int> l$_bidding_time@373@01))
    0)))
(pop) ; 4
; [eval] !(($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time) < 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time) < 0
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap(l$_bidding_time)
(push) ; 4
(set-option :timeout 10)
(assert (not (<
  (+
    ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
    ($unwrap<Int> l$_bidding_time@373@01))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
      ($unwrap<Int> l$_bidding_time@373@01))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | !($struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) < 0) | live]
; [else-branch: 221 | $struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 221 | !($struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) < 0)]
(assert (not
  (<
    (+
      ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
      ($unwrap<Int> l$_bidding_time@373@01))
    0)))
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap(l$_bidding_time)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
      ($unwrap<Int> l$_bidding_time@373@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  (+
    ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
    ($unwrap<Int> l$_bidding_time@373@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | $struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 222 | !($struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 222 | $struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
    ($unwrap<Int> l$_bidding_time@373@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | True | live]
; [else-branch: 223 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 223 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ ==> $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
(push) ; 7
; [then-branch: 224 | False | dead]
; [else-branch: 224 | True | live]
(push) ; 8
; [else-branch: 224 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | True | live]
; [else-branch: 225 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 225 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@435@01 $Snap)
(assert (= $t@435@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@391@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@436@01 $Struct)
(assert (=
  self@436@01
  ($struct_set<$Struct> self@379@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@379@01 7))
    l$havoc$1@391@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | True | live]
; [else-branch: 226 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 226 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
(push) ; 9
; [then-branch: 227 | False | dead]
; [else-branch: 227 | True | live]
(push) ; 10
; [else-branch: 227 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
(push) ; 9
; [then-branch: 228 | False | dead]
; [else-branch: 228 | True | live]
(push) ; 10
; [else-branch: 228 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
(push) ; 9
; [then-branch: 229 | False | dead]
; [else-branch: 229 | True | live]
(push) ; 10
; [else-branch: 229 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
(push) ; 9
; [then-branch: 230 | False | dead]
; [else-branch: 230 | True | live]
(push) ; 10
; [else-branch: 230 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(push) ; 9
; [then-branch: 231 | False | dead]
; [else-branch: 231 | True | live]
(push) ; 10
; [else-branch: 231 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
(push) ; 9
; [then-branch: 232 | False | dead]
; [else-branch: 232 | True | live]
(push) ; 10
; [else-branch: 232 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
(push) ; 9
; [then-branch: 233 | False | dead]
; [else-branch: 233 | True | live]
(push) ; 10
; [else-branch: 233 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
(push) ; 9
; [then-branch: 234 | False | dead]
; [else-branch: 234 | True | live]
(push) ; 10
; [else-branch: 234 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==> ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) != 0
(push) ; 9
; [then-branch: 235 | False | dead]
; [else-branch: 235 | True | live]
(push) ; 10
; [else-branch: 235 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
(push) ; 9
; [then-branch: 236 | False | dead]
; [else-branch: 236 | True | live]
(push) ; 10
; [else-branch: 236 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
(push) ; 9
; [then-branch: 237 | False | dead]
; [else-branch: 237 | True | live]
(push) ; 10
; [else-branch: 237 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
(push) ; 9
; [then-branch: 238 | False | dead]
; [else-branch: 238 | True | live]
(push) ; 10
; [else-branch: 238 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
(push) ; 9
; [then-branch: 239 | False | dead]
; [else-branch: 239 | True | live]
(push) ; 10
; [else-branch: 239 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
(push) ; 9
; [then-branch: 240 | False | dead]
; [else-branch: 240 | True | live]
(push) ; 10
; [else-branch: 240 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(push) ; 9
; [then-branch: 241 | False | dead]
; [else-branch: 241 | True | live]
(push) ; 10
; [else-branch: 241 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
(push) ; 9
; [then-branch: 242 | False | dead]
; [else-branch: 242 | True | live]
(push) ; 10
; [else-branch: 242 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(push) ; 9
; [then-branch: 243 | False | dead]
; [else-branch: 243 | True | live]
(push) ; 10
; [else-branch: 243 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(push) ; 9
; [then-branch: 244 | False | dead]
; [else-branch: 244 | True | live]
(push) ; 10
; [else-branch: 244 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] $succ ==> (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(push) ; 9
; [then-branch: 245 | False | dead]
; [else-branch: 245 | True | live]
(push) ; 10
; [else-branch: 245 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
; [eval] !$first_public_state
; [then-branch: 246 | False | dead]
; [else-branch: 246 | True | live]
(push) ; 8
; [else-branch: 246 | True]
(pop) ; 8
(pop) ; 7
; [then-branch: 247 | False | dead]
; [else-branch: 247 | True | live]
(push) ; 7
; [else-branch: 247 | True]
(pop) ; 7
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 248 | False | dead]
; [else-branch: 248 | True | live]
(push) ; 6
; [else-branch: 248 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 222 | !($struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
      ($unwrap<Int> l$_bidding_time@373@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 5
; [eval] !(($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap(l$_bidding_time)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  (+
    ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
    ($unwrap<Int> l$_bidding_time@373@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
      ($unwrap<Int> l$_bidding_time@373@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | !($struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 249 | $struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 249 | !($struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
      ($unwrap<Int> l$_bidding_time@373@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 2, $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int) +
;   $unwrap(l$_bidding_time)))): $Struct)
; [eval] ($struct_set(self, 2, $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time)))): $Struct)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time))
; [eval] ($struct_get($struct_loc(self, 1)): Int) + $unwrap(l$_bidding_time)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap(l$_bidding_time)
(declare-const self@437@01 $Struct)
(assert (=
  self@437@01
  ($struct_set<$Struct> self@434@01 2 ($unwrap<Int> ($wrap<$Int> (+
    ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
    ($unwrap<Int> l$_bidding_time@373@01)))))))
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@390@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@390@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | $out_of_gas@390@01 | live]
; [else-branch: 250 | !($out_of_gas@390@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 250 | $out_of_gas@390@01]
(assert $out_of_gas@390@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | True | live]
; [else-branch: 251 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 251 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ ==> $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
(push) ; 8
; [then-branch: 252 | False | dead]
; [else-branch: 252 | True | live]
(push) ; 9
; [else-branch: 252 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | True | live]
; [else-branch: 253 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 253 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@391@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@439@01 $Struct)
(assert (=
  self@439@01
  ($struct_set<$Struct> self@379@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@379@01 7))
    l$havoc$1@391@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | True | live]
; [else-branch: 254 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 254 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
(push) ; 10
; [then-branch: 255 | False | dead]
; [else-branch: 255 | True | live]
(push) ; 11
; [else-branch: 255 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
(push) ; 10
; [then-branch: 256 | False | dead]
; [else-branch: 256 | True | live]
(push) ; 11
; [else-branch: 256 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
(push) ; 10
; [then-branch: 257 | False | dead]
; [else-branch: 257 | True | live]
(push) ; 11
; [else-branch: 257 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
(push) ; 10
; [then-branch: 258 | False | dead]
; [else-branch: 258 | True | live]
(push) ; 11
; [else-branch: 258 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(push) ; 10
; [then-branch: 259 | False | dead]
; [else-branch: 259 | True | live]
(push) ; 11
; [else-branch: 259 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
(push) ; 10
; [then-branch: 260 | False | dead]
; [else-branch: 260 | True | live]
(push) ; 11
; [else-branch: 260 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
(push) ; 10
; [then-branch: 261 | False | dead]
; [else-branch: 261 | True | live]
(push) ; 11
; [else-branch: 261 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
(push) ; 10
; [then-branch: 262 | False | dead]
; [else-branch: 262 | True | live]
(push) ; 11
; [else-branch: 262 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==> ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) != 0
(push) ; 10
; [then-branch: 263 | False | dead]
; [else-branch: 263 | True | live]
(push) ; 11
; [else-branch: 263 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
(push) ; 10
; [then-branch: 264 | False | dead]
; [else-branch: 264 | True | live]
(push) ; 11
; [else-branch: 264 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
(push) ; 10
; [then-branch: 265 | False | dead]
; [else-branch: 265 | True | live]
(push) ; 11
; [else-branch: 265 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
(push) ; 10
; [then-branch: 266 | False | dead]
; [else-branch: 266 | True | live]
(push) ; 11
; [else-branch: 266 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
(push) ; 10
; [then-branch: 267 | False | dead]
; [else-branch: 267 | True | live]
(push) ; 11
; [else-branch: 267 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
(push) ; 10
; [then-branch: 268 | False | dead]
; [else-branch: 268 | True | live]
(push) ; 11
; [else-branch: 268 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(push) ; 10
; [then-branch: 269 | False | dead]
; [else-branch: 269 | True | live]
(push) ; 11
; [else-branch: 269 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
(push) ; 10
; [then-branch: 270 | False | dead]
; [else-branch: 270 | True | live]
(push) ; 11
; [else-branch: 270 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(push) ; 10
; [then-branch: 271 | False | dead]
; [else-branch: 271 | True | live]
(push) ; 11
; [else-branch: 271 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(push) ; 10
; [then-branch: 272 | False | dead]
; [else-branch: 272 | True | live]
(push) ; 11
; [else-branch: 272 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] $succ ==> (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(push) ; 10
; [then-branch: 273 | False | dead]
; [else-branch: 273 | True | live]
(push) ; 11
; [else-branch: 273 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
; [eval] !$first_public_state
; [then-branch: 274 | False | dead]
; [else-branch: 274 | True | live]
(push) ; 9
; [else-branch: 274 | True]
(pop) ; 9
(pop) ; 8
; [then-branch: 275 | False | dead]
; [else-branch: 275 | True | live]
(push) ; 8
; [else-branch: 275 | True]
(pop) ; 8
(pop) ; 7
; [eval] !$first_public_state
; [then-branch: 276 | False | dead]
; [else-branch: 276 | True | live]
(push) ; 7
; [else-branch: 276 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 250 | !($out_of_gas@390@01)]
(assert (not $out_of_gas@390@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@390@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@390@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | !($out_of_gas@390@01) | live]
; [else-branch: 277 | $out_of_gas@390@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 277 | !($out_of_gas@390@01)]
(assert (not $out_of_gas@390@01))
; [exec]
; label end
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | True | live]
; [else-branch: 278 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 278 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ ==> $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | True | live]
; [else-branch: 279 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 279 | True]
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 10
; [then-branch: 280 | False | live]
; [else-branch: 280 | True | live]
(push) ; 11
; [then-branch: 280 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 280 | True]
; [eval] ($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 12
; [then-branch: 281 | !($struct_get[Int]($struct_loc[Int](msg@375@01, 1)) > $struct_get[Int]($struct_loc[Int](self@437@01, 4))) | live]
; [else-branch: 281 | $struct_get[Int]($struct_loc[Int](msg@375@01, 1)) > $struct_get[Int]($struct_loc[Int](self@437@01, 4)) | live]
(push) ; 13
; [then-branch: 281 | !($struct_get[Int]($struct_loc[Int](msg@375@01, 1)) > $struct_get[Int]($struct_loc[Int](self@437@01, 4)))]
(assert (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))))
(pop) ; 13
(push) ; 13
; [else-branch: 281 | $struct_get[Int]($struct_loc[Int](msg@375@01, 1)) > $struct_get[Int]($struct_loc[Int](self@437@01, 4))]
(assert (>
  ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@437@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@437@01 4))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@437@01 4))))))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@437@01 3)) 0))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 282 | $struct_get[Int]($struct_loc[Int](msg@375@01, 1)) > $struct_get[Int]($struct_loc[Int](self@437@01, 4)) && $struct_get[Int]($struct_loc[Int](self@437@01, 3)) != 0 | dead]
; [else-branch: 282 | !($struct_get[Int]($struct_loc[Int](msg@375@01, 1)) > $struct_get[Int]($struct_loc[Int](self@437@01, 4)) && $struct_get[Int]($struct_loc[Int](self@437@01, 3)) != 0) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 282 | !($struct_get[Int]($struct_loc[Int](msg@375@01, 1)) > $struct_get[Int]($struct_loc[Int](self@437@01, 4)) && $struct_get[Int]($struct_loc[Int](self@437@01, 3)) != 0)]
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@437@01 3)) 0)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@437@01 3)) 0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and
  (or
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))
    (not
      (>
        ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))))
  (not
    (and
      (>
        ($struct_get<Int> ($struct_loc<Int> msg@375@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@437@01 4)))
      (not (= ($struct_get<Int> ($struct_loc<Int> self@437@01 3)) 0))))))
; [eval] !$succ
; [then-branch: 283 | False | dead]
; [else-branch: 283 | True | live]
(push) ; 8
; [else-branch: 283 | True]
(pop) ; 8
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | True | live]
; [else-branch: 284 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 284 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@440@01 $Snap)
(assert (= $t@440@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@391@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@441@01 $Struct)
(assert (=
  self@441@01
  ($struct_set<$Struct> self@437@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@437@01 7))
    l$havoc$1@391@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | True | live]
; [else-branch: 285 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 285 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | True | live]
; [else-branch: 286 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 286 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@441@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@441@01 3)) 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 287 | $struct_get[Int]($struct_loc[Int](self@441@01, 3)) == 0 | live]
; [else-branch: 287 | $struct_get[Int]($struct_loc[Int](self@441@01, 3)) != 0 | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 287 | $struct_get[Int]($struct_loc[Int](self@441@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@441@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@441@01 3)) 0))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@441@01 3)) 0))
(push) ; 10
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@441@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@441@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@441@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@441@01 4)) 0)))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | True | live]
; [else-branch: 288 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 288 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | True | live]
; [else-branch: 289 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 289 | True]
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 290 | $struct_get[Bool]($struct_loc[Int](self@441@01, 5)) | dead]
; [else-branch: 290 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5))) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 290 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5))))
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 291 | True | live]
; [else-branch: 291 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 291 | True]
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 292 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5))) | live]
; [else-branch: 292 | $struct_get[Bool]($struct_loc[Int](self@441@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 292 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@441@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@441@01 7))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@441@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@441@01 7)))))
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | True | live]
; [else-branch: 293 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 293 | True]
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5))) | live]
; [else-branch: 294 | $struct_get[Bool]($struct_loc[Int](self@441@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 294 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@441@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@441@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)))))))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | True | live]
; [else-branch: 295 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 295 | True]
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 12
; [then-branch: 296 | $struct_get[Bool]($struct_loc[Int](self@441@01, 5)) | dead]
; [else-branch: 296 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5))) | live]
(push) ; 13
; [else-branch: 296 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5)))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | True | live]
; [else-branch: 297 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 297 | True]
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | True | live]
; [else-branch: 298 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 298 | True]
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 12
; [then-branch: 299 | $struct_get[Bool]($struct_loc[Int](self@441@01, 5)) | dead]
; [else-branch: 299 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5))) | live]
(push) ; 13
; [else-branch: 299 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5)))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==> ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] $succ ==> ($struct_get($struct_loc(self, 0)): Int) != 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | True | live]
; [else-branch: 300 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 300 | True]
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@441@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@441@01 0)) 0)))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | True | live]
; [else-branch: 301 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 301 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@441@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@441@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))))
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | True | live]
; [else-branch: 302 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 302 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))
  0))
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] $succ ==> !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | True | live]
; [else-branch: 303 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 303 | True]
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5))) | live]
; [else-branch: 304 | $struct_get[Bool]($struct_loc[Int](self@441@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 304 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5)))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@441@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))
    0)))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | True | live]
; [else-branch: 305 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 305 | True]
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 12
; [then-branch: 306 | $struct_get[Bool]($struct_loc[Int](self@441@01, 5)) | dead]
; [else-branch: 306 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5))) | live]
(push) ; 13
; [else-branch: 306 | !($struct_get[Bool]($struct_loc[Int](self@441@01, 5)))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | True | live]
; [else-branch: 307 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 307 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) ($struct_get<Int> ($struct_loc<Int> self@441@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@441@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) ($struct_get<Int> ($struct_loc<Int> self@441@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@441@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) ($struct_get<Int> ($struct_loc<Int> self@441@01 3)))))
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | True | live]
; [else-branch: 308 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 308 | True]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@442@01 Int)
(push) ; 12
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 13
; [then-branch: 309 | !(0 <= q$a@442@01) | live]
; [else-branch: 309 | 0 <= q$a@442@01 | live]
(push) ; 14
; [then-branch: 309 | !(0 <= q$a@442@01)]
(assert (not (<= 0 q$a@442@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 309 | 0 <= q$a@442@01]
(assert (<= 0 q$a@442@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@442@01) (not (<= 0 q$a@442@01))))
(push) ; 13
; [then-branch: 310 | 0 <= q$a@442@01 && q$a@442@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 310 | !(0 <= q$a@442@01 && q$a@442@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 14
; [then-branch: 310 | 0 <= q$a@442@01 && q$a@442@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@442@01)
  (<= q$a@442@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 15
; [then-branch: 311 | q$a@442@01 == $struct_get[Int]($struct_loc[Int](self@441@01, 3)) | live]
; [else-branch: 311 | q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 3)) | live]
(push) ; 16
; [then-branch: 311 | q$a@442@01 == $struct_get[Int]($struct_loc[Int](self@441@01, 3))]
(assert (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
(pop) ; 16
(push) ; 16
; [else-branch: 311 | q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 3))]
(assert (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
  (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3)))))
(push) ; 15
; [then-branch: 312 | q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 3)) && q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0)) | live]
; [else-branch: 312 | !(q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 3)) && q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0))) | live]
(push) ; 16
; [then-branch: 312 | q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 3)) && q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0))]
(assert (and
  (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
  (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 16
(push) ; 16
; [else-branch: 312 | !(q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 3)) && q$a@442@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0)))]
(assert (not
  (and
    (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
    (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
      (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))
  (and
    (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
    (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))))))
(pop) ; 14
(push) ; 14
; [else-branch: 310 | !(0 <= q$a@442@01 && q$a@442@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@442@01)
    (<= q$a@442@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@442@01)
    (<= q$a@442@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@442@01)
    (<= q$a@442@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
      (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
          (not
            (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))
      (and
        (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
        (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@442@01)
      (<= q$a@442@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@442@01)
    (<= q$a@442@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@442@01 Int)) (!
  (and
    (or (<= 0 q$a@442@01) (not (<= 0 q$a@442@01)))
    (=>
      (and
        (<= 0 q$a@442@01)
        (<= q$a@442@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@442@01)
        (<= q$a@442@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
          (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@442@01
                  ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
              (not
                (=
                  q$a@442@01
                  ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))
          (and
            (not
              (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
            (not
              (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@442@01)
          (<= q$a@442@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@442@01)
        (<= q$a@442@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1018@21@1018@523-aux|)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((q$a@442@01 Int)) (!
  (and
    (or (<= 0 q$a@442@01) (not (<= 0 q$a@442@01)))
    (=>
      (and
        (<= 0 q$a@442@01)
        (<= q$a@442@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@442@01)
        (<= q$a@442@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
          (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@442@01
                  ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
              (not
                (=
                  q$a@442@01
                  ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))
          (and
            (not
              (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
            (not
              (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@442@01)
          (<= q$a@442@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@442@01)
        (<= q$a@442@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1018@21@1018@523-aux|)))
(push) ; 10
(assert (not (forall ((q$a@442@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@442@01)
        (<= q$a@442@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
        (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) q$a@442@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@442@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@442@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1018@21@1018@523|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@442@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@442@01)
        (<= q$a@442@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 3))))
        (not (= q$a@442@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) q$a@442@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@442@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@442@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1018@21@1018@523|)))
; [exec]
; assert $succ ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 313 | True | live]
; [else-branch: 313 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 313 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) 0)
  0))
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | True | live]
; [else-branch: 314 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 314 | True]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@443@01 Int)
(push) ; 12
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 13
; [then-branch: 315 | !(0 <= q$a@443@01) | live]
; [else-branch: 315 | 0 <= q$a@443@01 | live]
(push) ; 14
; [then-branch: 315 | !(0 <= q$a@443@01)]
(assert (not (<= 0 q$a@443@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 315 | 0 <= q$a@443@01]
(assert (<= 0 q$a@443@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@443@01) (not (<= 0 q$a@443@01))))
(push) ; 13
; [then-branch: 316 | 0 <= q$a@443@01 && q$a@443@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 316 | !(0 <= q$a@443@01 && q$a@443@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 14
; [then-branch: 316 | 0 <= q$a@443@01 && q$a@443@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@443@01)
  (<= q$a@443@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 15
; [then-branch: 317 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 6)), q$a@443@01) != 0 | live]
; [else-branch: 317 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 6)), q$a@443@01) == 0 | live]
(push) ; 16
; [then-branch: 317 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 6)), q$a@443@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 16
(push) ; 16
; [else-branch: 317 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 6)), q$a@443@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
  0))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
      0))))
(pop) ; 14
(push) ; 14
; [else-branch: 316 | !(0 <= q$a@443@01 && q$a@443@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@443@01)
    (<= q$a@443@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@443@01)
    (<= q$a@443@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@443@01)
    (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@443@01)
      (<= q$a@443@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@443@01)
    (<= q$a@443@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@443@01 Int)) (!
  (and
    (or (<= 0 q$a@443@01) (not (<= 0 q$a@443@01)))
    (=>
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@443@01)
          (<= q$a@443@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1020@21@1020@353-aux|)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((q$a@443@01 Int)) (!
  (and
    (or (<= 0 q$a@443@01) (not (<= 0 q$a@443@01)))
    (=>
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@443@01)
          (<= q$a@443@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1020@21@1020@353-aux|)))
(push) ; 10
(assert (not (forall ((q$a@443@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@443@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1020@21@1020@353|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@443@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@443@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1020@21@1020@353|)))
; [exec]
; assert $succ ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] $succ ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | True | live]
; [else-branch: 318 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 318 | True]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@444@01 Int)
(push) ; 12
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 13
; [then-branch: 319 | !(0 <= q$a@444@01) | live]
; [else-branch: 319 | 0 <= q$a@444@01 | live]
(push) ; 14
; [then-branch: 319 | !(0 <= q$a@444@01)]
(assert (not (<= 0 q$a@444@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 319 | 0 <= q$a@444@01]
(assert (<= 0 q$a@444@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@444@01) (not (<= 0 q$a@444@01))))
(push) ; 13
; [then-branch: 320 | 0 <= q$a@444@01 && q$a@444@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 320 | !(0 <= q$a@444@01 && q$a@444@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 14
; [then-branch: 320 | 0 <= q$a@444@01 && q$a@444@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@444@01)
  (<= q$a@444@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 15
; [then-branch: 321 | q$a@444@01 == $struct_get[Int]($struct_loc[Int](self@441@01, 0)) | live]
; [else-branch: 321 | q$a@444@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0)) | live]
(push) ; 16
; [then-branch: 321 | q$a@444@01 == $struct_get[Int]($struct_loc[Int](self@441@01, 0))]
(assert (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
(pop) ; 16
(push) ; 16
; [else-branch: 321 | q$a@444@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0))]
(assert (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
  (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0)))))
(push) ; 15
; [then-branch: 322 | q$a@444@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 11)), q$a@444@01) == 0 | live]
; [else-branch: 322 | !(q$a@444@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 11)), q$a@444@01) == 0) | live]
(push) ; 16
; [then-branch: 322 | q$a@444@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 11)), q$a@444@01) == 0]
(assert (and
  (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 16
(push) ; 16
; [else-branch: 322 | !(q$a@444@01 != $struct_get[Int]($struct_loc[Int](self@441@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 11)), q$a@444@01) == 0)]
(assert (not
  (and
    (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
      0))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
        0)))
  (and
    (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
      0))))
(pop) ; 14
(push) ; 14
; [else-branch: 320 | !(0 <= q$a@444@01 && q$a@444@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@444@01)
    (<= q$a@444@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@444@01)
    (<= q$a@444@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@444@01)
    (<= q$a@444@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
      (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
            0)))
      (and
        (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@444@01)
      (<= q$a@444@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@444@01)
    (<= q$a@444@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@444@01 Int)) (!
  (and
    (or (<= 0 q$a@444@01) (not (<= 0 q$a@444@01)))
    (=>
      (and
        (<= 0 q$a@444@01)
        (<= q$a@444@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@444@01)
        (<= q$a@444@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
          (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@444@01
                  ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
                0)))
          (and
            (not
              (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@444@01)
          (<= q$a@444@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@444@01)
        (<= q$a@444@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1021@21@1021@406-aux|)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((q$a@444@01 Int)) (!
  (and
    (or (<= 0 q$a@444@01) (not (<= 0 q$a@444@01)))
    (=>
      (and
        (<= 0 q$a@444@01)
        (<= q$a@444@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@444@01)
        (<= q$a@444@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
          (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@444@01
                  ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
                0)))
          (and
            (not
              (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@444@01)
          (<= q$a@444@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@444@01)
        (<= q$a@444@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1021@21@1021@406-aux|)))
(push) ; 10
(assert (not (forall ((q$a@444@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@444@01)
        (<= q$a@444@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) q$a@444@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1021@21@1021@406|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@444@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@444@01)
        (<= q$a@444@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@444@01 ($struct_get<Int> ($struct_loc<Int> self@441@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 10)) q$a@444@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 11)) q$a@444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1021@21@1021@406|)))
; [exec]
; assert $succ ==>
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] $succ ==> (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | True | live]
; [else-branch: 323 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 323 | True]
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@445@01 Int)
(declare-const q$v@446@01 Int)
(push) ; 12
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 13
; [then-branch: 324 | !(0 <= q$a@445@01) | live]
; [else-branch: 324 | 0 <= q$a@445@01 | live]
(push) ; 14
; [then-branch: 324 | !(0 <= q$a@445@01)]
(assert (not (<= 0 q$a@445@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 324 | 0 <= q$a@445@01]
(assert (<= 0 q$a@445@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 15
; [then-branch: 325 | !(q$a@445@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 325 | q$a@445@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 16
; [then-branch: 325 | !(q$a@445@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@445@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 16
(push) ; 16
; [else-branch: 325 | q$a@445@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@445@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 17
; [then-branch: 326 | !(0 <= q$v@446@01) | live]
; [else-branch: 326 | 0 <= q$v@446@01 | live]
(push) ; 18
; [then-branch: 326 | !(0 <= q$v@446@01)]
(assert (not (<= 0 q$v@446@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 326 | 0 <= q$v@446@01]
(assert (<= 0 q$v@446@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@446@01) (not (<= 0 q$v@446@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@446@01) (not (<= 0 q$v@446@01))))))
(assert (or
  (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@445@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@445@01)
  (and
    (<= 0 q$a@445@01)
    (=>
      (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@446@01) (not (<= 0 q$v@446@01)))))
    (or
      (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@445@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@445@01) (not (<= 0 q$a@445@01))))
(push) ; 13
; [then-branch: 327 | 0 <= q$a@445@01 && q$a@445@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@446@01 && q$v@446@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 327 | !(0 <= q$a@445@01 && q$a@445@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@446@01 && q$v@446@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 14
; [then-branch: 327 | 0 <= q$a@445@01 && q$a@445@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@446@01 && q$v@446@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@445@01)
  (and
    (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@446@01)
      (<=
        q$v@446@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 15
; [then-branch: 328 | q$v@446@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 6)), q$a@445@01) | live]
; [else-branch: 328 | q$v@446@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 6)), q$a@445@01) | live]
(push) ; 16
; [then-branch: 328 | q$v@446@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 6)), q$a@445@01)]
(assert (=
  q$v@446@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 328 | q$v@446@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@441@01, 6)), q$a@445@01)]
(assert (not
  (=
    q$v@446@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@446@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01)))
  (=
    q$v@446@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 327 | !(0 <= q$a@445@01 && q$a@445@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@446@01 && q$v@446@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@445@01)
    (and
      (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@446@01)
        (<=
          q$v@446@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@445@01)
    (and
      (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@446@01)
        (<=
          q$v@446@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@445@01)
    (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@446@01)
    (<=
      q$v@446@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@446@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01)))
      (=
        q$v@446@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@445@01)
      (and
        (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@446@01)
          (<=
            q$v@446@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@445@01)
    (and
      (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@446@01)
        (<=
          q$v@446@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@447@01 $PSF<$accessible$withdraw>)
(declare-const s@448@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@445@01 Int) (q$v@446@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@445@01)
      (and
        (<= 0 q$a@445@01)
        (=>
          (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@446@01) (not (<= 0 q$v@446@01)))))
        (or
          (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@445@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@445@01) (not (<= 0 q$a@445@01)))
    (=>
      (and
        (<= 0 q$a@445@01)
        (and
          (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@446@01)
            (<=
              q$v@446@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@445@01)
        (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@446@01)
        (<=
          q$v@446@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@446@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01)))
          (=
            q$v@446@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01)))))
    (or
      (not
        (and
          (<= 0 q$a@445@01)
          (and
            (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@446@01)
              (<=
                q$v@446@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@445@01)
        (and
          (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@446@01)
            (<=
              q$v@446@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@447@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@445@01))
    ($SortWrappers.IntTo$Snap q$v@446@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@445@01))
    ($SortWrappers.IntTo$Snap q$v@446@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1022@21@1022@354-aux|)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((q$a@445@01 Int) (q$v@446@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@445@01)
      (and
        (<= 0 q$a@445@01)
        (=>
          (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@446@01) (not (<= 0 q$v@446@01)))))
        (or
          (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@445@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@445@01) (not (<= 0 q$a@445@01)))
    (=>
      (and
        (<= 0 q$a@445@01)
        (and
          (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@446@01)
            (<=
              q$v@446@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@445@01)
        (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@446@01)
        (<=
          q$v@446@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@446@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01)))
          (=
            q$v@446@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@441@01 6)) q$a@445@01)))))
    (or
      (not
        (and
          (<= 0 q$a@445@01)
          (and
            (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@446@01)
              (<=
                q$v@446@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@445@01)
        (and
          (<= q$a@445@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@446@01)
            (<=
              q$v@446@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@447@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@445@01))
    ($SortWrappers.IntTo$Snap q$v@446@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@445@01))
    ($SortWrappers.IntTo$Snap q$v@446@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1022@21@1022@354-aux|)))
(pop) ; 9
; [eval] !$first_public_state
; [then-branch: 329 | False | dead]
; [else-branch: 329 | True | live]
(push) ; 9
; [else-branch: 329 | True]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !$first_public_state
; [then-branch: 330 | False | dead]
; [else-branch: 330 | True | live]
(push) ; 7
; [else-branch: 330 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 277 | $out_of_gas@390@01]
(assert $out_of_gas@390@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 249 | $struct_get[Int]($struct_loc[Int](self@434@01, 1)) + $unwrap[Int](l$_bidding_time@373@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($struct_get<Int> ($struct_loc<Int> self@434@01 1))
    ($unwrap<Int> l$_bidding_time@373@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 219 | l$_beneficiary@372@01 == 0]
(assert (= l$_beneficiary@372@01 0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$bid ----------
(declare-const $succ@449@01 Bool)
(declare-const $succ@450@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@451@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@452@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@453@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@454@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@455@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@456@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@457@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@458@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@459@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@460@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@461@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@462@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@463@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@464@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@465@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@466@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 ($Snap.combine ($Snap.first $t@467@01) ($Snap.second $t@467@01))))
(assert (= ($Snap.first $t@467@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
(assert (= ($Snap.second $t@467@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@468@01 $Snap)
(assert (= $t@468@01 ($Snap.combine ($Snap.first $t@468@01) ($Snap.second $t@468@01))))
(assert (= ($Snap.first $t@468@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@455@01 1))))
(assert (= ($Snap.second $t@468@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@455@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 ($Snap.combine ($Snap.first $t@469@01) ($Snap.second $t@469@01))))
(assert (= ($Snap.first $t@469@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@455@01 2))))
(assert (= ($Snap.second $t@469@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@455@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 ($Snap.combine ($Snap.first $t@470@01) ($Snap.second $t@470@01))))
(assert (= ($Snap.first $t@470@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
(assert (= ($Snap.second $t@470@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@455@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 ($Snap.combine ($Snap.first $t@471@01) ($Snap.second $t@471@01))))
(assert (= ($Snap.first $t@471@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
(assert (= ($Snap.second $t@471@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@472@01 $Snap)
(assert (= $t@472@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@473@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 4
; [then-branch: 331 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), $q0@473@01)) | live]
; [else-branch: 331 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), $q0@473@01) | live]
(push) ; 5
; [then-branch: 331 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), $q0@473@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 331 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), $q0@473@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@473@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1049@11@1049@345-aux|)))
(assert (forall (($q0@473@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@473@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1049@11@1049@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $q0@475@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@475@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@475@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) $q0@475@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1050@11@1050@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 ($Snap.combine ($Snap.first $t@476@01) ($Snap.second $t@476@01))))
(assert (= ($Snap.first $t@476@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@455@01 7))))
(assert (= ($Snap.second $t@476@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@455@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 ($Snap.combine ($Snap.first $t@477@01) ($Snap.second $t@477@01))))
(assert (= ($Snap.first $t@477@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@455@01 8))))
(assert (= ($Snap.second $t@477@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@455@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@478@01 $Snap)
(assert (= $t@478@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@479@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 332 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 10)), $q1@479@01)) | live]
; [else-branch: 332 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 10)), $q1@479@01) | live]
(push) ; 5
; [then-branch: 332 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 10)), $q1@479@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 332 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 10)), $q1@479@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@479@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1053@11@1053@348-aux|)))
(assert (forall (($q1@479@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@479@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1053@11@1053@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@480@01 $Snap)
(assert (= $t@480@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q1@481@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@481@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@481@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) $q1@481@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1054@11@1054@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@482@01 $Snap)
(assert (= $t@482@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@483@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 333 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 11)), $q2@483@01)) | live]
; [else-branch: 333 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 11)), $q2@483@01) | live]
(push) ; 5
; [then-branch: 333 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 11)), $q2@483@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 333 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 11)), $q2@483@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@483@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1055@11@1055@348-aux|)))
(assert (forall (($q2@483@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@483@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1055@11@1055@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@484@01 $Snap)
(assert (= $t@484@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q2@485@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@485@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@485@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) $q2@485@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1056@11@1056@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@486@01 $Snap)
(assert (= $t@486@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@455@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@487@01 $Snap)
(assert (= $t@487@01 ($Snap.combine ($Snap.first $t@487@01) ($Snap.second $t@487@01))))
(assert (= ($Snap.first $t@487@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@487@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@488@01 $Snap)
(assert (= $t@488@01 ($Snap.combine ($Snap.first $t@488@01) ($Snap.second $t@488@01))))
(assert (= ($Snap.first $t@488@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@452@01 0))))
(assert (= ($Snap.second $t@488@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@452@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@489@01 $Snap)
(assert (= $t@489@01 ($Snap.combine ($Snap.first $t@489@01) ($Snap.second $t@489@01))))
(assert (= ($Snap.first $t@489@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@452@01 1))))
(assert (= ($Snap.second $t@489@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@452@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@490@01 $Snap)
(assert (= $t@490@01 ($Snap.combine ($Snap.first $t@490@01) ($Snap.second $t@490@01))))
(assert (= ($Snap.first $t@490@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@452@01 2))))
(assert (= ($Snap.second $t@490@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@452@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@491@01 $Snap)
(assert (= $t@491@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@452@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@492@01 $Snap)
(assert (= $t@492@01 ($Snap.combine ($Snap.first $t@492@01) ($Snap.second $t@492@01))))
(assert (= ($Snap.first $t@492@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@452@01 4))))
(assert (= ($Snap.second $t@492@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@493@01 $Snap)
(assert (= $t@493@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@452@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@494@01 $Snap)
(assert (= $t@494@01 ($Snap.combine ($Snap.first $t@494@01) ($Snap.second $t@494@01))))
(assert (= ($Snap.first $t@494@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))))
(assert (= ($Snap.second $t@494@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@495@01 $Snap)
(assert (= $t@495@01 ($Snap.combine ($Snap.first $t@495@01) ($Snap.second $t@495@01))))
(assert (= ($Snap.first $t@495@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))))
(assert (= ($Snap.second $t@495@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@496@01 $Snap)
(assert (= $t@496@01 ($Snap.combine ($Snap.first $t@496@01) ($Snap.second $t@496@01))))
(assert (= ($Snap.first $t@496@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@451@01 2))))
(assert (= ($Snap.second $t@496@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@497@01 $Snap)
(assert (= $t@497@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@498@01 $Snap)
(assert (= $t@498@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@451@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@499@01 $Snap)
(assert (= $t@499@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@500@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
(declare-const $t@501@01 $Snap)
(assert (= $t@501@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@455@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@455@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 334 | $struct_get[Int]($struct_loc[Int](self@455@01, 3)) == 0 | live]
; [else-branch: 334 | $struct_get[Int]($struct_loc[Int](self@455@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 334 | $struct_get[Int]($struct_loc[Int](self@455@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@455@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 334 | $struct_get[Int]($struct_loc[Int](self@455@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@455@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@455@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@455@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@455@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@455@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@502@01 $Snap)
(assert (= $t@502@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
(declare-const $t@503@01 $Snap)
(assert (= $t@503@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 335 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
; [else-branch: 335 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 335 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 335 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@504@01 $Snap)
(assert (= $t@504@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 336 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
; [else-branch: 336 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 336 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 336 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(declare-const $t@505@01 $Snap)
(assert (= $t@505@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 337 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
; [else-branch: 337 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 337 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 337 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@506@01 $Snap)
(assert (= $t@506@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 338 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
; [else-branch: 338 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 338 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 338 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@507@01 $Snap)
(assert (= $t@507@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
(declare-const $t@508@01 $Snap)
(assert (= $t@508@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 339 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
; [else-branch: 339 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 339 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 340 | False | live]
; [else-branch: 340 | True | live]
(push) ; 6
; [then-branch: 340 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 340 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 339 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) != 0
(declare-const $t@509@01 $Snap)
(assert (= $t@509@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@455@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@510@01 $Snap)
(assert (= $t@510@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@455@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@511@01 $Snap)
(assert (= $t@511@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@512@01 $Snap)
(assert (= $t@512@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 341 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
; [else-branch: 341 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 341 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 341 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@513@01 $Snap)
(assert (= $t@513@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 342 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
; [else-branch: 342 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 342 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 342 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
(declare-const $t@514@01 $Snap)
(assert (= $t@514@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) ($struct_get<Int> ($struct_loc<Int> self@455@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) ($struct_get<Int> ($struct_loc<Int> self@455@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@515@01 $Snap)
(assert (= $t@515@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@516@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 343 | !(0 <= q$a@516@01) | live]
; [else-branch: 343 | 0 <= q$a@516@01 | live]
(push) ; 5
; [then-branch: 343 | !(0 <= q$a@516@01)]
(assert (not (<= 0 q$a@516@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 343 | 0 <= q$a@516@01]
(assert (<= 0 q$a@516@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@516@01) (not (<= 0 q$a@516@01))))
(push) ; 4
; [then-branch: 344 | 0 <= q$a@516@01 && q$a@516@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 344 | !(0 <= q$a@516@01 && q$a@516@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 344 | 0 <= q$a@516@01 && q$a@516@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@516@01)
  (<= q$a@516@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 345 | q$a@516@01 == $struct_get[Int]($struct_loc[Int](self@455@01, 3)) | live]
; [else-branch: 345 | q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 3)) | live]
(push) ; 7
; [then-branch: 345 | q$a@516@01 == $struct_get[Int]($struct_loc[Int](self@455@01, 3))]
(assert (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 345 | q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 3))]
(assert (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
  (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3)))))
(push) ; 6
; [then-branch: 346 | q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 3)) && q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0)) | live]
; [else-branch: 346 | !(q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 3)) && q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0))) | live]
(push) ; 7
; [then-branch: 346 | q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 3)) && q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0))]
(assert (and
  (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
  (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 346 | !(q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 3)) && q$a@516@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0)))]
(assert (not
  (and
    (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
    (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
      (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))))
  (and
    (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
    (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 344 | !(0 <= q$a@516@01 && q$a@516@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@516@01)
    (<= q$a@516@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@516@01)
    (<= q$a@516@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@516@01)
    (<= q$a@516@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
      (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
          (not
            (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))))
      (and
        (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
        (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@516@01)
      (<= q$a@516@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@516@01)
    (<= q$a@516@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@516@01 Int)) (!
  (and
    (or (<= 0 q$a@516@01) (not (<= 0 q$a@516@01)))
    (=>
      (and
        (<= 0 q$a@516@01)
        (<= q$a@516@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@516@01)
        (<= q$a@516@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
          (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@516@01
                  ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
              (not
                (=
                  q$a@516@01
                  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))))
          (and
            (not
              (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
            (not
              (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@516@01)
          (<= q$a@516@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@516@01)
        (<= q$a@516@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@516@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1089@11@1089@513-aux|)))
(assert (forall ((q$a@516@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@516@01)
        (<= q$a@516@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))
        (not (= q$a@516@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) q$a@516@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@516@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@516@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@516@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1089@11@1089@513|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@517@01 $Snap)
(assert (= $t@517@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@518@01 $Snap)
(assert (= $t@518@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@519@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 347 | !(0 <= q$a@519@01) | live]
; [else-branch: 347 | 0 <= q$a@519@01 | live]
(push) ; 5
; [then-branch: 347 | !(0 <= q$a@519@01)]
(assert (not (<= 0 q$a@519@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 347 | 0 <= q$a@519@01]
(assert (<= 0 q$a@519@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@519@01) (not (<= 0 q$a@519@01))))
(push) ; 4
; [then-branch: 348 | 0 <= q$a@519@01 && q$a@519@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 348 | !(0 <= q$a@519@01 && q$a@519@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 348 | 0 <= q$a@519@01 && q$a@519@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@519@01)
  (<= q$a@519@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 6
; [then-branch: 349 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), q$a@519@01) != 0 | live]
; [else-branch: 349 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), q$a@519@01) == 0 | live]
(push) ; 7
; [then-branch: 349 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), q$a@519@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 349 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), q$a@519@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 348 | !(0 <= q$a@519@01 && q$a@519@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@519@01)
    (<= q$a@519@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@519@01)
    (<= q$a@519@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@519@01)
    (<= q$a@519@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@519@01)
      (<= q$a@519@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@519@01)
    (<= q$a@519@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@519@01 Int)) (!
  (and
    (or (<= 0 q$a@519@01) (not (<= 0 q$a@519@01)))
    (=>
      (and
        (<= 0 q$a@519@01)
        (<= q$a@519@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@519@01)
        (<= q$a@519@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@519@01)
          (<= q$a@519@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@519@01)
        (<= q$a@519@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1091@11@1091@343-aux|)))
(assert (forall ((q$a@519@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@519@01)
        (<= q$a@519@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@519@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@519@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1091@11@1091@343|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@520@01 $Snap)
(assert (= $t@520@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@521@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 350 | !(0 <= q$a@521@01) | live]
; [else-branch: 350 | 0 <= q$a@521@01 | live]
(push) ; 5
; [then-branch: 350 | !(0 <= q$a@521@01)]
(assert (not (<= 0 q$a@521@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 350 | 0 <= q$a@521@01]
(assert (<= 0 q$a@521@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@521@01) (not (<= 0 q$a@521@01))))
(push) ; 4
; [then-branch: 351 | 0 <= q$a@521@01 && q$a@521@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 351 | !(0 <= q$a@521@01 && q$a@521@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 351 | 0 <= q$a@521@01 && q$a@521@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@521@01)
  (<= q$a@521@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
; [then-branch: 352 | q$a@521@01 == $struct_get[Int]($struct_loc[Int](self@455@01, 0)) | live]
; [else-branch: 352 | q$a@521@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0)) | live]
(push) ; 7
; [then-branch: 352 | q$a@521@01 == $struct_get[Int]($struct_loc[Int](self@455@01, 0))]
(assert (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 352 | q$a@521@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0))]
(assert (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
  (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
(push) ; 6
; [then-branch: 353 | q$a@521@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 11)), q$a@521@01) == 0 | live]
; [else-branch: 353 | !(q$a@521@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 11)), q$a@521@01) == 0) | live]
(push) ; 7
; [then-branch: 353 | q$a@521@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 11)), q$a@521@01) == 0]
(assert (and
  (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 353 | !(q$a@521@01 != $struct_get[Int]($struct_loc[Int](self@455@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 11)), q$a@521@01) == 0)]
(assert (not
  (and
    (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
        0)))
  (and
    (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 351 | !(0 <= q$a@521@01 && q$a@521@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@521@01)
    (<= q$a@521@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@521@01)
    (<= q$a@521@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@521@01)
    (<= q$a@521@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
      (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
            0)))
      (and
        (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@521@01)
      (<= q$a@521@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@521@01)
    (<= q$a@521@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@521@01 Int)) (!
  (and
    (or (<= 0 q$a@521@01) (not (<= 0 q$a@521@01)))
    (=>
      (and
        (<= 0 q$a@521@01)
        (<= q$a@521@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@521@01)
        (<= q$a@521@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
          (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@521@01
                  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
                0)))
          (and
            (not
              (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@521@01)
          (<= q$a@521@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@521@01)
        (<= q$a@521@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1092@11@1092@396-aux|)))
(assert (forall ((q$a@521@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@521@01)
        (<= q$a@521@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@521@01 ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 10)) q$a@521@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 11)) q$a@521@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1092@11@1092@396|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
(declare-const $t@522@01 $Snap)
(assert (= $t@522@01 $Snap.unit))
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@523@01 Int)
(declare-const q$v@524@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 354 | !(0 <= q$a@523@01) | live]
; [else-branch: 354 | 0 <= q$a@523@01 | live]
(push) ; 5
; [then-branch: 354 | !(0 <= q$a@523@01)]
(assert (not (<= 0 q$a@523@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 354 | 0 <= q$a@523@01]
(assert (<= 0 q$a@523@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 355 | !(q$a@523@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 355 | q$a@523@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 355 | !(q$a@523@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@523@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 355 | q$a@523@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@523@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 356 | !(0 <= q$v@524@01) | live]
; [else-branch: 356 | 0 <= q$v@524@01 | live]
(push) ; 9
; [then-branch: 356 | !(0 <= q$v@524@01)]
(assert (not (<= 0 q$v@524@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 356 | 0 <= q$v@524@01]
(assert (<= 0 q$v@524@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@524@01) (not (<= 0 q$v@524@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@524@01) (not (<= 0 q$v@524@01))))))
(assert (or
  (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@523@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@523@01)
  (and
    (<= 0 q$a@523@01)
    (=>
      (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@524@01) (not (<= 0 q$v@524@01)))))
    (or
      (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@523@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@523@01) (not (<= 0 q$a@523@01))))
(push) ; 4
; [then-branch: 357 | 0 <= q$a@523@01 && q$a@523@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@524@01 && q$v@524@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 357 | !(0 <= q$a@523@01 && q$a@523@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@524@01 && q$v@524@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 357 | 0 <= q$a@523@01 && q$a@523@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@524@01 && q$v@524@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@523@01)
  (and
    (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@524@01)
      (<=
        q$v@524@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 6
; [then-branch: 358 | q$v@524@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), q$a@523@01) | live]
; [else-branch: 358 | q$v@524@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), q$a@523@01) | live]
(push) ; 7
; [then-branch: 358 | q$v@524@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), q$a@523@01)]
(assert (=
  q$v@524@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@523@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 358 | q$v@524@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@455@01, 6)), q$a@523@01)]
(assert (not
  (=
    q$v@524@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@523@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@524@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@523@01)))
  (=
    q$v@524@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@523@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 357 | !(0 <= q$a@523@01 && q$a@523@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@524@01 && q$v@524@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@523@01)
    (and
      (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@524@01)
        (<=
          q$v@524@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@523@01)
    (and
      (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@524@01)
        (<=
          q$v@524@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@523@01)
    (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@524@01)
    (<=
      q$v@524@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@524@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@523@01)))
      (=
        q$v@524@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@523@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@523@01)
      (and
        (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@524@01)
          (<=
            q$v@524@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@523@01)
    (and
      (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@524@01)
        (<=
          q$v@524@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@525@01 $PSF<$accessible$withdraw>)
(declare-const s@526@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@523@01 Int) (q$v@524@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@523@01)
      (and
        (<= 0 q$a@523@01)
        (=>
          (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@524@01) (not (<= 0 q$v@524@01)))))
        (or
          (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@523@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@523@01) (not (<= 0 q$a@523@01)))
    (=>
      (and
        (<= 0 q$a@523@01)
        (and
          (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@524@01)
            (<=
              q$v@524@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@523@01)
        (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@524@01)
        (<=
          q$v@524@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@524@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@523@01)))
          (=
            q$v@524@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@455@01 6)) q$a@523@01)))))
    (or
      (not
        (and
          (<= 0 q$a@523@01)
          (and
            (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@524@01)
              (<=
                q$v@524@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@523@01)
        (and
          (<= q$a@523@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@524@01)
            (<=
              q$v@524@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@525@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@523@01))
    ($SortWrappers.IntTo$Snap q$v@524@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@523@01))
    ($SortWrappers.IntTo$Snap q$v@524@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1093@11@1093@344-aux|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@527@01 $Struct)
(assert (=
  self@527@01
  ($struct_set<$Struct> self@455@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@455@01 7))
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))))))
; [exec]
; self := ($struct_set(self, 11, ($map_set(($struct_get($struct_loc(self, 11)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 11, ($map_set(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@528@01 $Struct)
(assert (=
  self@528@01
  ($struct_set<$Struct> self@527@01 11 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 11)) ($struct_get<Int> ($struct_loc<Int> msg@451@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 11)) ($struct_get<Int> ($struct_loc<Int> msg@451@01 0)))
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1)))))))
; [eval] !(($struct_get($struct_loc(block, 4)): Int) < ($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(block, 4)): Int) < ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 2))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | !($struct_get[Int]($struct_loc[Int](block@452@01, 4)) < $struct_get[Int]($struct_loc[Int](self@528@01, 2))) | live]
; [else-branch: 359 | $struct_get[Int]($struct_loc[Int](block@452@01, 4)) < $struct_get[Int]($struct_loc[Int](self@528@01, 2)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 359 | !($struct_get[Int]($struct_loc[Int](block@452@01, 4)) < $struct_get[Int]($struct_loc[Int](self@528@01, 2)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 2)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
(push) ; 4
; [then-branch: 360 | False | dead]
; [else-branch: 360 | True | live]
(push) ; 5
; [else-branch: 360 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 4
; [then-branch: 361 | False | dead]
; [else-branch: 361 | True | live]
(push) ; 5
; [else-branch: 361 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | True | live]
; [else-branch: 362 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 362 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@529@01 $Snap)
(assert (= $t@529@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@465@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@530@01 $Struct)
(assert (=
  self@530@01
  ($struct_set<$Struct> self@455@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@455@01 7))
    l$havoc@465@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@530@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@530@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | $struct_get[Int]($struct_loc[Int](self@530@01, 3)) == 0 | live]
; [else-branch: 363 | $struct_get[Int]($struct_loc[Int](self@530@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 363 | $struct_get[Int]($struct_loc[Int](self@530@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@530@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 6
(push) ; 6
; [else-branch: 363 | $struct_get[Int]($struct_loc[Int](self@530@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@530@01 3)) 0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@530@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@530@01 3)) 0)))
(push) ; 5
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@530@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@530@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@530@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@530@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
; [else-branch: 364 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 364 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(push) ; 6
; [else-branch: 364 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5))) | live]
; [else-branch: 365 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 365 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 6
(push) ; 6
; [else-branch: 365 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))))
(push) ; 5
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@530@01 7))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@530@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5))) | live]
; [else-branch: 366 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 366 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 6
(push) ; 6
; [else-branch: 366 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5)) | live]
; [else-branch: 367 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 367 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 6
(push) ; 6
; [else-branch: 367 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@530@01 7))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@530@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 5
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
; [else-branch: 368 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 368 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 7
; [then-branch: 369 | $struct_get[Int]($struct_loc[Int](self@530@01, 4)) != $struct_get[Int]($struct_loc[Int](self@455@01, 4)) | live]
; [else-branch: 369 | $struct_get[Int]($struct_loc[Int](self@530@01, 4)) == $struct_get[Int]($struct_loc[Int](self@455@01, 4)) | live]
(push) ; 8
; [then-branch: 369 | $struct_get[Int]($struct_loc[Int](self@530@01, 4)) != $struct_get[Int]($struct_loc[Int](self@455@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(pop) ; 8
(push) ; 8
; [else-branch: 369 | $struct_get[Int]($struct_loc[Int](self@530@01, 4)) == $struct_get[Int]($struct_loc[Int](self@455@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))))
(pop) ; 6
(push) ; 6
; [else-branch: 368 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
          ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))))))
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@530@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 3)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@530@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@530@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@530@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@530@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@530@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 370 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5))) | live]
; [else-branch: 370 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 370 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 6
(push) ; 6
; [else-branch: 370 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5)) | live]
; [else-branch: 371 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 371 | $struct_get[Bool]($struct_loc[Int](self@530@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@530@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 6
(push) ; 6
; [else-branch: 371 | !($struct_get[Bool]($struct_loc[Int](self@530@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@530@01 4))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@530@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@530@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) ($struct_get<Int> ($struct_loc<Int> self@530@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) ($struct_get<Int> ($struct_loc<Int> self@530@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@530@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) ($struct_get<Int> ($struct_loc<Int> self@530@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@531@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 372 | !(0 <= q$a@531@01) | live]
; [else-branch: 372 | 0 <= q$a@531@01 | live]
(push) ; 7
; [then-branch: 372 | !(0 <= q$a@531@01)]
(assert (not (<= 0 q$a@531@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 372 | 0 <= q$a@531@01]
(assert (<= 0 q$a@531@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@531@01) (not (<= 0 q$a@531@01))))
(push) ; 6
; [then-branch: 373 | 0 <= q$a@531@01 && q$a@531@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 373 | !(0 <= q$a@531@01 && q$a@531@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 373 | 0 <= q$a@531@01 && q$a@531@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@531@01)
  (<= q$a@531@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
; [then-branch: 374 | q$a@531@01 == $struct_get[Int]($struct_loc[Int](self@530@01, 3)) | live]
; [else-branch: 374 | q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 3)) | live]
(push) ; 9
; [then-branch: 374 | q$a@531@01 == $struct_get[Int]($struct_loc[Int](self@530@01, 3))]
(assert (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
(pop) ; 9
(push) ; 9
; [else-branch: 374 | q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 3))]
(assert (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
  (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3)))))
(push) ; 8
; [then-branch: 375 | q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 3)) && q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0)) | live]
; [else-branch: 375 | !(q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 3)) && q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0))) | live]
(push) ; 9
; [then-branch: 375 | q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 3)) && q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0))]
(assert (and
  (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
  (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(push) ; 9
; [else-branch: 375 | !(q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 3)) && q$a@531@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0)))]
(assert (not
  (and
    (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
    (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
      (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))))
  (and
    (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
    (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))))))
(pop) ; 7
(push) ; 7
; [else-branch: 373 | !(0 <= q$a@531@01 && q$a@531@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@531@01)
    (<= q$a@531@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@531@01)
    (<= q$a@531@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@531@01)
    (<= q$a@531@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
      (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
          (not
            (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))))
      (and
        (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
        (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@531@01)
      (<= q$a@531@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@531@01)
    (<= q$a@531@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@531@01 Int)) (!
  (and
    (or (<= 0 q$a@531@01) (not (<= 0 q$a@531@01)))
    (=>
      (and
        (<= 0 q$a@531@01)
        (<= q$a@531@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@531@01)
        (<= q$a@531@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
          (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@531@01
                  ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
              (not
                (=
                  q$a@531@01
                  ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))))
          (and
            (not
              (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
            (not
              (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@531@01)
          (<= q$a@531@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@531@01)
        (<= q$a@531@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513-aux|)))
(push) ; 5
(assert (not (forall ((q$a@531@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@531@01)
        (<= q$a@531@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
        (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) q$a@531@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@531@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@531@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@531@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@531@01)
        (<= q$a@531@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 3))))
        (not (= q$a@531@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) q$a@531@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@531@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@531@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@531@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 5
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@532@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 376 | !(0 <= q$a@532@01) | live]
; [else-branch: 376 | 0 <= q$a@532@01 | live]
(push) ; 7
; [then-branch: 376 | !(0 <= q$a@532@01)]
(assert (not (<= 0 q$a@532@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 376 | 0 <= q$a@532@01]
(assert (<= 0 q$a@532@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@532@01) (not (<= 0 q$a@532@01))))
(push) ; 6
; [then-branch: 377 | 0 <= q$a@532@01 && q$a@532@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 377 | !(0 <= q$a@532@01 && q$a@532@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 377 | 0 <= q$a@532@01 && q$a@532@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@532@01)
  (<= q$a@532@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 8
; [then-branch: 378 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 6)), q$a@532@01) != 0 | live]
; [else-branch: 378 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 6)), q$a@532@01) == 0 | live]
(push) ; 9
; [then-branch: 378 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 6)), q$a@532@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(push) ; 9
; [else-branch: 378 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 6)), q$a@532@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 377 | !(0 <= q$a@532@01 && q$a@532@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@532@01)
    (<= q$a@532@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@532@01)
    (<= q$a@532@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@532@01)
    (<= q$a@532@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@532@01)
      (<= q$a@532@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@532@01)
    (<= q$a@532@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@532@01 Int)) (!
  (and
    (or (<= 0 q$a@532@01) (not (<= 0 q$a@532@01)))
    (=>
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@532@01)
          (<= q$a@532@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343-aux|)))
(push) ; 5
(assert (not (forall ((q$a@532@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@532@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@532@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@532@01)
        (<= q$a@532@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@532@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@533@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 379 | !(0 <= q$a@533@01) | live]
; [else-branch: 379 | 0 <= q$a@533@01 | live]
(push) ; 7
; [then-branch: 379 | !(0 <= q$a@533@01)]
(assert (not (<= 0 q$a@533@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 379 | 0 <= q$a@533@01]
(assert (<= 0 q$a@533@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@533@01) (not (<= 0 q$a@533@01))))
(push) ; 6
; [then-branch: 380 | 0 <= q$a@533@01 && q$a@533@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 380 | !(0 <= q$a@533@01 && q$a@533@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 380 | 0 <= q$a@533@01 && q$a@533@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@533@01)
  (<= q$a@533@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
; [then-branch: 381 | q$a@533@01 == $struct_get[Int]($struct_loc[Int](self@530@01, 0)) | live]
; [else-branch: 381 | q$a@533@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0)) | live]
(push) ; 9
; [then-branch: 381 | q$a@533@01 == $struct_get[Int]($struct_loc[Int](self@530@01, 0))]
(assert (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
(pop) ; 9
(push) ; 9
; [else-branch: 381 | q$a@533@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0))]
(assert (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
  (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0)))))
(push) ; 8
; [then-branch: 382 | q$a@533@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 11)), q$a@533@01) == 0 | live]
; [else-branch: 382 | !(q$a@533@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 11)), q$a@533@01) == 0) | live]
(push) ; 9
; [then-branch: 382 | q$a@533@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 11)), q$a@533@01) == 0]
(assert (and
  (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(push) ; 9
; [else-branch: 382 | !(q$a@533@01 != $struct_get[Int]($struct_loc[Int](self@530@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 11)), q$a@533@01) == 0)]
(assert (not
  (and
    (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
        0)))
  (and
    (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 380 | !(0 <= q$a@533@01 && q$a@533@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@533@01)
    (<= q$a@533@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@533@01)
    (<= q$a@533@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@533@01)
    (<= q$a@533@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
      (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
            0)))
      (and
        (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@533@01)
      (<= q$a@533@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@533@01)
    (<= q$a@533@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@533@01 Int)) (!
  (and
    (or (<= 0 q$a@533@01) (not (<= 0 q$a@533@01)))
    (=>
      (and
        (<= 0 q$a@533@01)
        (<= q$a@533@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@533@01)
        (<= q$a@533@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
          (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@533@01
                  ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
                0)))
          (and
            (not
              (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@533@01)
          (<= q$a@533@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@533@01)
        (<= q$a@533@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396-aux|)))
(push) ; 5
(assert (not (forall ((q$a@533@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@533@01)
        (<= q$a@533@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) q$a@533@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@533@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@533@01)
        (<= q$a@533@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@533@01 ($struct_get<Int> ($struct_loc<Int> self@530@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 10)) q$a@533@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 11)) q$a@533@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@534@01 Int)
(declare-const q$v@535@01 Int)
(push) ; 5
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 383 | !(0 <= q$a@534@01) | live]
; [else-branch: 383 | 0 <= q$a@534@01 | live]
(push) ; 7
; [then-branch: 383 | !(0 <= q$a@534@01)]
(assert (not (<= 0 q$a@534@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 383 | 0 <= q$a@534@01]
(assert (<= 0 q$a@534@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 8
; [then-branch: 384 | !(q$a@534@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 384 | q$a@534@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 9
; [then-branch: 384 | !(q$a@534@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 9
(push) ; 9
; [else-branch: 384 | q$a@534@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@534@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 10
; [then-branch: 385 | !(0 <= q$v@535@01) | live]
; [else-branch: 385 | 0 <= q$v@535@01 | live]
(push) ; 11
; [then-branch: 385 | !(0 <= q$v@535@01)]
(assert (not (<= 0 q$v@535@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 385 | 0 <= q$v@535@01]
(assert (<= 0 q$v@535@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@535@01) (not (<= 0 q$v@535@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@535@01) (not (<= 0 q$v@535@01))))))
(assert (or
  (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@534@01)
  (and
    (<= 0 q$a@534@01)
    (=>
      (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@535@01) (not (<= 0 q$v@535@01)))))
    (or
      (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@534@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@534@01) (not (<= 0 q$a@534@01))))
(push) ; 6
; [then-branch: 386 | 0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@535@01 && q$v@535@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 386 | !(0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@535@01 && q$v@535@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 386 | 0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@535@01 && q$v@535@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@534@01)
  (and
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@535@01)
      (<=
        q$v@535@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 8
; [then-branch: 387 | q$v@535@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 6)), q$a@534@01) | live]
; [else-branch: 387 | q$v@535@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 6)), q$a@534@01) | live]
(push) ; 9
; [then-branch: 387 | q$v@535@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 6)), q$a@534@01)]
(assert (=
  q$v@535@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@534@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 387 | q$v@535@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@530@01, 6)), q$a@534@01)]
(assert (not
  (=
    q$v@535@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@534@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@535@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@534@01)))
  (=
    q$v@535@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@534@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 386 | !(0 <= q$a@534@01 && q$a@534@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@535@01 && q$v@535@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@534@01)
    (and
      (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@535@01)
        (<=
          q$v@535@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@534@01)
    (and
      (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@535@01)
        (<=
          q$v@535@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@534@01)
    (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@535@01)
    (<=
      q$v@535@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@535@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@534@01)))
      (=
        q$v@535@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@534@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@534@01)
      (and
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@535@01)
          (<=
            q$v@535@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@534@01)
    (and
      (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@535@01)
        (<=
          q$v@535@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@536@01 $PSF<$accessible$withdraw>)
(declare-const s@537@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@534@01 Int) (q$v@535@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@534@01)
      (and
        (<= 0 q$a@534@01)
        (=>
          (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@535@01) (not (<= 0 q$v@535@01)))))
        (or
          (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@534@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@534@01) (not (<= 0 q$a@534@01)))
    (=>
      (and
        (<= 0 q$a@534@01)
        (and
          (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@535@01)
            (<=
              q$v@535@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@534@01)
        (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@535@01)
        (<=
          q$v@535@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@535@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@534@01)))
          (=
            q$v@535@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@530@01 6)) q$a@534@01)))))
    (or
      (not
        (and
          (<= 0 q$a@534@01)
          (and
            (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@535@01)
              (<=
                q$v@535@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@534@01)
        (and
          (<= q$a@534@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@535@01)
            (<=
              q$v@535@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@536@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@534@01))
    ($SortWrappers.IntTo$Snap q$v@535@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@534@01))
    ($SortWrappers.IntTo$Snap q$v@535@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1172@11@1172@344-aux|)))
(pop) ; 4
; [then-branch: 388 | False | dead]
; [else-branch: 388 | True | live]
(push) ; 4
; [else-branch: 388 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 359 | $struct_get[Int]($struct_loc[Int](block@452@01, 4)) < $struct_get[Int]($struct_loc[Int](self@528@01, 2))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 2))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(block, 4)): Int) < ($struct_get($struct_loc(self, 2)): Int))
; [eval] !(($struct_get($struct_loc(block, 4)): Int) < ($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(block, 4)): Int) < ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 2))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | $struct_get[Int]($struct_loc[Int](block@452@01, 4)) < $struct_get[Int]($struct_loc[Int](self@528@01, 2)) | live]
; [else-branch: 389 | !($struct_get[Int]($struct_loc[Int](block@452@01, 4)) < $struct_get[Int]($struct_loc[Int](self@528@01, 2))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 389 | $struct_get[Int]($struct_loc[Int](block@452@01, 4)) < $struct_get[Int]($struct_loc[Int](self@528@01, 2))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 2))))
; [eval] !!($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@528@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@528@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | $struct_get[Bool]($struct_loc[Int](self@528@01, 5)) | live]
; [else-branch: 390 | !($struct_get[Bool]($struct_loc[Int](self@528@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 390 | $struct_get[Bool]($struct_loc[Int](self@528@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@528@01 5)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
(push) ; 5
; [then-branch: 391 | False | dead]
; [else-branch: 391 | True | live]
(push) ; 6
; [else-branch: 391 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 5
; [then-branch: 392 | False | dead]
; [else-branch: 392 | True | live]
(push) ; 6
; [else-branch: 392 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 393 | True | live]
; [else-branch: 393 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 393 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@538@01 $Snap)
(assert (= $t@538@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@465@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@539@01 $Struct)
(assert (=
  self@539@01
  ($struct_set<$Struct> self@455@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@455@01 7))
    l$havoc@465@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@539@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@539@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | $struct_get[Int]($struct_loc[Int](self@539@01, 3)) == 0 | live]
; [else-branch: 394 | $struct_get[Int]($struct_loc[Int](self@539@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 394 | $struct_get[Int]($struct_loc[Int](self@539@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@539@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 7
(push) ; 7
; [else-branch: 394 | $struct_get[Int]($struct_loc[Int](self@539@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@539@01 3)) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@539@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@539@01 3)) 0)))
(push) ; 6
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@539@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@539@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@539@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@539@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 395 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
; [else-branch: 395 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 395 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 5)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@539@01 5))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | !($struct_get[Bool]($struct_loc[Int](self@539@01, 5))) | dead]
; [else-branch: 396 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 396 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@539@01 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($struct_get<Bool> ($struct_loc<Int> self@539@01 5)))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
; [then-branch: 397 | !($struct_get[Bool]($struct_loc[Int](self@539@01, 5))) | dead]
; [else-branch: 397 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5)) | live]
(push) ; 7
; [else-branch: 397 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@539@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5)) | live]
; [else-branch: 398 | !($struct_get[Bool]($struct_loc[Int](self@539@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 398 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@539@01 7))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@539@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 6
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 399 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | live]
; [else-branch: 399 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 399 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5))]
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
; [then-branch: 400 | $struct_get[Int]($struct_loc[Int](self@539@01, 4)) != $struct_get[Int]($struct_loc[Int](self@455@01, 4)) | live]
; [else-branch: 400 | $struct_get[Int]($struct_loc[Int](self@539@01, 4)) == $struct_get[Int]($struct_loc[Int](self@455@01, 4)) | live]
(push) ; 9
; [then-branch: 400 | $struct_get[Int]($struct_loc[Int](self@539@01, 4)) != $struct_get[Int]($struct_loc[Int](self@455@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(pop) ; 9
(push) ; 9
; [else-branch: 400 | $struct_get[Int]($struct_loc[Int](self@539@01, 4)) == $struct_get[Int]($struct_loc[Int](self@455@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (or
    (=
      ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))))
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@539@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 3)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@539@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@539@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@539@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@539@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@539@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@539@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
; [then-branch: 401 | !($struct_get[Bool]($struct_loc[Int](self@539@01, 5))) | dead]
; [else-branch: 401 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5)) | live]
(push) ; 7
; [else-branch: 401 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@539@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5)) | live]
; [else-branch: 402 | !($struct_get[Bool]($struct_loc[Int](self@539@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 402 | $struct_get[Bool]($struct_loc[Int](self@539@01, 5))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@539@01 4))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@539@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@539@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) ($struct_get<Int> ($struct_loc<Int> self@539@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@539@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) ($struct_get<Int> ($struct_loc<Int> self@539@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@539@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) ($struct_get<Int> ($struct_loc<Int> self@539@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@540@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 403 | !(0 <= q$a@540@01) | live]
; [else-branch: 403 | 0 <= q$a@540@01 | live]
(push) ; 8
; [then-branch: 403 | !(0 <= q$a@540@01)]
(assert (not (<= 0 q$a@540@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 403 | 0 <= q$a@540@01]
(assert (<= 0 q$a@540@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@540@01) (not (<= 0 q$a@540@01))))
(push) ; 7
; [then-branch: 404 | 0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 404 | !(0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 404 | 0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@540@01)
  (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 9
; [then-branch: 405 | q$a@540@01 == $struct_get[Int]($struct_loc[Int](self@539@01, 3)) | live]
; [else-branch: 405 | q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 3)) | live]
(push) ; 10
; [then-branch: 405 | q$a@540@01 == $struct_get[Int]($struct_loc[Int](self@539@01, 3))]
(assert (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
(pop) ; 10
(push) ; 10
; [else-branch: 405 | q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 3))]
(assert (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
  (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3)))))
(push) ; 9
; [then-branch: 406 | q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 3)) && q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0)) | live]
; [else-branch: 406 | !(q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 3)) && q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0))) | live]
(push) ; 10
; [then-branch: 406 | q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 3)) && q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0))]
(assert (and
  (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
  (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(push) ; 10
; [else-branch: 406 | !(q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 3)) && q$a@540@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0)))]
(assert (not
  (and
    (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
    (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
      (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))))
  (and
    (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
    (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))))))
(pop) ; 8
(push) ; 8
; [else-branch: 404 | !(0 <= q$a@540@01 && q$a@540@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
      (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
          (not
            (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))))
      (and
        (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
        (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@540@01)
      (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@540@01)
    (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@540@01 Int)) (!
  (and
    (or (<= 0 q$a@540@01) (not (<= 0 q$a@540@01)))
    (=>
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
          (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@540@01
                  ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
              (not
                (=
                  q$a@540@01
                  ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))))
          (and
            (not
              (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
            (not
              (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@540@01)
          (<= q$a@540@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513-aux|)))
(push) ; 6
(assert (not (forall ((q$a@540@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
        (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) q$a@540@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@540@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@540@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@540@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@540@01)
        (<= q$a@540@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 3))))
        (not (= q$a@540@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) q$a@540@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@540@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@540@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 6
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@541@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 407 | !(0 <= q$a@541@01) | live]
; [else-branch: 407 | 0 <= q$a@541@01 | live]
(push) ; 8
; [then-branch: 407 | !(0 <= q$a@541@01)]
(assert (not (<= 0 q$a@541@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 407 | 0 <= q$a@541@01]
(assert (<= 0 q$a@541@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@541@01) (not (<= 0 q$a@541@01))))
(push) ; 7
; [then-branch: 408 | 0 <= q$a@541@01 && q$a@541@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 408 | !(0 <= q$a@541@01 && q$a@541@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 408 | 0 <= q$a@541@01 && q$a@541@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@541@01)
  (<= q$a@541@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 9
; [then-branch: 409 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 6)), q$a@541@01) != 0 | live]
; [else-branch: 409 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 6)), q$a@541@01) == 0 | live]
(push) ; 10
; [then-branch: 409 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 6)), q$a@541@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(push) ; 10
; [else-branch: 409 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 6)), q$a@541@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
  0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 408 | !(0 <= q$a@541@01 && q$a@541@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@541@01)
    (<= q$a@541@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@541@01)
    (<= q$a@541@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@541@01)
    (<= q$a@541@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@541@01)
      (<= q$a@541@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@541@01)
    (<= q$a@541@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@541@01 Int)) (!
  (and
    (or (<= 0 q$a@541@01) (not (<= 0 q$a@541@01)))
    (=>
      (and
        (<= 0 q$a@541@01)
        (<= q$a@541@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@541@01)
        (<= q$a@541@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@541@01)
          (<= q$a@541@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@541@01)
        (<= q$a@541@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343-aux|)))
(push) ; 6
(assert (not (forall ((q$a@541@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@541@01)
        (<= q$a@541@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@541@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@541@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@541@01)
        (<= q$a@541@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@541@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@542@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 410 | !(0 <= q$a@542@01) | live]
; [else-branch: 410 | 0 <= q$a@542@01 | live]
(push) ; 8
; [then-branch: 410 | !(0 <= q$a@542@01)]
(assert (not (<= 0 q$a@542@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 410 | 0 <= q$a@542@01]
(assert (<= 0 q$a@542@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@542@01) (not (<= 0 q$a@542@01))))
(push) ; 7
; [then-branch: 411 | 0 <= q$a@542@01 && q$a@542@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 411 | !(0 <= q$a@542@01 && q$a@542@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 411 | 0 <= q$a@542@01 && q$a@542@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@542@01)
  (<= q$a@542@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 9
; [then-branch: 412 | q$a@542@01 == $struct_get[Int]($struct_loc[Int](self@539@01, 0)) | live]
; [else-branch: 412 | q$a@542@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0)) | live]
(push) ; 10
; [then-branch: 412 | q$a@542@01 == $struct_get[Int]($struct_loc[Int](self@539@01, 0))]
(assert (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 412 | q$a@542@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0))]
(assert (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
  (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0)))))
(push) ; 9
; [then-branch: 413 | q$a@542@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 11)), q$a@542@01) == 0 | live]
; [else-branch: 413 | !(q$a@542@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 11)), q$a@542@01) == 0) | live]
(push) ; 10
; [then-branch: 413 | q$a@542@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 11)), q$a@542@01) == 0]
(assert (and
  (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 10
(push) ; 10
; [else-branch: 413 | !(q$a@542@01 != $struct_get[Int]($struct_loc[Int](self@539@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 11)), q$a@542@01) == 0)]
(assert (not
  (and
    (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
      0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
        0)))
  (and
    (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 411 | !(0 <= q$a@542@01 && q$a@542@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@542@01)
    (<= q$a@542@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@542@01)
    (<= q$a@542@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@542@01)
    (<= q$a@542@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
      (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
            0)))
      (and
        (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@542@01)
      (<= q$a@542@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@542@01)
    (<= q$a@542@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@542@01 Int)) (!
  (and
    (or (<= 0 q$a@542@01) (not (<= 0 q$a@542@01)))
    (=>
      (and
        (<= 0 q$a@542@01)
        (<= q$a@542@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@542@01)
        (<= q$a@542@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
          (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@542@01
                  ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
                0)))
          (and
            (not
              (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@542@01)
          (<= q$a@542@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@542@01)
        (<= q$a@542@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396-aux|)))
(push) ; 6
(assert (not (forall ((q$a@542@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@542@01)
        (<= q$a@542@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) q$a@542@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@542@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@542@01)
        (<= q$a@542@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@542@01 ($struct_get<Int> ($struct_loc<Int> self@539@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) q$a@542@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 11)) q$a@542@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@543@01 Int)
(declare-const q$v@544@01 Int)
(push) ; 6
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 414 | !(0 <= q$a@543@01) | live]
; [else-branch: 414 | 0 <= q$a@543@01 | live]
(push) ; 8
; [then-branch: 414 | !(0 <= q$a@543@01)]
(assert (not (<= 0 q$a@543@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 414 | 0 <= q$a@543@01]
(assert (<= 0 q$a@543@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 9
; [then-branch: 415 | !(q$a@543@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 415 | q$a@543@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 10
; [then-branch: 415 | !(q$a@543@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@543@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 10
(push) ; 10
; [else-branch: 415 | q$a@543@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@543@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 11
; [then-branch: 416 | !(0 <= q$v@544@01) | live]
; [else-branch: 416 | 0 <= q$v@544@01 | live]
(push) ; 12
; [then-branch: 416 | !(0 <= q$v@544@01)]
(assert (not (<= 0 q$v@544@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 416 | 0 <= q$v@544@01]
(assert (<= 0 q$v@544@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@544@01) (not (<= 0 q$v@544@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@544@01) (not (<= 0 q$v@544@01))))))
(assert (or
  (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@543@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@543@01)
  (and
    (<= 0 q$a@543@01)
    (=>
      (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@544@01) (not (<= 0 q$v@544@01)))))
    (or
      (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@543@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@543@01) (not (<= 0 q$a@543@01))))
(push) ; 7
; [then-branch: 417 | 0 <= q$a@543@01 && q$a@543@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@544@01 && q$v@544@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 417 | !(0 <= q$a@543@01 && q$a@543@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@544@01 && q$v@544@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 8
; [then-branch: 417 | 0 <= q$a@543@01 && q$a@543@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@544@01 && q$v@544@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@543@01)
  (and
    (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@544@01)
      (<=
        q$v@544@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 9
; [then-branch: 418 | q$v@544@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 6)), q$a@543@01) | live]
; [else-branch: 418 | q$v@544@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 6)), q$a@543@01) | live]
(push) ; 10
; [then-branch: 418 | q$v@544@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 6)), q$a@543@01)]
(assert (=
  q$v@544@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@543@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 418 | q$v@544@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@539@01, 6)), q$a@543@01)]
(assert (not
  (=
    q$v@544@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@543@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@544@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@543@01)))
  (=
    q$v@544@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@543@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 417 | !(0 <= q$a@543@01 && q$a@543@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@544@01 && q$v@544@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@543@01)
    (and
      (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@544@01)
        (<=
          q$v@544@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@543@01)
    (and
      (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@544@01)
        (<=
          q$v@544@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@543@01)
    (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@544@01)
    (<=
      q$v@544@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@544@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@543@01)))
      (=
        q$v@544@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@543@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@543@01)
      (and
        (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@544@01)
          (<=
            q$v@544@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@543@01)
    (and
      (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@544@01)
        (<=
          q$v@544@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@545@01 $PSF<$accessible$withdraw>)
(declare-const s@546@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@543@01 Int) (q$v@544@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@543@01)
      (and
        (<= 0 q$a@543@01)
        (=>
          (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@544@01) (not (<= 0 q$v@544@01)))))
        (or
          (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@543@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@543@01) (not (<= 0 q$a@543@01)))
    (=>
      (and
        (<= 0 q$a@543@01)
        (and
          (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@544@01)
            (<=
              q$v@544@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@543@01)
        (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@544@01)
        (<=
          q$v@544@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@544@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@543@01)))
          (=
            q$v@544@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 6)) q$a@543@01)))))
    (or
      (not
        (and
          (<= 0 q$a@543@01)
          (and
            (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@544@01)
              (<=
                q$v@544@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@543@01)
        (and
          (<= q$a@543@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@544@01)
            (<=
              q$v@544@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@545@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@543@01))
    ($SortWrappers.IntTo$Snap q$v@544@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@543@01))
    ($SortWrappers.IntTo$Snap q$v@544@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1172@11@1172@344-aux|)))
(pop) ; 5
; [then-branch: 419 | False | dead]
; [else-branch: 419 | True | live]
(push) ; 5
; [else-branch: 419 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 390 | !($struct_get[Bool]($struct_loc[Int](self@528@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@528@01 5))))
(pop) ; 4
; [eval] !!!($struct_get($struct_loc(self, 5)): Bool)
; [eval] !!($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@528@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@528@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | !($struct_get[Bool]($struct_loc[Int](self@528@01, 5))) | live]
; [else-branch: 420 | $struct_get[Bool]($struct_loc[Int](self@528@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 420 | !($struct_get[Bool]($struct_loc[Int](self@528@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@528@01 5))))
; [eval] !(($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 4))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 421 | !($struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@528@01, 4))) | live]
; [else-branch: 421 | $struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@528@01, 4)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 421 | !($struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@528@01, 4)))]
(assert (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
(push) ; 6
; [then-branch: 422 | False | dead]
; [else-branch: 422 | True | live]
(push) ; 7
; [else-branch: 422 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 6
; [then-branch: 423 | False | dead]
; [else-branch: 423 | True | live]
(push) ; 7
; [else-branch: 423 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | True | live]
; [else-branch: 424 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 424 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@547@01 $Snap)
(assert (= $t@547@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@465@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@548@01 $Struct)
(assert (=
  self@548@01
  ($struct_set<$Struct> self@455@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@455@01 7))
    l$havoc@465@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@548@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@548@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | $struct_get[Int]($struct_loc[Int](self@548@01, 3)) == 0 | live]
; [else-branch: 425 | $struct_get[Int]($struct_loc[Int](self@548@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 425 | $struct_get[Int]($struct_loc[Int](self@548@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@548@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 8
(push) ; 8
; [else-branch: 425 | $struct_get[Int]($struct_loc[Int](self@548@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@548@01 3)) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@548@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@548@01 3)) 0)))
(push) ; 7
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@548@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@548@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@548@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@548@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@548@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@548@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 426 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | dead]
; [else-branch: 426 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 426 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5))) | live]
; [else-branch: 427 | $struct_get[Bool]($struct_loc[Int](self@548@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 427 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5))))
(push) ; 7
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@548@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@548@01 7))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@548@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@548@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 428 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5))) | live]
; [else-branch: 428 | $struct_get[Bool]($struct_loc[Int](self@548@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 428 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@548@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@548@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 7
; [then-branch: 429 | $struct_get[Bool]($struct_loc[Int](self@548@01, 5)) | dead]
; [else-branch: 429 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5))) | live]
(push) ; 8
; [else-branch: 429 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 7
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@548@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@548@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 7
; [then-branch: 430 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | dead]
; [else-branch: 430 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(push) ; 8
; [else-branch: 430 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 7
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@548@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@548@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 7
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@548@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@548@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 7
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 431 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5))) | live]
; [else-branch: 431 | $struct_get[Bool]($struct_loc[Int](self@548@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 431 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5)))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@548@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 7
; [then-branch: 432 | $struct_get[Bool]($struct_loc[Int](self@548@01, 5)) | dead]
; [else-branch: 432 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5))) | live]
(push) ; 8
; [else-branch: 432 | !($struct_get[Bool]($struct_loc[Int](self@548@01, 5)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 7
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) ($struct_get<Int> ($struct_loc<Int> self@548@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@548@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) ($struct_get<Int> ($struct_loc<Int> self@548@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@548@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) ($struct_get<Int> ($struct_loc<Int> self@548@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@549@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 433 | !(0 <= q$a@549@01) | live]
; [else-branch: 433 | 0 <= q$a@549@01 | live]
(push) ; 9
; [then-branch: 433 | !(0 <= q$a@549@01)]
(assert (not (<= 0 q$a@549@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 433 | 0 <= q$a@549@01]
(assert (<= 0 q$a@549@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@549@01) (not (<= 0 q$a@549@01))))
(push) ; 8
; [then-branch: 434 | 0 <= q$a@549@01 && q$a@549@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 434 | !(0 <= q$a@549@01 && q$a@549@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 434 | 0 <= q$a@549@01 && q$a@549@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@549@01)
  (<= q$a@549@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 10
; [then-branch: 435 | q$a@549@01 == $struct_get[Int]($struct_loc[Int](self@548@01, 3)) | live]
; [else-branch: 435 | q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 3)) | live]
(push) ; 11
; [then-branch: 435 | q$a@549@01 == $struct_get[Int]($struct_loc[Int](self@548@01, 3))]
(assert (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
(pop) ; 11
(push) ; 11
; [else-branch: 435 | q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 3))]
(assert (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
  (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3)))))
(push) ; 10
; [then-branch: 436 | q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 3)) && q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0)) | live]
; [else-branch: 436 | !(q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 3)) && q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0))) | live]
(push) ; 11
; [then-branch: 436 | q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 3)) && q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0))]
(assert (and
  (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
  (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
(push) ; 11
; [else-branch: 436 | !(q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 3)) && q$a@549@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0)))]
(assert (not
  (and
    (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
    (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
      (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))))
  (and
    (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
    (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))))))
(pop) ; 9
(push) ; 9
; [else-branch: 434 | !(0 <= q$a@549@01 && q$a@549@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@549@01)
    (<= q$a@549@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@549@01)
    (<= q$a@549@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@549@01)
    (<= q$a@549@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
      (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
          (not
            (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))))
      (and
        (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
        (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@549@01)
      (<= q$a@549@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@549@01)
    (<= q$a@549@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@549@01 Int)) (!
  (and
    (or (<= 0 q$a@549@01) (not (<= 0 q$a@549@01)))
    (=>
      (and
        (<= 0 q$a@549@01)
        (<= q$a@549@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@549@01)
        (<= q$a@549@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
          (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@549@01
                  ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
              (not
                (=
                  q$a@549@01
                  ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))))
          (and
            (not
              (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
            (not
              (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@549@01)
          (<= q$a@549@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@549@01)
        (<= q$a@549@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@549@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513-aux|)))
(push) ; 7
(assert (not (forall ((q$a@549@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@549@01)
        (<= q$a@549@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
        (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) q$a@549@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@549@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@549@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@549@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@549@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@549@01)
        (<= q$a@549@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 3))))
        (not (= q$a@549@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) q$a@549@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@549@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@549@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@549@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 7
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@550@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 437 | !(0 <= q$a@550@01) | live]
; [else-branch: 437 | 0 <= q$a@550@01 | live]
(push) ; 9
; [then-branch: 437 | !(0 <= q$a@550@01)]
(assert (not (<= 0 q$a@550@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 437 | 0 <= q$a@550@01]
(assert (<= 0 q$a@550@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@550@01) (not (<= 0 q$a@550@01))))
(push) ; 8
; [then-branch: 438 | 0 <= q$a@550@01 && q$a@550@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 438 | !(0 <= q$a@550@01 && q$a@550@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 438 | 0 <= q$a@550@01 && q$a@550@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@550@01)
  (<= q$a@550@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 10
; [then-branch: 439 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 6)), q$a@550@01) != 0 | live]
; [else-branch: 439 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 6)), q$a@550@01) == 0 | live]
(push) ; 11
; [then-branch: 439 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 6)), q$a@550@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
(push) ; 11
; [else-branch: 439 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 6)), q$a@550@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
  0))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 438 | !(0 <= q$a@550@01 && q$a@550@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@550@01)
    (<= q$a@550@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@550@01)
    (<= q$a@550@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@550@01)
    (<= q$a@550@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@550@01)
      (<= q$a@550@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@550@01)
    (<= q$a@550@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@550@01 Int)) (!
  (and
    (or (<= 0 q$a@550@01) (not (<= 0 q$a@550@01)))
    (=>
      (and
        (<= 0 q$a@550@01)
        (<= q$a@550@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@550@01)
        (<= q$a@550@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@550@01)
          (<= q$a@550@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@550@01)
        (<= q$a@550@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343-aux|)))
(push) ; 7
(assert (not (forall ((q$a@550@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@550@01)
        (<= q$a@550@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@550@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@550@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@550@01)
        (<= q$a@550@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@550@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@550@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@551@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 440 | !(0 <= q$a@551@01) | live]
; [else-branch: 440 | 0 <= q$a@551@01 | live]
(push) ; 9
; [then-branch: 440 | !(0 <= q$a@551@01)]
(assert (not (<= 0 q$a@551@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 440 | 0 <= q$a@551@01]
(assert (<= 0 q$a@551@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@551@01) (not (<= 0 q$a@551@01))))
(push) ; 8
; [then-branch: 441 | 0 <= q$a@551@01 && q$a@551@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 441 | !(0 <= q$a@551@01 && q$a@551@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 441 | 0 <= q$a@551@01 && q$a@551@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@551@01)
  (<= q$a@551@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
; [then-branch: 442 | q$a@551@01 == $struct_get[Int]($struct_loc[Int](self@548@01, 0)) | live]
; [else-branch: 442 | q$a@551@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0)) | live]
(push) ; 11
; [then-branch: 442 | q$a@551@01 == $struct_get[Int]($struct_loc[Int](self@548@01, 0))]
(assert (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
(pop) ; 11
(push) ; 11
; [else-branch: 442 | q$a@551@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0))]
(assert (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
  (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0)))))
(push) ; 10
; [then-branch: 443 | q$a@551@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 11)), q$a@551@01) == 0 | live]
; [else-branch: 443 | !(q$a@551@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 11)), q$a@551@01) == 0) | live]
(push) ; 11
; [then-branch: 443 | q$a@551@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 11)), q$a@551@01) == 0]
(assert (and
  (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 11
(push) ; 11
; [else-branch: 443 | !(q$a@551@01 != $struct_get[Int]($struct_loc[Int](self@548@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 11)), q$a@551@01) == 0)]
(assert (not
  (and
    (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
      0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
        0)))
  (and
    (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 441 | !(0 <= q$a@551@01 && q$a@551@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@551@01)
    (<= q$a@551@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@551@01)
    (<= q$a@551@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@551@01)
    (<= q$a@551@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
      (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
            0)))
      (and
        (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@551@01)
      (<= q$a@551@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@551@01)
    (<= q$a@551@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@551@01 Int)) (!
  (and
    (or (<= 0 q$a@551@01) (not (<= 0 q$a@551@01)))
    (=>
      (and
        (<= 0 q$a@551@01)
        (<= q$a@551@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@551@01)
        (<= q$a@551@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
          (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@551@01
                  ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
                0)))
          (and
            (not
              (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@551@01)
          (<= q$a@551@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@551@01)
        (<= q$a@551@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396-aux|)))
(push) ; 7
(assert (not (forall ((q$a@551@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@551@01)
        (<= q$a@551@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) q$a@551@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@551@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@551@01)
        (<= q$a@551@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@551@01 ($struct_get<Int> ($struct_loc<Int> self@548@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 10)) q$a@551@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 11)) q$a@551@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@552@01 Int)
(declare-const q$v@553@01 Int)
(push) ; 7
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 444 | !(0 <= q$a@552@01) | live]
; [else-branch: 444 | 0 <= q$a@552@01 | live]
(push) ; 9
; [then-branch: 444 | !(0 <= q$a@552@01)]
(assert (not (<= 0 q$a@552@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 444 | 0 <= q$a@552@01]
(assert (<= 0 q$a@552@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 10
; [then-branch: 445 | !(q$a@552@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 445 | q$a@552@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 11
; [then-branch: 445 | !(q$a@552@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@552@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 11
(push) ; 11
; [else-branch: 445 | q$a@552@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@552@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 12
; [then-branch: 446 | !(0 <= q$v@553@01) | live]
; [else-branch: 446 | 0 <= q$v@553@01 | live]
(push) ; 13
; [then-branch: 446 | !(0 <= q$v@553@01)]
(assert (not (<= 0 q$v@553@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 446 | 0 <= q$v@553@01]
(assert (<= 0 q$v@553@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@553@01) (not (<= 0 q$v@553@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@553@01) (not (<= 0 q$v@553@01))))))
(assert (or
  (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@552@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@552@01)
  (and
    (<= 0 q$a@552@01)
    (=>
      (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@553@01) (not (<= 0 q$v@553@01)))))
    (or
      (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@552@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@552@01) (not (<= 0 q$a@552@01))))
(push) ; 8
; [then-branch: 447 | 0 <= q$a@552@01 && q$a@552@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@553@01 && q$v@553@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 447 | !(0 <= q$a@552@01 && q$a@552@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@553@01 && q$v@553@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 9
; [then-branch: 447 | 0 <= q$a@552@01 && q$a@552@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@553@01 && q$v@553@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@552@01)
  (and
    (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@553@01)
      (<=
        q$v@553@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 10
; [then-branch: 448 | q$v@553@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 6)), q$a@552@01) | live]
; [else-branch: 448 | q$v@553@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 6)), q$a@552@01) | live]
(push) ; 11
; [then-branch: 448 | q$v@553@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 6)), q$a@552@01)]
(assert (=
  q$v@553@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@552@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 448 | q$v@553@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@548@01, 6)), q$a@552@01)]
(assert (not
  (=
    q$v@553@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@552@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@553@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@552@01)))
  (=
    q$v@553@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@552@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 447 | !(0 <= q$a@552@01 && q$a@552@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@553@01 && q$v@553@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@552@01)
    (and
      (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@553@01)
        (<=
          q$v@553@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@552@01)
    (and
      (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@553@01)
        (<=
          q$v@553@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@552@01)
    (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@553@01)
    (<=
      q$v@553@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@553@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@552@01)))
      (=
        q$v@553@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@552@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@552@01)
      (and
        (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@553@01)
          (<=
            q$v@553@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@552@01)
    (and
      (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@553@01)
        (<=
          q$v@553@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@554@01 $PSF<$accessible$withdraw>)
(declare-const s@555@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@552@01 Int) (q$v@553@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@552@01)
      (and
        (<= 0 q$a@552@01)
        (=>
          (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@553@01) (not (<= 0 q$v@553@01)))))
        (or
          (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@552@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@552@01) (not (<= 0 q$a@552@01)))
    (=>
      (and
        (<= 0 q$a@552@01)
        (and
          (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@553@01)
            (<=
              q$v@553@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@552@01)
        (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@553@01)
        (<=
          q$v@553@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@553@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@552@01)))
          (=
            q$v@553@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@548@01 6)) q$a@552@01)))))
    (or
      (not
        (and
          (<= 0 q$a@552@01)
          (and
            (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@553@01)
              (<=
                q$v@553@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@552@01)
        (and
          (<= q$a@552@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@553@01)
            (<=
              q$v@553@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@554@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@552@01))
    ($SortWrappers.IntTo$Snap q$v@553@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@552@01))
    ($SortWrappers.IntTo$Snap q$v@553@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1172@11@1172@344-aux|)))
(pop) ; 6
; [then-branch: 449 | False | dead]
; [else-branch: 449 | True | live]
(push) ; 6
; [else-branch: 449 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 421 | $struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@528@01, 4))]
(assert (>
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 4))))
(pop) ; 5
; [eval] !!(($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int))
; [eval] !(($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 4))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 450 | $struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@528@01, 4)) | live]
; [else-branch: 450 | !($struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@528@01, 4))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 450 | $struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@528@01, 4))]
(assert (>
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 4))))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 0))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 0)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 451 | $struct_get[Int]($struct_loc[Int](msg@451@01, 0)) == $struct_get[Int]($struct_loc[Int](self@528@01, 0)) | live]
; [else-branch: 451 | $struct_get[Int]($struct_loc[Int](msg@451@01, 0)) != $struct_get[Int]($struct_loc[Int](self@528@01, 0)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 451 | $struct_get[Int]($struct_loc[Int](msg@451@01, 0)) == $struct_get[Int]($struct_loc[Int](self@528@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 0))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
(push) ; 7
; [then-branch: 452 | False | dead]
; [else-branch: 452 | True | live]
(push) ; 8
; [else-branch: 452 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 7
; [then-branch: 453 | False | dead]
; [else-branch: 453 | True | live]
(push) ; 8
; [else-branch: 453 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 454 | True | live]
; [else-branch: 454 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 454 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@556@01 $Snap)
(assert (= $t@556@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@465@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@557@01 $Struct)
(assert (=
  self@557@01
  ($struct_set<$Struct> self@455@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@455@01 7))
    l$havoc@465@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@557@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@557@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 455 | $struct_get[Int]($struct_loc[Int](self@557@01, 3)) == 0 | live]
; [else-branch: 455 | $struct_get[Int]($struct_loc[Int](self@557@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 455 | $struct_get[Int]($struct_loc[Int](self@557@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@557@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 455 | $struct_get[Int]($struct_loc[Int](self@557@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@557@01 3)) 0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@557@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@557@01 3)) 0)))
(push) ; 8
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@557@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@557@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@557@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@557@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@557@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@557@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 456 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | dead]
; [else-branch: 456 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 456 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 457 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5))) | live]
; [else-branch: 457 | $struct_get[Bool]($struct_loc[Int](self@557@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 457 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5))))
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@557@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@557@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@557@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@557@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 458 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5))) | live]
; [else-branch: 458 | $struct_get[Bool]($struct_loc[Int](self@557@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 458 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@557@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@557@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
; [then-branch: 459 | $struct_get[Bool]($struct_loc[Int](self@557@01, 5)) | dead]
; [else-branch: 459 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5))) | live]
(push) ; 9
; [else-branch: 459 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@557@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@557@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
; [then-branch: 460 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | dead]
; [else-branch: 460 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(push) ; 9
; [else-branch: 460 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@557@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@557@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@557@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@557@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 461 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5))) | live]
; [else-branch: 461 | $struct_get[Bool]($struct_loc[Int](self@557@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 461 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5)))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@557@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
; [then-branch: 462 | $struct_get[Bool]($struct_loc[Int](self@557@01, 5)) | dead]
; [else-branch: 462 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5))) | live]
(push) ; 9
; [else-branch: 462 | !($struct_get[Bool]($struct_loc[Int](self@557@01, 5)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) ($struct_get<Int> ($struct_loc<Int> self@557@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@557@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) ($struct_get<Int> ($struct_loc<Int> self@557@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@557@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) ($struct_get<Int> ($struct_loc<Int> self@557@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@558@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 463 | !(0 <= q$a@558@01) | live]
; [else-branch: 463 | 0 <= q$a@558@01 | live]
(push) ; 10
; [then-branch: 463 | !(0 <= q$a@558@01)]
(assert (not (<= 0 q$a@558@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 463 | 0 <= q$a@558@01]
(assert (<= 0 q$a@558@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@558@01) (not (<= 0 q$a@558@01))))
(push) ; 9
; [then-branch: 464 | 0 <= q$a@558@01 && q$a@558@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 464 | !(0 <= q$a@558@01 && q$a@558@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 464 | 0 <= q$a@558@01 && q$a@558@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@558@01)
  (<= q$a@558@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 465 | q$a@558@01 == $struct_get[Int]($struct_loc[Int](self@557@01, 3)) | live]
; [else-branch: 465 | q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 3)) | live]
(push) ; 12
; [then-branch: 465 | q$a@558@01 == $struct_get[Int]($struct_loc[Int](self@557@01, 3))]
(assert (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
(pop) ; 12
(push) ; 12
; [else-branch: 465 | q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 3))]
(assert (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
  (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3)))))
(push) ; 11
; [then-branch: 466 | q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 3)) && q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0)) | live]
; [else-branch: 466 | !(q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 3)) && q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0))) | live]
(push) ; 12
; [then-branch: 466 | q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 3)) && q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0))]
(assert (and
  (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
  (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 466 | !(q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 3)) && q$a@558@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0)))]
(assert (not
  (and
    (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
    (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
      (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))))
  (and
    (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
    (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 464 | !(0 <= q$a@558@01 && q$a@558@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@558@01)
    (<= q$a@558@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@558@01)
    (<= q$a@558@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@558@01)
    (<= q$a@558@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
      (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
          (not
            (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))))
      (and
        (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
        (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@558@01)
      (<= q$a@558@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@558@01)
    (<= q$a@558@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@558@01 Int)) (!
  (and
    (or (<= 0 q$a@558@01) (not (<= 0 q$a@558@01)))
    (=>
      (and
        (<= 0 q$a@558@01)
        (<= q$a@558@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@558@01)
        (<= q$a@558@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
          (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@558@01
                  ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
              (not
                (=
                  q$a@558@01
                  ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))))
          (and
            (not
              (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
            (not
              (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@558@01)
          (<= q$a@558@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@558@01)
        (<= q$a@558@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@558@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513-aux|)))
(push) ; 8
(assert (not (forall ((q$a@558@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@558@01)
        (<= q$a@558@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
        (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) q$a@558@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@558@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@558@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@558@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@558@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@558@01)
        (<= q$a@558@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 3))))
        (not (= q$a@558@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) q$a@558@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@558@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@558@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@558@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@559@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 467 | !(0 <= q$a@559@01) | live]
; [else-branch: 467 | 0 <= q$a@559@01 | live]
(push) ; 10
; [then-branch: 467 | !(0 <= q$a@559@01)]
(assert (not (<= 0 q$a@559@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 467 | 0 <= q$a@559@01]
(assert (<= 0 q$a@559@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@559@01) (not (<= 0 q$a@559@01))))
(push) ; 9
; [then-branch: 468 | 0 <= q$a@559@01 && q$a@559@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 468 | !(0 <= q$a@559@01 && q$a@559@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 468 | 0 <= q$a@559@01 && q$a@559@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@559@01)
  (<= q$a@559@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 469 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 6)), q$a@559@01) != 0 | live]
; [else-branch: 469 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 6)), q$a@559@01) == 0 | live]
(push) ; 12
; [then-branch: 469 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 6)), q$a@559@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 469 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 6)), q$a@559@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 468 | !(0 <= q$a@559@01 && q$a@559@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@559@01)
    (<= q$a@559@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@559@01)
    (<= q$a@559@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@559@01)
    (<= q$a@559@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@559@01)
      (<= q$a@559@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@559@01)
    (<= q$a@559@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@559@01 Int)) (!
  (and
    (or (<= 0 q$a@559@01) (not (<= 0 q$a@559@01)))
    (=>
      (and
        (<= 0 q$a@559@01)
        (<= q$a@559@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@559@01)
        (<= q$a@559@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@559@01)
          (<= q$a@559@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@559@01)
        (<= q$a@559@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343-aux|)))
(push) ; 8
(assert (not (forall ((q$a@559@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@559@01)
        (<= q$a@559@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@559@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@559@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@559@01)
        (<= q$a@559@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@559@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@559@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@560@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 470 | !(0 <= q$a@560@01) | live]
; [else-branch: 470 | 0 <= q$a@560@01 | live]
(push) ; 10
; [then-branch: 470 | !(0 <= q$a@560@01)]
(assert (not (<= 0 q$a@560@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 470 | 0 <= q$a@560@01]
(assert (<= 0 q$a@560@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@560@01) (not (<= 0 q$a@560@01))))
(push) ; 9
; [then-branch: 471 | 0 <= q$a@560@01 && q$a@560@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 471 | !(0 <= q$a@560@01 && q$a@560@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 471 | 0 <= q$a@560@01 && q$a@560@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@560@01)
  (<= q$a@560@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
; [then-branch: 472 | q$a@560@01 == $struct_get[Int]($struct_loc[Int](self@557@01, 0)) | live]
; [else-branch: 472 | q$a@560@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0)) | live]
(push) ; 12
; [then-branch: 472 | q$a@560@01 == $struct_get[Int]($struct_loc[Int](self@557@01, 0))]
(assert (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
(pop) ; 12
(push) ; 12
; [else-branch: 472 | q$a@560@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0))]
(assert (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
  (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0)))))
(push) ; 11
; [then-branch: 473 | q$a@560@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 11)), q$a@560@01) == 0 | live]
; [else-branch: 473 | !(q$a@560@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 11)), q$a@560@01) == 0) | live]
(push) ; 12
; [then-branch: 473 | q$a@560@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 11)), q$a@560@01) == 0]
(assert (and
  (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(push) ; 12
; [else-branch: 473 | !(q$a@560@01 != $struct_get[Int]($struct_loc[Int](self@557@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 11)), q$a@560@01) == 0)]
(assert (not
  (and
    (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
      0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
        0)))
  (and
    (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 471 | !(0 <= q$a@560@01 && q$a@560@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@560@01)
    (<= q$a@560@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@560@01)
    (<= q$a@560@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@560@01)
    (<= q$a@560@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
      (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
            0)))
      (and
        (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@560@01)
      (<= q$a@560@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@560@01)
    (<= q$a@560@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@560@01 Int)) (!
  (and
    (or (<= 0 q$a@560@01) (not (<= 0 q$a@560@01)))
    (=>
      (and
        (<= 0 q$a@560@01)
        (<= q$a@560@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@560@01)
        (<= q$a@560@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
          (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@560@01
                  ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
                0)))
          (and
            (not
              (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@560@01)
          (<= q$a@560@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@560@01)
        (<= q$a@560@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396-aux|)))
(push) ; 8
(assert (not (forall ((q$a@560@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@560@01)
        (<= q$a@560@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) q$a@560@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@560@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@560@01)
        (<= q$a@560@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@560@01 ($struct_get<Int> ($struct_loc<Int> self@557@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 10)) q$a@560@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 11)) q$a@560@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@561@01 Int)
(declare-const q$v@562@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 474 | !(0 <= q$a@561@01) | live]
; [else-branch: 474 | 0 <= q$a@561@01 | live]
(push) ; 10
; [then-branch: 474 | !(0 <= q$a@561@01)]
(assert (not (<= 0 q$a@561@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 474 | 0 <= q$a@561@01]
(assert (<= 0 q$a@561@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 475 | !(q$a@561@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 475 | q$a@561@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 475 | !(q$a@561@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@561@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 475 | q$a@561@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@561@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 476 | !(0 <= q$v@562@01) | live]
; [else-branch: 476 | 0 <= q$v@562@01 | live]
(push) ; 14
; [then-branch: 476 | !(0 <= q$v@562@01)]
(assert (not (<= 0 q$v@562@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 476 | 0 <= q$v@562@01]
(assert (<= 0 q$v@562@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@562@01) (not (<= 0 q$v@562@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@562@01) (not (<= 0 q$v@562@01))))))
(assert (or
  (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@561@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@561@01)
  (and
    (<= 0 q$a@561@01)
    (=>
      (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@562@01) (not (<= 0 q$v@562@01)))))
    (or
      (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@561@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@561@01) (not (<= 0 q$a@561@01))))
(push) ; 9
; [then-branch: 477 | 0 <= q$a@561@01 && q$a@561@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@562@01 && q$v@562@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 477 | !(0 <= q$a@561@01 && q$a@561@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@562@01 && q$v@562@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 477 | 0 <= q$a@561@01 && q$a@561@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@562@01 && q$v@562@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@561@01)
  (and
    (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@562@01)
      (<=
        q$v@562@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 478 | q$v@562@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 6)), q$a@561@01) | live]
; [else-branch: 478 | q$v@562@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 6)), q$a@561@01) | live]
(push) ; 12
; [then-branch: 478 | q$v@562@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 6)), q$a@561@01)]
(assert (=
  q$v@562@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@561@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 478 | q$v@562@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@557@01, 6)), q$a@561@01)]
(assert (not
  (=
    q$v@562@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@561@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@562@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@561@01)))
  (=
    q$v@562@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@561@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 477 | !(0 <= q$a@561@01 && q$a@561@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@562@01 && q$v@562@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@561@01)
    (and
      (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@562@01)
        (<=
          q$v@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@561@01)
    (and
      (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@562@01)
        (<=
          q$v@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@561@01)
    (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@562@01)
    (<=
      q$v@562@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@562@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@561@01)))
      (=
        q$v@562@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@561@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@561@01)
      (and
        (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@562@01)
          (<=
            q$v@562@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@561@01)
    (and
      (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@562@01)
        (<=
          q$v@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@563@01 $PSF<$accessible$withdraw>)
(declare-const s@564@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@561@01 Int) (q$v@562@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@561@01)
      (and
        (<= 0 q$a@561@01)
        (=>
          (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@562@01) (not (<= 0 q$v@562@01)))))
        (or
          (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@561@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@561@01) (not (<= 0 q$a@561@01)))
    (=>
      (and
        (<= 0 q$a@561@01)
        (and
          (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@562@01)
            (<=
              q$v@562@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@561@01)
        (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@562@01)
        (<=
          q$v@562@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@562@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@561@01)))
          (=
            q$v@562@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@557@01 6)) q$a@561@01)))))
    (or
      (not
        (and
          (<= 0 q$a@561@01)
          (and
            (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@562@01)
              (<=
                q$v@562@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@561@01)
        (and
          (<= q$a@561@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@562@01)
            (<=
              q$v@562@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@563@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@561@01))
    ($SortWrappers.IntTo$Snap q$v@562@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@561@01))
    ($SortWrappers.IntTo$Snap q$v@562@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1172@11@1172@344-aux|)))
(pop) ; 7
; [then-branch: 479 | False | dead]
; [else-branch: 479 | True | live]
(push) ; 7
; [else-branch: 479 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 451 | $struct_get[Int]($struct_loc[Int](msg@451@01, 0)) != $struct_get[Int]($struct_loc[Int](self@528@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 0)))))
(pop) ; 6
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 0)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 0)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 0))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 480 | $struct_get[Int]($struct_loc[Int](msg@451@01, 0)) != $struct_get[Int]($struct_loc[Int](self@528@01, 0)) | live]
; [else-branch: 480 | $struct_get[Int]($struct_loc[Int](msg@451@01, 0)) == $struct_get[Int]($struct_loc[Int](self@528@01, 0)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 480 | $struct_get[Int]($struct_loc[Int](msg@451@01, 0)) != $struct_get[Int]($struct_loc[Int](self@528@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 0)))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int))) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 481 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) < 0 | dead]
; [else-branch: 481 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 481 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
    0)))
(pop) ; 7
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int))) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int))) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 482 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) < 0) | live]
; [else-branch: 482 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) < 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 482 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 483 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 483 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 483 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 484 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 484 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 484 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@528@01, 6)), $struct_get[Int]($struct_loc[Int](self@528@01, 3))))) + $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@528@01, 4)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 6, ($map_set(($struct_get($struct_loc(self, 6)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 3)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self,
;   6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) +
;   $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 6, ($map_set(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))) + $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 4)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@565@01 $Struct)
(assert (=
  self@565@01
  ($struct_set<$Struct> self@528@01 6 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)) (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@528@01 6)) ($struct_get<Int> ($struct_loc<Int> self@528@01 3)))))
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))))))
; [exec]
; self := ($struct_set(self, 3, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_set(self, 3, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@566@01 $Struct)
(assert (=
  self@566@01
  ($struct_set<$Struct> self@565@01 3 ($struct_get<Int> ($struct_loc<Int> msg@451@01 0)))))
; [exec]
; self := ($struct_set(self, 4, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))): $Struct)
; [eval] ($struct_set(self, 4, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))): $Struct)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@567@01 $Struct)
(assert (=
  self@567@01
  ($struct_set<$Struct> self@566@01 4 ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@451@01 1)))))))
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@464@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@464@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 485 | $out_of_gas@464@01 | live]
; [else-branch: 485 | !($out_of_gas@464@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 485 | $out_of_gas@464@01]
(assert $out_of_gas@464@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
(push) ; 10
; [then-branch: 486 | False | dead]
; [else-branch: 486 | True | live]
(push) ; 11
; [else-branch: 486 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 10
; [then-branch: 487 | False | dead]
; [else-branch: 487 | True | live]
(push) ; 11
; [else-branch: 487 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 488 | True | live]
; [else-branch: 488 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 488 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@568@01 $Snap)
(assert (= $t@568@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@465@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@569@01 $Struct)
(assert (=
  self@569@01
  ($struct_set<$Struct> self@455@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@455@01 7))
    l$havoc@465@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@569@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@569@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 489 | $struct_get[Int]($struct_loc[Int](self@569@01, 3)) == 0 | live]
; [else-branch: 489 | $struct_get[Int]($struct_loc[Int](self@569@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 489 | $struct_get[Int]($struct_loc[Int](self@569@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@569@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 12
(push) ; 12
; [else-branch: 489 | $struct_get[Int]($struct_loc[Int](self@569@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@569@01 3)) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@569@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@569@01 3)) 0)))
(push) ; 11
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@569@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@569@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@569@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@569@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@569@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@569@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 490 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | dead]
; [else-branch: 490 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 490 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 491 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5))) | live]
; [else-branch: 491 | $struct_get[Bool]($struct_loc[Int](self@569@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 491 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5))))
(push) ; 11
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@569@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@569@01 7))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@569@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@569@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 492 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5))) | live]
; [else-branch: 492 | $struct_get[Bool]($struct_loc[Int](self@569@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 492 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@569@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@569@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
; [then-branch: 493 | $struct_get[Bool]($struct_loc[Int](self@569@01, 5)) | dead]
; [else-branch: 493 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5))) | live]
(push) ; 12
; [else-branch: 493 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 11
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@569@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@569@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 11
; [then-branch: 494 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | dead]
; [else-branch: 494 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(push) ; 12
; [else-branch: 494 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@569@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@569@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@569@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@569@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 495 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5))) | live]
; [else-branch: 495 | $struct_get[Bool]($struct_loc[Int](self@569@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 495 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5)))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@569@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
; [then-branch: 496 | $struct_get[Bool]($struct_loc[Int](self@569@01, 5)) | dead]
; [else-branch: 496 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5))) | live]
(push) ; 12
; [else-branch: 496 | !($struct_get[Bool]($struct_loc[Int](self@569@01, 5)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) ($struct_get<Int> ($struct_loc<Int> self@569@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@569@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) ($struct_get<Int> ($struct_loc<Int> self@569@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@569@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) ($struct_get<Int> ($struct_loc<Int> self@569@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@570@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 497 | !(0 <= q$a@570@01) | live]
; [else-branch: 497 | 0 <= q$a@570@01 | live]
(push) ; 13
; [then-branch: 497 | !(0 <= q$a@570@01)]
(assert (not (<= 0 q$a@570@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 497 | 0 <= q$a@570@01]
(assert (<= 0 q$a@570@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@570@01) (not (<= 0 q$a@570@01))))
(push) ; 12
; [then-branch: 498 | 0 <= q$a@570@01 && q$a@570@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 498 | !(0 <= q$a@570@01 && q$a@570@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 498 | 0 <= q$a@570@01 && q$a@570@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@570@01)
  (<= q$a@570@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 14
; [then-branch: 499 | q$a@570@01 == $struct_get[Int]($struct_loc[Int](self@569@01, 3)) | live]
; [else-branch: 499 | q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 3)) | live]
(push) ; 15
; [then-branch: 499 | q$a@570@01 == $struct_get[Int]($struct_loc[Int](self@569@01, 3))]
(assert (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
(pop) ; 15
(push) ; 15
; [else-branch: 499 | q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 3))]
(assert (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
  (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3)))))
(push) ; 14
; [then-branch: 500 | q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 3)) && q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0)) | live]
; [else-branch: 500 | !(q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 3)) && q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0))) | live]
(push) ; 15
; [then-branch: 500 | q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 3)) && q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0))]
(assert (and
  (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
  (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 15
(push) ; 15
; [else-branch: 500 | !(q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 3)) && q$a@570@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0)))]
(assert (not
  (and
    (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
    (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
      (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))))
  (and
    (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
    (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))))))
(pop) ; 13
(push) ; 13
; [else-branch: 498 | !(0 <= q$a@570@01 && q$a@570@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@570@01)
    (<= q$a@570@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@570@01)
    (<= q$a@570@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@570@01)
    (<= q$a@570@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
      (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
          (not
            (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))))
      (and
        (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
        (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@570@01)
      (<= q$a@570@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@570@01)
    (<= q$a@570@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@570@01 Int)) (!
  (and
    (or (<= 0 q$a@570@01) (not (<= 0 q$a@570@01)))
    (=>
      (and
        (<= 0 q$a@570@01)
        (<= q$a@570@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@570@01)
        (<= q$a@570@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
          (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@570@01
                  ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
              (not
                (=
                  q$a@570@01
                  ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))))
          (and
            (not
              (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
            (not
              (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@570@01)
          (<= q$a@570@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@570@01)
        (<= q$a@570@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@570@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513-aux|)))
(push) ; 11
(assert (not (forall ((q$a@570@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@570@01)
        (<= q$a@570@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
        (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) q$a@570@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@570@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@570@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@570@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@570@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@570@01)
        (<= q$a@570@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 3))))
        (not (= q$a@570@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) q$a@570@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@570@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@570@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@570@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 11
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@571@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 501 | !(0 <= q$a@571@01) | live]
; [else-branch: 501 | 0 <= q$a@571@01 | live]
(push) ; 13
; [then-branch: 501 | !(0 <= q$a@571@01)]
(assert (not (<= 0 q$a@571@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 501 | 0 <= q$a@571@01]
(assert (<= 0 q$a@571@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@571@01) (not (<= 0 q$a@571@01))))
(push) ; 12
; [then-branch: 502 | 0 <= q$a@571@01 && q$a@571@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 502 | !(0 <= q$a@571@01 && q$a@571@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 502 | 0 <= q$a@571@01 && q$a@571@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@571@01)
  (<= q$a@571@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 14
; [then-branch: 503 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 6)), q$a@571@01) != 0 | live]
; [else-branch: 503 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 6)), q$a@571@01) == 0 | live]
(push) ; 15
; [then-branch: 503 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 6)), q$a@571@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 15
(push) ; 15
; [else-branch: 503 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 6)), q$a@571@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
  0))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
      0))))
(pop) ; 13
(push) ; 13
; [else-branch: 502 | !(0 <= q$a@571@01 && q$a@571@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@571@01)
    (<= q$a@571@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@571@01)
    (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@571@01)
    (<= q$a@571@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@571@01)
      (<= q$a@571@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@571@01)
    (<= q$a@571@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@571@01 Int)) (!
  (and
    (or (<= 0 q$a@571@01) (not (<= 0 q$a@571@01)))
    (=>
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@571@01)
          (<= q$a@571@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343-aux|)))
(push) ; 11
(assert (not (forall ((q$a@571@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@571@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@571@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@571@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@571@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@572@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 504 | !(0 <= q$a@572@01) | live]
; [else-branch: 504 | 0 <= q$a@572@01 | live]
(push) ; 13
; [then-branch: 504 | !(0 <= q$a@572@01)]
(assert (not (<= 0 q$a@572@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 504 | 0 <= q$a@572@01]
(assert (<= 0 q$a@572@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@572@01) (not (<= 0 q$a@572@01))))
(push) ; 12
; [then-branch: 505 | 0 <= q$a@572@01 && q$a@572@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 505 | !(0 <= q$a@572@01 && q$a@572@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 505 | 0 <= q$a@572@01 && q$a@572@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@572@01)
  (<= q$a@572@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 14
; [then-branch: 506 | q$a@572@01 == $struct_get[Int]($struct_loc[Int](self@569@01, 0)) | live]
; [else-branch: 506 | q$a@572@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0)) | live]
(push) ; 15
; [then-branch: 506 | q$a@572@01 == $struct_get[Int]($struct_loc[Int](self@569@01, 0))]
(assert (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
(pop) ; 15
(push) ; 15
; [else-branch: 506 | q$a@572@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0))]
(assert (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
  (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0)))))
(push) ; 14
; [then-branch: 507 | q$a@572@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 11)), q$a@572@01) == 0 | live]
; [else-branch: 507 | !(q$a@572@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 11)), q$a@572@01) == 0) | live]
(push) ; 15
; [then-branch: 507 | q$a@572@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 11)), q$a@572@01) == 0]
(assert (and
  (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 15
(push) ; 15
; [else-branch: 507 | !(q$a@572@01 != $struct_get[Int]($struct_loc[Int](self@569@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 11)), q$a@572@01) == 0)]
(assert (not
  (and
    (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
      0))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
        0)))
  (and
    (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
      0))))
(pop) ; 13
(push) ; 13
; [else-branch: 505 | !(0 <= q$a@572@01 && q$a@572@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@572@01)
    (<= q$a@572@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@572@01)
    (<= q$a@572@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@572@01)
    (<= q$a@572@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
      (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
            0)))
      (and
        (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@572@01)
      (<= q$a@572@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@572@01)
    (<= q$a@572@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@572@01 Int)) (!
  (and
    (or (<= 0 q$a@572@01) (not (<= 0 q$a@572@01)))
    (=>
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
          (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@572@01
                  ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
                0)))
          (and
            (not
              (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@572@01)
          (<= q$a@572@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396-aux|)))
(push) ; 11
(assert (not (forall ((q$a@572@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) q$a@572@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@572@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@572@01)
        (<= q$a@572@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@572@01 ($struct_get<Int> ($struct_loc<Int> self@569@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) q$a@572@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 11)) q$a@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@573@01 Int)
(declare-const q$v@574@01 Int)
(push) ; 11
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 508 | !(0 <= q$a@573@01) | live]
; [else-branch: 508 | 0 <= q$a@573@01 | live]
(push) ; 13
; [then-branch: 508 | !(0 <= q$a@573@01)]
(assert (not (<= 0 q$a@573@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 508 | 0 <= q$a@573@01]
(assert (<= 0 q$a@573@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 14
; [then-branch: 509 | !(q$a@573@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 509 | q$a@573@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 15
; [then-branch: 509 | !(q$a@573@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@573@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 15
(push) ; 15
; [else-branch: 509 | q$a@573@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@573@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 16
; [then-branch: 510 | !(0 <= q$v@574@01) | live]
; [else-branch: 510 | 0 <= q$v@574@01 | live]
(push) ; 17
; [then-branch: 510 | !(0 <= q$v@574@01)]
(assert (not (<= 0 q$v@574@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 510 | 0 <= q$v@574@01]
(assert (<= 0 q$v@574@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@574@01) (not (<= 0 q$v@574@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@574@01) (not (<= 0 q$v@574@01))))))
(assert (or
  (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@573@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@573@01)
  (and
    (<= 0 q$a@573@01)
    (=>
      (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@574@01) (not (<= 0 q$v@574@01)))))
    (or
      (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@573@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@573@01) (not (<= 0 q$a@573@01))))
(push) ; 12
; [then-branch: 511 | 0 <= q$a@573@01 && q$a@573@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@574@01 && q$v@574@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 511 | !(0 <= q$a@573@01 && q$a@573@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@574@01 && q$v@574@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 13
; [then-branch: 511 | 0 <= q$a@573@01 && q$a@573@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@574@01 && q$v@574@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@573@01)
  (and
    (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@574@01)
      (<=
        q$v@574@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 14
; [then-branch: 512 | q$v@574@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 6)), q$a@573@01) | live]
; [else-branch: 512 | q$v@574@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 6)), q$a@573@01) | live]
(push) ; 15
; [then-branch: 512 | q$v@574@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 6)), q$a@573@01)]
(assert (=
  q$v@574@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@573@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 512 | q$v@574@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@569@01, 6)), q$a@573@01)]
(assert (not
  (=
    q$v@574@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@573@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@574@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@573@01)))
  (=
    q$v@574@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@573@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 511 | !(0 <= q$a@573@01 && q$a@573@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@574@01 && q$v@574@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@573@01)
    (and
      (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@574@01)
        (<=
          q$v@574@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@573@01)
    (and
      (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@574@01)
        (<=
          q$v@574@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@573@01)
    (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@574@01)
    (<=
      q$v@574@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@574@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@573@01)))
      (=
        q$v@574@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@573@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@573@01)
      (and
        (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@574@01)
          (<=
            q$v@574@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@573@01)
    (and
      (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@574@01)
        (<=
          q$v@574@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@575@01 $PSF<$accessible$withdraw>)
(declare-const s@576@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@573@01 Int) (q$v@574@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@573@01)
      (and
        (<= 0 q$a@573@01)
        (=>
          (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@574@01) (not (<= 0 q$v@574@01)))))
        (or
          (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@573@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@573@01) (not (<= 0 q$a@573@01)))
    (=>
      (and
        (<= 0 q$a@573@01)
        (and
          (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@574@01)
            (<=
              q$v@574@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@573@01)
        (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@574@01)
        (<=
          q$v@574@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@574@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@573@01)))
          (=
            q$v@574@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 6)) q$a@573@01)))))
    (or
      (not
        (and
          (<= 0 q$a@573@01)
          (and
            (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@574@01)
              (<=
                q$v@574@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@573@01)
        (and
          (<= q$a@573@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@574@01)
            (<=
              q$v@574@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@575@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@573@01))
    ($SortWrappers.IntTo$Snap q$v@574@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@573@01))
    ($SortWrappers.IntTo$Snap q$v@574@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1172@11@1172@344-aux|)))
(pop) ; 10
; [then-branch: 513 | False | dead]
; [else-branch: 513 | True | live]
(push) ; 10
; [else-branch: 513 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 485 | !($out_of_gas@464@01)]
(assert (not $out_of_gas@464@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@464@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@464@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 514 | !($out_of_gas@464@01) | live]
; [else-branch: 514 | $out_of_gas@464@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 514 | !($out_of_gas@464@01)]
(assert (not $out_of_gas@464@01))
; [exec]
; label end
; [exec]
; exhale $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 515 | True | live]
; [else-branch: 515 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 515 | True]
; [eval] ($struct_get($struct_loc(self, 4)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (>
  ($struct_get<Int> ($struct_loc<Int> self@567@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>
  ($struct_get<Int> ($struct_loc<Int> self@567@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 10
; [then-branch: 516 | False | live]
; [else-branch: 516 | True | live]
(push) ; 11
; [then-branch: 516 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 516 | True]
; [eval] ($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(push) ; 12
; [then-branch: 517 | !($struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@455@01, 4))) | live]
; [else-branch: 517 | $struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@455@01, 4)) | live]
(push) ; 13
; [then-branch: 517 | !($struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@455@01, 4)))]
(assert (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(pop) ; 13
(push) ; 13
; [else-branch: 517 | $struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@455@01, 4))]
(assert (>
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@567@01 3)) 0))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
  (not (= ($struct_get<Int> ($struct_loc<Int> self@567@01 3)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 518 | $struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@455@01, 4)) && $struct_get[Int]($struct_loc[Int](self@567@01, 3)) != 0 | live]
; [else-branch: 518 | !($struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@455@01, 4)) && $struct_get[Int]($struct_loc[Int](self@567@01, 3)) != 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 518 | $struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@455@01, 4)) && $struct_get[Int]($struct_loc[Int](self@567@01, 3)) != 0]
(assert (and
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
  (not (= ($struct_get<Int> ($struct_loc<Int> self@567@01 3)) 0))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
  (not (= ($struct_get<Int> ($struct_loc<Int> self@567@01 3)) 0))))
(push) ; 10
(assert (not (=>
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@567@01 3)) 0)))
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@567@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@567@01 3)) 0)))
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@567@01 3)))))
; [eval] !$succ
; [then-branch: 519 | False | dead]
; [else-branch: 519 | True | live]
(push) ; 10
; [else-branch: 519 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 520 | True | live]
; [else-branch: 520 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 520 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@577@01 $Snap)
(assert (= $t@577@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@465@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@578@01 $Struct)
(assert (=
  self@578@01
  ($struct_set<$Struct> self@567@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@567@01 7))
    l$havoc@465@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@578@01 3)) 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 521 | $struct_get[Int]($struct_loc[Int](self@578@01, 3)) == 0 | dead]
; [else-branch: 521 | $struct_get[Int]($struct_loc[Int](self@578@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 521 | $struct_get[Int]($struct_loc[Int](self@578@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@578@01 3)) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@578@01 3)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@578@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@578@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 522 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | dead]
; [else-branch: 522 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 522 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@455@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5))) | live]
; [else-branch: 523 | $struct_get[Bool]($struct_loc[Int](self@578@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 523 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5))))
(push) ; 11
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@578@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@578@01 7))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@578@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@578@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 524 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5))) | live]
; [else-branch: 524 | $struct_get[Bool]($struct_loc[Int](self@578@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 524 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@578@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@578@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
; [then-branch: 525 | $struct_get[Bool]($struct_loc[Int](self@578@01, 5)) | dead]
; [else-branch: 525 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5))) | live]
(push) ; 12
; [else-branch: 525 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 11
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@578@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@578@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@455@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 11
; [then-branch: 526 | $struct_get[Bool]($struct_loc[Int](self@455@01, 5)) | dead]
; [else-branch: 526 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5))) | live]
(push) ; 12
; [else-branch: 526 | !($struct_get[Bool]($struct_loc[Int](self@455@01, 5)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@578@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@578@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@578@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@578@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 527 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5))) | live]
; [else-branch: 527 | $struct_get[Bool]($struct_loc[Int](self@578@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 527 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5)))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 11
; [then-branch: 528 | $struct_get[Bool]($struct_loc[Int](self@578@01, 5)) | dead]
; [else-branch: 528 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5))) | live]
(push) ; 12
; [else-branch: 528 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 5)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) ($struct_get<Int> ($struct_loc<Int> self@578@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@578@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) ($struct_get<Int> ($struct_loc<Int> self@578@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@578@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) ($struct_get<Int> ($struct_loc<Int> self@578@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@579@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 529 | !(0 <= q$a@579@01) | live]
; [else-branch: 529 | 0 <= q$a@579@01 | live]
(push) ; 13
; [then-branch: 529 | !(0 <= q$a@579@01)]
(assert (not (<= 0 q$a@579@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 529 | 0 <= q$a@579@01]
(assert (<= 0 q$a@579@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@579@01) (not (<= 0 q$a@579@01))))
(push) ; 12
; [then-branch: 530 | 0 <= q$a@579@01 && q$a@579@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 530 | !(0 <= q$a@579@01 && q$a@579@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 530 | 0 <= q$a@579@01 && q$a@579@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@579@01)
  (<= q$a@579@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 14
; [then-branch: 531 | q$a@579@01 == $struct_get[Int]($struct_loc[Int](self@578@01, 3)) | live]
; [else-branch: 531 | q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 3)) | live]
(push) ; 15
; [then-branch: 531 | q$a@579@01 == $struct_get[Int]($struct_loc[Int](self@578@01, 3))]
(assert (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
(pop) ; 15
(push) ; 15
; [else-branch: 531 | q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 3))]
(assert (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
  (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3)))))
(push) ; 14
; [then-branch: 532 | q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 3)) && q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0)) | live]
; [else-branch: 532 | !(q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 3)) && q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0))) | live]
(push) ; 15
; [then-branch: 532 | q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 3)) && q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0))]
(assert (and
  (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
  (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 15
(push) ; 15
; [else-branch: 532 | !(q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 3)) && q$a@579@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0)))]
(assert (not
  (and
    (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
    (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
      (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))))
  (and
    (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
    (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))))))
(pop) ; 13
(push) ; 13
; [else-branch: 530 | !(0 <= q$a@579@01 && q$a@579@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@579@01)
    (<= q$a@579@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@579@01)
    (<= q$a@579@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@579@01)
    (<= q$a@579@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
      (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
          (not
            (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))))
      (and
        (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
        (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@579@01)
      (<= q$a@579@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@579@01)
    (<= q$a@579@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@579@01 Int)) (!
  (and
    (or (<= 0 q$a@579@01) (not (<= 0 q$a@579@01)))
    (=>
      (and
        (<= 0 q$a@579@01)
        (<= q$a@579@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@579@01)
        (<= q$a@579@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
          (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@579@01
                  ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
              (not
                (=
                  q$a@579@01
                  ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))))
          (and
            (not
              (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
            (not
              (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@579@01)
          (<= q$a@579@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@579@01)
        (<= q$a@579@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@579@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513-aux|)))
(push) ; 11
(assert (not (forall ((q$a@579@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@579@01)
        (<= q$a@579@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
        (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) q$a@579@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@579@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@579@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@579@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@579@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@579@01)
        (<= q$a@579@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 3))))
        (not (= q$a@579@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) q$a@579@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@579@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@579@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@579@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1168@11@1168@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 11
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@580@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 533 | !(0 <= q$a@580@01) | live]
; [else-branch: 533 | 0 <= q$a@580@01 | live]
(push) ; 13
; [then-branch: 533 | !(0 <= q$a@580@01)]
(assert (not (<= 0 q$a@580@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 533 | 0 <= q$a@580@01]
(assert (<= 0 q$a@580@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@580@01) (not (<= 0 q$a@580@01))))
(push) ; 12
; [then-branch: 534 | 0 <= q$a@580@01 && q$a@580@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 534 | !(0 <= q$a@580@01 && q$a@580@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 534 | 0 <= q$a@580@01 && q$a@580@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@580@01)
  (<= q$a@580@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 14
; [then-branch: 535 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 6)), q$a@580@01) != 0 | live]
; [else-branch: 535 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 6)), q$a@580@01) == 0 | live]
(push) ; 15
; [then-branch: 535 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 6)), q$a@580@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 15
(push) ; 15
; [else-branch: 535 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 6)), q$a@580@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
  0))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
      0))))
(pop) ; 13
(push) ; 13
; [else-branch: 534 | !(0 <= q$a@580@01 && q$a@580@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@580@01)
    (<= q$a@580@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@580@01)
    (<= q$a@580@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@580@01)
    (<= q$a@580@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@580@01)
      (<= q$a@580@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@580@01)
    (<= q$a@580@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@580@01 Int)) (!
  (and
    (or (<= 0 q$a@580@01) (not (<= 0 q$a@580@01)))
    (=>
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@580@01)
          (<= q$a@580@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343-aux|)))
(push) ; 11
(assert (not (forall ((q$a@580@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@580@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@580@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@580@01)
        (<= q$a@580@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@580@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@580@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1170@11@1170@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@581@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 536 | !(0 <= q$a@581@01) | live]
; [else-branch: 536 | 0 <= q$a@581@01 | live]
(push) ; 13
; [then-branch: 536 | !(0 <= q$a@581@01)]
(assert (not (<= 0 q$a@581@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 536 | 0 <= q$a@581@01]
(assert (<= 0 q$a@581@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@581@01) (not (<= 0 q$a@581@01))))
(push) ; 12
; [then-branch: 537 | 0 <= q$a@581@01 && q$a@581@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 537 | !(0 <= q$a@581@01 && q$a@581@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 537 | 0 <= q$a@581@01 && q$a@581@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@581@01)
  (<= q$a@581@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 14
; [then-branch: 538 | q$a@581@01 == $struct_get[Int]($struct_loc[Int](self@578@01, 0)) | live]
; [else-branch: 538 | q$a@581@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0)) | live]
(push) ; 15
; [then-branch: 538 | q$a@581@01 == $struct_get[Int]($struct_loc[Int](self@578@01, 0))]
(assert (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
(pop) ; 15
(push) ; 15
; [else-branch: 538 | q$a@581@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0))]
(assert (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
  (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0)))))
(push) ; 14
; [then-branch: 539 | q$a@581@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 11)), q$a@581@01) == 0 | live]
; [else-branch: 539 | !(q$a@581@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 11)), q$a@581@01) == 0) | live]
(push) ; 15
; [then-branch: 539 | q$a@581@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 11)), q$a@581@01) == 0]
(assert (and
  (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 15
(push) ; 15
; [else-branch: 539 | !(q$a@581@01 != $struct_get[Int]($struct_loc[Int](self@578@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 11)), q$a@581@01) == 0)]
(assert (not
  (and
    (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
      0))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
        0)))
  (and
    (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
      0))))
(pop) ; 13
(push) ; 13
; [else-branch: 537 | !(0 <= q$a@581@01 && q$a@581@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@581@01)
    (<= q$a@581@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@581@01)
    (<= q$a@581@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@581@01)
    (<= q$a@581@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
      (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
            0)))
      (and
        (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@581@01)
      (<= q$a@581@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@581@01)
    (<= q$a@581@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@581@01 Int)) (!
  (and
    (or (<= 0 q$a@581@01) (not (<= 0 q$a@581@01)))
    (=>
      (and
        (<= 0 q$a@581@01)
        (<= q$a@581@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@581@01)
        (<= q$a@581@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
          (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@581@01
                  ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
                0)))
          (and
            (not
              (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@581@01)
          (<= q$a@581@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@581@01)
        (<= q$a@581@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396-aux|)))
(push) ; 11
(assert (not (forall ((q$a@581@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@581@01)
        (<= q$a@581@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) q$a@581@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@581@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@581@01)
        (<= q$a@581@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@581@01 ($struct_get<Int> ($struct_loc<Int> self@578@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 10)) q$a@581@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 11)) q$a@581@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1171@11@1171@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@582@01 Int)
(declare-const q$v@583@01 Int)
(push) ; 11
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 540 | !(0 <= q$a@582@01) | live]
; [else-branch: 540 | 0 <= q$a@582@01 | live]
(push) ; 13
; [then-branch: 540 | !(0 <= q$a@582@01)]
(assert (not (<= 0 q$a@582@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 540 | 0 <= q$a@582@01]
(assert (<= 0 q$a@582@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 14
; [then-branch: 541 | !(q$a@582@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 541 | q$a@582@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 15
; [then-branch: 541 | !(q$a@582@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@582@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 15
(push) ; 15
; [else-branch: 541 | q$a@582@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@582@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 16
; [then-branch: 542 | !(0 <= q$v@583@01) | live]
; [else-branch: 542 | 0 <= q$v@583@01 | live]
(push) ; 17
; [then-branch: 542 | !(0 <= q$v@583@01)]
(assert (not (<= 0 q$v@583@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 542 | 0 <= q$v@583@01]
(assert (<= 0 q$v@583@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@583@01) (not (<= 0 q$v@583@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@583@01) (not (<= 0 q$v@583@01))))))
(assert (or
  (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@582@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@582@01)
  (and
    (<= 0 q$a@582@01)
    (=>
      (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@583@01) (not (<= 0 q$v@583@01)))))
    (or
      (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@582@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@582@01) (not (<= 0 q$a@582@01))))
(push) ; 12
; [then-branch: 543 | 0 <= q$a@582@01 && q$a@582@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@583@01 && q$v@583@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 543 | !(0 <= q$a@582@01 && q$a@582@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@583@01 && q$v@583@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 13
; [then-branch: 543 | 0 <= q$a@582@01 && q$a@582@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@583@01 && q$v@583@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@582@01)
  (and
    (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@583@01)
      (<=
        q$v@583@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 14
; [then-branch: 544 | q$v@583@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 6)), q$a@582@01) | live]
; [else-branch: 544 | q$v@583@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 6)), q$a@582@01) | live]
(push) ; 15
; [then-branch: 544 | q$v@583@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 6)), q$a@582@01)]
(assert (=
  q$v@583@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@582@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 544 | q$v@583@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@578@01, 6)), q$a@582@01)]
(assert (not
  (=
    q$v@583@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@582@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@583@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@582@01)))
  (=
    q$v@583@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@582@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 543 | !(0 <= q$a@582@01 && q$a@582@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@583@01 && q$v@583@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@582@01)
    (and
      (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@583@01)
        (<=
          q$v@583@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@582@01)
    (and
      (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@583@01)
        (<=
          q$v@583@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@582@01)
    (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@583@01)
    (<=
      q$v@583@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@583@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@582@01)))
      (=
        q$v@583@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@582@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@582@01)
      (and
        (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@583@01)
          (<=
            q$v@583@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@582@01)
    (and
      (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@583@01)
        (<=
          q$v@583@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@584@01 $PSF<$accessible$withdraw>)
(declare-const s@585@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@582@01 Int) (q$v@583@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@582@01)
      (and
        (<= 0 q$a@582@01)
        (=>
          (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@583@01) (not (<= 0 q$v@583@01)))))
        (or
          (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@582@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@582@01) (not (<= 0 q$a@582@01)))
    (=>
      (and
        (<= 0 q$a@582@01)
        (and
          (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@583@01)
            (<=
              q$v@583@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@582@01)
        (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@583@01)
        (<=
          q$v@583@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@583@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@582@01)))
          (=
            q$v@583@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@578@01 6)) q$a@582@01)))))
    (or
      (not
        (and
          (<= 0 q$a@582@01)
          (and
            (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@583@01)
              (<=
                q$v@583@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@582@01)
        (and
          (<= q$a@582@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@583@01)
            (<=
              q$v@583@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@584@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@582@01))
    ($SortWrappers.IntTo$Snap q$v@583@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@582@01))
    ($SortWrappers.IntTo$Snap q$v@583@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1172@11@1172@344-aux|)))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 514 | $out_of_gas@464@01]
(assert $out_of_gas@464@01)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 480 | $struct_get[Int]($struct_loc[Int](msg@451@01, 0)) == $struct_get[Int]($struct_loc[Int](self@528@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@451@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@528@01 0))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 450 | !($struct_get[Int]($struct_loc[Int](msg@451@01, 1)) > $struct_get[Int]($struct_loc[Int](self@528@01, 4)))]
(assert (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@451@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 4)))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 420 | $struct_get[Bool]($struct_loc[Int](self@528@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@528@01 5)))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 389 | !($struct_get[Int]($struct_loc[Int](block@452@01, 4)) < $struct_get[Int]($struct_loc[Int](self@528@01, 2)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> block@452@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@528@01 2)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$withdraw ----------
(declare-const $succ@586@01 Bool)
(declare-const $succ@587@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@588@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@589@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@590@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@591@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@592@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@593@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@594@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@595@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@596@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@597@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@598@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@599@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@600@01 Bool)
; [exec]
; var l$pending_amount: $Int
(declare-const l$pending_amount@601@01 $Int)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@602@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@603@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@604@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@605@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@606@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@607@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@608@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@609@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@610@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@611@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@612@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@613@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@614@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@615@01 $Snap)
(assert (= $t@615@01 ($Snap.combine ($Snap.first $t@615@01) ($Snap.second $t@615@01))))
(assert (= ($Snap.first $t@615@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
(assert (= ($Snap.second $t@615@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@616@01 $Snap)
(assert (= $t@616@01 ($Snap.combine ($Snap.first $t@616@01) ($Snap.second $t@616@01))))
(assert (= ($Snap.first $t@616@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@592@01 1))))
(assert (= ($Snap.second $t@616@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@592@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@617@01 $Snap)
(assert (= $t@617@01 ($Snap.combine ($Snap.first $t@617@01) ($Snap.second $t@617@01))))
(assert (= ($Snap.first $t@617@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@592@01 2))))
(assert (= ($Snap.second $t@617@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@592@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@618@01 $Snap)
(assert (= $t@618@01 ($Snap.combine ($Snap.first $t@618@01) ($Snap.second $t@618@01))))
(assert (= ($Snap.first $t@618@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
(assert (= ($Snap.second $t@618@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@592@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@619@01 $Snap)
(assert (= $t@619@01 ($Snap.combine ($Snap.first $t@619@01) ($Snap.second $t@619@01))))
(assert (= ($Snap.first $t@619@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
(assert (= ($Snap.second $t@619@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@620@01 $Snap)
(assert (= $t@620@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@621@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 4
; [then-branch: 545 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 6)), $q0@621@01)) | live]
; [else-branch: 545 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 6)), $q0@621@01) | live]
(push) ; 5
; [then-branch: 545 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 6)), $q0@621@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 545 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 6)), $q0@621@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@621@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1210@11@1210@345-aux|)))
(assert (forall (($q0@621@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@621@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1210@11@1210@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $t@622@01 $Snap)
(assert (= $t@622@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $q0@623@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@623@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@623@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) $q0@623@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1211@11@1211@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@624@01 $Snap)
(assert (= $t@624@01 ($Snap.combine ($Snap.first $t@624@01) ($Snap.second $t@624@01))))
(assert (= ($Snap.first $t@624@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@592@01 7))))
(assert (= ($Snap.second $t@624@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@592@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@625@01 $Snap)
(assert (= $t@625@01 ($Snap.combine ($Snap.first $t@625@01) ($Snap.second $t@625@01))))
(assert (= ($Snap.first $t@625@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@592@01 8))))
(assert (= ($Snap.second $t@625@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@592@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@626@01 $Snap)
(assert (= $t@626@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@627@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 546 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 10)), $q1@627@01)) | live]
; [else-branch: 546 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 10)), $q1@627@01) | live]
(push) ; 5
; [then-branch: 546 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 10)), $q1@627@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 546 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 10)), $q1@627@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@627@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1214@11@1214@348-aux|)))
(assert (forall (($q1@627@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@627@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1214@11@1214@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@628@01 $Snap)
(assert (= $t@628@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q1@629@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@629@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@629@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) $q1@629@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1215@11@1215@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@630@01 $Snap)
(assert (= $t@630@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@631@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 547 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 11)), $q2@631@01)) | live]
; [else-branch: 547 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 11)), $q2@631@01) | live]
(push) ; 5
; [then-branch: 547 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 11)), $q2@631@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 547 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 11)), $q2@631@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@631@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1216@11@1216@348-aux|)))
(assert (forall (($q2@631@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@631@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1216@11@1216@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@632@01 $Snap)
(assert (= $t@632@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q2@633@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@633@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@633@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) $q2@633@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1217@11@1217@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@634@01 $Snap)
(assert (= $t@634@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@592@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@635@01 $Snap)
(assert (= $t@635@01 ($Snap.combine ($Snap.first $t@635@01) ($Snap.second $t@635@01))))
(assert (= ($Snap.first $t@635@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@635@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@636@01 $Snap)
(assert (= $t@636@01 ($Snap.combine ($Snap.first $t@636@01) ($Snap.second $t@636@01))))
(assert (= ($Snap.first $t@636@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@589@01 0))))
(assert (= ($Snap.second $t@636@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@589@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@637@01 $Snap)
(assert (= $t@637@01 ($Snap.combine ($Snap.first $t@637@01) ($Snap.second $t@637@01))))
(assert (= ($Snap.first $t@637@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@589@01 1))))
(assert (= ($Snap.second $t@637@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@589@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@638@01 $Snap)
(assert (= $t@638@01 ($Snap.combine ($Snap.first $t@638@01) ($Snap.second $t@638@01))))
(assert (= ($Snap.first $t@638@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@589@01 2))))
(assert (= ($Snap.second $t@638@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@589@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@639@01 $Snap)
(assert (= $t@639@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@589@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@640@01 $Snap)
(assert (= $t@640@01 ($Snap.combine ($Snap.first $t@640@01) ($Snap.second $t@640@01))))
(assert (= ($Snap.first $t@640@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@589@01 4))))
(assert (= ($Snap.second $t@640@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@589@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@641@01 $Snap)
(assert (= $t@641@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@589@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@642@01 $Snap)
(assert (= $t@642@01 ($Snap.combine ($Snap.first $t@642@01) ($Snap.second $t@642@01))))
(assert (= ($Snap.first $t@642@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
(assert (= ($Snap.second $t@642@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@643@01 $Snap)
(assert (= $t@643@01 ($Snap.combine ($Snap.first $t@643@01) ($Snap.second $t@643@01))))
(assert (= ($Snap.first $t@643@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))))
(assert (= ($Snap.second $t@643@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@644@01 $Snap)
(assert (= $t@644@01 ($Snap.combine ($Snap.first $t@644@01) ($Snap.second $t@644@01))))
(assert (= ($Snap.first $t@644@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@588@01 2))))
(assert (= ($Snap.second $t@644@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@588@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@645@01 $Snap)
(assert (= $t@645@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@588@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@646@01 $Snap)
(assert (= $t@646@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@588@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@647@01 $Snap)
(assert (= $t@647@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@648@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
(declare-const $t@649@01 $Snap)
(assert (= $t@649@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@592@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@592@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 548 | $struct_get[Int]($struct_loc[Int](self@592@01, 3)) == 0 | live]
; [else-branch: 548 | $struct_get[Int]($struct_loc[Int](self@592@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 548 | $struct_get[Int]($struct_loc[Int](self@592@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@592@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 548 | $struct_get[Int]($struct_loc[Int](self@592@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@592@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@592@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@592@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@592@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@592@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@650@01 $Snap)
(assert (= $t@650@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
(declare-const $t@651@01 $Snap)
(assert (= $t@651@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 549 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 549 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 549 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 549 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@652@01 $Snap)
(assert (= $t@652@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 550 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
; [else-branch: 550 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 550 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 550 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(declare-const $t@653@01 $Snap)
(assert (= $t@653@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 551 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
; [else-branch: 551 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 551 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 551 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@654@01 $Snap)
(assert (= $t@654@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 552 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 552 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 552 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 552 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@655@01 $Snap)
(assert (= $t@655@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
(declare-const $t@656@01 $Snap)
(assert (= $t@656@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 553 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 553 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 553 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 554 | False | live]
; [else-branch: 554 | True | live]
(push) ; 6
; [then-branch: 554 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 554 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 553 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) != 0
(declare-const $t@657@01 $Snap)
(assert (= $t@657@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@592@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@658@01 $Snap)
(assert (= $t@658@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@592@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@659@01 $Snap)
(assert (= $t@659@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@660@01 $Snap)
(assert (= $t@660@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 555 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
; [else-branch: 555 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 555 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 555 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@661@01 $Snap)
(assert (= $t@661@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 556 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 556 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 556 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 556 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
(declare-const $t@662@01 $Snap)
(assert (= $t@662@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) ($struct_get<Int> ($struct_loc<Int> self@592@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) ($struct_get<Int> ($struct_loc<Int> self@592@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@663@01 $Snap)
(assert (= $t@663@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@664@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 557 | !(0 <= q$a@664@01) | live]
; [else-branch: 557 | 0 <= q$a@664@01 | live]
(push) ; 5
; [then-branch: 557 | !(0 <= q$a@664@01)]
(assert (not (<= 0 q$a@664@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 557 | 0 <= q$a@664@01]
(assert (<= 0 q$a@664@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@664@01) (not (<= 0 q$a@664@01))))
(push) ; 4
; [then-branch: 558 | 0 <= q$a@664@01 && q$a@664@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 558 | !(0 <= q$a@664@01 && q$a@664@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 558 | 0 <= q$a@664@01 && q$a@664@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@664@01)
  (<= q$a@664@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 559 | q$a@664@01 == $struct_get[Int]($struct_loc[Int](self@592@01, 3)) | live]
; [else-branch: 559 | q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 3)) | live]
(push) ; 7
; [then-branch: 559 | q$a@664@01 == $struct_get[Int]($struct_loc[Int](self@592@01, 3))]
(assert (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 559 | q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 3))]
(assert (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
  (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3)))))
(push) ; 6
; [then-branch: 560 | q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 3)) && q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0)) | live]
; [else-branch: 560 | !(q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 3)) && q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0))) | live]
(push) ; 7
; [then-branch: 560 | q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 3)) && q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0))]
(assert (and
  (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
  (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 560 | !(q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 3)) && q$a@664@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0)))]
(assert (not
  (and
    (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
    (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
      (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))))
  (and
    (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
    (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 558 | !(0 <= q$a@664@01 && q$a@664@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@664@01)
    (<= q$a@664@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@664@01)
    (<= q$a@664@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@664@01)
    (<= q$a@664@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
      (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
          (not
            (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))))
      (and
        (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
        (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@664@01)
      (<= q$a@664@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@664@01)
    (<= q$a@664@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@664@01 Int)) (!
  (and
    (or (<= 0 q$a@664@01) (not (<= 0 q$a@664@01)))
    (=>
      (and
        (<= 0 q$a@664@01)
        (<= q$a@664@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@664@01)
        (<= q$a@664@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
          (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@664@01
                  ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
              (not
                (=
                  q$a@664@01
                  ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))))
          (and
            (not
              (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
            (not
              (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@664@01)
          (<= q$a@664@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@664@01)
        (<= q$a@664@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@664@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1250@11@1250@513-aux|)))
(assert (forall ((q$a@664@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@664@01)
        (<= q$a@664@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))
        (not (= q$a@664@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) q$a@664@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@664@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@664@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@664@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1250@11@1250@513|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@665@01 $Snap)
(assert (= $t@665@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@666@01 $Snap)
(assert (= $t@666@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@667@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 561 | !(0 <= q$a@667@01) | live]
; [else-branch: 561 | 0 <= q$a@667@01 | live]
(push) ; 5
; [then-branch: 561 | !(0 <= q$a@667@01)]
(assert (not (<= 0 q$a@667@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 561 | 0 <= q$a@667@01]
(assert (<= 0 q$a@667@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@667@01) (not (<= 0 q$a@667@01))))
(push) ; 4
; [then-branch: 562 | 0 <= q$a@667@01 && q$a@667@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 562 | !(0 <= q$a@667@01 && q$a@667@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 562 | 0 <= q$a@667@01 && q$a@667@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@667@01)
  (<= q$a@667@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 6
; [then-branch: 563 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 6)), q$a@667@01) != 0 | live]
; [else-branch: 563 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 6)), q$a@667@01) == 0 | live]
(push) ; 7
; [then-branch: 563 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 6)), q$a@667@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 563 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 6)), q$a@667@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 562 | !(0 <= q$a@667@01 && q$a@667@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@667@01)
    (<= q$a@667@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@667@01)
    (<= q$a@667@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@667@01)
    (<= q$a@667@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@667@01)
      (<= q$a@667@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@667@01)
    (<= q$a@667@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@667@01 Int)) (!
  (and
    (or (<= 0 q$a@667@01) (not (<= 0 q$a@667@01)))
    (=>
      (and
        (<= 0 q$a@667@01)
        (<= q$a@667@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@667@01)
        (<= q$a@667@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@667@01)
          (<= q$a@667@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@667@01)
        (<= q$a@667@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1252@11@1252@343-aux|)))
(assert (forall ((q$a@667@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@667@01)
        (<= q$a@667@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@667@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@667@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1252@11@1252@343|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@668@01 $Snap)
(assert (= $t@668@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@669@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 564 | !(0 <= q$a@669@01) | live]
; [else-branch: 564 | 0 <= q$a@669@01 | live]
(push) ; 5
; [then-branch: 564 | !(0 <= q$a@669@01)]
(assert (not (<= 0 q$a@669@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 564 | 0 <= q$a@669@01]
(assert (<= 0 q$a@669@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@669@01) (not (<= 0 q$a@669@01))))
(push) ; 4
; [then-branch: 565 | 0 <= q$a@669@01 && q$a@669@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 565 | !(0 <= q$a@669@01 && q$a@669@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 565 | 0 <= q$a@669@01 && q$a@669@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@669@01)
  (<= q$a@669@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
; [then-branch: 566 | q$a@669@01 == $struct_get[Int]($struct_loc[Int](self@592@01, 0)) | live]
; [else-branch: 566 | q$a@669@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0)) | live]
(push) ; 7
; [then-branch: 566 | q$a@669@01 == $struct_get[Int]($struct_loc[Int](self@592@01, 0))]
(assert (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 566 | q$a@669@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0))]
(assert (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
  (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))
(push) ; 6
; [then-branch: 567 | q$a@669@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 11)), q$a@669@01) == 0 | live]
; [else-branch: 567 | !(q$a@669@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 11)), q$a@669@01) == 0) | live]
(push) ; 7
; [then-branch: 567 | q$a@669@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 11)), q$a@669@01) == 0]
(assert (and
  (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 567 | !(q$a@669@01 != $struct_get[Int]($struct_loc[Int](self@592@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@592@01, 11)), q$a@669@01) == 0)]
(assert (not
  (and
    (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
        0)))
  (and
    (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 565 | !(0 <= q$a@669@01 && q$a@669@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@669@01)
    (<= q$a@669@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@669@01)
    (<= q$a@669@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@669@01)
    (<= q$a@669@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
      (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
            0)))
      (and
        (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@669@01)
      (<= q$a@669@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@669@01)
    (<= q$a@669@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@669@01 Int)) (!
  (and
    (or (<= 0 q$a@669@01) (not (<= 0 q$a@669@01)))
    (=>
      (and
        (<= 0 q$a@669@01)
        (<= q$a@669@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@669@01)
        (<= q$a@669@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
          (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@669@01
                  ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
                0)))
          (and
            (not
              (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@669@01)
          (<= q$a@669@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@669@01)
        (<= q$a@669@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1253@11@1253@396-aux|)))
(assert (forall ((q$a@669@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@669@01)
        (<= q$a@669@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@669@01 ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) q$a@669@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 11)) q$a@669@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1253@11@1253@396|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(18, q$a, q$v), write))
(declare-const $t@670@01 $Snap)
(assert (= $t@670@01 ($Snap.combine ($Snap.first $t@670@01) ($Snap.second $t@670@01))))
(assert (= ($Snap.first $t@670@01) $Snap.unit))
(declare-const q$a@671@01 Int)
(declare-const q$v@672@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 568 | !(0 <= q$a@671@01) | live]
; [else-branch: 568 | 0 <= q$a@671@01 | live]
(push) ; 5
; [then-branch: 568 | !(0 <= q$a@671@01)]
(assert (not (<= 0 q$a@671@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 568 | 0 <= q$a@671@01]
(assert (<= 0 q$a@671@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 569 | !(q$a@671@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 569 | q$a@671@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 569 | !(q$a@671@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@671@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 569 | q$a@671@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@671@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 570 | !(0 <= q$v@672@01) | live]
; [else-branch: 570 | 0 <= q$v@672@01 | live]
(push) ; 9
; [then-branch: 570 | !(0 <= q$v@672@01)]
(assert (not (<= 0 q$v@672@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 570 | 0 <= q$v@672@01]
(assert (<= 0 q$v@672@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 571 | !(q$v@672@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 571 | q$v@672@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 571 | !(q$v@672@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@672@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 571 | q$v@672@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@672@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@672@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@672@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@672@01)
  (and
    (<= 0 q$v@672@01)
    (or
      (<=
        q$v@672@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@672@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@672@01) (not (<= 0 q$v@672@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@672@01)
      (and
        (<= 0 q$v@672@01)
        (or
          (<=
            q$v@672@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@672@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@672@01) (not (<= 0 q$v@672@01))))))
(assert (or
  (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@671@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@671@01)
  (and
    (<= 0 q$a@671@01)
    (=>
      (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@672@01)
          (and
            (<= 0 q$v@672@01)
            (or
              (<=
                q$v@672@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@672@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@672@01) (not (<= 0 q$v@672@01)))))
    (or
      (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@671@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@671@01) (not (<= 0 q$a@671@01))))
(assert (and
  (<= 0 q$a@671@01)
  (and
    (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@672@01)
      (and
        (<=
          q$v@672@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@672@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@671@01)))))))
(declare-const sm@673@01 $PSF<$accessible$withdraw>)
(declare-const s@674@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@675@01 (Int Int Int) Int)
(declare-fun img@676@01 (Int Int Int) Bool)
(declare-fun inv@677@01 (Int Int Int) Int)
(declare-fun img@678@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@671@01 Int) (q$v@672@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@671@01)
      (and
        (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@672@01)
          (and
            (<=
              q$v@672@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@672@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@671@01))))))
    (and
      (=>
        (<= 0 q$a@671@01)
        (and
          (<= 0 q$a@671@01)
          (=>
            (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@672@01)
                (and
                  (<= 0 q$v@672@01)
                  (or
                    (<=
                      q$v@672@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@672@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@672@01) (not (<= 0 q$v@672@01)))))
          (or
            (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@671@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@671@01) (not (<= 0 q$a@671@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@671@01))
    ($SortWrappers.IntTo$Snap q$v@672@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@671@01))
    ($SortWrappers.IntTo$Snap q$v@672@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@671@01 Int) (q$v1@672@01 Int) (q$a2@671@01 Int) (q$v2@672@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@671@01)
        (and
          (<= q$a1@671@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@672@01)
            (and
              (<=
                q$v1@672@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@672@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a1@671@01))))))
      (and
        (<= 0 q$a2@671@01)
        (and
          (<= q$a2@671@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@672@01)
            (and
              (<=
                q$v2@672@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@672@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a2@671@01))))))
      (and (= q$a1@671@01 q$a2@671@01) (= q$v1@672@01 q$v2@672@01)))
    (and (= q$a1@671@01 q$a2@671@01) (= q$v1@672@01 q$v2@672@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@671@01 Int) (q$v@672@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@671@01)
      (and
        (<= q$a@671@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@672@01)
          (and
            (<=
              q$v@672@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@672@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) q$a@671@01))))))
    (and
      (and
        (= (inv@675@01 18 q$a@671@01 q$v@672@01) q$a@671@01)
        (= (inv@677@01 18 q$a@671@01 q$v@672@01) q$v@672@01))
      (and
        (img@676@01 18 q$a@671@01 q$v@672@01)
        (img@678@01 18 q$a@671@01 q$v@672@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@671@01))
    ($SortWrappers.IntTo$Snap q$v@672@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@671@01))
    ($SortWrappers.IntTo$Snap q$v@672@01))))
  :qid |quant-u-978|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
      (and
        (<= 0 (inv@675@01 $tag $to $amount))
        (and
          (<=
            (inv@675@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@677@01 $tag $to $amount))
            (and
              (<=
                (inv@677@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@677@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
    (and
      (= 18 $tag)
      (= (inv@675@01 $tag $to $amount) $to)
      (= (inv@677@01 $tag $to $amount) $amount)))
  :pattern ((inv@675@01 $tag $to $amount))
  :pattern ((inv@677@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(declare-const sm@679@01 $PSF<$accessible$withdraw>)
(declare-const s@680@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@680@01 $Snap)) (!
  (=>
    (and
      (and
        (img@676@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second s@680@01)))
        (img@678@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second s@680@01))))
      (and
        (<=
          0
          (inv@675@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second s@680@01))))
        (and
          (<=
            (inv@675@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second s@680@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@677@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second s@680@01))))
            (and
              (<=
                (inv@677@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second s@680@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@677@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second s@680@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@680@01))) ($SortWrappers.$SnapToInt ($Snap.second s@680@01))))))))))
    (and
      (not (= s@680@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) s@680@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) s@680@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) s@680@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) s@680@01))
  :qid |qp.psmValDef25|)))
(assert (forall ((s@680@01 $Snap)) (!
  ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) s@680@01) s@680@01)
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) s@680@01))
  :qid |qp.psmResTrgDef26|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@675@01 $tag $to $amount))
      (and
        (<=
          (inv@675@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@677@01 $tag $to $amount))
          (and
            (<=
              (inv@677@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@677@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@675@01 $tag $to $amount) (inv@677@01 $tag $to $amount))
  :qid |quant-u-979|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@681@01 $Snap)
(assert (= $t@681@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@588@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$pending_amount := $wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$pending_amount@682@01 $Int)
(assert (=
  l$pending_amount@682@01
  ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))))
; [exec]
; self := ($struct_set(self, 6, ($map_set(($struct_get($struct_loc(self, 6)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), 0): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 6, ($map_set(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), 0): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), 0): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@683@01 $Struct)
(assert (=
  self@683@01
  ($struct_set<$Struct> self@592@01 6 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0)) 0))))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < $unwrap(l$pending_amount)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap(l$pending_amount)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@683@01 7))
    ($unwrap<Int> l$pending_amount@682@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 572 | $struct_get[Int]($struct_loc[Int](self@683@01, 7)) < $unwrap[Int](l$pending_amount@682@01) | dead]
; [else-branch: 572 | !($struct_get[Int]($struct_loc[Int](self@683@01, 7)) < $unwrap[Int](l$pending_amount@682@01)) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 572 | !($struct_get[Int]($struct_loc[Int](self@683@01, 7)) < $unwrap[Int](l$pending_amount@682@01))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@683@01 7))
    ($unwrap<Int> l$pending_amount@682@01))))
(pop) ; 3
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < $unwrap(l$pending_amount))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < $unwrap(l$pending_amount)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap(l$pending_amount)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@683@01 7))
  ($unwrap<Int> l$pending_amount@682@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@683@01 7))
    ($unwrap<Int> l$pending_amount@682@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 573 | !($struct_get[Int]($struct_loc[Int](self@683@01, 7)) < $unwrap[Int](l$pending_amount@682@01)) | live]
; [else-branch: 573 | $struct_get[Int]($struct_loc[Int](self@683@01, 7)) < $unwrap[Int](l$pending_amount@682@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 573 | !($struct_get[Int]($struct_loc[Int](self@683@01, 7)) < $unwrap[Int](l$pending_amount@682@01))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@683@01 7))
    ($unwrap<Int> l$pending_amount@682@01))))
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   $unwrap(l$pending_amount)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap(l$pending_amount)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap(l$pending_amount)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap(l$pending_amount)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$pending_amount)
(declare-const self@684@01 $Struct)
(assert (=
  self@684@01
  ($struct_set<$Struct> self@683@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@683@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@683@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0)))
    ($unwrap<Int> l$pending_amount@682@01))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   $unwrap(l$pending_amount)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - $unwrap(l$pending_amount)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - $unwrap(l$pending_amount)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap(l$pending_amount)
(declare-const self@685@01 $Struct)
(assert (=
  self@685@01
  ($struct_set<$Struct> self@684@01 7 (-
    ($struct_get<Int> ($struct_loc<Int> self@684@01 7))
    ($unwrap<Int> l$pending_amount@682@01)))))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 574 | $struct_get[Int]($struct_loc[Int](self@685@01, 3)) == 0 | live]
; [else-branch: 574 | $struct_get[Int]($struct_loc[Int](self@685@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 574 | $struct_get[Int]($struct_loc[Int](self@685@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 5
(push) ; 5
; [else-branch: 574 | $struct_get[Int]($struct_loc[Int](self@685@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0)))
(push) ; 4
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@685@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@685@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 4
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@685@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@685@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 575 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 575 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 575 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 5
(push) ; 5
; [else-branch: 575 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 576 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
; [else-branch: 576 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 576 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 5
(push) ; 5
; [else-branch: 576 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(push) ; 4
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 7))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 577 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
; [else-branch: 577 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 577 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(push) ; 5
; [else-branch: 577 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 578 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
; [else-branch: 578 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 578 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 5
(push) ; 5
; [else-branch: 578 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(push) ; 4
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 7))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 4
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 579 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 579 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 579 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 6
; [then-branch: 580 | $struct_get[Int]($struct_loc[Int](self@685@01, 4)) != $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
; [else-branch: 580 | $struct_get[Int]($struct_loc[Int](self@685@01, 4)) == $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
(push) ; 7
; [then-branch: 580 | $struct_get[Int]($struct_loc[Int](self@685@01, 4)) != $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(pop) ; 7
(push) ; 7
; [else-branch: 580 | $struct_get[Int]($struct_loc[Int](self@685@01, 4)) == $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))
(pop) ; 5
(push) ; 5
; [else-branch: 579 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
          ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))))
; Joined path conditions
(push) ; 4
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@685@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 3)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@685@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 4
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 4
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@685@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@685@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 4
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 581 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
; [else-branch: 581 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 581 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 5
(push) ; 5
; [else-branch: 581 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 582 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
; [else-branch: 582 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 582 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 5
(push) ; 5
; [else-branch: 582 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 4
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) ($struct_get<Int> ($struct_loc<Int> self@685@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) ($struct_get<Int> ($struct_loc<Int> self@685@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) ($struct_get<Int> ($struct_loc<Int> self@685@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@686@01 Int)
(push) ; 4
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 583 | !(0 <= q$a@686@01) | live]
; [else-branch: 583 | 0 <= q$a@686@01 | live]
(push) ; 6
; [then-branch: 583 | !(0 <= q$a@686@01)]
(assert (not (<= 0 q$a@686@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 583 | 0 <= q$a@686@01]
(assert (<= 0 q$a@686@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@686@01) (not (<= 0 q$a@686@01))))
(push) ; 5
; [then-branch: 584 | 0 <= q$a@686@01 && q$a@686@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 584 | !(0 <= q$a@686@01 && q$a@686@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 6
; [then-branch: 584 | 0 <= q$a@686@01 && q$a@686@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@686@01)
  (<= q$a@686@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 7
; [then-branch: 585 | q$a@686@01 == $struct_get[Int]($struct_loc[Int](self@685@01, 3)) | live]
; [else-branch: 585 | q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 3)) | live]
(push) ; 8
; [then-branch: 585 | q$a@686@01 == $struct_get[Int]($struct_loc[Int](self@685@01, 3))]
(assert (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
(pop) ; 8
(push) ; 8
; [else-branch: 585 | q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 3))]
(assert (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
  (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3)))))
(push) ; 7
; [then-branch: 586 | q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 3)) && q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0)) | live]
; [else-branch: 586 | !(q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 3)) && q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0))) | live]
(push) ; 8
; [then-branch: 586 | q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 3)) && q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0))]
(assert (and
  (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
  (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 8
(push) ; 8
; [else-branch: 586 | !(q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 3)) && q$a@686@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0)))]
(assert (not
  (and
    (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
    (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
      (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))))
  (and
    (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
    (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))))))
(pop) ; 6
(push) ; 6
; [else-branch: 584 | !(0 <= q$a@686@01 && q$a@686@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@686@01)
    (<= q$a@686@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@686@01)
    (<= q$a@686@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@686@01)
    (<= q$a@686@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
      (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
          (not
            (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))))
      (and
        (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
        (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@686@01)
      (<= q$a@686@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@686@01)
    (<= q$a@686@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@686@01 Int)) (!
  (and
    (or (<= 0 q$a@686@01) (not (<= 0 q$a@686@01)))
    (=>
      (and
        (<= 0 q$a@686@01)
        (<= q$a@686@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@686@01)
        (<= q$a@686@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
          (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@686@01
                  ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
              (not
                (=
                  q$a@686@01
                  ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))))
          (and
            (not
              (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
            (not
              (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@686@01)
          (<= q$a@686@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@686@01)
        (<= q$a@686@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@686@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1292@11@1292@513-aux|)))
(push) ; 4
(assert (not (forall ((q$a@686@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@686@01)
        (<= q$a@686@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
        (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) q$a@686@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@686@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@686@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@686@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1292@11@1292@513|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@686@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@686@01)
        (<= q$a@686@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))
        (not (= q$a@686@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) q$a@686@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@686@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@686@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@686@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1292@11@1292@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@687@01 Int)
(push) ; 4
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 587 | !(0 <= q$a@687@01) | live]
; [else-branch: 587 | 0 <= q$a@687@01 | live]
(push) ; 6
; [then-branch: 587 | !(0 <= q$a@687@01)]
(assert (not (<= 0 q$a@687@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 587 | 0 <= q$a@687@01]
(assert (<= 0 q$a@687@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@687@01) (not (<= 0 q$a@687@01))))
(push) ; 5
; [then-branch: 588 | 0 <= q$a@687@01 && q$a@687@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 588 | !(0 <= q$a@687@01 && q$a@687@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 6
; [then-branch: 588 | 0 <= q$a@687@01 && q$a@687@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@687@01)
  (<= q$a@687@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 7
; [then-branch: 589 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 6)), q$a@687@01) != 0 | live]
; [else-branch: 589 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 6)), q$a@687@01) == 0 | live]
(push) ; 8
; [then-branch: 589 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 6)), q$a@687@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 8
(push) ; 8
; [else-branch: 589 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 6)), q$a@687@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
  0))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
      0))))
(pop) ; 6
(push) ; 6
; [else-branch: 588 | !(0 <= q$a@687@01 && q$a@687@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@687@01)
    (<= q$a@687@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@687@01)
    (<= q$a@687@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@687@01)
    (<= q$a@687@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@687@01)
      (<= q$a@687@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@687@01)
    (<= q$a@687@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@687@01 Int)) (!
  (and
    (or (<= 0 q$a@687@01) (not (<= 0 q$a@687@01)))
    (=>
      (and
        (<= 0 q$a@687@01)
        (<= q$a@687@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@687@01)
        (<= q$a@687@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@687@01)
          (<= q$a@687@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@687@01)
        (<= q$a@687@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1294@11@1294@343-aux|)))
(push) ; 4
(assert (not (forall ((q$a@687@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@687@01)
        (<= q$a@687@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@687@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1294@11@1294@343|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@687@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@687@01)
        (<= q$a@687@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@687@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@687@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1294@11@1294@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@688@01 Int)
(push) ; 4
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 590 | !(0 <= q$a@688@01) | live]
; [else-branch: 590 | 0 <= q$a@688@01 | live]
(push) ; 6
; [then-branch: 590 | !(0 <= q$a@688@01)]
(assert (not (<= 0 q$a@688@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 590 | 0 <= q$a@688@01]
(assert (<= 0 q$a@688@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@688@01) (not (<= 0 q$a@688@01))))
(push) ; 5
; [then-branch: 591 | 0 <= q$a@688@01 && q$a@688@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 591 | !(0 <= q$a@688@01 && q$a@688@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 6
; [then-branch: 591 | 0 <= q$a@688@01 && q$a@688@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@688@01)
  (<= q$a@688@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 7
; [then-branch: 592 | q$a@688@01 == $struct_get[Int]($struct_loc[Int](self@685@01, 0)) | live]
; [else-branch: 592 | q$a@688@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0)) | live]
(push) ; 8
; [then-branch: 592 | q$a@688@01 == $struct_get[Int]($struct_loc[Int](self@685@01, 0))]
(assert (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
(pop) ; 8
(push) ; 8
; [else-branch: 592 | q$a@688@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0))]
(assert (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
  (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))))
(push) ; 7
; [then-branch: 593 | q$a@688@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 11)), q$a@688@01) == 0 | live]
; [else-branch: 593 | !(q$a@688@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 11)), q$a@688@01) == 0) | live]
(push) ; 8
; [then-branch: 593 | q$a@688@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 11)), q$a@688@01) == 0]
(assert (and
  (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 8
(push) ; 8
; [else-branch: 593 | !(q$a@688@01 != $struct_get[Int]($struct_loc[Int](self@685@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 11)), q$a@688@01) == 0)]
(assert (not
  (and
    (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
      0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
        0)))
  (and
    (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
      0))))
(pop) ; 6
(push) ; 6
; [else-branch: 591 | !(0 <= q$a@688@01 && q$a@688@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@688@01)
    (<= q$a@688@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@688@01)
    (<= q$a@688@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@688@01)
    (<= q$a@688@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
      (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
            0)))
      (and
        (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@688@01)
      (<= q$a@688@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@688@01)
    (<= q$a@688@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@688@01 Int)) (!
  (and
    (or (<= 0 q$a@688@01) (not (<= 0 q$a@688@01)))
    (=>
      (and
        (<= 0 q$a@688@01)
        (<= q$a@688@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@688@01)
        (<= q$a@688@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
          (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@688@01
                  ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
                0)))
          (and
            (not
              (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@688@01)
          (<= q$a@688@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@688@01)
        (<= q$a@688@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1295@11@1295@396-aux|)))
(push) ; 4
(assert (not (forall ((q$a@688@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@688@01)
        (<= q$a@688@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) q$a@688@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1295@11@1295@396|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@688@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@688@01)
        (<= q$a@688@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@688@01 ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) q$a@688@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 11)) q$a@688@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1295@11@1295@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@689@01 Int)
(declare-const q$v@690@01 Int)
(push) ; 4
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 594 | !(0 <= q$a@689@01) | live]
; [else-branch: 594 | 0 <= q$a@689@01 | live]
(push) ; 6
; [then-branch: 594 | !(0 <= q$a@689@01)]
(assert (not (<= 0 q$a@689@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 594 | 0 <= q$a@689@01]
(assert (<= 0 q$a@689@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 7
; [then-branch: 595 | !(q$a@689@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 595 | q$a@689@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 8
; [then-branch: 595 | !(q$a@689@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@689@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 8
(push) ; 8
; [else-branch: 595 | q$a@689@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@689@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 9
; [then-branch: 596 | !(0 <= q$v@690@01) | live]
; [else-branch: 596 | 0 <= q$v@690@01 | live]
(push) ; 10
; [then-branch: 596 | !(0 <= q$v@690@01)]
(assert (not (<= 0 q$v@690@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 596 | 0 <= q$v@690@01]
(assert (<= 0 q$v@690@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@690@01) (not (<= 0 q$v@690@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@690@01) (not (<= 0 q$v@690@01))))))
(assert (or
  (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@689@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@689@01)
  (and
    (<= 0 q$a@689@01)
    (=>
      (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@690@01) (not (<= 0 q$v@690@01)))))
    (or
      (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@689@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@689@01) (not (<= 0 q$a@689@01))))
(push) ; 5
; [then-branch: 597 | 0 <= q$a@689@01 && q$a@689@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@690@01 && q$v@690@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 597 | !(0 <= q$a@689@01 && q$a@689@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@690@01 && q$v@690@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 6
; [then-branch: 597 | 0 <= q$a@689@01 && q$a@689@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@690@01 && q$v@690@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@689@01)
  (and
    (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@690@01)
      (<=
        q$v@690@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 7
; [then-branch: 598 | q$v@690@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 6)), q$a@689@01) | live]
; [else-branch: 598 | q$v@690@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 6)), q$a@689@01) | live]
(push) ; 8
; [then-branch: 598 | q$v@690@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 6)), q$a@689@01)]
(assert (=
  q$v@690@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@689@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 598 | q$v@690@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@685@01, 6)), q$a@689@01)]
(assert (not
  (=
    q$v@690@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@689@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@690@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@689@01)))
  (=
    q$v@690@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@689@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 597 | !(0 <= q$a@689@01 && q$a@689@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@690@01 && q$v@690@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@689@01)
    (and
      (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@690@01)
        (<=
          q$v@690@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@689@01)
    (and
      (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@690@01)
        (<=
          q$v@690@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@689@01)
    (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@690@01)
    (<=
      q$v@690@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@690@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@689@01)))
      (=
        q$v@690@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@689@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@689@01)
      (and
        (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@690@01)
          (<=
            q$v@690@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@689@01)
    (and
      (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@690@01)
        (<=
          q$v@690@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@689@01 Int) (q$v@690@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@689@01)
      (and
        (<= 0 q$a@689@01)
        (=>
          (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@690@01) (not (<= 0 q$v@690@01)))))
        (or
          (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@689@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@689@01) (not (<= 0 q$a@689@01)))
    (=>
      (and
        (<= 0 q$a@689@01)
        (and
          (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@690@01)
            (<=
              q$v@690@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@689@01)
        (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@690@01)
        (<=
          q$v@690@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@690@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@689@01)))
          (=
            q$v@690@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 6)) q$a@689@01)))))
    (or
      (not
        (and
          (<= 0 q$a@689@01)
          (and
            (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@690@01)
              (<=
                q$v@690@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@689@01)
        (and
          (<= q$a@689@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@690@01)
            (<=
              q$v@690@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@689@01))
    ($SortWrappers.IntTo$Snap q$v@690@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@689@01))
    ($SortWrappers.IntTo$Snap q$v@690@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1296@11@1296@344-aux|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$send_fail@603@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not l$send_fail@603@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 599 | l$send_fail@603@01 | live]
; [else-branch: 599 | !(l$send_fail@603@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 599 | l$send_fail@603@01]
(assert l$send_fail@603@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(msg, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const $t@691@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !($out_of_gas ||
;   ($out_of_gas ||
;   perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==>
;   $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==> $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none))
; [eval] $out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 600 | $out_of_gas@612@01 | live]
; [else-branch: 600 | !($out_of_gas@612@01) | live]
(push) ; 6
; [then-branch: 600 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
(pop) ; 6
(push) ; 6
; [else-branch: 600 | !($out_of_gas@612@01)]
(assert (not $out_of_gas@612@01))
(push) ; 7
; [then-branch: 601 | $out_of_gas@612@01 | live]
; [else-branch: 601 | !($out_of_gas@612@01) | live]
(push) ; 8
; [then-branch: 601 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
(pop) ; 8
(push) ; 8
; [else-branch: 601 | !($out_of_gas@612@01)]
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not $out_of_gas@612@01)
  (and (not $out_of_gas@612@01) (or (not $out_of_gas@612@01) $out_of_gas@612@01))))
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(push) ; 5
; [then-branch: 602 | False | dead]
; [else-branch: 602 | True | live]
(push) ; 6
; [else-branch: 602 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 5
; [then-branch: 603 | False | dead]
; [else-branch: 603 | True | live]
(push) ; 6
; [else-branch: 603 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 604 | True | live]
; [else-branch: 604 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 604 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@692@01 $Snap)
(assert (= $t@692@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@613@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@693@01 $Struct)
(assert (=
  self@693@01
  ($struct_set<$Struct> self@592@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@592@01 7))
    l$havoc$6@613@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@693@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@693@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 605 | $struct_get[Int]($struct_loc[Int](self@693@01, 3)) == 0 | live]
; [else-branch: 605 | $struct_get[Int]($struct_loc[Int](self@693@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 605 | $struct_get[Int]($struct_loc[Int](self@693@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@693@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 7
(push) ; 7
; [else-branch: 605 | $struct_get[Int]($struct_loc[Int](self@693@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@693@01 3)) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@693@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@693@01 3)) 0)))
(push) ; 6
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@693@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@693@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@693@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@693@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 606 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 606 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 606 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 7
(push) ; 7
; [else-branch: 606 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 607 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5))) | live]
; [else-branch: 607 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 607 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 607 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))))
(push) ; 6
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@693@01 7))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@693@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 608 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5))) | live]
; [else-branch: 608 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 608 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 608 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 609 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5)) | live]
; [else-branch: 609 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 609 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 7
(push) ; 7
; [else-branch: 609 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@693@01 7))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@693@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 6
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 610 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 610 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 610 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
; [then-branch: 611 | $struct_get[Int]($struct_loc[Int](self@693@01, 4)) != $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
; [else-branch: 611 | $struct_get[Int]($struct_loc[Int](self@693@01, 4)) == $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
(push) ; 9
; [then-branch: 611 | $struct_get[Int]($struct_loc[Int](self@693@01, 4)) != $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(pop) ; 9
(push) ; 9
; [else-branch: 611 | $struct_get[Int]($struct_loc[Int](self@693@01, 4)) == $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))
(pop) ; 7
(push) ; 7
; [else-branch: 610 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
          ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@693@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 3)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@693@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@693@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@693@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@693@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@693@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 612 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5))) | live]
; [else-branch: 612 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 612 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 7
(push) ; 7
; [else-branch: 612 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 613 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5)) | live]
; [else-branch: 613 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 613 | $struct_get[Bool]($struct_loc[Int](self@693@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@693@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 7
(push) ; 7
; [else-branch: 613 | !($struct_get[Bool]($struct_loc[Int](self@693@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@693@01 4))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@693@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@693@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) ($struct_get<Int> ($struct_loc<Int> self@693@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) ($struct_get<Int> ($struct_loc<Int> self@693@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@693@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) ($struct_get<Int> ($struct_loc<Int> self@693@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@694@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 614 | !(0 <= q$a@694@01) | live]
; [else-branch: 614 | 0 <= q$a@694@01 | live]
(push) ; 8
; [then-branch: 614 | !(0 <= q$a@694@01)]
(assert (not (<= 0 q$a@694@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 614 | 0 <= q$a@694@01]
(assert (<= 0 q$a@694@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@694@01) (not (<= 0 q$a@694@01))))
(push) ; 7
; [then-branch: 615 | 0 <= q$a@694@01 && q$a@694@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 615 | !(0 <= q$a@694@01 && q$a@694@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 615 | 0 <= q$a@694@01 && q$a@694@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@694@01)
  (<= q$a@694@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 9
; [then-branch: 616 | q$a@694@01 == $struct_get[Int]($struct_loc[Int](self@693@01, 3)) | live]
; [else-branch: 616 | q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 3)) | live]
(push) ; 10
; [then-branch: 616 | q$a@694@01 == $struct_get[Int]($struct_loc[Int](self@693@01, 3))]
(assert (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
(pop) ; 10
(push) ; 10
; [else-branch: 616 | q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 3))]
(assert (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
  (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3)))))
(push) ; 9
; [then-branch: 617 | q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 3)) && q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0)) | live]
; [else-branch: 617 | !(q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 3)) && q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0))) | live]
(push) ; 10
; [then-branch: 617 | q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 3)) && q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0))]
(assert (and
  (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
  (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(push) ; 10
; [else-branch: 617 | !(q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 3)) && q$a@694@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0)))]
(assert (not
  (and
    (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
    (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
      (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))))
  (and
    (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
    (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))))))
(pop) ; 8
(push) ; 8
; [else-branch: 615 | !(0 <= q$a@694@01 && q$a@694@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@694@01)
    (<= q$a@694@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@694@01)
    (<= q$a@694@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@694@01)
    (<= q$a@694@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
      (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
          (not
            (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))))
      (and
        (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
        (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@694@01)
      (<= q$a@694@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@694@01)
    (<= q$a@694@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@694@01 Int)) (!
  (and
    (or (<= 0 q$a@694@01) (not (<= 0 q$a@694@01)))
    (=>
      (and
        (<= 0 q$a@694@01)
        (<= q$a@694@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@694@01)
        (<= q$a@694@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
          (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@694@01
                  ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
              (not
                (=
                  q$a@694@01
                  ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))))
          (and
            (not
              (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
            (not
              (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@694@01)
          (<= q$a@694@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@694@01)
        (<= q$a@694@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@694@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513-aux|)))
(push) ; 6
(assert (not (forall ((q$a@694@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@694@01)
        (<= q$a@694@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
        (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) q$a@694@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@694@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@694@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@694@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@694@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@694@01)
        (<= q$a@694@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 3))))
        (not (= q$a@694@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) q$a@694@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@694@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@694@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@694@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 6
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@695@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 618 | !(0 <= q$a@695@01) | live]
; [else-branch: 618 | 0 <= q$a@695@01 | live]
(push) ; 8
; [then-branch: 618 | !(0 <= q$a@695@01)]
(assert (not (<= 0 q$a@695@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 618 | 0 <= q$a@695@01]
(assert (<= 0 q$a@695@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@695@01) (not (<= 0 q$a@695@01))))
(push) ; 7
; [then-branch: 619 | 0 <= q$a@695@01 && q$a@695@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 619 | !(0 <= q$a@695@01 && q$a@695@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 619 | 0 <= q$a@695@01 && q$a@695@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@695@01)
  (<= q$a@695@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 9
; [then-branch: 620 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 6)), q$a@695@01) != 0 | live]
; [else-branch: 620 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 6)), q$a@695@01) == 0 | live]
(push) ; 10
; [then-branch: 620 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 6)), q$a@695@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(push) ; 10
; [else-branch: 620 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 6)), q$a@695@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
  0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 619 | !(0 <= q$a@695@01 && q$a@695@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@695@01)
    (<= q$a@695@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@695@01)
    (<= q$a@695@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@695@01)
    (<= q$a@695@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@695@01)
      (<= q$a@695@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@695@01)
    (<= q$a@695@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@695@01 Int)) (!
  (and
    (or (<= 0 q$a@695@01) (not (<= 0 q$a@695@01)))
    (=>
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@695@01)
          (<= q$a@695@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343-aux|)))
(push) ; 6
(assert (not (forall ((q$a@695@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@695@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@695@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@695@01)
        (<= q$a@695@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@695@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@695@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@696@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 621 | !(0 <= q$a@696@01) | live]
; [else-branch: 621 | 0 <= q$a@696@01 | live]
(push) ; 8
; [then-branch: 621 | !(0 <= q$a@696@01)]
(assert (not (<= 0 q$a@696@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 621 | 0 <= q$a@696@01]
(assert (<= 0 q$a@696@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@696@01) (not (<= 0 q$a@696@01))))
(push) ; 7
; [then-branch: 622 | 0 <= q$a@696@01 && q$a@696@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 622 | !(0 <= q$a@696@01 && q$a@696@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 622 | 0 <= q$a@696@01 && q$a@696@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@696@01)
  (<= q$a@696@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 9
; [then-branch: 623 | q$a@696@01 == $struct_get[Int]($struct_loc[Int](self@693@01, 0)) | live]
; [else-branch: 623 | q$a@696@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0)) | live]
(push) ; 10
; [then-branch: 623 | q$a@696@01 == $struct_get[Int]($struct_loc[Int](self@693@01, 0))]
(assert (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 623 | q$a@696@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0))]
(assert (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
  (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0)))))
(push) ; 9
; [then-branch: 624 | q$a@696@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 11)), q$a@696@01) == 0 | live]
; [else-branch: 624 | !(q$a@696@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 11)), q$a@696@01) == 0) | live]
(push) ; 10
; [then-branch: 624 | q$a@696@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 11)), q$a@696@01) == 0]
(assert (and
  (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 10
(push) ; 10
; [else-branch: 624 | !(q$a@696@01 != $struct_get[Int]($struct_loc[Int](self@693@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 11)), q$a@696@01) == 0)]
(assert (not
  (and
    (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
      0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
        0)))
  (and
    (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 622 | !(0 <= q$a@696@01 && q$a@696@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@696@01)
    (<= q$a@696@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@696@01)
    (<= q$a@696@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@696@01)
    (<= q$a@696@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
      (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
            0)))
      (and
        (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@696@01)
      (<= q$a@696@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@696@01)
    (<= q$a@696@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@696@01 Int)) (!
  (and
    (or (<= 0 q$a@696@01) (not (<= 0 q$a@696@01)))
    (=>
      (and
        (<= 0 q$a@696@01)
        (<= q$a@696@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@696@01)
        (<= q$a@696@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
          (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@696@01
                  ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
                0)))
          (and
            (not
              (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@696@01)
          (<= q$a@696@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@696@01)
        (<= q$a@696@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396-aux|)))
(push) ; 6
(assert (not (forall ((q$a@696@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@696@01)
        (<= q$a@696@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) q$a@696@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@696@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@696@01)
        (<= q$a@696@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@696@01 ($struct_get<Int> ($struct_loc<Int> self@693@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 10)) q$a@696@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 11)) q$a@696@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@697@01 Int)
(declare-const q$v@698@01 Int)
(push) ; 6
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 625 | !(0 <= q$a@697@01) | live]
; [else-branch: 625 | 0 <= q$a@697@01 | live]
(push) ; 8
; [then-branch: 625 | !(0 <= q$a@697@01)]
(assert (not (<= 0 q$a@697@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 625 | 0 <= q$a@697@01]
(assert (<= 0 q$a@697@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 9
; [then-branch: 626 | !(q$a@697@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 626 | q$a@697@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 10
; [then-branch: 626 | !(q$a@697@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@697@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 10
(push) ; 10
; [else-branch: 626 | q$a@697@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@697@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 11
; [then-branch: 627 | !(0 <= q$v@698@01) | live]
; [else-branch: 627 | 0 <= q$v@698@01 | live]
(push) ; 12
; [then-branch: 627 | !(0 <= q$v@698@01)]
(assert (not (<= 0 q$v@698@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 627 | 0 <= q$v@698@01]
(assert (<= 0 q$v@698@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@698@01) (not (<= 0 q$v@698@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@698@01) (not (<= 0 q$v@698@01))))))
(assert (or
  (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@697@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@697@01)
  (and
    (<= 0 q$a@697@01)
    (=>
      (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@698@01) (not (<= 0 q$v@698@01)))))
    (or
      (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@697@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@697@01) (not (<= 0 q$a@697@01))))
(push) ; 7
; [then-branch: 628 | 0 <= q$a@697@01 && q$a@697@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@698@01 && q$v@698@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 628 | !(0 <= q$a@697@01 && q$a@697@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@698@01 && q$v@698@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 8
; [then-branch: 628 | 0 <= q$a@697@01 && q$a@697@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@698@01 && q$v@698@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@697@01)
  (and
    (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@698@01)
      (<=
        q$v@698@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 9
; [then-branch: 629 | q$v@698@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 6)), q$a@697@01) | live]
; [else-branch: 629 | q$v@698@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 6)), q$a@697@01) | live]
(push) ; 10
; [then-branch: 629 | q$v@698@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 6)), q$a@697@01)]
(assert (=
  q$v@698@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@697@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 629 | q$v@698@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@693@01, 6)), q$a@697@01)]
(assert (not
  (=
    q$v@698@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@697@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@698@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@697@01)))
  (=
    q$v@698@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@697@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 628 | !(0 <= q$a@697@01 && q$a@697@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@698@01 && q$v@698@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@697@01)
    (and
      (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@698@01)
        (<=
          q$v@698@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@697@01)
    (and
      (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@698@01)
        (<=
          q$v@698@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@697@01)
    (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@698@01)
    (<=
      q$v@698@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@698@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@697@01)))
      (=
        q$v@698@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@697@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@697@01)
      (and
        (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@698@01)
          (<=
            q$v@698@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@697@01)
    (and
      (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@698@01)
        (<=
          q$v@698@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@697@01 Int) (q$v@698@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@697@01)
      (and
        (<= 0 q$a@697@01)
        (=>
          (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@698@01) (not (<= 0 q$v@698@01)))))
        (or
          (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@697@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@697@01) (not (<= 0 q$a@697@01)))
    (=>
      (and
        (<= 0 q$a@697@01)
        (and
          (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@698@01)
            (<=
              q$v@698@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@697@01)
        (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@698@01)
        (<=
          q$v@698@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@698@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@697@01)))
          (=
            q$v@698@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@693@01 6)) q$a@697@01)))))
    (or
      (not
        (and
          (<= 0 q$a@697@01)
          (and
            (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@698@01)
              (<=
                q$v@698@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@697@01)
        (and
          (<= q$a@697@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@698@01)
            (<=
              q$v@698@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@697@01))
    ($SortWrappers.IntTo$Snap q$v@698@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@697@01))
    ($SortWrappers.IntTo$Snap q$v@698@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1416@11@1416@344-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@699@01 Int)
(push) ; 6
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@700@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef27|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef28|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@699@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@699@01))))
(push) ; 7
; [then-branch: 630 | PredicatePermLookup($accessible$withdraw, pm@700@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@699@01)) > Z | live]
; [else-branch: 630 | !(PredicatePermLookup($accessible$withdraw, pm@700@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@699@01)) > Z) | live]
(push) ; 8
; [then-branch: 630 | PredicatePermLookup($accessible$withdraw, pm@700@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@699@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@699@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 9
; [then-branch: 631 | False | dead]
; [else-branch: 631 | True | live]
(push) ; 10
; [else-branch: 631 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 632 | False | live]
; [else-branch: 632 | True | live]
(push) ; 10
; [then-branch: 632 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 632 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 11
; [then-branch: 633 | False | dead]
; [else-branch: 633 | True | live]
(push) ; 12
; [else-branch: 633 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 630 | !(PredicatePermLookup($accessible$withdraw, pm@700@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@699@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@699@01)))
    $Perm.No)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@699@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@699@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef27|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef28|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@699@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@699@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@699@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 18)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
            ($SortWrappers.IntTo$Snap $a@699@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@700@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
          ($SortWrappers.IntTo$Snap $a@699@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@699@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@699@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531-aux|)))
(pop) ; 5
; [then-branch: 634 | False | dead]
; [else-branch: 634 | True | live]
(push) ; 5
; [else-branch: 634 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 599 | !(l$send_fail@603@01)]
(assert (not l$send_fail@603@01))
(pop) ; 4
; [eval] !l$send_fail
(push) ; 4
(set-option :timeout 10)
(assert (not l$send_fail@603@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$send_fail@603@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 635 | !(l$send_fail@603@01) | live]
; [else-branch: 635 | l$send_fail@603@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 635 | !(l$send_fail@603@01)]
(assert (not l$send_fail@603@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@701@01 $Snap)
(assert (= $t@701@01 ($Snap.combine ($Snap.first $t@701@01) ($Snap.second $t@701@01))))
(assert (= ($Snap.first $t@701@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
(assert (= ($Snap.second $t@701@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@702@01 $Snap)
(assert (= $t@702@01 ($Snap.combine ($Snap.first $t@702@01) ($Snap.second $t@702@01))))
(assert (= ($Snap.first $t@702@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 1))))
(assert (= ($Snap.second $t@702@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@703@01 $Snap)
(assert (= $t@703@01 ($Snap.combine ($Snap.first $t@703@01) ($Snap.second $t@703@01))))
(assert (= ($Snap.first $t@703@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 2))))
(assert (= ($Snap.second $t@703@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@704@01 $Snap)
(assert (= $t@704@01 ($Snap.combine ($Snap.first $t@704@01) ($Snap.second $t@704@01))))
(assert (= ($Snap.first $t@704@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
(assert (= ($Snap.second $t@704@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@705@01 $Snap)
(assert (= $t@705@01 ($Snap.combine ($Snap.first $t@705@01) ($Snap.second $t@705@01))))
(assert (= ($Snap.first $t@705@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))))
(assert (= ($Snap.second $t@705@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@706@01 $Snap)
(assert (= $t@706@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@707@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 6
; [then-branch: 636 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), $q0@707@01)) | live]
; [else-branch: 636 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), $q0@707@01) | live]
(push) ; 7
; [then-branch: 636 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), $q0@707@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 636 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), $q0@707@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@707@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1322@11@1322@345-aux|)))
(assert (forall (($q0@707@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@707@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1322@11@1322@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $t@708@01 $Snap)
(assert (= $t@708@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $q0@709@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@709@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@709@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) $q0@709@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1323@11@1323@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@710@01 $Snap)
(assert (= $t@710@01 ($Snap.combine ($Snap.first $t@710@01) ($Snap.second $t@710@01))))
(assert (= ($Snap.first $t@710@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 7))))
(assert (= ($Snap.second $t@710@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@711@01 $Snap)
(assert (= $t@711@01 ($Snap.combine ($Snap.first $t@711@01) ($Snap.second $t@711@01))))
(assert (= ($Snap.first $t@711@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 8))))
(assert (= ($Snap.second $t@711@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@712@01 $Snap)
(assert (= $t@712@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@713@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 637 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 10)), $q1@713@01)) | live]
; [else-branch: 637 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 10)), $q1@713@01) | live]
(push) ; 7
; [then-branch: 637 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 10)), $q1@713@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 637 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 10)), $q1@713@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@713@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1326@11@1326@348-aux|)))
(assert (forall (($q1@713@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@713@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1326@11@1326@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@714@01 $Snap)
(assert (= $t@714@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q1@715@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@715@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@715@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $q1@715@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1327@11@1327@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@716@01 $Snap)
(assert (= $t@716@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@717@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 6
; [then-branch: 638 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 11)), $q2@717@01)) | live]
; [else-branch: 638 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 11)), $q2@717@01) | live]
(push) ; 7
; [then-branch: 638 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 11)), $q2@717@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 638 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 11)), $q2@717@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@717@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1328@11@1328@348-aux|)))
(assert (forall (($q2@717@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@717@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1328@11@1328@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@718@01 $Snap)
(assert (= $t@718@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q2@719@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@719@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@719@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) $q2@719@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1329@11@1329@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@720@01 $Snap)
(assert (= $t@720@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@721@01 $Snap)
(assert (= $t@721@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@722@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@722@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $a@722@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@685@01 10)) $a@722@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) $a@722@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1332@11@1332@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
(declare-const $t@723@01 $Snap)
(assert (= $t@723@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 639 | $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) == 0 | live]
; [else-branch: 639 | $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 639 | $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 6
(push) ; 6
; [else-branch: 639 | $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@724@01 $Snap)
(assert (= $t@724@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
(declare-const $t@725@01 $Snap)
(assert (= $t@725@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 640 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
; [else-branch: 640 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 640 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(push) ; 6
; [else-branch: 640 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@726@01 $Snap)
(assert (= $t@726@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 641 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))) | live]
; [else-branch: 641 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 641 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 6
(push) ; 6
; [else-branch: 641 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(declare-const $t@727@01 $Snap)
(assert (= $t@727@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 642 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))) | live]
; [else-branch: 642 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 642 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 6
(push) ; 6
; [else-branch: 642 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@728@01 $Snap)
(assert (= $t@728@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 643 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)) | live]
; [else-branch: 643 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 643 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 6
(push) ; 6
; [else-branch: 643 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
(declare-const $t@729@01 $Snap)
(assert (= $t@729@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
(declare-const $t@730@01 $Snap)
(assert (= $t@730@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 644 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
; [else-branch: 644 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 644 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 7
; [then-branch: 645 | $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 4)) != $struct_get[Int]($struct_loc[Int](self@685@01, 4)) | live]
; [else-branch: 645 | $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 4)) == $struct_get[Int]($struct_loc[Int](self@685@01, 4)) | live]
(push) ; 8
; [then-branch: 645 | $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 4)) != $struct_get[Int]($struct_loc[Int](self@685@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))))
(pop) ; 8
(push) ; 8
; [else-branch: 645 | $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 4)) == $struct_get[Int]($struct_loc[Int](self@685@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))))
(pop) ; 6
(push) ; 6
; [else-branch: 644 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
          ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))))))
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) != 0
(declare-const $t@731@01 $Snap)
(assert (= $t@731@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@732@01 $Snap)
(assert (= $t@732@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@733@01 $Snap)
(assert (= $t@733@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@734@01 $Snap)
(assert (= $t@734@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 646 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))) | live]
; [else-branch: 646 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 646 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 6
(push) ; 6
; [else-branch: 646 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@735@01 $Snap)
(assert (= $t@735@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 647 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)) | live]
; [else-branch: 647 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 647 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 6
(push) ; 6
; [else-branch: 647 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
(declare-const $t@736@01 $Snap)
(assert (= $t@736@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@737@01 $Snap)
(assert (= $t@737@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@738@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 648 | !(0 <= q$a@738@01) | live]
; [else-branch: 648 | 0 <= q$a@738@01 | live]
(push) ; 7
; [then-branch: 648 | !(0 <= q$a@738@01)]
(assert (not (<= 0 q$a@738@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 648 | 0 <= q$a@738@01]
(assert (<= 0 q$a@738@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@738@01) (not (<= 0 q$a@738@01))))
(push) ; 6
; [then-branch: 649 | 0 <= q$a@738@01 && q$a@738@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 649 | !(0 <= q$a@738@01 && q$a@738@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 649 | 0 <= q$a@738@01 && q$a@738@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@738@01)
  (<= q$a@738@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
; [then-branch: 650 | q$a@738@01 == $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) | live]
; [else-branch: 650 | q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) | live]
(push) ; 9
; [then-branch: 650 | q$a@738@01 == $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3))]
(assert (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
(pop) ; 9
(push) ; 9
; [else-branch: 650 | q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3))]
(assert (not (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
  (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)))))
(push) ; 8
; [then-branch: 651 | q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) && q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0)) | live]
; [else-branch: 651 | !(q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) && q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0))) | live]
(push) ; 9
; [then-branch: 651 | q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) && q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0))]
(assert (and
  (not (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
  (not (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(push) ; 9
; [else-branch: 651 | !(q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) && q$a@738@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0)))]
(assert (not
  (and
    (not (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
    (not (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not
        (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
      (not
        (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))))
  (and
    (not (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
    (not (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))))))
(pop) ; 7
(push) ; 7
; [else-branch: 649 | !(0 <= q$a@738@01 && q$a@738@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@738@01)
    (<= q$a@738@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@738@01)
    (<= q$a@738@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@738@01)
    (<= q$a@738@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
      (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
    (or
      (not
        (and
          (not
            (=
              q$a@738@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
          (not
            (=
              q$a@738@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))))
      (and
        (not
          (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
        (not
          (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@738@01)
      (<= q$a@738@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@738@01)
    (<= q$a@738@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@738@01 Int)) (!
  (and
    (or (<= 0 q$a@738@01) (not (<= 0 q$a@738@01)))
    (=>
      (and
        (<= 0 q$a@738@01)
        (<= q$a@738@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@738@01)
        (<= q$a@738@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (=
              q$a@738@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
          (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@738@01
                  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
              (not
                (=
                  q$a@738@01
                  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))))
          (and
            (not
              (=
                q$a@738@01
                ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
            (not
              (=
                q$a@738@01
                ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@738@01)
          (<= q$a@738@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@738@01)
        (<= q$a@738@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@738@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1347@11@1347@513-aux|)))
(assert (forall ((q$a@738@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@738@01)
        (<= q$a@738@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))
        (not
          (= q$a@738@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) q$a@738@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@738@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@738@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@738@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1347@11@1347@513|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@739@01 $Snap)
(assert (= $t@739@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@740@01 $Snap)
(assert (= $t@740@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@741@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 652 | !(0 <= q$a@741@01) | live]
; [else-branch: 652 | 0 <= q$a@741@01 | live]
(push) ; 7
; [then-branch: 652 | !(0 <= q$a@741@01)]
(assert (not (<= 0 q$a@741@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 652 | 0 <= q$a@741@01]
(assert (<= 0 q$a@741@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@741@01) (not (<= 0 q$a@741@01))))
(push) ; 6
; [then-branch: 653 | 0 <= q$a@741@01 && q$a@741@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 653 | !(0 <= q$a@741@01 && q$a@741@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 653 | 0 <= q$a@741@01 && q$a@741@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@741@01)
  (<= q$a@741@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 8
; [then-branch: 654 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), q$a@741@01) != 0 | live]
; [else-branch: 654 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), q$a@741@01) == 0 | live]
(push) ; 9
; [then-branch: 654 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), q$a@741@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(push) ; 9
; [else-branch: 654 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), q$a@741@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 653 | !(0 <= q$a@741@01 && q$a@741@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@741@01)
    (<= q$a@741@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@741@01)
    (<= q$a@741@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@741@01)
    (<= q$a@741@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@741@01)
      (<= q$a@741@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@741@01)
    (<= q$a@741@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@741@01 Int)) (!
  (and
    (or (<= 0 q$a@741@01) (not (<= 0 q$a@741@01)))
    (=>
      (and
        (<= 0 q$a@741@01)
        (<= q$a@741@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@741@01)
        (<= q$a@741@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@741@01)
          (<= q$a@741@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@741@01)
        (<= q$a@741@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1349@11@1349@343-aux|)))
(assert (forall ((q$a@741@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@741@01)
        (<= q$a@741@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@741@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@741@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1349@11@1349@343|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@742@01 $Snap)
(assert (= $t@742@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@743@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 655 | !(0 <= q$a@743@01) | live]
; [else-branch: 655 | 0 <= q$a@743@01 | live]
(push) ; 7
; [then-branch: 655 | !(0 <= q$a@743@01)]
(assert (not (<= 0 q$a@743@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 655 | 0 <= q$a@743@01]
(assert (<= 0 q$a@743@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@743@01) (not (<= 0 q$a@743@01))))
(push) ; 6
; [then-branch: 656 | 0 <= q$a@743@01 && q$a@743@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 656 | !(0 <= q$a@743@01 && q$a@743@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 656 | 0 <= q$a@743@01 && q$a@743@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@743@01)
  (<= q$a@743@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
; [then-branch: 657 | q$a@743@01 == $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0)) | live]
; [else-branch: 657 | q$a@743@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0)) | live]
(push) ; 9
; [then-branch: 657 | q$a@743@01 == $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0))]
(assert (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
(pop) ; 9
(push) ; 9
; [else-branch: 657 | q$a@743@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0))]
(assert (not (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
  (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))))
(push) ; 8
; [then-branch: 658 | q$a@743@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 11)), q$a@743@01) == 0 | live]
; [else-branch: 658 | !(q$a@743@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 11)), q$a@743@01) == 0) | live]
(push) ; 9
; [then-branch: 658 | q$a@743@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 11)), q$a@743@01) == 0]
(assert (and
  (not (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(push) ; 9
; [else-branch: 658 | !(q$a@743@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 11)), q$a@743@01) == 0)]
(assert (not
  (and
    (not (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not
        (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
        0)))
  (and
    (not (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 656 | !(0 <= q$a@743@01 && q$a@743@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@743@01)
    (<= q$a@743@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@743@01)
    (<= q$a@743@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@743@01)
    (<= q$a@743@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
      (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
    (or
      (not
        (and
          (not
            (=
              q$a@743@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
            0)))
      (and
        (not
          (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@743@01)
      (<= q$a@743@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@743@01)
    (<= q$a@743@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@743@01 Int)) (!
  (and
    (or (<= 0 q$a@743@01) (not (<= 0 q$a@743@01)))
    (=>
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (=
              q$a@743@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
          (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@743@01
                  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
                0)))
          (and
            (not
              (=
                q$a@743@01
                ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@743@01)
          (<= q$a@743@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1350@11@1350@396-aux|)))
(assert (forall ((q$a@743@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@743@01)
        (<= q$a@743@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@743@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 10)) q$a@743@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 11)) q$a@743@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1350@11@1350@396|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
(declare-const $t@744@01 $Snap)
(assert (= $t@744@01 $Snap.unit))
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@745@01 Int)
(declare-const q$v@746@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 659 | !(0 <= q$a@745@01) | live]
; [else-branch: 659 | 0 <= q$a@745@01 | live]
(push) ; 7
; [then-branch: 659 | !(0 <= q$a@745@01)]
(assert (not (<= 0 q$a@745@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 659 | 0 <= q$a@745@01]
(assert (<= 0 q$a@745@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 8
; [then-branch: 660 | !(q$a@745@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 660 | q$a@745@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 9
; [then-branch: 660 | !(q$a@745@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@745@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 9
(push) ; 9
; [else-branch: 660 | q$a@745@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@745@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 10
; [then-branch: 661 | !(0 <= q$v@746@01) | live]
; [else-branch: 661 | 0 <= q$v@746@01 | live]
(push) ; 11
; [then-branch: 661 | !(0 <= q$v@746@01)]
(assert (not (<= 0 q$v@746@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 661 | 0 <= q$v@746@01]
(assert (<= 0 q$v@746@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@746@01) (not (<= 0 q$v@746@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@746@01) (not (<= 0 q$v@746@01))))))
(assert (or
  (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@745@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@745@01)
  (and
    (<= 0 q$a@745@01)
    (=>
      (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@746@01) (not (<= 0 q$v@746@01)))))
    (or
      (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@745@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@745@01) (not (<= 0 q$a@745@01))))
(push) ; 6
; [then-branch: 662 | 0 <= q$a@745@01 && q$a@745@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@746@01 && q$v@746@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 662 | !(0 <= q$a@745@01 && q$a@745@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@746@01 && q$v@746@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 662 | 0 <= q$a@745@01 && q$a@745@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@746@01 && q$v@746@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@745@01)
  (and
    (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@746@01)
      (<=
        q$v@746@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 8
; [then-branch: 663 | q$v@746@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), q$a@745@01) | live]
; [else-branch: 663 | q$v@746@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), q$a@745@01) | live]
(push) ; 9
; [then-branch: 663 | q$v@746@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), q$a@745@01)]
(assert (=
  q$v@746@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@745@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 663 | q$v@746@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@607@01, 6)), q$a@745@01)]
(assert (not
  (=
    q$v@746@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@745@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@746@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@745@01)))
  (=
    q$v@746@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@745@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 662 | !(0 <= q$a@745@01 && q$a@745@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@746@01 && q$v@746@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@745@01)
    (and
      (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@746@01)
        (<=
          q$v@746@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@745@01)
    (and
      (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@746@01)
        (<=
          q$v@746@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@745@01)
    (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@746@01)
    (<=
      q$v@746@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@746@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@745@01)))
      (=
        q$v@746@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@745@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@745@01)
      (and
        (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@746@01)
          (<=
            q$v@746@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@745@01)
    (and
      (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@746@01)
        (<=
          q$v@746@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@745@01 Int) (q$v@746@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@745@01)
      (and
        (<= 0 q$a@745@01)
        (=>
          (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@746@01) (not (<= 0 q$v@746@01)))))
        (or
          (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@745@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@745@01) (not (<= 0 q$a@745@01)))
    (=>
      (and
        (<= 0 q$a@745@01)
        (and
          (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@746@01)
            (<=
              q$v@746@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@745@01)
        (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@746@01)
        (<=
          q$v@746@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@746@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@745@01)))
          (=
            q$v@746@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@607@01 6)) q$a@745@01)))))
    (or
      (not
        (and
          (<= 0 q$a@745@01)
          (and
            (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@746@01)
              (<=
                q$v@746@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@745@01)
        (and
          (<= q$a@745@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@746@01)
            (<=
              q$v@746@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@745@01))
    ($SortWrappers.IntTo$Snap q$v@746@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@745@01))
    ($SortWrappers.IntTo$Snap q$v@746@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1351@11@1351@344-aux|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@609@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$no_reentrant_call@609@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 664 | l$no_reentrant_call@609@01 | live]
; [else-branch: 664 | !(l$no_reentrant_call@609@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 664 | l$no_reentrant_call@609@01]
(assert l$no_reentrant_call@609@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@612@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@612@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 665 | $out_of_gas@612@01 | live]
; [else-branch: 665 | !($out_of_gas@612@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 665 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !($out_of_gas ||
;   ($out_of_gas ||
;   perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==>
;   $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==> $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none))
; [eval] $out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)
(push) ; 7
; [then-branch: 666 | $out_of_gas@612@01 | live]
; [else-branch: 666 | !($out_of_gas@612@01) | live]
(push) ; 8
; [then-branch: 666 | $out_of_gas@612@01]
(pop) ; 8
(push) ; 8
; [else-branch: 666 | !($out_of_gas@612@01)]
(assert (not $out_of_gas@612@01))
(push) ; 9
; [then-branch: 667 | $out_of_gas@612@01 | live]
; [else-branch: 667 | !($out_of_gas@612@01) | live]
(push) ; 10
; [then-branch: 667 | $out_of_gas@612@01]
(pop) ; 10
(push) ; 10
; [else-branch: 667 | !($out_of_gas@612@01)]
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not $out_of_gas@612@01)
  (and (not $out_of_gas@612@01) (or (not $out_of_gas@612@01) $out_of_gas@612@01))))
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(push) ; 7
; [then-branch: 668 | !($out_of_gas@612@01) | dead]
; [else-branch: 668 | $out_of_gas@612@01 | live]
(push) ; 8
; [else-branch: 668 | $out_of_gas@612@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 7
; [then-branch: 669 | False | dead]
; [else-branch: 669 | True | live]
(push) ; 8
; [else-branch: 669 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 670 | True | live]
; [else-branch: 670 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 670 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@747@01 $Snap)
(assert (= $t@747@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@613@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@748@01 $Struct)
(assert (=
  self@748@01
  ($struct_set<$Struct> self@592@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@592@01 7))
    l$havoc$6@613@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@748@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@748@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 671 | $struct_get[Int]($struct_loc[Int](self@748@01, 3)) == 0 | live]
; [else-branch: 671 | $struct_get[Int]($struct_loc[Int](self@748@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 671 | $struct_get[Int]($struct_loc[Int](self@748@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@748@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 671 | $struct_get[Int]($struct_loc[Int](self@748@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@748@01 3)) 0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@748@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@748@01 3)) 0)))
(push) ; 8
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@748@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@748@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@748@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@748@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@748@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@748@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 672 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 672 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 672 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 9
(push) ; 9
; [else-branch: 672 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 673 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5))) | live]
; [else-branch: 673 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 673 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 673 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))))
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@748@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@748@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 674 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5))) | live]
; [else-branch: 674 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 674 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(push) ; 9
; [else-branch: 674 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 675 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5)) | live]
; [else-branch: 675 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 675 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 675 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@748@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@748@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 676 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 676 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 676 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 10
; [then-branch: 677 | $struct_get[Int]($struct_loc[Int](self@748@01, 4)) != $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
; [else-branch: 677 | $struct_get[Int]($struct_loc[Int](self@748@01, 4)) == $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
(push) ; 11
; [then-branch: 677 | $struct_get[Int]($struct_loc[Int](self@748@01, 4)) != $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(pop) ; 11
(push) ; 11
; [else-branch: 677 | $struct_get[Int]($struct_loc[Int](self@748@01, 4)) == $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))
(pop) ; 9
(push) ; 9
; [else-branch: 676 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
          ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))))
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@748@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 3)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@748@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@748@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@748@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@748@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@748@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 678 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5))) | live]
; [else-branch: 678 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 678 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 678 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 679 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5)) | live]
; [else-branch: 679 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 679 | $struct_get[Bool]($struct_loc[Int](self@748@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@748@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 679 | !($struct_get[Bool]($struct_loc[Int](self@748@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@748@01 4))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@748@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@748@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) ($struct_get<Int> ($struct_loc<Int> self@748@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) ($struct_get<Int> ($struct_loc<Int> self@748@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@748@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) ($struct_get<Int> ($struct_loc<Int> self@748@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@749@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 680 | !(0 <= q$a@749@01) | live]
; [else-branch: 680 | 0 <= q$a@749@01 | live]
(push) ; 10
; [then-branch: 680 | !(0 <= q$a@749@01)]
(assert (not (<= 0 q$a@749@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 680 | 0 <= q$a@749@01]
(assert (<= 0 q$a@749@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@749@01) (not (<= 0 q$a@749@01))))
(push) ; 9
; [then-branch: 681 | 0 <= q$a@749@01 && q$a@749@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 681 | !(0 <= q$a@749@01 && q$a@749@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 681 | 0 <= q$a@749@01 && q$a@749@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@749@01)
  (<= q$a@749@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 682 | q$a@749@01 == $struct_get[Int]($struct_loc[Int](self@748@01, 3)) | live]
; [else-branch: 682 | q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 3)) | live]
(push) ; 12
; [then-branch: 682 | q$a@749@01 == $struct_get[Int]($struct_loc[Int](self@748@01, 3))]
(assert (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
(pop) ; 12
(push) ; 12
; [else-branch: 682 | q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 3))]
(assert (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
  (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3)))))
(push) ; 11
; [then-branch: 683 | q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 3)) && q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0)) | live]
; [else-branch: 683 | !(q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 3)) && q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0))) | live]
(push) ; 12
; [then-branch: 683 | q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 3)) && q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0))]
(assert (and
  (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
  (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 683 | !(q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 3)) && q$a@749@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0)))]
(assert (not
  (and
    (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
    (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
      (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))))
  (and
    (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
    (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 681 | !(0 <= q$a@749@01 && q$a@749@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@749@01)
    (<= q$a@749@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@749@01)
    (<= q$a@749@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@749@01)
    (<= q$a@749@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
      (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
          (not
            (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))))
      (and
        (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
        (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@749@01)
      (<= q$a@749@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@749@01)
    (<= q$a@749@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@749@01 Int)) (!
  (and
    (or (<= 0 q$a@749@01) (not (<= 0 q$a@749@01)))
    (=>
      (and
        (<= 0 q$a@749@01)
        (<= q$a@749@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@749@01)
        (<= q$a@749@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
          (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@749@01
                  ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
              (not
                (=
                  q$a@749@01
                  ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))))
          (and
            (not
              (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
            (not
              (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@749@01)
          (<= q$a@749@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@749@01)
        (<= q$a@749@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@749@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513-aux|)))
(push) ; 8
(assert (not (forall ((q$a@749@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@749@01)
        (<= q$a@749@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
        (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) q$a@749@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@749@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@749@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@749@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@749@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@749@01)
        (<= q$a@749@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 3))))
        (not (= q$a@749@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) q$a@749@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@749@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@749@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@749@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@750@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 684 | !(0 <= q$a@750@01) | live]
; [else-branch: 684 | 0 <= q$a@750@01 | live]
(push) ; 10
; [then-branch: 684 | !(0 <= q$a@750@01)]
(assert (not (<= 0 q$a@750@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 684 | 0 <= q$a@750@01]
(assert (<= 0 q$a@750@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@750@01) (not (<= 0 q$a@750@01))))
(push) ; 9
; [then-branch: 685 | 0 <= q$a@750@01 && q$a@750@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 685 | !(0 <= q$a@750@01 && q$a@750@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 685 | 0 <= q$a@750@01 && q$a@750@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@750@01)
  (<= q$a@750@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 686 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 6)), q$a@750@01) != 0 | live]
; [else-branch: 686 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 6)), q$a@750@01) == 0 | live]
(push) ; 12
; [then-branch: 686 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 6)), q$a@750@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 686 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 6)), q$a@750@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 685 | !(0 <= q$a@750@01 && q$a@750@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@750@01)
    (<= q$a@750@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@750@01)
    (<= q$a@750@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@750@01)
    (<= q$a@750@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@750@01)
      (<= q$a@750@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@750@01)
    (<= q$a@750@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@750@01 Int)) (!
  (and
    (or (<= 0 q$a@750@01) (not (<= 0 q$a@750@01)))
    (=>
      (and
        (<= 0 q$a@750@01)
        (<= q$a@750@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@750@01)
        (<= q$a@750@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@750@01)
          (<= q$a@750@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@750@01)
        (<= q$a@750@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343-aux|)))
(push) ; 8
(assert (not (forall ((q$a@750@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@750@01)
        (<= q$a@750@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@750@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@750@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@750@01)
        (<= q$a@750@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@750@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@750@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@751@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 687 | !(0 <= q$a@751@01) | live]
; [else-branch: 687 | 0 <= q$a@751@01 | live]
(push) ; 10
; [then-branch: 687 | !(0 <= q$a@751@01)]
(assert (not (<= 0 q$a@751@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 687 | 0 <= q$a@751@01]
(assert (<= 0 q$a@751@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@751@01) (not (<= 0 q$a@751@01))))
(push) ; 9
; [then-branch: 688 | 0 <= q$a@751@01 && q$a@751@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 688 | !(0 <= q$a@751@01 && q$a@751@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 688 | 0 <= q$a@751@01 && q$a@751@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@751@01)
  (<= q$a@751@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
; [then-branch: 689 | q$a@751@01 == $struct_get[Int]($struct_loc[Int](self@748@01, 0)) | live]
; [else-branch: 689 | q$a@751@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0)) | live]
(push) ; 12
; [then-branch: 689 | q$a@751@01 == $struct_get[Int]($struct_loc[Int](self@748@01, 0))]
(assert (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
(pop) ; 12
(push) ; 12
; [else-branch: 689 | q$a@751@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0))]
(assert (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
  (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0)))))
(push) ; 11
; [then-branch: 690 | q$a@751@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 11)), q$a@751@01) == 0 | live]
; [else-branch: 690 | !(q$a@751@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 11)), q$a@751@01) == 0) | live]
(push) ; 12
; [then-branch: 690 | q$a@751@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 11)), q$a@751@01) == 0]
(assert (and
  (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(push) ; 12
; [else-branch: 690 | !(q$a@751@01 != $struct_get[Int]($struct_loc[Int](self@748@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 11)), q$a@751@01) == 0)]
(assert (not
  (and
    (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
      0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
        0)))
  (and
    (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 688 | !(0 <= q$a@751@01 && q$a@751@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@751@01)
    (<= q$a@751@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@751@01)
    (<= q$a@751@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@751@01)
    (<= q$a@751@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
      (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
            0)))
      (and
        (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@751@01)
      (<= q$a@751@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@751@01)
    (<= q$a@751@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@751@01 Int)) (!
  (and
    (or (<= 0 q$a@751@01) (not (<= 0 q$a@751@01)))
    (=>
      (and
        (<= 0 q$a@751@01)
        (<= q$a@751@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@751@01)
        (<= q$a@751@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
          (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@751@01
                  ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
                0)))
          (and
            (not
              (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@751@01)
          (<= q$a@751@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@751@01)
        (<= q$a@751@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396-aux|)))
(push) ; 8
(assert (not (forall ((q$a@751@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@751@01)
        (<= q$a@751@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) q$a@751@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@751@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@751@01)
        (<= q$a@751@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@751@01 ($struct_get<Int> ($struct_loc<Int> self@748@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 10)) q$a@751@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 11)) q$a@751@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@752@01 Int)
(declare-const q$v@753@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 691 | !(0 <= q$a@752@01) | live]
; [else-branch: 691 | 0 <= q$a@752@01 | live]
(push) ; 10
; [then-branch: 691 | !(0 <= q$a@752@01)]
(assert (not (<= 0 q$a@752@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 691 | 0 <= q$a@752@01]
(assert (<= 0 q$a@752@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 692 | !(q$a@752@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 692 | q$a@752@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 692 | !(q$a@752@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@752@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 692 | q$a@752@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@752@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 693 | !(0 <= q$v@753@01) | live]
; [else-branch: 693 | 0 <= q$v@753@01 | live]
(push) ; 14
; [then-branch: 693 | !(0 <= q$v@753@01)]
(assert (not (<= 0 q$v@753@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 693 | 0 <= q$v@753@01]
(assert (<= 0 q$v@753@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@753@01) (not (<= 0 q$v@753@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@753@01) (not (<= 0 q$v@753@01))))))
(assert (or
  (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@752@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@752@01)
  (and
    (<= 0 q$a@752@01)
    (=>
      (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@753@01) (not (<= 0 q$v@753@01)))))
    (or
      (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@752@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@752@01) (not (<= 0 q$a@752@01))))
(push) ; 9
; [then-branch: 694 | 0 <= q$a@752@01 && q$a@752@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@753@01 && q$v@753@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 694 | !(0 <= q$a@752@01 && q$a@752@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@753@01 && q$v@753@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 694 | 0 <= q$a@752@01 && q$a@752@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@753@01 && q$v@753@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@752@01)
  (and
    (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@753@01)
      (<=
        q$v@753@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 695 | q$v@753@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 6)), q$a@752@01) | live]
; [else-branch: 695 | q$v@753@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 6)), q$a@752@01) | live]
(push) ; 12
; [then-branch: 695 | q$v@753@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 6)), q$a@752@01)]
(assert (=
  q$v@753@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@752@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 695 | q$v@753@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@748@01, 6)), q$a@752@01)]
(assert (not
  (=
    q$v@753@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@752@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@753@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@752@01)))
  (=
    q$v@753@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@752@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 694 | !(0 <= q$a@752@01 && q$a@752@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@753@01 && q$v@753@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@752@01)
    (and
      (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@753@01)
        (<=
          q$v@753@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@752@01)
    (and
      (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@753@01)
        (<=
          q$v@753@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@752@01)
    (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@753@01)
    (<=
      q$v@753@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@753@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@752@01)))
      (=
        q$v@753@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@752@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@752@01)
      (and
        (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@753@01)
          (<=
            q$v@753@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@752@01)
    (and
      (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@753@01)
        (<=
          q$v@753@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@752@01 Int) (q$v@753@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@752@01)
      (and
        (<= 0 q$a@752@01)
        (=>
          (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@753@01) (not (<= 0 q$v@753@01)))))
        (or
          (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@752@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@752@01) (not (<= 0 q$a@752@01)))
    (=>
      (and
        (<= 0 q$a@752@01)
        (and
          (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@753@01)
            (<=
              q$v@753@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@752@01)
        (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@753@01)
        (<=
          q$v@753@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@753@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@752@01)))
          (=
            q$v@753@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@748@01 6)) q$a@752@01)))))
    (or
      (not
        (and
          (<= 0 q$a@752@01)
          (and
            (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@753@01)
              (<=
                q$v@753@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@752@01)
        (and
          (<= q$a@752@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@753@01)
            (<=
              q$v@753@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@752@01))
    ($SortWrappers.IntTo$Snap q$v@753@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@752@01))
    ($SortWrappers.IntTo$Snap q$v@753@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1416@11@1416@344-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@754@01 Int)
(push) ; 8
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@755@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef29|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef30|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@754@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@754@01))))
(push) ; 9
; [then-branch: 696 | PredicatePermLookup($accessible$withdraw, pm@755@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@754@01)) > Z | live]
; [else-branch: 696 | !(PredicatePermLookup($accessible$withdraw, pm@755@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@754@01)) > Z) | live]
(push) ; 10
; [then-branch: 696 | PredicatePermLookup($accessible$withdraw, pm@755@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@754@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@754@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 697 | False | live]
; [else-branch: 697 | True | live]
(push) ; 12
; [then-branch: 697 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 697 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 698 | !($out_of_gas@612@01) | dead]
; [else-branch: 698 | $out_of_gas@612@01 | live]
(push) ; 12
; [else-branch: 698 | $out_of_gas@612@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 699 | False | live]
; [else-branch: 699 | True | live]
(push) ; 12
; [then-branch: 699 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 699 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
; [then-branch: 700 | False | dead]
; [else-branch: 700 | True | live]
(push) ; 14
; [else-branch: 700 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 696 | !(PredicatePermLookup($accessible$withdraw, pm@755@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@754@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@754@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@754@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@754@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef29|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef30|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@754@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@754@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@754@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 18)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
            ($SortWrappers.IntTo$Snap $a@754@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@755@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
          ($SortWrappers.IntTo$Snap $a@754@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@754@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@754@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531-aux|)))
(pop) ; 7
; [then-branch: 701 | False | dead]
; [else-branch: 701 | True | live]
(push) ; 7
; [else-branch: 701 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 665 | !($out_of_gas@612@01)]
(assert (not $out_of_gas@612@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@612@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@612@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 702 | !($out_of_gas@612@01) | live]
; [else-branch: 702 | $out_of_gas@612@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 702 | !($out_of_gas@612@01)]
(assert (not $out_of_gas@612@01))
; [exec]
; label end
; [exec]
; exhale !($out_of_gas ||
;   ($out_of_gas ||
;   perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==>
;   $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==> $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none))
; [eval] $out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)
(push) ; 7
; [then-branch: 703 | $out_of_gas@612@01 | live]
; [else-branch: 703 | !($out_of_gas@612@01) | live]
(push) ; 8
; [then-branch: 703 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
(pop) ; 8
(push) ; 8
; [else-branch: 703 | !($out_of_gas@612@01)]
(push) ; 9
; [then-branch: 704 | $out_of_gas@612@01 | live]
; [else-branch: 704 | !($out_of_gas@612@01) | live]
(push) ; 10
; [then-branch: 704 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
(pop) ; 10
(push) ; 10
; [else-branch: 704 | !($out_of_gas@612@01)]
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=> (not $out_of_gas@612@01) (or (not $out_of_gas@612@01) $out_of_gas@612@01)))
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@612@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 705 | !($out_of_gas@612@01) | live]
; [else-branch: 705 | $out_of_gas@612@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 705 | !($out_of_gas@612@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 7
; [then-branch: 706 | False | live]
; [else-branch: 706 | True | live]
(push) ; 8
; [then-branch: 706 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 706 | True]
; [eval] ($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(push) ; 9
; [then-branch: 707 | !($struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4))) | live]
; [else-branch: 707 | $struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
(push) ; 10
; [then-branch: 707 | !($struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)))]
(assert (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(pop) ; 10
(push) ; 10
; [else-branch: 707 | $struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (>
  ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 708 | $struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)) && $struct_get[Int]($struct_loc[Int](self@685@01, 3)) != 0 | dead]
; [else-branch: 708 | !($struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)) && $struct_get[Int]($struct_loc[Int](self@685@01, 3)) != 0) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 708 | !($struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)) && $struct_get[Int]($struct_loc[Int](self@685@01, 3)) != 0)]
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@685@01 3)) 0)))))
; [eval] !$succ
; [then-branch: 709 | False | dead]
; [else-branch: 709 | True | live]
(push) ; 7
; [else-branch: 709 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 710 | True | live]
; [else-branch: 710 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 710 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@756@01 $Snap)
(assert (= $t@756@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@613@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@757@01 $Struct)
(assert (=
  self@757@01
  ($struct_set<$Struct> self@685@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@685@01 7))
    l$havoc$6@613@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@757@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@757@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 711 | $struct_get[Int]($struct_loc[Int](self@757@01, 3)) == 0 | live]
; [else-branch: 711 | $struct_get[Int]($struct_loc[Int](self@757@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 711 | $struct_get[Int]($struct_loc[Int](self@757@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@757@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 711 | $struct_get[Int]($struct_loc[Int](self@757@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@757@01 3)) 0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@757@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@757@01 3)) 0)))
(push) ; 8
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@757@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@757@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@757@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@757@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@757@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@685@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@757@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@685@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 712 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
; [else-branch: 712 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 712 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 9
(push) ; 9
; [else-branch: 712 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 713 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5))) | live]
; [else-branch: 713 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 713 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 713 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))))
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@757@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@757@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 714 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5))) | live]
; [else-branch: 714 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 714 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(push) ; 9
; [else-branch: 714 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 715 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5)) | live]
; [else-branch: 715 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 715 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 715 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@757@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@757@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 716 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5)) | live]
; [else-branch: 716 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 716 | $struct_get[Bool]($struct_loc[Int](self@685@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@685@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 10
; [then-branch: 717 | $struct_get[Int]($struct_loc[Int](self@757@01, 4)) != $struct_get[Int]($struct_loc[Int](self@685@01, 4)) | live]
; [else-branch: 717 | $struct_get[Int]($struct_loc[Int](self@757@01, 4)) == $struct_get[Int]($struct_loc[Int](self@685@01, 4)) | live]
(push) ; 11
; [then-branch: 717 | $struct_get[Int]($struct_loc[Int](self@757@01, 4)) != $struct_get[Int]($struct_loc[Int](self@685@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))))
(pop) ; 11
(push) ; 11
; [else-branch: 717 | $struct_get[Int]($struct_loc[Int](self@757@01, 4)) == $struct_get[Int]($struct_loc[Int](self@685@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))))
(pop) ; 9
(push) ; 9
; [else-branch: 716 | !($struct_get[Bool]($struct_loc[Int](self@685@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
          ($struct_get<Int> ($struct_loc<Int> self@685@01 4))))))))
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@757@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 3)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@685@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@757@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@685@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@757@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@757@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@757@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@757@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 718 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5))) | live]
; [else-branch: 718 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 718 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 718 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 719 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5)) | live]
; [else-branch: 719 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 719 | $struct_get[Bool]($struct_loc[Int](self@757@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@757@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 719 | !($struct_get[Bool]($struct_loc[Int](self@757@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@757@01 4))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@757@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@757@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) ($struct_get<Int> ($struct_loc<Int> self@757@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) ($struct_get<Int> ($struct_loc<Int> self@757@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@757@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) ($struct_get<Int> ($struct_loc<Int> self@757@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@758@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 720 | !(0 <= q$a@758@01) | live]
; [else-branch: 720 | 0 <= q$a@758@01 | live]
(push) ; 10
; [then-branch: 720 | !(0 <= q$a@758@01)]
(assert (not (<= 0 q$a@758@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 720 | 0 <= q$a@758@01]
(assert (<= 0 q$a@758@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@758@01) (not (<= 0 q$a@758@01))))
(push) ; 9
; [then-branch: 721 | 0 <= q$a@758@01 && q$a@758@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 721 | !(0 <= q$a@758@01 && q$a@758@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 721 | 0 <= q$a@758@01 && q$a@758@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@758@01)
  (<= q$a@758@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 722 | q$a@758@01 == $struct_get[Int]($struct_loc[Int](self@757@01, 3)) | live]
; [else-branch: 722 | q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 3)) | live]
(push) ; 12
; [then-branch: 722 | q$a@758@01 == $struct_get[Int]($struct_loc[Int](self@757@01, 3))]
(assert (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
(pop) ; 12
(push) ; 12
; [else-branch: 722 | q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 3))]
(assert (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
  (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3)))))
(push) ; 11
; [then-branch: 723 | q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 3)) && q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0)) | live]
; [else-branch: 723 | !(q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 3)) && q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0))) | live]
(push) ; 12
; [then-branch: 723 | q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 3)) && q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0))]
(assert (and
  (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
  (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 723 | !(q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 3)) && q$a@758@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0)))]
(assert (not
  (and
    (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
    (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
      (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))))
  (and
    (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
    (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 721 | !(0 <= q$a@758@01 && q$a@758@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@758@01)
    (<= q$a@758@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@758@01)
    (<= q$a@758@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@758@01)
    (<= q$a@758@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
      (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
          (not
            (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))))
      (and
        (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
        (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@758@01)
      (<= q$a@758@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@758@01)
    (<= q$a@758@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@758@01 Int)) (!
  (and
    (or (<= 0 q$a@758@01) (not (<= 0 q$a@758@01)))
    (=>
      (and
        (<= 0 q$a@758@01)
        (<= q$a@758@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@758@01)
        (<= q$a@758@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
          (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@758@01
                  ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
              (not
                (=
                  q$a@758@01
                  ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))))
          (and
            (not
              (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
            (not
              (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@758@01)
          (<= q$a@758@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@758@01)
        (<= q$a@758@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@758@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513-aux|)))
(push) ; 8
(assert (not (forall ((q$a@758@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@758@01)
        (<= q$a@758@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
        (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) q$a@758@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@758@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@758@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@758@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@758@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@758@01)
        (<= q$a@758@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 3))))
        (not (= q$a@758@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) q$a@758@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@758@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@758@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@758@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@759@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 724 | !(0 <= q$a@759@01) | live]
; [else-branch: 724 | 0 <= q$a@759@01 | live]
(push) ; 10
; [then-branch: 724 | !(0 <= q$a@759@01)]
(assert (not (<= 0 q$a@759@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 724 | 0 <= q$a@759@01]
(assert (<= 0 q$a@759@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@759@01) (not (<= 0 q$a@759@01))))
(push) ; 9
; [then-branch: 725 | 0 <= q$a@759@01 && q$a@759@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 725 | !(0 <= q$a@759@01 && q$a@759@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 725 | 0 <= q$a@759@01 && q$a@759@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@759@01)
  (<= q$a@759@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 726 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 6)), q$a@759@01) != 0 | live]
; [else-branch: 726 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 6)), q$a@759@01) == 0 | live]
(push) ; 12
; [then-branch: 726 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 6)), q$a@759@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 726 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 6)), q$a@759@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 725 | !(0 <= q$a@759@01 && q$a@759@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@759@01)
    (<= q$a@759@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@759@01)
    (<= q$a@759@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@759@01)
    (<= q$a@759@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@759@01)
      (<= q$a@759@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@759@01)
    (<= q$a@759@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@759@01 Int)) (!
  (and
    (or (<= 0 q$a@759@01) (not (<= 0 q$a@759@01)))
    (=>
      (and
        (<= 0 q$a@759@01)
        (<= q$a@759@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@759@01)
        (<= q$a@759@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@759@01)
          (<= q$a@759@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@759@01)
        (<= q$a@759@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343-aux|)))
(push) ; 8
(assert (not (forall ((q$a@759@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@759@01)
        (<= q$a@759@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@759@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@759@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@759@01)
        (<= q$a@759@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@759@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@759@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@760@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 727 | !(0 <= q$a@760@01) | live]
; [else-branch: 727 | 0 <= q$a@760@01 | live]
(push) ; 10
; [then-branch: 727 | !(0 <= q$a@760@01)]
(assert (not (<= 0 q$a@760@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 727 | 0 <= q$a@760@01]
(assert (<= 0 q$a@760@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@760@01) (not (<= 0 q$a@760@01))))
(push) ; 9
; [then-branch: 728 | 0 <= q$a@760@01 && q$a@760@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 728 | !(0 <= q$a@760@01 && q$a@760@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 728 | 0 <= q$a@760@01 && q$a@760@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@760@01)
  (<= q$a@760@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
; [then-branch: 729 | q$a@760@01 == $struct_get[Int]($struct_loc[Int](self@757@01, 0)) | live]
; [else-branch: 729 | q$a@760@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0)) | live]
(push) ; 12
; [then-branch: 729 | q$a@760@01 == $struct_get[Int]($struct_loc[Int](self@757@01, 0))]
(assert (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
(pop) ; 12
(push) ; 12
; [else-branch: 729 | q$a@760@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0))]
(assert (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
  (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0)))))
(push) ; 11
; [then-branch: 730 | q$a@760@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 11)), q$a@760@01) == 0 | live]
; [else-branch: 730 | !(q$a@760@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 11)), q$a@760@01) == 0) | live]
(push) ; 12
; [then-branch: 730 | q$a@760@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 11)), q$a@760@01) == 0]
(assert (and
  (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(push) ; 12
; [else-branch: 730 | !(q$a@760@01 != $struct_get[Int]($struct_loc[Int](self@757@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 11)), q$a@760@01) == 0)]
(assert (not
  (and
    (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
      0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
        0)))
  (and
    (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 728 | !(0 <= q$a@760@01 && q$a@760@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@760@01)
    (<= q$a@760@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@760@01)
    (<= q$a@760@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@760@01)
    (<= q$a@760@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
      (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
            0)))
      (and
        (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@760@01)
      (<= q$a@760@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@760@01)
    (<= q$a@760@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@760@01 Int)) (!
  (and
    (or (<= 0 q$a@760@01) (not (<= 0 q$a@760@01)))
    (=>
      (and
        (<= 0 q$a@760@01)
        (<= q$a@760@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@760@01)
        (<= q$a@760@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
          (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@760@01
                  ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
                0)))
          (and
            (not
              (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@760@01)
          (<= q$a@760@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@760@01)
        (<= q$a@760@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396-aux|)))
(push) ; 8
(assert (not (forall ((q$a@760@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@760@01)
        (<= q$a@760@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) q$a@760@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@760@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@760@01)
        (<= q$a@760@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@760@01 ($struct_get<Int> ($struct_loc<Int> self@757@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) q$a@760@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 11)) q$a@760@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@761@01 Int)
(declare-const q$v@762@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 731 | !(0 <= q$a@761@01) | live]
; [else-branch: 731 | 0 <= q$a@761@01 | live]
(push) ; 10
; [then-branch: 731 | !(0 <= q$a@761@01)]
(assert (not (<= 0 q$a@761@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 731 | 0 <= q$a@761@01]
(assert (<= 0 q$a@761@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 732 | !(q$a@761@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 732 | q$a@761@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 732 | !(q$a@761@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@761@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 732 | q$a@761@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@761@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 733 | !(0 <= q$v@762@01) | live]
; [else-branch: 733 | 0 <= q$v@762@01 | live]
(push) ; 14
; [then-branch: 733 | !(0 <= q$v@762@01)]
(assert (not (<= 0 q$v@762@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 733 | 0 <= q$v@762@01]
(assert (<= 0 q$v@762@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@762@01) (not (<= 0 q$v@762@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@762@01) (not (<= 0 q$v@762@01))))))
(assert (or
  (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@761@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@761@01)
  (and
    (<= 0 q$a@761@01)
    (=>
      (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@762@01) (not (<= 0 q$v@762@01)))))
    (or
      (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@761@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@761@01) (not (<= 0 q$a@761@01))))
(push) ; 9
; [then-branch: 734 | 0 <= q$a@761@01 && q$a@761@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@762@01 && q$v@762@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 734 | !(0 <= q$a@761@01 && q$a@761@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@762@01 && q$v@762@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 734 | 0 <= q$a@761@01 && q$a@761@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@762@01 && q$v@762@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@761@01)
  (and
    (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@762@01)
      (<=
        q$v@762@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 735 | q$v@762@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 6)), q$a@761@01) | live]
; [else-branch: 735 | q$v@762@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 6)), q$a@761@01) | live]
(push) ; 12
; [then-branch: 735 | q$v@762@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 6)), q$a@761@01)]
(assert (=
  q$v@762@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@761@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 735 | q$v@762@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@757@01, 6)), q$a@761@01)]
(assert (not
  (=
    q$v@762@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@761@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@762@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@761@01)))
  (=
    q$v@762@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@761@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 734 | !(0 <= q$a@761@01 && q$a@761@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@762@01 && q$v@762@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@761@01)
    (and
      (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@762@01)
        (<=
          q$v@762@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@761@01)
    (and
      (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@762@01)
        (<=
          q$v@762@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@761@01)
    (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@762@01)
    (<=
      q$v@762@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@762@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@761@01)))
      (=
        q$v@762@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@761@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@761@01)
      (and
        (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@762@01)
          (<=
            q$v@762@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@761@01)
    (and
      (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@762@01)
        (<=
          q$v@762@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@761@01 Int) (q$v@762@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@761@01)
      (and
        (<= 0 q$a@761@01)
        (=>
          (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@762@01) (not (<= 0 q$v@762@01)))))
        (or
          (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@761@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@761@01) (not (<= 0 q$a@761@01)))
    (=>
      (and
        (<= 0 q$a@761@01)
        (and
          (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@762@01)
            (<=
              q$v@762@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@761@01)
        (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@762@01)
        (<=
          q$v@762@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@762@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@761@01)))
          (=
            q$v@762@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 6)) q$a@761@01)))))
    (or
      (not
        (and
          (<= 0 q$a@761@01)
          (and
            (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@762@01)
              (<=
                q$v@762@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@761@01)
        (and
          (<= q$a@761@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@762@01)
            (<=
              q$v@762@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@761@01))
    ($SortWrappers.IntTo$Snap q$v@762@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@761@01))
    ($SortWrappers.IntTo$Snap q$v@762@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1416@11@1416@344-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@763@01 Int)
(push) ; 8
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@764@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef31|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef32|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@763@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@763@01))))
(push) ; 9
; [then-branch: 736 | PredicatePermLookup($accessible$withdraw, pm@764@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@763@01)) > Z | live]
; [else-branch: 736 | !(PredicatePermLookup($accessible$withdraw, pm@764@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@763@01)) > Z) | live]
(push) ; 10
; [then-branch: 736 | PredicatePermLookup($accessible$withdraw, pm@764@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@763@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@763@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 737 | False | live]
; [else-branch: 737 | True | live]
(push) ; 12
; [then-branch: 737 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 737 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@612@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 738 | !($out_of_gas@612@01) | live]
; [else-branch: 738 | $out_of_gas@612@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 738 | !($out_of_gas@612@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 739 | False | live]
; [else-branch: 739 | True | live]
(push) ; 12
; [then-branch: 739 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 739 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 740 | True | live]
; [else-branch: 740 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 740 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 736 | !(PredicatePermLookup($accessible$withdraw, pm@764@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@763@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@763@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@763@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@763@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef31|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef32|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@763@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@763@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@763@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 18)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
            ($SortWrappers.IntTo$Snap $a@763@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
          ($SortWrappers.IntTo$Snap $a@763@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@763@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@763@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531-aux|)))
(push) ; 8
(assert (not (forall (($a@763@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@763@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      $a@763@01))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@763@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@763@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall (($a@763@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$withdraw (as pm@764@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@763@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@757@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      $a@763@01))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@763@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@763@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531|)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 702 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 664 | !(l$no_reentrant_call@609@01)]
(assert (not l$no_reentrant_call@609@01))
(pop) ; 5
; [eval] !l$no_reentrant_call
(push) ; 5
(set-option :timeout 10)
(assert (not l$no_reentrant_call@609@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@609@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 741 | !(l$no_reentrant_call@609@01) | live]
; [else-branch: 741 | l$no_reentrant_call@609@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 741 | !(l$no_reentrant_call@609@01)]
(assert (not l$no_reentrant_call@609@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@612@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@612@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 742 | $out_of_gas@612@01 | live]
; [else-branch: 742 | !($out_of_gas@612@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 742 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !($out_of_gas ||
;   ($out_of_gas ||
;   perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==>
;   $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==> $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none))
; [eval] $out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)
(push) ; 7
; [then-branch: 743 | $out_of_gas@612@01 | live]
; [else-branch: 743 | !($out_of_gas@612@01) | live]
(push) ; 8
; [then-branch: 743 | $out_of_gas@612@01]
(pop) ; 8
(push) ; 8
; [else-branch: 743 | !($out_of_gas@612@01)]
(assert (not $out_of_gas@612@01))
(push) ; 9
; [then-branch: 744 | $out_of_gas@612@01 | live]
; [else-branch: 744 | !($out_of_gas@612@01) | live]
(push) ; 10
; [then-branch: 744 | $out_of_gas@612@01]
(pop) ; 10
(push) ; 10
; [else-branch: 744 | !($out_of_gas@612@01)]
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not $out_of_gas@612@01)
  (and (not $out_of_gas@612@01) (or (not $out_of_gas@612@01) $out_of_gas@612@01))))
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(push) ; 7
; [then-branch: 745 | !($out_of_gas@612@01) | dead]
; [else-branch: 745 | $out_of_gas@612@01 | live]
(push) ; 8
; [else-branch: 745 | $out_of_gas@612@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 7
; [then-branch: 746 | False | dead]
; [else-branch: 746 | True | live]
(push) ; 8
; [else-branch: 746 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 747 | True | live]
; [else-branch: 747 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 747 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@765@01 $Snap)
(assert (= $t@765@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@613@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@766@01 $Struct)
(assert (=
  self@766@01
  ($struct_set<$Struct> self@592@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@592@01 7))
    l$havoc$6@613@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@766@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@766@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 748 | $struct_get[Int]($struct_loc[Int](self@766@01, 3)) == 0 | live]
; [else-branch: 748 | $struct_get[Int]($struct_loc[Int](self@766@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 748 | $struct_get[Int]($struct_loc[Int](self@766@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@766@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 748 | $struct_get[Int]($struct_loc[Int](self@766@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@766@01 3)) 0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@766@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@766@01 3)) 0)))
(push) ; 8
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@766@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@766@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@766@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@766@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@766@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@766@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 749 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 749 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 749 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 9
(push) ; 9
; [else-branch: 749 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 750 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5))) | live]
; [else-branch: 750 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 750 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 750 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))))
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@766@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@766@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 751 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5))) | live]
; [else-branch: 751 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 751 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(push) ; 9
; [else-branch: 751 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 752 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5)) | live]
; [else-branch: 752 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 752 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 752 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@766@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@766@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 753 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5)) | live]
; [else-branch: 753 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 753 | $struct_get[Bool]($struct_loc[Int](self@592@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@592@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 10
; [then-branch: 754 | $struct_get[Int]($struct_loc[Int](self@766@01, 4)) != $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
; [else-branch: 754 | $struct_get[Int]($struct_loc[Int](self@766@01, 4)) == $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
(push) ; 11
; [then-branch: 754 | $struct_get[Int]($struct_loc[Int](self@766@01, 4)) != $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(pop) ; 11
(push) ; 11
; [else-branch: 754 | $struct_get[Int]($struct_loc[Int](self@766@01, 4)) == $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))
(pop) ; 9
(push) ; 9
; [else-branch: 753 | !($struct_get[Bool]($struct_loc[Int](self@592@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
          ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))))
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@766@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 3)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@592@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@766@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@766@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@766@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@766@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@766@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 755 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5))) | live]
; [else-branch: 755 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 755 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 755 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 756 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5)) | live]
; [else-branch: 756 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 756 | $struct_get[Bool]($struct_loc[Int](self@766@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@766@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 756 | !($struct_get[Bool]($struct_loc[Int](self@766@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@766@01 4))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@766@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@766@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) ($struct_get<Int> ($struct_loc<Int> self@766@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) ($struct_get<Int> ($struct_loc<Int> self@766@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@766@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) ($struct_get<Int> ($struct_loc<Int> self@766@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@767@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 757 | !(0 <= q$a@767@01) | live]
; [else-branch: 757 | 0 <= q$a@767@01 | live]
(push) ; 10
; [then-branch: 757 | !(0 <= q$a@767@01)]
(assert (not (<= 0 q$a@767@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 757 | 0 <= q$a@767@01]
(assert (<= 0 q$a@767@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@767@01) (not (<= 0 q$a@767@01))))
(push) ; 9
; [then-branch: 758 | 0 <= q$a@767@01 && q$a@767@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 758 | !(0 <= q$a@767@01 && q$a@767@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 758 | 0 <= q$a@767@01 && q$a@767@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@767@01)
  (<= q$a@767@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 759 | q$a@767@01 == $struct_get[Int]($struct_loc[Int](self@766@01, 3)) | live]
; [else-branch: 759 | q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 3)) | live]
(push) ; 12
; [then-branch: 759 | q$a@767@01 == $struct_get[Int]($struct_loc[Int](self@766@01, 3))]
(assert (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
(pop) ; 12
(push) ; 12
; [else-branch: 759 | q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 3))]
(assert (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
  (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3)))))
(push) ; 11
; [then-branch: 760 | q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 3)) && q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0)) | live]
; [else-branch: 760 | !(q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 3)) && q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0))) | live]
(push) ; 12
; [then-branch: 760 | q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 3)) && q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0))]
(assert (and
  (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
  (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 760 | !(q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 3)) && q$a@767@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0)))]
(assert (not
  (and
    (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
    (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
      (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))))
  (and
    (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
    (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 758 | !(0 <= q$a@767@01 && q$a@767@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@767@01)
    (<= q$a@767@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@767@01)
    (<= q$a@767@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@767@01)
    (<= q$a@767@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
      (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
          (not
            (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))))
      (and
        (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
        (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@767@01)
      (<= q$a@767@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@767@01)
    (<= q$a@767@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@767@01 Int)) (!
  (and
    (or (<= 0 q$a@767@01) (not (<= 0 q$a@767@01)))
    (=>
      (and
        (<= 0 q$a@767@01)
        (<= q$a@767@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@767@01)
        (<= q$a@767@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
          (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@767@01
                  ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
              (not
                (=
                  q$a@767@01
                  ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))))
          (and
            (not
              (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
            (not
              (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@767@01)
          (<= q$a@767@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@767@01)
        (<= q$a@767@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@767@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513-aux|)))
(push) ; 8
(assert (not (forall ((q$a@767@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@767@01)
        (<= q$a@767@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
        (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) q$a@767@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@767@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@767@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@767@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@767@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@767@01)
        (<= q$a@767@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 3))))
        (not (= q$a@767@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) q$a@767@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@767@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@767@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@767@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@768@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 761 | !(0 <= q$a@768@01) | live]
; [else-branch: 761 | 0 <= q$a@768@01 | live]
(push) ; 10
; [then-branch: 761 | !(0 <= q$a@768@01)]
(assert (not (<= 0 q$a@768@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 761 | 0 <= q$a@768@01]
(assert (<= 0 q$a@768@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@768@01) (not (<= 0 q$a@768@01))))
(push) ; 9
; [then-branch: 762 | 0 <= q$a@768@01 && q$a@768@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 762 | !(0 <= q$a@768@01 && q$a@768@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 762 | 0 <= q$a@768@01 && q$a@768@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@768@01)
  (<= q$a@768@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 763 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 6)), q$a@768@01) != 0 | live]
; [else-branch: 763 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 6)), q$a@768@01) == 0 | live]
(push) ; 12
; [then-branch: 763 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 6)), q$a@768@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 763 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 6)), q$a@768@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 762 | !(0 <= q$a@768@01 && q$a@768@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@768@01)
    (<= q$a@768@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@768@01)
    (<= q$a@768@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@768@01)
    (<= q$a@768@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@768@01)
      (<= q$a@768@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@768@01)
    (<= q$a@768@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@768@01 Int)) (!
  (and
    (or (<= 0 q$a@768@01) (not (<= 0 q$a@768@01)))
    (=>
      (and
        (<= 0 q$a@768@01)
        (<= q$a@768@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@768@01)
        (<= q$a@768@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@768@01)
          (<= q$a@768@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@768@01)
        (<= q$a@768@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343-aux|)))
(push) ; 8
(assert (not (forall ((q$a@768@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@768@01)
        (<= q$a@768@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@768@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@768@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@768@01)
        (<= q$a@768@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@768@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@768@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@769@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 764 | !(0 <= q$a@769@01) | live]
; [else-branch: 764 | 0 <= q$a@769@01 | live]
(push) ; 10
; [then-branch: 764 | !(0 <= q$a@769@01)]
(assert (not (<= 0 q$a@769@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 764 | 0 <= q$a@769@01]
(assert (<= 0 q$a@769@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@769@01) (not (<= 0 q$a@769@01))))
(push) ; 9
; [then-branch: 765 | 0 <= q$a@769@01 && q$a@769@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 765 | !(0 <= q$a@769@01 && q$a@769@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 765 | 0 <= q$a@769@01 && q$a@769@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@769@01)
  (<= q$a@769@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
; [then-branch: 766 | q$a@769@01 == $struct_get[Int]($struct_loc[Int](self@766@01, 0)) | live]
; [else-branch: 766 | q$a@769@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0)) | live]
(push) ; 12
; [then-branch: 766 | q$a@769@01 == $struct_get[Int]($struct_loc[Int](self@766@01, 0))]
(assert (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
(pop) ; 12
(push) ; 12
; [else-branch: 766 | q$a@769@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0))]
(assert (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
  (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0)))))
(push) ; 11
; [then-branch: 767 | q$a@769@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 11)), q$a@769@01) == 0 | live]
; [else-branch: 767 | !(q$a@769@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 11)), q$a@769@01) == 0) | live]
(push) ; 12
; [then-branch: 767 | q$a@769@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 11)), q$a@769@01) == 0]
(assert (and
  (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(push) ; 12
; [else-branch: 767 | !(q$a@769@01 != $struct_get[Int]($struct_loc[Int](self@766@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 11)), q$a@769@01) == 0)]
(assert (not
  (and
    (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
      0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
        0)))
  (and
    (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 765 | !(0 <= q$a@769@01 && q$a@769@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@769@01)
    (<= q$a@769@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@769@01)
    (<= q$a@769@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@769@01)
    (<= q$a@769@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
      (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
            0)))
      (and
        (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@769@01)
      (<= q$a@769@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@769@01)
    (<= q$a@769@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@769@01 Int)) (!
  (and
    (or (<= 0 q$a@769@01) (not (<= 0 q$a@769@01)))
    (=>
      (and
        (<= 0 q$a@769@01)
        (<= q$a@769@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@769@01)
        (<= q$a@769@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
          (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@769@01
                  ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
                0)))
          (and
            (not
              (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@769@01)
          (<= q$a@769@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@769@01)
        (<= q$a@769@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396-aux|)))
(push) ; 8
(assert (not (forall ((q$a@769@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@769@01)
        (<= q$a@769@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) q$a@769@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@769@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@769@01)
        (<= q$a@769@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@769@01 ($struct_get<Int> ($struct_loc<Int> self@766@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 10)) q$a@769@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 11)) q$a@769@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@770@01 Int)
(declare-const q$v@771@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 768 | !(0 <= q$a@770@01) | live]
; [else-branch: 768 | 0 <= q$a@770@01 | live]
(push) ; 10
; [then-branch: 768 | !(0 <= q$a@770@01)]
(assert (not (<= 0 q$a@770@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 768 | 0 <= q$a@770@01]
(assert (<= 0 q$a@770@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 769 | !(q$a@770@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 769 | q$a@770@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 769 | !(q$a@770@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@770@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 769 | q$a@770@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@770@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 770 | !(0 <= q$v@771@01) | live]
; [else-branch: 770 | 0 <= q$v@771@01 | live]
(push) ; 14
; [then-branch: 770 | !(0 <= q$v@771@01)]
(assert (not (<= 0 q$v@771@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 770 | 0 <= q$v@771@01]
(assert (<= 0 q$v@771@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@771@01) (not (<= 0 q$v@771@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@771@01) (not (<= 0 q$v@771@01))))))
(assert (or
  (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@770@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@770@01)
  (and
    (<= 0 q$a@770@01)
    (=>
      (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@771@01) (not (<= 0 q$v@771@01)))))
    (or
      (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@770@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@770@01) (not (<= 0 q$a@770@01))))
(push) ; 9
; [then-branch: 771 | 0 <= q$a@770@01 && q$a@770@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@771@01 && q$v@771@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 771 | !(0 <= q$a@770@01 && q$a@770@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@771@01 && q$v@771@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 771 | 0 <= q$a@770@01 && q$a@770@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@771@01 && q$v@771@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@770@01)
  (and
    (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@771@01)
      (<=
        q$v@771@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 772 | q$v@771@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 6)), q$a@770@01) | live]
; [else-branch: 772 | q$v@771@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 6)), q$a@770@01) | live]
(push) ; 12
; [then-branch: 772 | q$v@771@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 6)), q$a@770@01)]
(assert (=
  q$v@771@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@770@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 772 | q$v@771@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@766@01, 6)), q$a@770@01)]
(assert (not
  (=
    q$v@771@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@770@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@771@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@770@01)))
  (=
    q$v@771@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@770@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 771 | !(0 <= q$a@770@01 && q$a@770@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@771@01 && q$v@771@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@770@01)
    (and
      (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@771@01)
        (<=
          q$v@771@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@770@01)
    (and
      (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@771@01)
        (<=
          q$v@771@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@770@01)
    (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@771@01)
    (<=
      q$v@771@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@771@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@770@01)))
      (=
        q$v@771@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@770@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@770@01)
      (and
        (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@771@01)
          (<=
            q$v@771@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@770@01)
    (and
      (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@771@01)
        (<=
          q$v@771@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@770@01 Int) (q$v@771@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@770@01)
      (and
        (<= 0 q$a@770@01)
        (=>
          (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@771@01) (not (<= 0 q$v@771@01)))))
        (or
          (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@770@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@770@01) (not (<= 0 q$a@770@01)))
    (=>
      (and
        (<= 0 q$a@770@01)
        (and
          (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@771@01)
            (<=
              q$v@771@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@770@01)
        (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@771@01)
        (<=
          q$v@771@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@771@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@770@01)))
          (=
            q$v@771@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@766@01 6)) q$a@770@01)))))
    (or
      (not
        (and
          (<= 0 q$a@770@01)
          (and
            (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@771@01)
              (<=
                q$v@771@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@770@01)
        (and
          (<= q$a@770@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@771@01)
            (<=
              q$v@771@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@770@01))
    ($SortWrappers.IntTo$Snap q$v@771@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@770@01))
    ($SortWrappers.IntTo$Snap q$v@771@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1416@11@1416@344-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@772@01 Int)
(push) ; 8
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@773@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef33|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef34|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@772@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@772@01))))
(push) ; 9
; [then-branch: 773 | PredicatePermLookup($accessible$withdraw, pm@773@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@772@01)) > Z | live]
; [else-branch: 773 | !(PredicatePermLookup($accessible$withdraw, pm@773@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@772@01)) > Z) | live]
(push) ; 10
; [then-branch: 773 | PredicatePermLookup($accessible$withdraw, pm@773@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@772@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@772@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 774 | False | live]
; [else-branch: 774 | True | live]
(push) ; 12
; [then-branch: 774 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 774 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 775 | !($out_of_gas@612@01) | dead]
; [else-branch: 775 | $out_of_gas@612@01 | live]
(push) ; 12
; [else-branch: 775 | $out_of_gas@612@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 776 | False | live]
; [else-branch: 776 | True | live]
(push) ; 12
; [then-branch: 776 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 776 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
; [then-branch: 777 | False | dead]
; [else-branch: 777 | True | live]
(push) ; 14
; [else-branch: 777 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 773 | !(PredicatePermLookup($accessible$withdraw, pm@773@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@772@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@772@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@772@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@772@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef33|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef34|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@772@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@772@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@772@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 18)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
            ($SortWrappers.IntTo$Snap $a@772@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@773@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
          ($SortWrappers.IntTo$Snap $a@772@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@772@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@772@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531-aux|)))
(pop) ; 7
; [then-branch: 778 | False | dead]
; [else-branch: 778 | True | live]
(push) ; 7
; [else-branch: 778 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 742 | !($out_of_gas@612@01)]
(assert (not $out_of_gas@612@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@612@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@612@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 779 | !($out_of_gas@612@01) | live]
; [else-branch: 779 | $out_of_gas@612@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 779 | !($out_of_gas@612@01)]
(assert (not $out_of_gas@612@01))
; [exec]
; label end
; [exec]
; exhale !($out_of_gas ||
;   ($out_of_gas ||
;   perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==>
;   $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)) ==> $succ
; [eval] !($out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none))
; [eval] $out_of_gas || ($out_of_gas || perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none)
(push) ; 7
; [then-branch: 780 | $out_of_gas@612@01 | live]
; [else-branch: 780 | !($out_of_gas@612@01) | live]
(push) ; 8
; [then-branch: 780 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
(pop) ; 8
(push) ; 8
; [else-branch: 780 | !($out_of_gas@612@01)]
(push) ; 9
; [then-branch: 781 | $out_of_gas@612@01 | live]
; [else-branch: 781 | !($out_of_gas@612@01) | live]
(push) ; 10
; [then-branch: 781 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
(pop) ; 10
(push) ; 10
; [else-branch: 781 | !($out_of_gas@612@01)]
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=> (not $out_of_gas@612@01) (or (not $out_of_gas@612@01) $out_of_gas@612@01)))
(assert (or (not $out_of_gas@612@01) $out_of_gas@612@01))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@612@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 782 | !($out_of_gas@612@01) | live]
; [else-branch: 782 | $out_of_gas@612@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 782 | !($out_of_gas@612@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 7
; [then-branch: 783 | False | live]
; [else-branch: 783 | True | live]
(push) ; 8
; [then-branch: 783 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 783 | True]
; [eval] ($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(push) ; 9
; [then-branch: 784 | !($struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4))) | live]
; [else-branch: 784 | $struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)) | live]
(push) ; 10
; [then-branch: 784 | !($struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)))]
(assert (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))))
(pop) ; 10
(push) ; 10
; [else-branch: 784 | $struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4))]
(assert (>
  ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4))))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 785 | $struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)) && $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) != 0 | dead]
; [else-branch: 785 | !($struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)) && $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) != 0) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 785 | !($struct_get[Int]($struct_loc[Int](msg@588@01, 1)) > $struct_get[Int]($struct_loc[Int](self@592@01, 4)) && $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 3)) != 0)]
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@588@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@592@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)) 0)))))
; [eval] !$succ
; [then-branch: 786 | False | dead]
; [else-branch: 786 | True | live]
(push) ; 7
; [else-branch: 786 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 787 | True | live]
; [else-branch: 787 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 787 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@774@01 $Snap)
(assert (= $t@774@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@613@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@775@01 $Struct)
(assert (=
  self@775@01
  ($struct_set<$Struct> l$havoc$2@607@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 7))
    l$havoc$6@613@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@775@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@775@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 788 | $struct_get[Int]($struct_loc[Int](self@775@01, 3)) == 0 | live]
; [else-branch: 788 | $struct_get[Int]($struct_loc[Int](self@775@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 788 | $struct_get[Int]($struct_loc[Int](self@775@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@775@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 788 | $struct_get[Int]($struct_loc[Int](self@775@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@775@01 3)) 0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@775@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@775@01 3)) 0)))
(push) ; 8
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@775@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@775@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@775@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@775@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@775@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@775@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 789 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)) | live]
; [else-branch: 789 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 789 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 9
(push) ; 9
; [else-branch: 789 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 790 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5))) | live]
; [else-branch: 790 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 790 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 790 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))))
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@775@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@775@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 791 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5))) | live]
; [else-branch: 791 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 791 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(push) ; 9
; [else-branch: 791 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 792 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5)) | live]
; [else-branch: 792 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 792 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(push) ; 9
; [else-branch: 792 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@775@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@775@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 793 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)) | live]
; [else-branch: 793 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 793 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 10
; [then-branch: 794 | $struct_get[Int]($struct_loc[Int](self@775@01, 4)) != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 4)) | live]
; [else-branch: 794 | $struct_get[Int]($struct_loc[Int](self@775@01, 4)) == $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 4)) | live]
(push) ; 11
; [then-branch: 794 | $struct_get[Int]($struct_loc[Int](self@775@01, 4)) != $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))))
(pop) ; 11
(push) ; 11
; [else-branch: 794 | $struct_get[Int]($struct_loc[Int](self@775@01, 4)) == $struct_get[Int]($struct_loc[Int](l$havoc$2@607@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))))))
(pop) ; 9
(push) ; 9
; [else-branch: 793 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@607@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
        ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
          ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4))))))))
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@775@01 3))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@607@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@775@01 3))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@607@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@775@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@775@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@775@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@775@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 795 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5))) | live]
; [else-branch: 795 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 795 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 795 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 796 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5)) | live]
; [else-branch: 796 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 796 | $struct_get[Bool]($struct_loc[Int](self@775@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@775@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 796 | !($struct_get[Bool]($struct_loc[Int](self@775@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@775@01 4))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@775@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@775@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) ($struct_get<Int> ($struct_loc<Int> self@775@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) ($struct_get<Int> ($struct_loc<Int> self@775@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@775@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) ($struct_get<Int> ($struct_loc<Int> self@775@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@776@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 797 | !(0 <= q$a@776@01) | live]
; [else-branch: 797 | 0 <= q$a@776@01 | live]
(push) ; 10
; [then-branch: 797 | !(0 <= q$a@776@01)]
(assert (not (<= 0 q$a@776@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 797 | 0 <= q$a@776@01]
(assert (<= 0 q$a@776@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@776@01) (not (<= 0 q$a@776@01))))
(push) ; 9
; [then-branch: 798 | 0 <= q$a@776@01 && q$a@776@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 798 | !(0 <= q$a@776@01 && q$a@776@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 798 | 0 <= q$a@776@01 && q$a@776@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@776@01)
  (<= q$a@776@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 799 | q$a@776@01 == $struct_get[Int]($struct_loc[Int](self@775@01, 3)) | live]
; [else-branch: 799 | q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 3)) | live]
(push) ; 12
; [then-branch: 799 | q$a@776@01 == $struct_get[Int]($struct_loc[Int](self@775@01, 3))]
(assert (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
(pop) ; 12
(push) ; 12
; [else-branch: 799 | q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 3))]
(assert (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
  (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3)))))
(push) ; 11
; [then-branch: 800 | q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 3)) && q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0)) | live]
; [else-branch: 800 | !(q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 3)) && q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0))) | live]
(push) ; 12
; [then-branch: 800 | q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 3)) && q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0))]
(assert (and
  (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
  (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 800 | !(q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 3)) && q$a@776@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0)))]
(assert (not
  (and
    (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
    (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
      (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))))
  (and
    (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
    (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 798 | !(0 <= q$a@776@01 && q$a@776@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@776@01)
    (<= q$a@776@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@776@01)
    (<= q$a@776@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@776@01)
    (<= q$a@776@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
      (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
          (not
            (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))))
      (and
        (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
        (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@776@01)
      (<= q$a@776@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@776@01)
    (<= q$a@776@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@776@01 Int)) (!
  (and
    (or (<= 0 q$a@776@01) (not (<= 0 q$a@776@01)))
    (=>
      (and
        (<= 0 q$a@776@01)
        (<= q$a@776@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@776@01)
        (<= q$a@776@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
          (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@776@01
                  ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
              (not
                (=
                  q$a@776@01
                  ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))))
          (and
            (not
              (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
            (not
              (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@776@01)
          (<= q$a@776@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@776@01)
        (<= q$a@776@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@776@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513-aux|)))
(push) ; 8
(assert (not (forall ((q$a@776@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@776@01)
        (<= q$a@776@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
        (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) q$a@776@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@776@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@776@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@776@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@776@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@776@01)
        (<= q$a@776@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 3))))
        (not (= q$a@776@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) q$a@776@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@776@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@776@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@776@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1412@11@1412@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@777@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 801 | !(0 <= q$a@777@01) | live]
; [else-branch: 801 | 0 <= q$a@777@01 | live]
(push) ; 10
; [then-branch: 801 | !(0 <= q$a@777@01)]
(assert (not (<= 0 q$a@777@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 801 | 0 <= q$a@777@01]
(assert (<= 0 q$a@777@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@777@01) (not (<= 0 q$a@777@01))))
(push) ; 9
; [then-branch: 802 | 0 <= q$a@777@01 && q$a@777@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 802 | !(0 <= q$a@777@01 && q$a@777@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 802 | 0 <= q$a@777@01 && q$a@777@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@777@01)
  (<= q$a@777@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 803 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 6)), q$a@777@01) != 0 | live]
; [else-branch: 803 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 6)), q$a@777@01) == 0 | live]
(push) ; 12
; [then-branch: 803 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 6)), q$a@777@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 803 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 6)), q$a@777@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 802 | !(0 <= q$a@777@01 && q$a@777@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@777@01)
    (<= q$a@777@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@777@01)
    (<= q$a@777@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@777@01)
    (<= q$a@777@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@777@01)
      (<= q$a@777@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@777@01)
    (<= q$a@777@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@777@01 Int)) (!
  (and
    (or (<= 0 q$a@777@01) (not (<= 0 q$a@777@01)))
    (=>
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@777@01)
          (<= q$a@777@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343-aux|)))
(push) ; 8
(assert (not (forall ((q$a@777@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@777@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@777@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@777@01)
        (<= q$a@777@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@777@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@777@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1414@11@1414@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@778@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 804 | !(0 <= q$a@778@01) | live]
; [else-branch: 804 | 0 <= q$a@778@01 | live]
(push) ; 10
; [then-branch: 804 | !(0 <= q$a@778@01)]
(assert (not (<= 0 q$a@778@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 804 | 0 <= q$a@778@01]
(assert (<= 0 q$a@778@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@778@01) (not (<= 0 q$a@778@01))))
(push) ; 9
; [then-branch: 805 | 0 <= q$a@778@01 && q$a@778@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 805 | !(0 <= q$a@778@01 && q$a@778@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 805 | 0 <= q$a@778@01 && q$a@778@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@778@01)
  (<= q$a@778@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
; [then-branch: 806 | q$a@778@01 == $struct_get[Int]($struct_loc[Int](self@775@01, 0)) | live]
; [else-branch: 806 | q$a@778@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0)) | live]
(push) ; 12
; [then-branch: 806 | q$a@778@01 == $struct_get[Int]($struct_loc[Int](self@775@01, 0))]
(assert (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
(pop) ; 12
(push) ; 12
; [else-branch: 806 | q$a@778@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0))]
(assert (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
  (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0)))))
(push) ; 11
; [then-branch: 807 | q$a@778@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 11)), q$a@778@01) == 0 | live]
; [else-branch: 807 | !(q$a@778@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 11)), q$a@778@01) == 0) | live]
(push) ; 12
; [then-branch: 807 | q$a@778@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 11)), q$a@778@01) == 0]
(assert (and
  (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(push) ; 12
; [else-branch: 807 | !(q$a@778@01 != $struct_get[Int]($struct_loc[Int](self@775@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 11)), q$a@778@01) == 0)]
(assert (not
  (and
    (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
      0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
        0)))
  (and
    (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 805 | !(0 <= q$a@778@01 && q$a@778@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@778@01)
    (<= q$a@778@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@778@01)
    (<= q$a@778@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@778@01)
    (<= q$a@778@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
      (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
            0)))
      (and
        (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@778@01)
      (<= q$a@778@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@778@01)
    (<= q$a@778@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@778@01 Int)) (!
  (and
    (or (<= 0 q$a@778@01) (not (<= 0 q$a@778@01)))
    (=>
      (and
        (<= 0 q$a@778@01)
        (<= q$a@778@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@778@01)
        (<= q$a@778@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
          (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@778@01
                  ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
                0)))
          (and
            (not
              (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@778@01)
          (<= q$a@778@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@778@01)
        (<= q$a@778@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396-aux|)))
(push) ; 8
(assert (not (forall ((q$a@778@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@778@01)
        (<= q$a@778@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) q$a@778@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@778@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@778@01)
        (<= q$a@778@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@778@01 ($struct_get<Int> ($struct_loc<Int> self@775@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) q$a@778@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 11)) q$a@778@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1415@11@1415@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@779@01 Int)
(declare-const q$v@780@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 808 | !(0 <= q$a@779@01) | live]
; [else-branch: 808 | 0 <= q$a@779@01 | live]
(push) ; 10
; [then-branch: 808 | !(0 <= q$a@779@01)]
(assert (not (<= 0 q$a@779@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 808 | 0 <= q$a@779@01]
(assert (<= 0 q$a@779@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 809 | !(q$a@779@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 809 | q$a@779@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 809 | !(q$a@779@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@779@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 809 | q$a@779@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@779@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 810 | !(0 <= q$v@780@01) | live]
; [else-branch: 810 | 0 <= q$v@780@01 | live]
(push) ; 14
; [then-branch: 810 | !(0 <= q$v@780@01)]
(assert (not (<= 0 q$v@780@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 810 | 0 <= q$v@780@01]
(assert (<= 0 q$v@780@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@780@01) (not (<= 0 q$v@780@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@780@01) (not (<= 0 q$v@780@01))))))
(assert (or
  (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@779@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@779@01)
  (and
    (<= 0 q$a@779@01)
    (=>
      (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@780@01) (not (<= 0 q$v@780@01)))))
    (or
      (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@779@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@779@01) (not (<= 0 q$a@779@01))))
(push) ; 9
; [then-branch: 811 | 0 <= q$a@779@01 && q$a@779@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@780@01 && q$v@780@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 811 | !(0 <= q$a@779@01 && q$a@779@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@780@01 && q$v@780@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 811 | 0 <= q$a@779@01 && q$a@779@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@780@01 && q$v@780@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@779@01)
  (and
    (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@780@01)
      (<=
        q$v@780@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 812 | q$v@780@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 6)), q$a@779@01) | live]
; [else-branch: 812 | q$v@780@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 6)), q$a@779@01) | live]
(push) ; 12
; [then-branch: 812 | q$v@780@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 6)), q$a@779@01)]
(assert (=
  q$v@780@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@779@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 812 | q$v@780@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@775@01, 6)), q$a@779@01)]
(assert (not
  (=
    q$v@780@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@779@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@780@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@779@01)))
  (=
    q$v@780@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@779@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 811 | !(0 <= q$a@779@01 && q$a@779@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@780@01 && q$v@780@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@779@01)
    (and
      (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@780@01)
        (<=
          q$v@780@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@779@01)
    (and
      (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@780@01)
        (<=
          q$v@780@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@779@01)
    (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@780@01)
    (<=
      q$v@780@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@780@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@779@01)))
      (=
        q$v@780@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@779@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@779@01)
      (and
        (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@780@01)
          (<=
            q$v@780@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@779@01)
    (and
      (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@780@01)
        (<=
          q$v@780@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@779@01 Int) (q$v@780@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@779@01)
      (and
        (<= 0 q$a@779@01)
        (=>
          (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@780@01) (not (<= 0 q$v@780@01)))))
        (or
          (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@779@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@779@01) (not (<= 0 q$a@779@01)))
    (=>
      (and
        (<= 0 q$a@779@01)
        (and
          (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@780@01)
            (<=
              q$v@780@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@779@01)
        (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@780@01)
        (<=
          q$v@780@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@780@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@779@01)))
          (=
            q$v@780@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 6)) q$a@779@01)))))
    (or
      (not
        (and
          (<= 0 q$a@779@01)
          (and
            (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@780@01)
              (<=
                q$v@780@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@779@01)
        (and
          (<= q$a@779@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@780@01)
            (<=
              q$v@780@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@779@01))
    ($SortWrappers.IntTo$Snap q$v@780@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@779@01))
    ($SortWrappers.IntTo$Snap q$v@780@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1416@11@1416@344-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@781@01 Int)
(push) ; 8
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(18, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@782@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef35|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef36|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@781@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 18)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
  ($SortWrappers.IntTo$Snap $a@781@01))))
(push) ; 9
; [then-branch: 813 | PredicatePermLookup($accessible$withdraw, pm@782@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@781@01)) > Z | live]
; [else-branch: 813 | !(PredicatePermLookup($accessible$withdraw, pm@782@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@781@01)) > Z) | live]
(push) ; 10
; [then-branch: 813 | PredicatePermLookup($accessible$withdraw, pm@782@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@781@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@781@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 814 | False | live]
; [else-branch: 814 | True | live]
(push) ; 12
; [then-branch: 814 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 814 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@612@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 815 | !($out_of_gas@612@01) | live]
; [else-branch: 815 | $out_of_gas@612@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 815 | !($out_of_gas@612@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 816 | False | live]
; [else-branch: 816 | True | live]
(push) ; 12
; [then-branch: 816 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 816 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 817 | True | live]
; [else-branch: 817 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 817 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 813 | !(PredicatePermLookup($accessible$withdraw, pm@782@01, List(18, $struct_get[Int]($struct_loc[Int](msg@588@01, 0)), $a@781@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@781@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@781@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@781@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@676@01 $tag $to $amount) (img@678@01 $tag $to $amount))
        (and
          (<= 0 (inv@675@01 $tag $to $amount))
          (and
            (<=
              (inv@675@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@677@01 $tag $to $amount))
              (and
                (<=
                  (inv@677@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@677@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 6)) (inv@675@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef35|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@670@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef36|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@781@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@781@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 18)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      ($SortWrappers.IntTo$Snap $a@781@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 18)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
            ($SortWrappers.IntTo$Snap $a@781@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 18)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
          ($SortWrappers.IntTo$Snap $a@781@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@781@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@781@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531-aux|)))
(push) ; 8
(assert (not (forall (($a@781@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@781@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      $a@781@01))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@781@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@781@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall (($a@781@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$withdraw (as pm@782@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 18)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
        ($SortWrappers.IntTo$Snap $a@781@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@775@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@592@01 10)) ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
      $a@781@01))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@679@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@781@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@588@01 0))))
    ($SortWrappers.IntTo$Snap $a@781@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1418@11@1418@531|)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 779 | $out_of_gas@612@01]
(assert $out_of_gas@612@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 741 | l$no_reentrant_call@609@01]
(assert l$no_reentrant_call@609@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 635 | l$send_fail@603@01]
(assert l$send_fail@603@01)
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$endAuction ----------
(declare-const $succ@783@01 Bool)
(declare-const $succ@784@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@785@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@786@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@787@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@788@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@789@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@790@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@791@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@792@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@793@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@794@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@795@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@796@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@797@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@798@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@799@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@800@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@801@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@802@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@803@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@804@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@805@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@806@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@807@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@808@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@809@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@810@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@811@01 $Snap)
(assert (= $t@811@01 ($Snap.combine ($Snap.first $t@811@01) ($Snap.second $t@811@01))))
(assert (= ($Snap.first $t@811@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
(assert (= ($Snap.second $t@811@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@812@01 $Snap)
(assert (= $t@812@01 ($Snap.combine ($Snap.first $t@812@01) ($Snap.second $t@812@01))))
(assert (= ($Snap.first $t@812@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@789@01 1))))
(assert (= ($Snap.second $t@812@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@789@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@813@01 $Snap)
(assert (= $t@813@01 ($Snap.combine ($Snap.first $t@813@01) ($Snap.second $t@813@01))))
(assert (= ($Snap.first $t@813@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@789@01 2))))
(assert (= ($Snap.second $t@813@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@789@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@814@01 $Snap)
(assert (= $t@814@01 ($Snap.combine ($Snap.first $t@814@01) ($Snap.second $t@814@01))))
(assert (= ($Snap.first $t@814@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
(assert (= ($Snap.second $t@814@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@789@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@815@01 $Snap)
(assert (= $t@815@01 ($Snap.combine ($Snap.first $t@815@01) ($Snap.second $t@815@01))))
(assert (= ($Snap.first $t@815@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
(assert (= ($Snap.second $t@815@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@816@01 $Snap)
(assert (= $t@816@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@817@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 4
; [then-branch: 818 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), $q0@817@01)) | live]
; [else-branch: 818 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), $q0@817@01) | live]
(push) ; 5
; [then-branch: 818 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), $q0@817@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 818 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), $q0@817@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@817@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1455@11@1455@345-aux|)))
(assert (forall (($q0@817@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@817@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1455@11@1455@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $t@818@01 $Snap)
(assert (= $t@818@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $q0@819@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@819@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@819@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) $q0@819@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1456@11@1456@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@820@01 $Snap)
(assert (= $t@820@01 ($Snap.combine ($Snap.first $t@820@01) ($Snap.second $t@820@01))))
(assert (= ($Snap.first $t@820@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@789@01 7))))
(assert (= ($Snap.second $t@820@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@789@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@821@01 $Snap)
(assert (= $t@821@01 ($Snap.combine ($Snap.first $t@821@01) ($Snap.second $t@821@01))))
(assert (= ($Snap.first $t@821@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@789@01 8))))
(assert (= ($Snap.second $t@821@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@789@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@822@01 $Snap)
(assert (= $t@822@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@823@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 819 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 10)), $q1@823@01)) | live]
; [else-branch: 819 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 10)), $q1@823@01) | live]
(push) ; 5
; [then-branch: 819 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 10)), $q1@823@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 819 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 10)), $q1@823@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@823@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1459@11@1459@348-aux|)))
(assert (forall (($q1@823@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@823@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1459@11@1459@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@824@01 $Snap)
(assert (= $t@824@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q1@825@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@825@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@825@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) $q1@825@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1460@11@1460@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@826@01 $Snap)
(assert (= $t@826@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@827@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 820 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 11)), $q2@827@01)) | live]
; [else-branch: 820 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 11)), $q2@827@01) | live]
(push) ; 5
; [then-branch: 820 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 11)), $q2@827@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 820 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 11)), $q2@827@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@827@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1461@11@1461@348-aux|)))
(assert (forall (($q2@827@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@827@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1461@11@1461@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@828@01 $Snap)
(assert (= $t@828@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q2@829@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@829@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@829@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) $q2@829@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1462@11@1462@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@830@01 $Snap)
(assert (= $t@830@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@789@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@831@01 $Snap)
(assert (= $t@831@01 ($Snap.combine ($Snap.first $t@831@01) ($Snap.second $t@831@01))))
(assert (= ($Snap.first $t@831@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@831@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@832@01 $Snap)
(assert (= $t@832@01 ($Snap.combine ($Snap.first $t@832@01) ($Snap.second $t@832@01))))
(assert (= ($Snap.first $t@832@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@786@01 0))))
(assert (= ($Snap.second $t@832@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@833@01 $Snap)
(assert (= $t@833@01 ($Snap.combine ($Snap.first $t@833@01) ($Snap.second $t@833@01))))
(assert (= ($Snap.first $t@833@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@786@01 1))))
(assert (= ($Snap.second $t@833@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@834@01 $Snap)
(assert (= $t@834@01 ($Snap.combine ($Snap.first $t@834@01) ($Snap.second $t@834@01))))
(assert (= ($Snap.first $t@834@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@786@01 2))))
(assert (= ($Snap.second $t@834@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@835@01 $Snap)
(assert (= $t@835@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@786@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@836@01 $Snap)
(assert (= $t@836@01 ($Snap.combine ($Snap.first $t@836@01) ($Snap.second $t@836@01))))
(assert (= ($Snap.first $t@836@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@786@01 4))))
(assert (= ($Snap.second $t@836@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@837@01 $Snap)
(assert (= $t@837@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@838@01 $Snap)
(assert (= $t@838@01 ($Snap.combine ($Snap.first $t@838@01) ($Snap.second $t@838@01))))
(assert (= ($Snap.first $t@838@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@785@01 0))))
(assert (= ($Snap.second $t@838@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@785@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@839@01 $Snap)
(assert (= $t@839@01 ($Snap.combine ($Snap.first $t@839@01) ($Snap.second $t@839@01))))
(assert (= ($Snap.first $t@839@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))))
(assert (= ($Snap.second $t@839@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@840@01 $Snap)
(assert (= $t@840@01 ($Snap.combine ($Snap.first $t@840@01) ($Snap.second $t@840@01))))
(assert (= ($Snap.first $t@840@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@785@01 2))))
(assert (= ($Snap.second $t@840@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@785@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@841@01 $Snap)
(assert (= $t@841@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@785@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@842@01 $Snap)
(assert (= $t@842@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@785@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@843@01 $Snap)
(assert (= $t@843@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@844@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
(declare-const $t@845@01 $Snap)
(assert (= $t@845@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@789@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@789@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 821 | $struct_get[Int]($struct_loc[Int](self@789@01, 3)) == 0 | live]
; [else-branch: 821 | $struct_get[Int]($struct_loc[Int](self@789@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 821 | $struct_get[Int]($struct_loc[Int](self@789@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@789@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 821 | $struct_get[Int]($struct_loc[Int](self@789@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@789@01 3)) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@789@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@789@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@789@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@789@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@846@01 $Snap)
(assert (= $t@846@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
(declare-const $t@847@01 $Snap)
(assert (= $t@847@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 822 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 822 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 822 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 4
(push) ; 4
; [else-branch: 822 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@848@01 $Snap)
(assert (= $t@848@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 823 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
; [else-branch: 823 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 823 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 823 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(declare-const $t@849@01 $Snap)
(assert (= $t@849@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 824 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
; [else-branch: 824 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 824 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 4
(push) ; 4
; [else-branch: 824 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@850@01 $Snap)
(assert (= $t@850@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 825 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 825 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 825 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 4
(push) ; 4
; [else-branch: 825 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@851@01 $Snap)
(assert (= $t@851@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
(declare-const $t@852@01 $Snap)
(assert (= $t@852@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 826 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 826 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 826 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 827 | False | live]
; [else-branch: 827 | True | live]
(push) ; 6
; [then-branch: 827 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 827 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 826 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) != 0
(declare-const $t@853@01 $Snap)
(assert (= $t@853@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@789@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@854@01 $Snap)
(assert (= $t@854@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@789@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@855@01 $Snap)
(assert (= $t@855@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@856@01 $Snap)
(assert (= $t@856@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 828 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
; [else-branch: 828 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 828 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 828 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@857@01 $Snap)
(assert (= $t@857@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 829 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 829 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 829 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 4
(push) ; 4
; [else-branch: 829 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
(declare-const $t@858@01 $Snap)
(assert (= $t@858@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) ($struct_get<Int> ($struct_loc<Int> self@789@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) ($struct_get<Int> ($struct_loc<Int> self@789@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@859@01 $Snap)
(assert (= $t@859@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@860@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 830 | !(0 <= q$a@860@01) | live]
; [else-branch: 830 | 0 <= q$a@860@01 | live]
(push) ; 5
; [then-branch: 830 | !(0 <= q$a@860@01)]
(assert (not (<= 0 q$a@860@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 830 | 0 <= q$a@860@01]
(assert (<= 0 q$a@860@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@860@01) (not (<= 0 q$a@860@01))))
(push) ; 4
; [then-branch: 831 | 0 <= q$a@860@01 && q$a@860@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 831 | !(0 <= q$a@860@01 && q$a@860@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 831 | 0 <= q$a@860@01 && q$a@860@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@860@01)
  (<= q$a@860@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 832 | q$a@860@01 == $struct_get[Int]($struct_loc[Int](self@789@01, 3)) | live]
; [else-branch: 832 | q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 3)) | live]
(push) ; 7
; [then-branch: 832 | q$a@860@01 == $struct_get[Int]($struct_loc[Int](self@789@01, 3))]
(assert (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
(pop) ; 7
(push) ; 7
; [else-branch: 832 | q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 3))]
(assert (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
  (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3)))))
(push) ; 6
; [then-branch: 833 | q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 3)) && q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0)) | live]
; [else-branch: 833 | !(q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 3)) && q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0))) | live]
(push) ; 7
; [then-branch: 833 | q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 3)) && q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0))]
(assert (and
  (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
  (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 833 | !(q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 3)) && q$a@860@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0)))]
(assert (not
  (and
    (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
    (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
      (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))))
  (and
    (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
    (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))))
(pop) ; 5
(push) ; 5
; [else-branch: 831 | !(0 <= q$a@860@01 && q$a@860@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@860@01)
    (<= q$a@860@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@860@01)
    (<= q$a@860@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@860@01)
    (<= q$a@860@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
      (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
          (not
            (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))))
      (and
        (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
        (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@860@01)
      (<= q$a@860@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@860@01)
    (<= q$a@860@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@860@01 Int)) (!
  (and
    (or (<= 0 q$a@860@01) (not (<= 0 q$a@860@01)))
    (=>
      (and
        (<= 0 q$a@860@01)
        (<= q$a@860@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@860@01)
        (<= q$a@860@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
          (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@860@01
                  ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
              (not
                (=
                  q$a@860@01
                  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))))
          (and
            (not
              (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
            (not
              (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@860@01)
          (<= q$a@860@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@860@01)
        (<= q$a@860@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@860@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1495@11@1495@513-aux|)))
(assert (forall ((q$a@860@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@860@01)
        (<= q$a@860@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))
        (not (= q$a@860@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) q$a@860@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@860@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@860@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@860@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1495@11@1495@513|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@861@01 $Snap)
(assert (= $t@861@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@862@01 $Snap)
(assert (= $t@862@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@863@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 834 | !(0 <= q$a@863@01) | live]
; [else-branch: 834 | 0 <= q$a@863@01 | live]
(push) ; 5
; [then-branch: 834 | !(0 <= q$a@863@01)]
(assert (not (<= 0 q$a@863@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 834 | 0 <= q$a@863@01]
(assert (<= 0 q$a@863@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@863@01) (not (<= 0 q$a@863@01))))
(push) ; 4
; [then-branch: 835 | 0 <= q$a@863@01 && q$a@863@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 835 | !(0 <= q$a@863@01 && q$a@863@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 835 | 0 <= q$a@863@01 && q$a@863@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@863@01)
  (<= q$a@863@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 6
; [then-branch: 836 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), q$a@863@01) != 0 | live]
; [else-branch: 836 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), q$a@863@01) == 0 | live]
(push) ; 7
; [then-branch: 836 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), q$a@863@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(push) ; 7
; [else-branch: 836 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), q$a@863@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 835 | !(0 <= q$a@863@01 && q$a@863@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@863@01)
    (<= q$a@863@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@863@01)
    (<= q$a@863@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@863@01)
    (<= q$a@863@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@863@01)
      (<= q$a@863@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@863@01)
    (<= q$a@863@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@863@01 Int)) (!
  (and
    (or (<= 0 q$a@863@01) (not (<= 0 q$a@863@01)))
    (=>
      (and
        (<= 0 q$a@863@01)
        (<= q$a@863@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@863@01)
        (<= q$a@863@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@863@01)
          (<= q$a@863@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@863@01)
        (<= q$a@863@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1497@11@1497@343-aux|)))
(assert (forall ((q$a@863@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@863@01)
        (<= q$a@863@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@863@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@863@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1497@11@1497@343|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@864@01 $Snap)
(assert (= $t@864@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@865@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 837 | !(0 <= q$a@865@01) | live]
; [else-branch: 837 | 0 <= q$a@865@01 | live]
(push) ; 5
; [then-branch: 837 | !(0 <= q$a@865@01)]
(assert (not (<= 0 q$a@865@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 837 | 0 <= q$a@865@01]
(assert (<= 0 q$a@865@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@865@01) (not (<= 0 q$a@865@01))))
(push) ; 4
; [then-branch: 838 | 0 <= q$a@865@01 && q$a@865@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 838 | !(0 <= q$a@865@01 && q$a@865@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 5
; [then-branch: 838 | 0 <= q$a@865@01 && q$a@865@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@865@01)
  (<= q$a@865@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
; [then-branch: 839 | q$a@865@01 == $struct_get[Int]($struct_loc[Int](self@789@01, 0)) | live]
; [else-branch: 839 | q$a@865@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0)) | live]
(push) ; 7
; [then-branch: 839 | q$a@865@01 == $struct_get[Int]($struct_loc[Int](self@789@01, 0))]
(assert (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
(pop) ; 7
(push) ; 7
; [else-branch: 839 | q$a@865@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0))]
(assert (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
  (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
(push) ; 6
; [then-branch: 840 | q$a@865@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 11)), q$a@865@01) == 0 | live]
; [else-branch: 840 | !(q$a@865@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 11)), q$a@865@01) == 0) | live]
(push) ; 7
; [then-branch: 840 | q$a@865@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 11)), q$a@865@01) == 0]
(assert (and
  (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 7
(push) ; 7
; [else-branch: 840 | !(q$a@865@01 != $struct_get[Int]($struct_loc[Int](self@789@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 11)), q$a@865@01) == 0)]
(assert (not
  (and
    (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
        0)))
  (and
    (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
      0))))
(pop) ; 5
(push) ; 5
; [else-branch: 838 | !(0 <= q$a@865@01 && q$a@865@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@865@01)
    (<= q$a@865@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@865@01)
    (<= q$a@865@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@865@01)
    (<= q$a@865@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
      (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
            0)))
      (and
        (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@865@01)
      (<= q$a@865@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@865@01)
    (<= q$a@865@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@865@01 Int)) (!
  (and
    (or (<= 0 q$a@865@01) (not (<= 0 q$a@865@01)))
    (=>
      (and
        (<= 0 q$a@865@01)
        (<= q$a@865@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@865@01)
        (<= q$a@865@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
          (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@865@01
                  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
                0)))
          (and
            (not
              (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@865@01)
          (<= q$a@865@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@865@01)
        (<= q$a@865@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1498@11@1498@396-aux|)))
(assert (forall ((q$a@865@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@865@01)
        (<= q$a@865@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@865@01 ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 10)) q$a@865@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 11)) q$a@865@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1498@11@1498@396|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
(declare-const $t@866@01 $Snap)
(assert (= $t@866@01 $Snap.unit))
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@867@01 Int)
(declare-const q$v@868@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 841 | !(0 <= q$a@867@01) | live]
; [else-branch: 841 | 0 <= q$a@867@01 | live]
(push) ; 5
; [then-branch: 841 | !(0 <= q$a@867@01)]
(assert (not (<= 0 q$a@867@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 841 | 0 <= q$a@867@01]
(assert (<= 0 q$a@867@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 842 | !(q$a@867@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 842 | q$a@867@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 842 | !(q$a@867@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@867@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 842 | q$a@867@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@867@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 843 | !(0 <= q$v@868@01) | live]
; [else-branch: 843 | 0 <= q$v@868@01 | live]
(push) ; 9
; [then-branch: 843 | !(0 <= q$v@868@01)]
(assert (not (<= 0 q$v@868@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 843 | 0 <= q$v@868@01]
(assert (<= 0 q$v@868@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@868@01) (not (<= 0 q$v@868@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@868@01) (not (<= 0 q$v@868@01))))))
(assert (or
  (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@867@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@867@01)
  (and
    (<= 0 q$a@867@01)
    (=>
      (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@868@01) (not (<= 0 q$v@868@01)))))
    (or
      (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@867@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@867@01) (not (<= 0 q$a@867@01))))
(push) ; 4
; [then-branch: 844 | 0 <= q$a@867@01 && q$a@867@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@868@01 && q$v@868@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 844 | !(0 <= q$a@867@01 && q$a@867@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@868@01 && q$v@868@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 844 | 0 <= q$a@867@01 && q$a@867@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@868@01 && q$v@868@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@867@01)
  (and
    (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@868@01)
      (<=
        q$v@868@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 6
; [then-branch: 845 | q$v@868@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), q$a@867@01) | live]
; [else-branch: 845 | q$v@868@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), q$a@867@01) | live]
(push) ; 7
; [then-branch: 845 | q$v@868@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), q$a@867@01)]
(assert (=
  q$v@868@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@867@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 845 | q$v@868@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@789@01, 6)), q$a@867@01)]
(assert (not
  (=
    q$v@868@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@867@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@868@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@867@01)))
  (=
    q$v@868@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@867@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 844 | !(0 <= q$a@867@01 && q$a@867@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@868@01 && q$v@868@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@867@01)
    (and
      (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@868@01)
        (<=
          q$v@868@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@867@01)
    (and
      (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@868@01)
        (<=
          q$v@868@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@867@01)
    (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@868@01)
    (<=
      q$v@868@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@868@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@867@01)))
      (=
        q$v@868@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@867@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@867@01)
      (and
        (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@868@01)
          (<=
            q$v@868@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@867@01)
    (and
      (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@868@01)
        (<=
          q$v@868@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@869@01 $PSF<$accessible$withdraw>)
(declare-const s@870@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@867@01 Int) (q$v@868@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@867@01)
      (and
        (<= 0 q$a@867@01)
        (=>
          (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@868@01) (not (<= 0 q$v@868@01)))))
        (or
          (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@867@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@867@01) (not (<= 0 q$a@867@01)))
    (=>
      (and
        (<= 0 q$a@867@01)
        (and
          (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@868@01)
            (<=
              q$v@868@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@867@01)
        (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@868@01)
        (<=
          q$v@868@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@868@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@867@01)))
          (=
            q$v@868@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@789@01 6)) q$a@867@01)))))
    (or
      (not
        (and
          (<= 0 q$a@867@01)
          (and
            (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@868@01)
              (<=
                q$v@868@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@867@01)
        (and
          (<= q$a@867@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@868@01)
            (<=
              q$v@868@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@869@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@867@01))
    ($SortWrappers.IntTo$Snap q$v@868@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@867@01))
    ($SortWrappers.IntTo$Snap q$v@868@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1499@11@1499@344-aux|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@871@01 $Snap)
(assert (= $t@871@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@785@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($struct_get($struct_loc(block, 4)): Int) >= ($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(block, 4)): Int) >= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 2))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 846 | !($struct_get[Int]($struct_loc[Int](block@786@01, 4)) >= $struct_get[Int]($struct_loc[Int](self@789@01, 2))) | live]
; [else-branch: 846 | $struct_get[Int]($struct_loc[Int](block@786@01, 4)) >= $struct_get[Int]($struct_loc[Int](self@789@01, 2)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 846 | !($struct_get[Int]($struct_loc[Int](block@786@01, 4)) >= $struct_get[Int]($struct_loc[Int](self@789@01, 2)))]
(assert (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 2)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) ==
;   ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 847 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
; [else-branch: 847 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 847 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(pop) ; 5
(push) ; 5
; [else-branch: 847 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 4
; [then-branch: 848 | False | dead]
; [else-branch: 848 | True | live]
(push) ; 5
; [else-branch: 848 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 849 | True | live]
; [else-branch: 849 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 849 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@872@01 $Snap)
(assert (= $t@872@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@809@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@873@01 $Struct)
(assert (=
  self@873@01
  ($struct_set<$Struct> self@789@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@789@01 7))
    l$havoc$6@809@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@873@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@873@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 850 | $struct_get[Int]($struct_loc[Int](self@873@01, 3)) == 0 | live]
; [else-branch: 850 | $struct_get[Int]($struct_loc[Int](self@873@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 850 | $struct_get[Int]($struct_loc[Int](self@873@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@873@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 6
(push) ; 6
; [else-branch: 850 | $struct_get[Int]($struct_loc[Int](self@873@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@873@01 3)) 0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@873@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@873@01 3)) 0)))
(push) ; 5
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@873@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@873@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@873@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@873@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@873@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@873@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 851 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 851 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 851 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(push) ; 6
; [else-branch: 851 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 852 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5))) | live]
; [else-branch: 852 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 852 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 6
(push) ; 6
; [else-branch: 852 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))
  (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))))
(push) ; 5
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@873@01 7))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@873@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 853 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5))) | live]
; [else-branch: 853 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 853 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 6
(push) ; 6
; [else-branch: 853 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 854 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5)) | live]
; [else-branch: 854 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 854 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 6
(push) ; 6
; [else-branch: 854 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@873@01 7))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@873@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 5
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 855 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 855 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 855 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 7
; [then-branch: 856 | $struct_get[Int]($struct_loc[Int](self@873@01, 4)) != $struct_get[Int]($struct_loc[Int](self@789@01, 4)) | live]
; [else-branch: 856 | $struct_get[Int]($struct_loc[Int](self@873@01, 4)) == $struct_get[Int]($struct_loc[Int](self@789@01, 4)) | live]
(push) ; 8
; [then-branch: 856 | $struct_get[Int]($struct_loc[Int](self@873@01, 4)) != $struct_get[Int]($struct_loc[Int](self@789@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(pop) ; 8
(push) ; 8
; [else-branch: 856 | $struct_get[Int]($struct_loc[Int](self@873@01, 4)) == $struct_get[Int]($struct_loc[Int](self@789@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))))
(pop) ; 6
(push) ; 6
; [else-branch: 855 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
    (or
      (=
        ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
      (not
        (=
          ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
          ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))))))
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@873@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 3)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@873@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@873@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@873@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@873@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@873@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 857 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5))) | live]
; [else-branch: 857 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 857 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 6
(push) ; 6
; [else-branch: 857 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 858 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5)) | live]
; [else-branch: 858 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 858 | $struct_get[Bool]($struct_loc[Int](self@873@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@873@01 5)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 6
(push) ; 6
; [else-branch: 858 | !($struct_get[Bool]($struct_loc[Int](self@873@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@873@01 4))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@873@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@873@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) ($struct_get<Int> ($struct_loc<Int> self@873@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) ($struct_get<Int> ($struct_loc<Int> self@873@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@873@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) ($struct_get<Int> ($struct_loc<Int> self@873@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@874@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 859 | !(0 <= q$a@874@01) | live]
; [else-branch: 859 | 0 <= q$a@874@01 | live]
(push) ; 7
; [then-branch: 859 | !(0 <= q$a@874@01)]
(assert (not (<= 0 q$a@874@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 859 | 0 <= q$a@874@01]
(assert (<= 0 q$a@874@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@874@01) (not (<= 0 q$a@874@01))))
(push) ; 6
; [then-branch: 860 | 0 <= q$a@874@01 && q$a@874@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 860 | !(0 <= q$a@874@01 && q$a@874@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 860 | 0 <= q$a@874@01 && q$a@874@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@874@01)
  (<= q$a@874@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
; [then-branch: 861 | q$a@874@01 == $struct_get[Int]($struct_loc[Int](self@873@01, 3)) | live]
; [else-branch: 861 | q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 3)) | live]
(push) ; 9
; [then-branch: 861 | q$a@874@01 == $struct_get[Int]($struct_loc[Int](self@873@01, 3))]
(assert (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
(pop) ; 9
(push) ; 9
; [else-branch: 861 | q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 3))]
(assert (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
  (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3)))))
(push) ; 8
; [then-branch: 862 | q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 3)) && q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0)) | live]
; [else-branch: 862 | !(q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 3)) && q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0))) | live]
(push) ; 9
; [then-branch: 862 | q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 3)) && q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0))]
(assert (and
  (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
  (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(push) ; 9
; [else-branch: 862 | !(q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 3)) && q$a@874@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0)))]
(assert (not
  (and
    (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
    (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
      (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))))
  (and
    (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
    (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))))))
(pop) ; 7
(push) ; 7
; [else-branch: 860 | !(0 <= q$a@874@01 && q$a@874@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@874@01)
    (<= q$a@874@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@874@01)
    (<= q$a@874@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@874@01)
    (<= q$a@874@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
      (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
          (not
            (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))))
      (and
        (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
        (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@874@01)
      (<= q$a@874@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@874@01)
    (<= q$a@874@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@874@01 Int)) (!
  (and
    (or (<= 0 q$a@874@01) (not (<= 0 q$a@874@01)))
    (=>
      (and
        (<= 0 q$a@874@01)
        (<= q$a@874@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@874@01)
        (<= q$a@874@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
          (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@874@01
                  ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
              (not
                (=
                  q$a@874@01
                  ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))))
          (and
            (not
              (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
            (not
              (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@874@01)
          (<= q$a@874@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@874@01)
        (<= q$a@874@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@874@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513-aux|)))
(push) ; 5
(assert (not (forall ((q$a@874@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@874@01)
        (<= q$a@874@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
        (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) q$a@874@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@874@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@874@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@874@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@874@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@874@01)
        (<= q$a@874@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 3))))
        (not (= q$a@874@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) q$a@874@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@874@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@874@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@874@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 5
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@875@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 863 | !(0 <= q$a@875@01) | live]
; [else-branch: 863 | 0 <= q$a@875@01 | live]
(push) ; 7
; [then-branch: 863 | !(0 <= q$a@875@01)]
(assert (not (<= 0 q$a@875@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 863 | 0 <= q$a@875@01]
(assert (<= 0 q$a@875@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@875@01) (not (<= 0 q$a@875@01))))
(push) ; 6
; [then-branch: 864 | 0 <= q$a@875@01 && q$a@875@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 864 | !(0 <= q$a@875@01 && q$a@875@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 864 | 0 <= q$a@875@01 && q$a@875@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@875@01)
  (<= q$a@875@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 8
; [then-branch: 865 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 6)), q$a@875@01) != 0 | live]
; [else-branch: 865 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 6)), q$a@875@01) == 0 | live]
(push) ; 9
; [then-branch: 865 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 6)), q$a@875@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(push) ; 9
; [else-branch: 865 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 6)), q$a@875@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
  0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 864 | !(0 <= q$a@875@01 && q$a@875@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@875@01)
    (<= q$a@875@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@875@01)
    (<= q$a@875@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@875@01)
    (<= q$a@875@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@875@01)
      (<= q$a@875@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@875@01)
    (<= q$a@875@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@875@01 Int)) (!
  (and
    (or (<= 0 q$a@875@01) (not (<= 0 q$a@875@01)))
    (=>
      (and
        (<= 0 q$a@875@01)
        (<= q$a@875@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@875@01)
        (<= q$a@875@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@875@01)
          (<= q$a@875@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@875@01)
        (<= q$a@875@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343-aux|)))
(push) ; 5
(assert (not (forall ((q$a@875@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@875@01)
        (<= q$a@875@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@875@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@875@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@875@01)
        (<= q$a@875@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@875@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@875@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@876@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 866 | !(0 <= q$a@876@01) | live]
; [else-branch: 866 | 0 <= q$a@876@01 | live]
(push) ; 7
; [then-branch: 866 | !(0 <= q$a@876@01)]
(assert (not (<= 0 q$a@876@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 866 | 0 <= q$a@876@01]
(assert (<= 0 q$a@876@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@876@01) (not (<= 0 q$a@876@01))))
(push) ; 6
; [then-branch: 867 | 0 <= q$a@876@01 && q$a@876@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 867 | !(0 <= q$a@876@01 && q$a@876@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 867 | 0 <= q$a@876@01 && q$a@876@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@876@01)
  (<= q$a@876@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
; [then-branch: 868 | q$a@876@01 == $struct_get[Int]($struct_loc[Int](self@873@01, 0)) | live]
; [else-branch: 868 | q$a@876@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0)) | live]
(push) ; 9
; [then-branch: 868 | q$a@876@01 == $struct_get[Int]($struct_loc[Int](self@873@01, 0))]
(assert (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
(pop) ; 9
(push) ; 9
; [else-branch: 868 | q$a@876@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0))]
(assert (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
  (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0)))))
(push) ; 8
; [then-branch: 869 | q$a@876@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 11)), q$a@876@01) == 0 | live]
; [else-branch: 869 | !(q$a@876@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 11)), q$a@876@01) == 0) | live]
(push) ; 9
; [then-branch: 869 | q$a@876@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 11)), q$a@876@01) == 0]
(assert (and
  (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(push) ; 9
; [else-branch: 869 | !(q$a@876@01 != $struct_get[Int]($struct_loc[Int](self@873@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 11)), q$a@876@01) == 0)]
(assert (not
  (and
    (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
        0)))
  (and
    (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 867 | !(0 <= q$a@876@01 && q$a@876@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@876@01)
    (<= q$a@876@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@876@01)
    (<= q$a@876@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@876@01)
    (<= q$a@876@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
      (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
            0)))
      (and
        (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@876@01)
      (<= q$a@876@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@876@01)
    (<= q$a@876@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@876@01 Int)) (!
  (and
    (or (<= 0 q$a@876@01) (not (<= 0 q$a@876@01)))
    (=>
      (and
        (<= 0 q$a@876@01)
        (<= q$a@876@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@876@01)
        (<= q$a@876@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
          (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@876@01
                  ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
                0)))
          (and
            (not
              (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@876@01)
          (<= q$a@876@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@876@01)
        (<= q$a@876@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396-aux|)))
(push) ; 5
(assert (not (forall ((q$a@876@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@876@01)
        (<= q$a@876@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) q$a@876@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@876@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@876@01)
        (<= q$a@876@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@876@01 ($struct_get<Int> ($struct_loc<Int> self@873@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 10)) q$a@876@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 11)) q$a@876@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@877@01 Int)
(declare-const q$v@878@01 Int)
(push) ; 5
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 870 | !(0 <= q$a@877@01) | live]
; [else-branch: 870 | 0 <= q$a@877@01 | live]
(push) ; 7
; [then-branch: 870 | !(0 <= q$a@877@01)]
(assert (not (<= 0 q$a@877@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 870 | 0 <= q$a@877@01]
(assert (<= 0 q$a@877@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 8
; [then-branch: 871 | !(q$a@877@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 871 | q$a@877@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 9
; [then-branch: 871 | !(q$a@877@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@877@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 9
(push) ; 9
; [else-branch: 871 | q$a@877@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@877@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 10
; [then-branch: 872 | !(0 <= q$v@878@01) | live]
; [else-branch: 872 | 0 <= q$v@878@01 | live]
(push) ; 11
; [then-branch: 872 | !(0 <= q$v@878@01)]
(assert (not (<= 0 q$v@878@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 872 | 0 <= q$v@878@01]
(assert (<= 0 q$v@878@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@878@01) (not (<= 0 q$v@878@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@878@01) (not (<= 0 q$v@878@01))))))
(assert (or
  (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@877@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@877@01)
  (and
    (<= 0 q$a@877@01)
    (=>
      (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@878@01) (not (<= 0 q$v@878@01)))))
    (or
      (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@877@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@877@01) (not (<= 0 q$a@877@01))))
(push) ; 6
; [then-branch: 873 | 0 <= q$a@877@01 && q$a@877@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@878@01 && q$v@878@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 873 | !(0 <= q$a@877@01 && q$a@877@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@878@01 && q$v@878@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 873 | 0 <= q$a@877@01 && q$a@877@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@878@01 && q$v@878@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@877@01)
  (and
    (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@878@01)
      (<=
        q$v@878@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 8
; [then-branch: 874 | q$v@878@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 6)), q$a@877@01) | live]
; [else-branch: 874 | q$v@878@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 6)), q$a@877@01) | live]
(push) ; 9
; [then-branch: 874 | q$v@878@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 6)), q$a@877@01)]
(assert (=
  q$v@878@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@877@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 874 | q$v@878@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@873@01, 6)), q$a@877@01)]
(assert (not
  (=
    q$v@878@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@877@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@878@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@877@01)))
  (=
    q$v@878@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@877@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 873 | !(0 <= q$a@877@01 && q$a@877@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@878@01 && q$v@878@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@877@01)
    (and
      (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@878@01)
        (<=
          q$v@878@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@877@01)
    (and
      (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@878@01)
        (<=
          q$v@878@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@877@01)
    (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@878@01)
    (<=
      q$v@878@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@878@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@877@01)))
      (=
        q$v@878@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@877@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@877@01)
      (and
        (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@878@01)
          (<=
            q$v@878@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@877@01)
    (and
      (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@878@01)
        (<=
          q$v@878@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@879@01 $PSF<$accessible$withdraw>)
(declare-const s@880@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@877@01 Int) (q$v@878@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@877@01)
      (and
        (<= 0 q$a@877@01)
        (=>
          (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@878@01) (not (<= 0 q$v@878@01)))))
        (or
          (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@877@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@877@01) (not (<= 0 q$a@877@01)))
    (=>
      (and
        (<= 0 q$a@877@01)
        (and
          (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@878@01)
            (<=
              q$v@878@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@877@01)
        (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@878@01)
        (<=
          q$v@878@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@878@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@877@01)))
          (=
            q$v@878@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@873@01 6)) q$a@877@01)))))
    (or
      (not
        (and
          (<= 0 q$a@877@01)
          (and
            (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@878@01)
              (<=
                q$v@878@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@877@01)
        (and
          (<= q$a@877@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@878@01)
            (<=
              q$v@878@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@879@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@877@01))
    ($SortWrappers.IntTo$Snap q$v@878@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@877@01))
    ($SortWrappers.IntTo$Snap q$v@878@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1666@11@1666@344-aux|)))
(pop) ; 4
; [then-branch: 875 | False | dead]
; [else-branch: 875 | True | live]
(push) ; 4
; [else-branch: 875 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 846 | $struct_get[Int]($struct_loc[Int](block@786@01, 4)) >= $struct_get[Int]($struct_loc[Int](self@789@01, 2))]
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 2))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(block, 4)): Int) >= ($struct_get($struct_loc(self, 2)): Int))
; [eval] !(($struct_get($struct_loc(block, 4)): Int) >= ($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(block, 4)): Int) >= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 2))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 876 | $struct_get[Int]($struct_loc[Int](block@786@01, 4)) >= $struct_get[Int]($struct_loc[Int](self@789@01, 2)) | live]
; [else-branch: 876 | !($struct_get[Int]($struct_loc[Int](block@786@01, 4)) >= $struct_get[Int]($struct_loc[Int](self@789@01, 2))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 876 | $struct_get[Int]($struct_loc[Int](block@786@01, 4)) >= $struct_get[Int]($struct_loc[Int](self@789@01, 2))]
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 2))))
; [eval] !!($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 877 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 877 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 877 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) ==
;   ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 5
; [then-branch: 878 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | dead]
; [else-branch: 878 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
(push) ; 6
; [else-branch: 878 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 5
; [then-branch: 879 | False | dead]
; [else-branch: 879 | True | live]
(push) ; 6
; [else-branch: 879 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 880 | True | live]
; [else-branch: 880 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 880 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@881@01 $Snap)
(assert (= $t@881@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@809@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@882@01 $Struct)
(assert (=
  self@882@01
  ($struct_set<$Struct> self@789@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@789@01 7))
    l$havoc$6@809@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@882@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@882@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 881 | $struct_get[Int]($struct_loc[Int](self@882@01, 3)) == 0 | live]
; [else-branch: 881 | $struct_get[Int]($struct_loc[Int](self@882@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 881 | $struct_get[Int]($struct_loc[Int](self@882@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@882@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 7
(push) ; 7
; [else-branch: 881 | $struct_get[Int]($struct_loc[Int](self@882@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@882@01 3)) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@882@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@882@01 3)) 0)))
(push) ; 6
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@882@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@882@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@882@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@882@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@882@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@882@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 882 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 882 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 882 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@882@01 5)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@882@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@882@01 5))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 883 | !($struct_get[Bool]($struct_loc[Int](self@882@01, 5))) | dead]
; [else-branch: 883 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 883 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@882@01 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($struct_get<Bool> ($struct_loc<Int> self@882@01 5)))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
; [then-branch: 884 | !($struct_get[Bool]($struct_loc[Int](self@882@01, 5))) | dead]
; [else-branch: 884 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5)) | live]
(push) ; 7
; [else-branch: 884 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@882@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 885 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5)) | live]
; [else-branch: 885 | !($struct_get[Bool]($struct_loc[Int](self@882@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 885 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@882@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@882@01 7))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@882@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@882@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 6
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 886 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
; [else-branch: 886 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 886 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
; [then-branch: 887 | $struct_get[Int]($struct_loc[Int](self@882@01, 4)) != $struct_get[Int]($struct_loc[Int](self@789@01, 4)) | live]
; [else-branch: 887 | $struct_get[Int]($struct_loc[Int](self@882@01, 4)) == $struct_get[Int]($struct_loc[Int](self@789@01, 4)) | live]
(push) ; 9
; [then-branch: 887 | $struct_get[Int]($struct_loc[Int](self@882@01, 4)) != $struct_get[Int]($struct_loc[Int](self@789@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(pop) ; 9
(push) ; 9
; [else-branch: 887 | $struct_get[Int]($struct_loc[Int](self@882@01, 4)) == $struct_get[Int]($struct_loc[Int](self@789@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (or
    (=
      ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))))
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@882@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 3)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@882@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@882@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@882@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@882@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@882@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@882@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
; [then-branch: 888 | !($struct_get[Bool]($struct_loc[Int](self@882@01, 5))) | dead]
; [else-branch: 888 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5)) | live]
(push) ; 7
; [else-branch: 888 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@882@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 889 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5)) | live]
; [else-branch: 889 | !($struct_get[Bool]($struct_loc[Int](self@882@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 889 | $struct_get[Bool]($struct_loc[Int](self@882@01, 5))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@882@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@882@01 4))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@882@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@882@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) ($struct_get<Int> ($struct_loc<Int> self@882@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@882@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) ($struct_get<Int> ($struct_loc<Int> self@882@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@882@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) ($struct_get<Int> ($struct_loc<Int> self@882@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@883@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 890 | !(0 <= q$a@883@01) | live]
; [else-branch: 890 | 0 <= q$a@883@01 | live]
(push) ; 8
; [then-branch: 890 | !(0 <= q$a@883@01)]
(assert (not (<= 0 q$a@883@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 890 | 0 <= q$a@883@01]
(assert (<= 0 q$a@883@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@883@01) (not (<= 0 q$a@883@01))))
(push) ; 7
; [then-branch: 891 | 0 <= q$a@883@01 && q$a@883@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 891 | !(0 <= q$a@883@01 && q$a@883@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 891 | 0 <= q$a@883@01 && q$a@883@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@883@01)
  (<= q$a@883@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 9
; [then-branch: 892 | q$a@883@01 == $struct_get[Int]($struct_loc[Int](self@882@01, 3)) | live]
; [else-branch: 892 | q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 3)) | live]
(push) ; 10
; [then-branch: 892 | q$a@883@01 == $struct_get[Int]($struct_loc[Int](self@882@01, 3))]
(assert (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
(pop) ; 10
(push) ; 10
; [else-branch: 892 | q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 3))]
(assert (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
  (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3)))))
(push) ; 9
; [then-branch: 893 | q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 3)) && q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0)) | live]
; [else-branch: 893 | !(q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 3)) && q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0))) | live]
(push) ; 10
; [then-branch: 893 | q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 3)) && q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0))]
(assert (and
  (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
  (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(push) ; 10
; [else-branch: 893 | !(q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 3)) && q$a@883@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0)))]
(assert (not
  (and
    (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
    (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
      (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))))
  (and
    (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
    (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))))))
(pop) ; 8
(push) ; 8
; [else-branch: 891 | !(0 <= q$a@883@01 && q$a@883@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@883@01)
    (<= q$a@883@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@883@01)
    (<= q$a@883@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@883@01)
    (<= q$a@883@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
      (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
          (not
            (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))))
      (and
        (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
        (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@883@01)
      (<= q$a@883@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@883@01)
    (<= q$a@883@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@883@01 Int)) (!
  (and
    (or (<= 0 q$a@883@01) (not (<= 0 q$a@883@01)))
    (=>
      (and
        (<= 0 q$a@883@01)
        (<= q$a@883@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@883@01)
        (<= q$a@883@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
          (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@883@01
                  ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
              (not
                (=
                  q$a@883@01
                  ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))))
          (and
            (not
              (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
            (not
              (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@883@01)
          (<= q$a@883@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@883@01)
        (<= q$a@883@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@883@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513-aux|)))
(push) ; 6
(assert (not (forall ((q$a@883@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@883@01)
        (<= q$a@883@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
        (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) q$a@883@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@883@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@883@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@883@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@883@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@883@01)
        (<= q$a@883@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 3))))
        (not (= q$a@883@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) q$a@883@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@883@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@883@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@883@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 6
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@884@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 894 | !(0 <= q$a@884@01) | live]
; [else-branch: 894 | 0 <= q$a@884@01 | live]
(push) ; 8
; [then-branch: 894 | !(0 <= q$a@884@01)]
(assert (not (<= 0 q$a@884@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 894 | 0 <= q$a@884@01]
(assert (<= 0 q$a@884@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@884@01) (not (<= 0 q$a@884@01))))
(push) ; 7
; [then-branch: 895 | 0 <= q$a@884@01 && q$a@884@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 895 | !(0 <= q$a@884@01 && q$a@884@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 895 | 0 <= q$a@884@01 && q$a@884@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@884@01)
  (<= q$a@884@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 9
; [then-branch: 896 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 6)), q$a@884@01) != 0 | live]
; [else-branch: 896 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 6)), q$a@884@01) == 0 | live]
(push) ; 10
; [then-branch: 896 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 6)), q$a@884@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(push) ; 10
; [else-branch: 896 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 6)), q$a@884@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
  0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 895 | !(0 <= q$a@884@01 && q$a@884@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@884@01)
    (<= q$a@884@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@884@01)
    (<= q$a@884@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@884@01)
    (<= q$a@884@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@884@01)
      (<= q$a@884@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@884@01)
    (<= q$a@884@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@884@01 Int)) (!
  (and
    (or (<= 0 q$a@884@01) (not (<= 0 q$a@884@01)))
    (=>
      (and
        (<= 0 q$a@884@01)
        (<= q$a@884@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@884@01)
        (<= q$a@884@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@884@01)
          (<= q$a@884@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@884@01)
        (<= q$a@884@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343-aux|)))
(push) ; 6
(assert (not (forall ((q$a@884@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@884@01)
        (<= q$a@884@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@884@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@884@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@884@01)
        (<= q$a@884@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@884@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@884@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@885@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 897 | !(0 <= q$a@885@01) | live]
; [else-branch: 897 | 0 <= q$a@885@01 | live]
(push) ; 8
; [then-branch: 897 | !(0 <= q$a@885@01)]
(assert (not (<= 0 q$a@885@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 897 | 0 <= q$a@885@01]
(assert (<= 0 q$a@885@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@885@01) (not (<= 0 q$a@885@01))))
(push) ; 7
; [then-branch: 898 | 0 <= q$a@885@01 && q$a@885@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 898 | !(0 <= q$a@885@01 && q$a@885@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 898 | 0 <= q$a@885@01 && q$a@885@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@885@01)
  (<= q$a@885@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 9
; [then-branch: 899 | q$a@885@01 == $struct_get[Int]($struct_loc[Int](self@882@01, 0)) | live]
; [else-branch: 899 | q$a@885@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0)) | live]
(push) ; 10
; [then-branch: 899 | q$a@885@01 == $struct_get[Int]($struct_loc[Int](self@882@01, 0))]
(assert (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 899 | q$a@885@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0))]
(assert (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
  (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0)))))
(push) ; 9
; [then-branch: 900 | q$a@885@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 11)), q$a@885@01) == 0 | live]
; [else-branch: 900 | !(q$a@885@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 11)), q$a@885@01) == 0) | live]
(push) ; 10
; [then-branch: 900 | q$a@885@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 11)), q$a@885@01) == 0]
(assert (and
  (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 10
(push) ; 10
; [else-branch: 900 | !(q$a@885@01 != $struct_get[Int]($struct_loc[Int](self@882@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 11)), q$a@885@01) == 0)]
(assert (not
  (and
    (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
      0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
        0)))
  (and
    (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 898 | !(0 <= q$a@885@01 && q$a@885@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@885@01)
    (<= q$a@885@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@885@01)
    (<= q$a@885@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@885@01)
    (<= q$a@885@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
      (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
            0)))
      (and
        (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@885@01)
      (<= q$a@885@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@885@01)
    (<= q$a@885@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@885@01 Int)) (!
  (and
    (or (<= 0 q$a@885@01) (not (<= 0 q$a@885@01)))
    (=>
      (and
        (<= 0 q$a@885@01)
        (<= q$a@885@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@885@01)
        (<= q$a@885@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
          (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@885@01
                  ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
                0)))
          (and
            (not
              (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@885@01)
          (<= q$a@885@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@885@01)
        (<= q$a@885@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396-aux|)))
(push) ; 6
(assert (not (forall ((q$a@885@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@885@01)
        (<= q$a@885@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) q$a@885@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@885@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@885@01)
        (<= q$a@885@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@885@01 ($struct_get<Int> ($struct_loc<Int> self@882@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 10)) q$a@885@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 11)) q$a@885@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@886@01 Int)
(declare-const q$v@887@01 Int)
(push) ; 6
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 901 | !(0 <= q$a@886@01) | live]
; [else-branch: 901 | 0 <= q$a@886@01 | live]
(push) ; 8
; [then-branch: 901 | !(0 <= q$a@886@01)]
(assert (not (<= 0 q$a@886@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 901 | 0 <= q$a@886@01]
(assert (<= 0 q$a@886@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 9
; [then-branch: 902 | !(q$a@886@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 902 | q$a@886@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 10
; [then-branch: 902 | !(q$a@886@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@886@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 10
(push) ; 10
; [else-branch: 902 | q$a@886@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@886@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 11
; [then-branch: 903 | !(0 <= q$v@887@01) | live]
; [else-branch: 903 | 0 <= q$v@887@01 | live]
(push) ; 12
; [then-branch: 903 | !(0 <= q$v@887@01)]
(assert (not (<= 0 q$v@887@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 903 | 0 <= q$v@887@01]
(assert (<= 0 q$v@887@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@887@01) (not (<= 0 q$v@887@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@887@01) (not (<= 0 q$v@887@01))))))
(assert (or
  (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@886@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@886@01)
  (and
    (<= 0 q$a@886@01)
    (=>
      (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@887@01) (not (<= 0 q$v@887@01)))))
    (or
      (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@886@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@886@01) (not (<= 0 q$a@886@01))))
(push) ; 7
; [then-branch: 904 | 0 <= q$a@886@01 && q$a@886@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@887@01 && q$v@887@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 904 | !(0 <= q$a@886@01 && q$a@886@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@887@01 && q$v@887@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 8
; [then-branch: 904 | 0 <= q$a@886@01 && q$a@886@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@887@01 && q$v@887@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@886@01)
  (and
    (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@887@01)
      (<=
        q$v@887@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 9
; [then-branch: 905 | q$v@887@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 6)), q$a@886@01) | live]
; [else-branch: 905 | q$v@887@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 6)), q$a@886@01) | live]
(push) ; 10
; [then-branch: 905 | q$v@887@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 6)), q$a@886@01)]
(assert (=
  q$v@887@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@886@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 905 | q$v@887@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@882@01, 6)), q$a@886@01)]
(assert (not
  (=
    q$v@887@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@886@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@887@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@886@01)))
  (=
    q$v@887@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@886@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 904 | !(0 <= q$a@886@01 && q$a@886@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@887@01 && q$v@887@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@886@01)
    (and
      (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@887@01)
        (<=
          q$v@887@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@886@01)
    (and
      (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@887@01)
        (<=
          q$v@887@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@886@01)
    (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@887@01)
    (<=
      q$v@887@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@887@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@886@01)))
      (=
        q$v@887@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@886@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@886@01)
      (and
        (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@887@01)
          (<=
            q$v@887@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@886@01)
    (and
      (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@887@01)
        (<=
          q$v@887@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@888@01 $PSF<$accessible$withdraw>)
(declare-const s@889@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@886@01 Int) (q$v@887@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@886@01)
      (and
        (<= 0 q$a@886@01)
        (=>
          (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@887@01) (not (<= 0 q$v@887@01)))))
        (or
          (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@886@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@886@01) (not (<= 0 q$a@886@01)))
    (=>
      (and
        (<= 0 q$a@886@01)
        (and
          (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@887@01)
            (<=
              q$v@887@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@886@01)
        (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@887@01)
        (<=
          q$v@887@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@887@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@886@01)))
          (=
            q$v@887@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@882@01 6)) q$a@886@01)))))
    (or
      (not
        (and
          (<= 0 q$a@886@01)
          (and
            (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@887@01)
              (<=
                q$v@887@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@886@01)
        (and
          (<= q$a@886@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@887@01)
            (<=
              q$v@887@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@888@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@886@01))
    ($SortWrappers.IntTo$Snap q$v@887@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@886@01))
    ($SortWrappers.IntTo$Snap q$v@887@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1666@11@1666@344-aux|)))
(pop) ; 5
; [then-branch: 906 | False | dead]
; [else-branch: 906 | True | live]
(push) ; 5
; [else-branch: 906 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 877 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(pop) ; 4
; [eval] !!!($struct_get($struct_loc(self, 5)): Bool)
; [eval] !!($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 907 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
; [else-branch: 907 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 907 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
; [exec]
; self := ($struct_set(self, 5, true): $Struct)
; [eval] ($struct_set(self, 5, true): $Struct)
(declare-const self@890@01 $Struct)
(assert (= self@890@01 ($struct_set<$Struct> self@789@01 5 true)))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@890@01 7))
    ($struct_get<Int> ($struct_loc<Int> self@890@01 4))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 908 | $struct_get[Int]($struct_loc[Int](self@890@01, 7)) < $struct_get[Int]($struct_loc[Int](self@890@01, 4)) | dead]
; [else-branch: 908 | !($struct_get[Int]($struct_loc[Int](self@890@01, 7)) < $struct_get[Int]($struct_loc[Int](self@890@01, 4))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 908 | !($struct_get[Int]($struct_loc[Int](self@890@01, 7)) < $struct_get[Int]($struct_loc[Int](self@890@01, 4)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@890@01 7))
    ($struct_get<Int> ($struct_loc<Int> self@890@01 4)))))
(pop) ; 5
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 4)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@890@01 7))
  ($struct_get<Int> ($struct_loc<Int> self@890@01 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@890@01 7))
    ($struct_get<Int> ($struct_loc<Int> self@890@01 4))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 909 | !($struct_get[Int]($struct_loc[Int](self@890@01, 7)) < $struct_get[Int]($struct_loc[Int](self@890@01, 4))) | live]
; [else-branch: 909 | $struct_get[Int]($struct_loc[Int](self@890@01, 7)) < $struct_get[Int]($struct_loc[Int](self@890@01, 4)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 909 | !($struct_get[Int]($struct_loc[Int](self@890@01, 7)) < $struct_get[Int]($struct_loc[Int](self@890@01, 4)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@890@01 7))
    ($struct_get<Int> ($struct_loc<Int> self@890@01 4)))))
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@891@01 $Struct)
(assert (=
  self@891@01
  ($struct_set<$Struct> self@890@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 10)) ($struct_get<Int> ($struct_loc<Int> self@890@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@890@01 10)) ($struct_get<Int> ($struct_loc<Int> self@890@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@890@01 4)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 4)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 4)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@892@01 $Struct)
(assert (=
  self@892@01
  ($struct_set<$Struct> self@891@01 7 (-
    ($struct_get<Int> ($struct_loc<Int> self@891@01 7))
    ($struct_get<Int> ($struct_loc<Int> self@891@01 4))))))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 910 | $struct_get[Int]($struct_loc[Int](self@892@01, 3)) == 0 | live]
; [else-branch: 910 | $struct_get[Int]($struct_loc[Int](self@892@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 910 | $struct_get[Int]($struct_loc[Int](self@892@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 7
(push) ; 7
; [else-branch: 910 | $struct_get[Int]($struct_loc[Int](self@892@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0)))
(push) ; 6
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@892@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@892@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@892@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@892@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 6
; [then-branch: 911 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
; [else-branch: 911 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(push) ; 7
; [else-branch: 911 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 912 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
; [else-branch: 912 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 912 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@892@01 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($struct_get<Bool> ($struct_loc<Int> self@892@01 5)))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
; [then-branch: 913 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
; [else-branch: 913 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
(push) ; 7
; [else-branch: 913 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@892@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 914 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
; [else-branch: 914 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 914 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 7))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 6
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@892@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@892@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 6
; [then-branch: 915 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
; [else-branch: 915 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(push) ; 7
; [else-branch: 915 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@892@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@892@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
; [then-branch: 916 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
; [else-branch: 916 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
(push) ; 7
; [else-branch: 916 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@892@01 5)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 917 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
; [else-branch: 917 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 917 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 4))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) ($struct_get<Int> ($struct_loc<Int> self@892@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) ($struct_get<Int> ($struct_loc<Int> self@892@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) ($struct_get<Int> ($struct_loc<Int> self@892@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@893@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 918 | !(0 <= q$a@893@01) | live]
; [else-branch: 918 | 0 <= q$a@893@01 | live]
(push) ; 8
; [then-branch: 918 | !(0 <= q$a@893@01)]
(assert (not (<= 0 q$a@893@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 918 | 0 <= q$a@893@01]
(assert (<= 0 q$a@893@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@893@01) (not (<= 0 q$a@893@01))))
(push) ; 7
; [then-branch: 919 | 0 <= q$a@893@01 && q$a@893@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 919 | !(0 <= q$a@893@01 && q$a@893@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 919 | 0 <= q$a@893@01 && q$a@893@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@893@01)
  (<= q$a@893@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 9
; [then-branch: 920 | q$a@893@01 == $struct_get[Int]($struct_loc[Int](self@892@01, 3)) | live]
; [else-branch: 920 | q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 3)) | live]
(push) ; 10
; [then-branch: 920 | q$a@893@01 == $struct_get[Int]($struct_loc[Int](self@892@01, 3))]
(assert (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
(pop) ; 10
(push) ; 10
; [else-branch: 920 | q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 3))]
(assert (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
  (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3)))))
(push) ; 9
; [then-branch: 921 | q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 3)) && q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0)) | live]
; [else-branch: 921 | !(q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 3)) && q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0))) | live]
(push) ; 10
; [then-branch: 921 | q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 3)) && q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0))]
(assert (and
  (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
  (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(push) ; 10
; [else-branch: 921 | !(q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 3)) && q$a@893@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0)))]
(assert (not
  (and
    (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
    (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
      (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))))
  (and
    (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
    (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))))))
(pop) ; 8
(push) ; 8
; [else-branch: 919 | !(0 <= q$a@893@01 && q$a@893@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@893@01)
    (<= q$a@893@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@893@01)
    (<= q$a@893@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@893@01)
    (<= q$a@893@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
      (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
          (not
            (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))))
      (and
        (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
        (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@893@01)
      (<= q$a@893@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@893@01)
    (<= q$a@893@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@893@01 Int)) (!
  (and
    (or (<= 0 q$a@893@01) (not (<= 0 q$a@893@01)))
    (=>
      (and
        (<= 0 q$a@893@01)
        (<= q$a@893@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@893@01)
        (<= q$a@893@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
          (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@893@01
                  ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
              (not
                (=
                  q$a@893@01
                  ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))))
          (and
            (not
              (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
            (not
              (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@893@01)
          (<= q$a@893@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@893@01)
        (<= q$a@893@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@893@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1542@11@1542@513-aux|)))
(push) ; 6
(assert (not (forall ((q$a@893@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@893@01)
        (<= q$a@893@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
        (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) q$a@893@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@893@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@893@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@893@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1542@11@1542@513|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@893@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@893@01)
        (<= q$a@893@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))
        (not (= q$a@893@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) q$a@893@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@893@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@893@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@893@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1542@11@1542@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 6
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@894@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 922 | !(0 <= q$a@894@01) | live]
; [else-branch: 922 | 0 <= q$a@894@01 | live]
(push) ; 8
; [then-branch: 922 | !(0 <= q$a@894@01)]
(assert (not (<= 0 q$a@894@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 922 | 0 <= q$a@894@01]
(assert (<= 0 q$a@894@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@894@01) (not (<= 0 q$a@894@01))))
(push) ; 7
; [then-branch: 923 | 0 <= q$a@894@01 && q$a@894@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 923 | !(0 <= q$a@894@01 && q$a@894@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 923 | 0 <= q$a@894@01 && q$a@894@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@894@01)
  (<= q$a@894@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 9
; [then-branch: 924 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 6)), q$a@894@01) != 0 | live]
; [else-branch: 924 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 6)), q$a@894@01) == 0 | live]
(push) ; 10
; [then-branch: 924 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 6)), q$a@894@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(push) ; 10
; [else-branch: 924 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 6)), q$a@894@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
  0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 923 | !(0 <= q$a@894@01 && q$a@894@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@894@01)
    (<= q$a@894@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@894@01)
    (<= q$a@894@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@894@01)
    (<= q$a@894@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@894@01)
      (<= q$a@894@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@894@01)
    (<= q$a@894@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@894@01 Int)) (!
  (and
    (or (<= 0 q$a@894@01) (not (<= 0 q$a@894@01)))
    (=>
      (and
        (<= 0 q$a@894@01)
        (<= q$a@894@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@894@01)
        (<= q$a@894@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@894@01)
          (<= q$a@894@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@894@01)
        (<= q$a@894@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1544@11@1544@343-aux|)))
(push) ; 6
(assert (not (forall ((q$a@894@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@894@01)
        (<= q$a@894@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@894@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1544@11@1544@343|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@894@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@894@01)
        (<= q$a@894@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@894@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@894@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1544@11@1544@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@895@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 925 | !(0 <= q$a@895@01) | live]
; [else-branch: 925 | 0 <= q$a@895@01 | live]
(push) ; 8
; [then-branch: 925 | !(0 <= q$a@895@01)]
(assert (not (<= 0 q$a@895@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 925 | 0 <= q$a@895@01]
(assert (<= 0 q$a@895@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@895@01) (not (<= 0 q$a@895@01))))
(push) ; 7
; [then-branch: 926 | 0 <= q$a@895@01 && q$a@895@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 926 | !(0 <= q$a@895@01 && q$a@895@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 926 | 0 <= q$a@895@01 && q$a@895@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@895@01)
  (<= q$a@895@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 9
; [then-branch: 927 | q$a@895@01 == $struct_get[Int]($struct_loc[Int](self@892@01, 0)) | live]
; [else-branch: 927 | q$a@895@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0)) | live]
(push) ; 10
; [then-branch: 927 | q$a@895@01 == $struct_get[Int]($struct_loc[Int](self@892@01, 0))]
(assert (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
(pop) ; 10
(push) ; 10
; [else-branch: 927 | q$a@895@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0))]
(assert (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
  (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))))
(push) ; 9
; [then-branch: 928 | q$a@895@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 11)), q$a@895@01) == 0 | live]
; [else-branch: 928 | !(q$a@895@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 11)), q$a@895@01) == 0) | live]
(push) ; 10
; [then-branch: 928 | q$a@895@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 11)), q$a@895@01) == 0]
(assert (and
  (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 10
(push) ; 10
; [else-branch: 928 | !(q$a@895@01 != $struct_get[Int]($struct_loc[Int](self@892@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 11)), q$a@895@01) == 0)]
(assert (not
  (and
    (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
      0))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
        0)))
  (and
    (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
      0))))
(pop) ; 8
(push) ; 8
; [else-branch: 926 | !(0 <= q$a@895@01 && q$a@895@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@895@01)
    (<= q$a@895@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@895@01)
    (<= q$a@895@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@895@01)
    (<= q$a@895@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
      (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
            0)))
      (and
        (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@895@01)
      (<= q$a@895@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@895@01)
    (<= q$a@895@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@895@01 Int)) (!
  (and
    (or (<= 0 q$a@895@01) (not (<= 0 q$a@895@01)))
    (=>
      (and
        (<= 0 q$a@895@01)
        (<= q$a@895@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@895@01)
        (<= q$a@895@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
          (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@895@01
                  ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
                0)))
          (and
            (not
              (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@895@01)
          (<= q$a@895@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@895@01)
        (<= q$a@895@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1545@11@1545@396-aux|)))
(push) ; 6
(assert (not (forall ((q$a@895@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@895@01)
        (<= q$a@895@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) q$a@895@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1545@11@1545@396|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@895@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@895@01)
        (<= q$a@895@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@895@01 ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) q$a@895@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 11)) q$a@895@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1545@11@1545@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@896@01 Int)
(declare-const q$v@897@01 Int)
(push) ; 6
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 929 | !(0 <= q$a@896@01) | live]
; [else-branch: 929 | 0 <= q$a@896@01 | live]
(push) ; 8
; [then-branch: 929 | !(0 <= q$a@896@01)]
(assert (not (<= 0 q$a@896@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 929 | 0 <= q$a@896@01]
(assert (<= 0 q$a@896@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 9
; [then-branch: 930 | !(q$a@896@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 930 | q$a@896@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 10
; [then-branch: 930 | !(q$a@896@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@896@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 10
(push) ; 10
; [else-branch: 930 | q$a@896@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@896@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 11
; [then-branch: 931 | !(0 <= q$v@897@01) | live]
; [else-branch: 931 | 0 <= q$v@897@01 | live]
(push) ; 12
; [then-branch: 931 | !(0 <= q$v@897@01)]
(assert (not (<= 0 q$v@897@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 931 | 0 <= q$v@897@01]
(assert (<= 0 q$v@897@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@897@01) (not (<= 0 q$v@897@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@897@01) (not (<= 0 q$v@897@01))))))
(assert (or
  (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@896@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@896@01)
  (and
    (<= 0 q$a@896@01)
    (=>
      (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@897@01) (not (<= 0 q$v@897@01)))))
    (or
      (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@896@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@896@01) (not (<= 0 q$a@896@01))))
(push) ; 7
; [then-branch: 932 | 0 <= q$a@896@01 && q$a@896@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@897@01 && q$v@897@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 932 | !(0 <= q$a@896@01 && q$a@896@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@897@01 && q$v@897@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 8
; [then-branch: 932 | 0 <= q$a@896@01 && q$a@896@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@897@01 && q$v@897@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@896@01)
  (and
    (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@897@01)
      (<=
        q$v@897@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 9
; [then-branch: 933 | q$v@897@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 6)), q$a@896@01) | live]
; [else-branch: 933 | q$v@897@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 6)), q$a@896@01) | live]
(push) ; 10
; [then-branch: 933 | q$v@897@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 6)), q$a@896@01)]
(assert (=
  q$v@897@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@896@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 933 | q$v@897@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@892@01, 6)), q$a@896@01)]
(assert (not
  (=
    q$v@897@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@896@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@897@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@896@01)))
  (=
    q$v@897@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@896@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 932 | !(0 <= q$a@896@01 && q$a@896@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@897@01 && q$v@897@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@896@01)
    (and
      (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@897@01)
        (<=
          q$v@897@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@896@01)
    (and
      (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@897@01)
        (<=
          q$v@897@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@896@01)
    (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@897@01)
    (<=
      q$v@897@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@897@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@896@01)))
      (=
        q$v@897@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@896@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@896@01)
      (and
        (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@897@01)
          (<=
            q$v@897@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@896@01)
    (and
      (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@897@01)
        (<=
          q$v@897@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@898@01 $PSF<$accessible$withdraw>)
(declare-const s@899@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@896@01 Int) (q$v@897@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@896@01)
      (and
        (<= 0 q$a@896@01)
        (=>
          (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@897@01) (not (<= 0 q$v@897@01)))))
        (or
          (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@896@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@896@01) (not (<= 0 q$a@896@01)))
    (=>
      (and
        (<= 0 q$a@896@01)
        (and
          (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@897@01)
            (<=
              q$v@897@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@896@01)
        (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@897@01)
        (<=
          q$v@897@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@897@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@896@01)))
          (=
            q$v@897@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 6)) q$a@896@01)))))
    (or
      (not
        (and
          (<= 0 q$a@896@01)
          (and
            (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@897@01)
              (<=
                q$v@897@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@896@01)
        (and
          (<= q$a@896@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@897@01)
            (<=
              q$v@897@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@898@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@896@01))
    ($SortWrappers.IntTo$Snap q$v@897@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@896@01))
    ($SortWrappers.IntTo$Snap q$v@897@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1546@11@1546@344-aux|)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$send_fail@799@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not l$send_fail@799@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 934 | l$send_fail@799@01 | live]
; [else-branch: 934 | !(l$send_fail@799@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 934 | l$send_fail@799@01]
(assert l$send_fail@799@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@900@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) ==
;   ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 935 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
; [else-branch: 935 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 935 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 7
; [then-branch: 936 | False | dead]
; [else-branch: 936 | True | live]
(push) ; 8
; [else-branch: 936 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 937 | True | live]
; [else-branch: 937 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 937 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@901@01 $Snap)
(assert (= $t@901@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@809@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@902@01 $Struct)
(assert (=
  self@902@01
  ($struct_set<$Struct> self@789@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@789@01 7))
    l$havoc$6@809@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@902@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@902@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 938 | $struct_get[Int]($struct_loc[Int](self@902@01, 3)) == 0 | live]
; [else-branch: 938 | $struct_get[Int]($struct_loc[Int](self@902@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 938 | $struct_get[Int]($struct_loc[Int](self@902@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@902@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 9
(push) ; 9
; [else-branch: 938 | $struct_get[Int]($struct_loc[Int](self@902@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@902@01 3)) 0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@902@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@902@01 3)) 0)))
(push) ; 8
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@902@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@902@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@902@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@902@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@902@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@902@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
; [then-branch: 939 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
; [else-branch: 939 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(push) ; 9
; [else-branch: 939 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 940 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5))) | live]
; [else-branch: 940 | $struct_get[Bool]($struct_loc[Int](self@902@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 940 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5))))
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@902@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@902@01 7))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@902@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@902@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 941 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5))) | live]
; [else-branch: 941 | $struct_get[Bool]($struct_loc[Int](self@902@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 941 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@902@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@902@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
; [then-branch: 942 | $struct_get[Bool]($struct_loc[Int](self@902@01, 5)) | dead]
; [else-branch: 942 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5))) | live]
(push) ; 9
; [else-branch: 942 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@902@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@902@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 8
; [then-branch: 943 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
; [else-branch: 943 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(push) ; 9
; [else-branch: 943 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@902@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@902@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@902@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@902@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 944 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5))) | live]
; [else-branch: 944 | $struct_get[Bool]($struct_loc[Int](self@902@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 944 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5)))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@902@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 8
; [then-branch: 945 | $struct_get[Bool]($struct_loc[Int](self@902@01, 5)) | dead]
; [else-branch: 945 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5))) | live]
(push) ; 9
; [else-branch: 945 | !($struct_get[Bool]($struct_loc[Int](self@902@01, 5)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) ($struct_get<Int> ($struct_loc<Int> self@902@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@902@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) ($struct_get<Int> ($struct_loc<Int> self@902@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@902@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) ($struct_get<Int> ($struct_loc<Int> self@902@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@903@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 946 | !(0 <= q$a@903@01) | live]
; [else-branch: 946 | 0 <= q$a@903@01 | live]
(push) ; 10
; [then-branch: 946 | !(0 <= q$a@903@01)]
(assert (not (<= 0 q$a@903@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 946 | 0 <= q$a@903@01]
(assert (<= 0 q$a@903@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@903@01) (not (<= 0 q$a@903@01))))
(push) ; 9
; [then-branch: 947 | 0 <= q$a@903@01 && q$a@903@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 947 | !(0 <= q$a@903@01 && q$a@903@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 947 | 0 <= q$a@903@01 && q$a@903@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@903@01)
  (<= q$a@903@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 948 | q$a@903@01 == $struct_get[Int]($struct_loc[Int](self@902@01, 3)) | live]
; [else-branch: 948 | q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 3)) | live]
(push) ; 12
; [then-branch: 948 | q$a@903@01 == $struct_get[Int]($struct_loc[Int](self@902@01, 3))]
(assert (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
(pop) ; 12
(push) ; 12
; [else-branch: 948 | q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 3))]
(assert (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
  (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3)))))
(push) ; 11
; [then-branch: 949 | q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 3)) && q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0)) | live]
; [else-branch: 949 | !(q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 3)) && q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0))) | live]
(push) ; 12
; [then-branch: 949 | q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 3)) && q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0))]
(assert (and
  (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
  (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 949 | !(q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 3)) && q$a@903@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0)))]
(assert (not
  (and
    (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
    (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
      (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))))
  (and
    (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
    (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))))))
(pop) ; 10
(push) ; 10
; [else-branch: 947 | !(0 <= q$a@903@01 && q$a@903@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@903@01)
    (<= q$a@903@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@903@01)
    (<= q$a@903@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@903@01)
    (<= q$a@903@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
      (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
          (not
            (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))))
      (and
        (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
        (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@903@01)
      (<= q$a@903@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@903@01)
    (<= q$a@903@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@903@01 Int)) (!
  (and
    (or (<= 0 q$a@903@01) (not (<= 0 q$a@903@01)))
    (=>
      (and
        (<= 0 q$a@903@01)
        (<= q$a@903@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@903@01)
        (<= q$a@903@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
          (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@903@01
                  ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
              (not
                (=
                  q$a@903@01
                  ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))))
          (and
            (not
              (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
            (not
              (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@903@01)
          (<= q$a@903@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@903@01)
        (<= q$a@903@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@903@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513-aux|)))
(push) ; 8
(assert (not (forall ((q$a@903@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@903@01)
        (<= q$a@903@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
        (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) q$a@903@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@903@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@903@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@903@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@903@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@903@01)
        (<= q$a@903@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 3))))
        (not (= q$a@903@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) q$a@903@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@903@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@903@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@903@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 8
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@904@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 950 | !(0 <= q$a@904@01) | live]
; [else-branch: 950 | 0 <= q$a@904@01 | live]
(push) ; 10
; [then-branch: 950 | !(0 <= q$a@904@01)]
(assert (not (<= 0 q$a@904@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 950 | 0 <= q$a@904@01]
(assert (<= 0 q$a@904@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@904@01) (not (<= 0 q$a@904@01))))
(push) ; 9
; [then-branch: 951 | 0 <= q$a@904@01 && q$a@904@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 951 | !(0 <= q$a@904@01 && q$a@904@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 951 | 0 <= q$a@904@01 && q$a@904@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@904@01)
  (<= q$a@904@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 952 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 6)), q$a@904@01) != 0 | live]
; [else-branch: 952 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 6)), q$a@904@01) == 0 | live]
(push) ; 12
; [then-branch: 952 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 6)), q$a@904@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(push) ; 12
; [else-branch: 952 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 6)), q$a@904@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
  0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 951 | !(0 <= q$a@904@01 && q$a@904@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@904@01)
    (<= q$a@904@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@904@01)
    (<= q$a@904@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@904@01)
    (<= q$a@904@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@904@01)
      (<= q$a@904@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@904@01)
    (<= q$a@904@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@904@01 Int)) (!
  (and
    (or (<= 0 q$a@904@01) (not (<= 0 q$a@904@01)))
    (=>
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@904@01)
          (<= q$a@904@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343-aux|)))
(push) ; 8
(assert (not (forall ((q$a@904@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@904@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@904@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@904@01)
        (<= q$a@904@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@904@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@904@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@905@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 953 | !(0 <= q$a@905@01) | live]
; [else-branch: 953 | 0 <= q$a@905@01 | live]
(push) ; 10
; [then-branch: 953 | !(0 <= q$a@905@01)]
(assert (not (<= 0 q$a@905@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 953 | 0 <= q$a@905@01]
(assert (<= 0 q$a@905@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@905@01) (not (<= 0 q$a@905@01))))
(push) ; 9
; [then-branch: 954 | 0 <= q$a@905@01 && q$a@905@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 954 | !(0 <= q$a@905@01 && q$a@905@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 954 | 0 <= q$a@905@01 && q$a@905@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@905@01)
  (<= q$a@905@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
; [then-branch: 955 | q$a@905@01 == $struct_get[Int]($struct_loc[Int](self@902@01, 0)) | live]
; [else-branch: 955 | q$a@905@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0)) | live]
(push) ; 12
; [then-branch: 955 | q$a@905@01 == $struct_get[Int]($struct_loc[Int](self@902@01, 0))]
(assert (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
(pop) ; 12
(push) ; 12
; [else-branch: 955 | q$a@905@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0))]
(assert (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
  (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0)))))
(push) ; 11
; [then-branch: 956 | q$a@905@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 11)), q$a@905@01) == 0 | live]
; [else-branch: 956 | !(q$a@905@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 11)), q$a@905@01) == 0) | live]
(push) ; 12
; [then-branch: 956 | q$a@905@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 11)), q$a@905@01) == 0]
(assert (and
  (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(push) ; 12
; [else-branch: 956 | !(q$a@905@01 != $struct_get[Int]($struct_loc[Int](self@902@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 11)), q$a@905@01) == 0)]
(assert (not
  (and
    (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
      0))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
        0)))
  (and
    (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
      0))))
(pop) ; 10
(push) ; 10
; [else-branch: 954 | !(0 <= q$a@905@01 && q$a@905@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@905@01)
    (<= q$a@905@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@905@01)
    (<= q$a@905@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@905@01)
    (<= q$a@905@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
      (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
            0)))
      (and
        (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@905@01)
      (<= q$a@905@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@905@01)
    (<= q$a@905@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@905@01 Int)) (!
  (and
    (or (<= 0 q$a@905@01) (not (<= 0 q$a@905@01)))
    (=>
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
          (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@905@01
                  ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
                0)))
          (and
            (not
              (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@905@01)
          (<= q$a@905@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396-aux|)))
(push) ; 8
(assert (not (forall ((q$a@905@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) q$a@905@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@905@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@905@01)
        (<= q$a@905@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@905@01 ($struct_get<Int> ($struct_loc<Int> self@902@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 10)) q$a@905@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 11)) q$a@905@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@906@01 Int)
(declare-const q$v@907@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 957 | !(0 <= q$a@906@01) | live]
; [else-branch: 957 | 0 <= q$a@906@01 | live]
(push) ; 10
; [then-branch: 957 | !(0 <= q$a@906@01)]
(assert (not (<= 0 q$a@906@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 957 | 0 <= q$a@906@01]
(assert (<= 0 q$a@906@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 958 | !(q$a@906@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 958 | q$a@906@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 958 | !(q$a@906@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@906@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 958 | q$a@906@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@906@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 959 | !(0 <= q$v@907@01) | live]
; [else-branch: 959 | 0 <= q$v@907@01 | live]
(push) ; 14
; [then-branch: 959 | !(0 <= q$v@907@01)]
(assert (not (<= 0 q$v@907@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 959 | 0 <= q$v@907@01]
(assert (<= 0 q$v@907@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@907@01) (not (<= 0 q$v@907@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@907@01) (not (<= 0 q$v@907@01))))))
(assert (or
  (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@906@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@906@01)
  (and
    (<= 0 q$a@906@01)
    (=>
      (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@907@01) (not (<= 0 q$v@907@01)))))
    (or
      (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@906@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@906@01) (not (<= 0 q$a@906@01))))
(push) ; 9
; [then-branch: 960 | 0 <= q$a@906@01 && q$a@906@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@907@01 && q$v@907@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 960 | !(0 <= q$a@906@01 && q$a@906@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@907@01 && q$v@907@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 960 | 0 <= q$a@906@01 && q$a@906@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@907@01 && q$v@907@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@906@01)
  (and
    (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@907@01)
      (<=
        q$v@907@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 11
; [then-branch: 961 | q$v@907@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 6)), q$a@906@01) | live]
; [else-branch: 961 | q$v@907@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 6)), q$a@906@01) | live]
(push) ; 12
; [then-branch: 961 | q$v@907@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 6)), q$a@906@01)]
(assert (=
  q$v@907@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@906@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 961 | q$v@907@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@902@01, 6)), q$a@906@01)]
(assert (not
  (=
    q$v@907@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@906@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@907@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@906@01)))
  (=
    q$v@907@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@906@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 960 | !(0 <= q$a@906@01 && q$a@906@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@907@01 && q$v@907@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@906@01)
    (and
      (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@907@01)
        (<=
          q$v@907@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@906@01)
    (and
      (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@907@01)
        (<=
          q$v@907@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@906@01)
    (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@907@01)
    (<=
      q$v@907@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@907@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@906@01)))
      (=
        q$v@907@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@906@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@906@01)
      (and
        (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@907@01)
          (<=
            q$v@907@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@906@01)
    (and
      (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@907@01)
        (<=
          q$v@907@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@908@01 $PSF<$accessible$withdraw>)
(declare-const s@909@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@906@01 Int) (q$v@907@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@906@01)
      (and
        (<= 0 q$a@906@01)
        (=>
          (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@907@01) (not (<= 0 q$v@907@01)))))
        (or
          (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@906@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@906@01) (not (<= 0 q$a@906@01)))
    (=>
      (and
        (<= 0 q$a@906@01)
        (and
          (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@907@01)
            (<=
              q$v@907@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@906@01)
        (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@907@01)
        (<=
          q$v@907@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@907@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@906@01)))
          (=
            q$v@907@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@902@01 6)) q$a@906@01)))))
    (or
      (not
        (and
          (<= 0 q$a@906@01)
          (and
            (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@907@01)
              (<=
                q$v@907@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@906@01)
        (and
          (<= q$a@906@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@907@01)
            (<=
              q$v@907@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@908@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@906@01))
    ($SortWrappers.IntTo$Snap q$v@907@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@906@01))
    ($SortWrappers.IntTo$Snap q$v@907@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1666@11@1666@344-aux|)))
(pop) ; 7
; [then-branch: 962 | False | dead]
; [else-branch: 962 | True | live]
(push) ; 7
; [else-branch: 962 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 934 | !(l$send_fail@799@01)]
(assert (not l$send_fail@799@01))
(pop) ; 6
; [eval] !l$send_fail
(push) ; 6
(set-option :timeout 10)
(assert (not l$send_fail@799@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$send_fail@799@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 963 | !(l$send_fail@799@01) | live]
; [else-branch: 963 | l$send_fail@799@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 963 | !(l$send_fail@799@01)]
(assert (not l$send_fail@799@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@910@01 $Snap)
(assert (= $t@910@01 ($Snap.combine ($Snap.first $t@910@01) ($Snap.second $t@910@01))))
(assert (= ($Snap.first $t@910@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
(assert (= ($Snap.second $t@910@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@911@01 $Snap)
(assert (= $t@911@01 ($Snap.combine ($Snap.first $t@911@01) ($Snap.second $t@911@01))))
(assert (= ($Snap.first $t@911@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 1))))
(assert (= ($Snap.second $t@911@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@912@01 $Snap)
(assert (= $t@912@01 ($Snap.combine ($Snap.first $t@912@01) ($Snap.second $t@912@01))))
(assert (= ($Snap.first $t@912@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 2))))
(assert (= ($Snap.second $t@912@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@913@01 $Snap)
(assert (= $t@913@01 ($Snap.combine ($Snap.first $t@913@01) ($Snap.second $t@913@01))))
(assert (= ($Snap.first $t@913@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
(assert (= ($Snap.second $t@913@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@914@01 $Snap)
(assert (= $t@914@01 ($Snap.combine ($Snap.first $t@914@01) ($Snap.second $t@914@01))))
(assert (= ($Snap.first $t@914@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))))
(assert (= ($Snap.second $t@914@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@915@01 $Snap)
(assert (= $t@915@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@916@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 8
; [then-branch: 964 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), $q0@916@01)) | live]
; [else-branch: 964 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), $q0@916@01) | live]
(push) ; 9
; [then-branch: 964 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), $q0@916@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 964 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), $q0@916@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@916@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1572@11@1572@345-aux|)))
(assert (forall (($q0@916@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@916@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1572@11@1572@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $t@917@01 $Snap)
(assert (= $t@917@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int))
(declare-const $q0@918@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@918@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@918@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) $q0@918@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1573@11@1573@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@919@01 $Snap)
(assert (= $t@919@01 ($Snap.combine ($Snap.first $t@919@01) ($Snap.second $t@919@01))))
(assert (= ($Snap.first $t@919@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 7))))
(assert (= ($Snap.second $t@919@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@920@01 $Snap)
(assert (= $t@920@01 ($Snap.combine ($Snap.first $t@920@01) ($Snap.second $t@920@01))))
(assert (= ($Snap.first $t@920@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 8))))
(assert (= ($Snap.second $t@920@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@921@01 $Snap)
(assert (= $t@921@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@922@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 965 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 10)), $q1@922@01)) | live]
; [else-branch: 965 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 10)), $q1@922@01) | live]
(push) ; 9
; [then-branch: 965 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 10)), $q1@922@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 965 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 10)), $q1@922@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@922@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1576@11@1576@348-aux|)))
(assert (forall (($q1@922@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@922@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1576@11@1576@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@923@01 $Snap)
(assert (= $t@923@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q1@924@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@924@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@924@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $q1@924@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1577@11@1577@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@925@01 $Snap)
(assert (= $t@925@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@926@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 8
; [then-branch: 966 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 11)), $q2@926@01)) | live]
; [else-branch: 966 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 11)), $q2@926@01) | live]
(push) ; 9
; [then-branch: 966 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 11)), $q2@926@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 966 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 11)), $q2@926@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@926@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1578@11@1578@348-aux|)))
(assert (forall (($q2@926@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@926@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1578@11@1578@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@927@01 $Snap)
(assert (= $t@927@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q2@928@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@928@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@928@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) $q2@928@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1579@11@1579@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@929@01 $Snap)
(assert (= $t@929@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@930@01 $Snap)
(assert (= $t@930@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@931@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@931@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $a@931@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@892@01 10)) $a@931@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) $a@931@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1582@11@1582@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
(declare-const $t@932@01 $Snap)
(assert (= $t@932@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 967 | $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) == 0 | live]
; [else-branch: 967 | $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 967 | $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 8
(push) ; 8
; [else-branch: 967 | $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0)))
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)) 0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
(declare-const $t@933@01 $Snap)
(assert (= $t@933@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
(declare-const $t@934@01 $Snap)
(assert (= $t@934@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@892@01 5)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 968 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
; [else-branch: 968 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 968 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@935@01 $Snap)
(assert (= $t@935@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 969 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))) | dead]
; [else-branch: 969 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5)) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 969 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
(declare-const $t@936@01 $Snap)
(assert (= $t@936@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 970 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))) | dead]
; [else-branch: 970 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5)) | live]
(push) ; 8
; [else-branch: 970 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
(declare-const $t@937@01 $Snap)
(assert (= $t@937@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 971 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5)) | live]
; [else-branch: 971 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 971 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 7)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
(declare-const $t@938@01 $Snap)
(assert (= $t@938@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@892@01 4))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
(declare-const $t@939@01 $Snap)
(assert (= $t@939@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@892@01 5)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 972 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
; [else-branch: 972 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 972 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 9
; [then-branch: 973 | $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 4)) != $struct_get[Int]($struct_loc[Int](self@892@01, 4)) | live]
; [else-branch: 973 | $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 4)) == $struct_get[Int]($struct_loc[Int](self@892@01, 4)) | live]
(push) ; 10
; [then-branch: 973 | $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 4)) != $struct_get[Int]($struct_loc[Int](self@892@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))))
(pop) ; 10
(push) ; 10
; [else-branch: 973 | $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 4)) == $struct_get[Int]($struct_loc[Int](self@892@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@892@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (or
    (=
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 0)): Int) != 0
(declare-const $t@940@01 $Snap)
(assert (= $t@940@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
(declare-const $t@941@01 $Snap)
(assert (= $t@941@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@942@01 $Snap)
(assert (= $t@942@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
(declare-const $t@943@01 $Snap)
(assert (= $t@943@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 974 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))) | dead]
; [else-branch: 974 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5)) | live]
(push) ; 8
; [else-branch: 974 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
(declare-const $t@944@01 $Snap)
(assert (= $t@944@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 975 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5)) | live]
; [else-branch: 975 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 975 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
(declare-const $t@945@01 $Snap)
(assert (= $t@945@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const $t@946@01 $Snap)
(assert (= $t@946@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@947@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 976 | !(0 <= q$a@947@01) | live]
; [else-branch: 976 | 0 <= q$a@947@01 | live]
(push) ; 9
; [then-branch: 976 | !(0 <= q$a@947@01)]
(assert (not (<= 0 q$a@947@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 976 | 0 <= q$a@947@01]
(assert (<= 0 q$a@947@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@947@01) (not (<= 0 q$a@947@01))))
(push) ; 8
; [then-branch: 977 | 0 <= q$a@947@01 && q$a@947@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 977 | !(0 <= q$a@947@01 && q$a@947@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 977 | 0 <= q$a@947@01 && q$a@947@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@947@01)
  (<= q$a@947@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 10
; [then-branch: 978 | q$a@947@01 == $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) | live]
; [else-branch: 978 | q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) | live]
(push) ; 11
; [then-branch: 978 | q$a@947@01 == $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3))]
(assert (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
(pop) ; 11
(push) ; 11
; [else-branch: 978 | q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3))]
(assert (not (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
  (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)))))
(push) ; 10
; [then-branch: 979 | q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) && q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0)) | live]
; [else-branch: 979 | !(q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) && q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0))) | live]
(push) ; 11
; [then-branch: 979 | q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) && q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0))]
(assert (and
  (not (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
  (not (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
(push) ; 11
; [else-branch: 979 | !(q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) && q$a@947@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0)))]
(assert (not
  (and
    (not (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
    (not (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not
        (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
      (not
        (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))))
  (and
    (not (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
    (not (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))))))
(pop) ; 9
(push) ; 9
; [else-branch: 977 | !(0 <= q$a@947@01 && q$a@947@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@947@01)
    (<= q$a@947@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@947@01)
    (<= q$a@947@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@947@01)
    (<= q$a@947@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
      (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
    (or
      (not
        (and
          (not
            (=
              q$a@947@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
          (not
            (=
              q$a@947@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))))
      (and
        (not
          (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
        (not
          (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@947@01)
      (<= q$a@947@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@947@01)
    (<= q$a@947@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@947@01 Int)) (!
  (and
    (or (<= 0 q$a@947@01) (not (<= 0 q$a@947@01)))
    (=>
      (and
        (<= 0 q$a@947@01)
        (<= q$a@947@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@947@01)
        (<= q$a@947@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (=
              q$a@947@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
          (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@947@01
                  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
              (not
                (=
                  q$a@947@01
                  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))))
          (and
            (not
              (=
                q$a@947@01
                ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
            (not
              (=
                q$a@947@01
                ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@947@01)
          (<= q$a@947@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@947@01)
        (<= q$a@947@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@947@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1597@11@1597@513-aux|)))
(assert (forall ((q$a@947@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@947@01)
        (<= q$a@947@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))
        (not
          (= q$a@947@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) q$a@947@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@947@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@947@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@947@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1597@11@1597@513|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
(declare-const $t@948@01 $Snap)
(assert (= $t@948@01 $Snap.unit))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) 0)
  0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
(declare-const $t@949@01 $Snap)
(assert (= $t@949@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@950@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 980 | !(0 <= q$a@950@01) | live]
; [else-branch: 980 | 0 <= q$a@950@01 | live]
(push) ; 9
; [then-branch: 980 | !(0 <= q$a@950@01)]
(assert (not (<= 0 q$a@950@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 980 | 0 <= q$a@950@01]
(assert (<= 0 q$a@950@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@950@01) (not (<= 0 q$a@950@01))))
(push) ; 8
; [then-branch: 981 | 0 <= q$a@950@01 && q$a@950@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 981 | !(0 <= q$a@950@01 && q$a@950@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 981 | 0 <= q$a@950@01 && q$a@950@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@950@01)
  (<= q$a@950@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 10
; [then-branch: 982 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), q$a@950@01) != 0 | live]
; [else-branch: 982 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), q$a@950@01) == 0 | live]
(push) ; 11
; [then-branch: 982 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), q$a@950@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
(push) ; 11
; [else-branch: 982 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), q$a@950@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
  0))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 981 | !(0 <= q$a@950@01 && q$a@950@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@950@01)
    (<= q$a@950@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@950@01)
    (<= q$a@950@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@950@01)
    (<= q$a@950@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@950@01)
      (<= q$a@950@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@950@01)
    (<= q$a@950@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@950@01 Int)) (!
  (and
    (or (<= 0 q$a@950@01) (not (<= 0 q$a@950@01)))
    (=>
      (and
        (<= 0 q$a@950@01)
        (<= q$a@950@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@950@01)
        (<= q$a@950@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@950@01)
          (<= q$a@950@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@950@01)
        (<= q$a@950@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1599@11@1599@343-aux|)))
(assert (forall ((q$a@950@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@950@01)
        (<= q$a@950@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@950@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@950@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1599@11@1599@343|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
(declare-const $t@951@01 $Snap)
(assert (= $t@951@01 $Snap.unit))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@952@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 983 | !(0 <= q$a@952@01) | live]
; [else-branch: 983 | 0 <= q$a@952@01 | live]
(push) ; 9
; [then-branch: 983 | !(0 <= q$a@952@01)]
(assert (not (<= 0 q$a@952@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 983 | 0 <= q$a@952@01]
(assert (<= 0 q$a@952@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@952@01) (not (<= 0 q$a@952@01))))
(push) ; 8
; [then-branch: 984 | 0 <= q$a@952@01 && q$a@952@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 984 | !(0 <= q$a@952@01 && q$a@952@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 984 | 0 <= q$a@952@01 && q$a@952@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@952@01)
  (<= q$a@952@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
; [then-branch: 985 | q$a@952@01 == $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0)) | live]
; [else-branch: 985 | q$a@952@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0)) | live]
(push) ; 11
; [then-branch: 985 | q$a@952@01 == $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0))]
(assert (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
(pop) ; 11
(push) ; 11
; [else-branch: 985 | q$a@952@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0))]
(assert (not (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
  (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))))
(push) ; 10
; [then-branch: 986 | q$a@952@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 11)), q$a@952@01) == 0 | live]
; [else-branch: 986 | !(q$a@952@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 11)), q$a@952@01) == 0) | live]
(push) ; 11
; [then-branch: 986 | q$a@952@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 11)), q$a@952@01) == 0]
(assert (and
  (not (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 11
(push) ; 11
; [else-branch: 986 | !(q$a@952@01 != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 11)), q$a@952@01) == 0)]
(assert (not
  (and
    (not (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
      0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not
        (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
        0)))
  (and
    (not (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 984 | !(0 <= q$a@952@01 && q$a@952@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@952@01)
    (<= q$a@952@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@952@01)
    (<= q$a@952@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@952@01)
    (<= q$a@952@01 1461501637330902918203684832716283019655932542975)
    (or
      (not
        (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
      (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
    (or
      (not
        (and
          (not
            (=
              q$a@952@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
            0)))
      (and
        (not
          (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@952@01)
      (<= q$a@952@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@952@01)
    (<= q$a@952@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@952@01 Int)) (!
  (and
    (or (<= 0 q$a@952@01) (not (<= 0 q$a@952@01)))
    (=>
      (and
        (<= 0 q$a@952@01)
        (<= q$a@952@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@952@01)
        (<= q$a@952@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (=
              q$a@952@01
              ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
          (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@952@01
                  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
                0)))
          (and
            (not
              (=
                q$a@952@01
                ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@952@01)
          (<= q$a@952@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@952@01)
        (<= q$a@952@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1600@11@1600@396-aux|)))
(assert (forall ((q$a@952@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@952@01)
        (<= q$a@952@01 1461501637330902918203684832716283019655932542975))
      (and
        (not
          (= q$a@952@01 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 10)) q$a@952@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 11)) q$a@952@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1600@11@1600@396|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
(declare-const $t@953@01 $Snap)
(assert (= $t@953@01 $Snap.unit))
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@954@01 Int)
(declare-const q$v@955@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 987 | !(0 <= q$a@954@01) | live]
; [else-branch: 987 | 0 <= q$a@954@01 | live]
(push) ; 9
; [then-branch: 987 | !(0 <= q$a@954@01)]
(assert (not (<= 0 q$a@954@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 987 | 0 <= q$a@954@01]
(assert (<= 0 q$a@954@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 10
; [then-branch: 988 | !(q$a@954@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 988 | q$a@954@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 11
; [then-branch: 988 | !(q$a@954@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@954@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 11
(push) ; 11
; [else-branch: 988 | q$a@954@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@954@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 12
; [then-branch: 989 | !(0 <= q$v@955@01) | live]
; [else-branch: 989 | 0 <= q$v@955@01 | live]
(push) ; 13
; [then-branch: 989 | !(0 <= q$v@955@01)]
(assert (not (<= 0 q$v@955@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 989 | 0 <= q$v@955@01]
(assert (<= 0 q$v@955@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@955@01) (not (<= 0 q$v@955@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@955@01) (not (<= 0 q$v@955@01))))))
(assert (or
  (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@954@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@954@01)
  (and
    (<= 0 q$a@954@01)
    (=>
      (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@955@01) (not (<= 0 q$v@955@01)))))
    (or
      (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@954@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@954@01) (not (<= 0 q$a@954@01))))
(push) ; 8
; [then-branch: 990 | 0 <= q$a@954@01 && q$a@954@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@955@01 && q$v@955@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 990 | !(0 <= q$a@954@01 && q$a@954@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@955@01 && q$v@955@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 9
; [then-branch: 990 | 0 <= q$a@954@01 && q$a@954@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@955@01 && q$v@955@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@954@01)
  (and
    (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@955@01)
      (<=
        q$v@955@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 10
; [then-branch: 991 | q$v@955@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), q$a@954@01) | live]
; [else-branch: 991 | q$v@955@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), q$a@954@01) | live]
(push) ; 11
; [then-branch: 991 | q$v@955@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), q$a@954@01)]
(assert (=
  q$v@955@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@954@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 991 | q$v@955@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@803@01, 6)), q$a@954@01)]
(assert (not
  (=
    q$v@955@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@954@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@955@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@954@01)))
  (=
    q$v@955@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@954@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 990 | !(0 <= q$a@954@01 && q$a@954@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@955@01 && q$v@955@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@954@01)
    (and
      (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@955@01)
        (<=
          q$v@955@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@954@01)
    (and
      (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@955@01)
        (<=
          q$v@955@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@954@01)
    (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@955@01)
    (<=
      q$v@955@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@955@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@954@01)))
      (=
        q$v@955@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@954@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@954@01)
      (and
        (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@955@01)
          (<=
            q$v@955@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@954@01)
    (and
      (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@955@01)
        (<=
          q$v@955@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@956@01 $PSF<$accessible$withdraw>)
(declare-const s@957@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@954@01 Int) (q$v@955@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@954@01)
      (and
        (<= 0 q$a@954@01)
        (=>
          (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@955@01) (not (<= 0 q$v@955@01)))))
        (or
          (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@954@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@954@01) (not (<= 0 q$a@954@01)))
    (=>
      (and
        (<= 0 q$a@954@01)
        (and
          (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@955@01)
            (<=
              q$v@955@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@954@01)
        (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@955@01)
        (<=
          q$v@955@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@955@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@954@01)))
          (=
            q$v@955@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@803@01 6)) q$a@954@01)))))
    (or
      (not
        (and
          (<= 0 q$a@954@01)
          (and
            (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@955@01)
              (<=
                q$v@955@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@954@01)
        (and
          (<= q$a@954@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@955@01)
            (<=
              q$v@955@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@956@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@954@01))
    ($SortWrappers.IntTo$Snap q$v@955@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@954@01))
    ($SortWrappers.IntTo$Snap q$v@955@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1601@11@1601@344-aux|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@805@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$no_reentrant_call@805@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 992 | l$no_reentrant_call@805@01 | live]
; [else-branch: 992 | !(l$no_reentrant_call@805@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 992 | l$no_reentrant_call@805@01]
(assert l$no_reentrant_call@805@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@808@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@808@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 993 | $out_of_gas@808@01 | live]
; [else-branch: 993 | !($out_of_gas@808@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 993 | $out_of_gas@808@01]
(assert $out_of_gas@808@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) ==
;   ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 994 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
; [else-branch: 994 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 994 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 9
; [then-branch: 995 | False | dead]
; [else-branch: 995 | True | live]
(push) ; 10
; [else-branch: 995 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 996 | True | live]
; [else-branch: 996 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 996 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@958@01 $Snap)
(assert (= $t@958@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@809@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@959@01 $Struct)
(assert (=
  self@959@01
  ($struct_set<$Struct> self@789@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@789@01 7))
    l$havoc$6@809@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@959@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@959@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 997 | $struct_get[Int]($struct_loc[Int](self@959@01, 3)) == 0 | live]
; [else-branch: 997 | $struct_get[Int]($struct_loc[Int](self@959@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 997 | $struct_get[Int]($struct_loc[Int](self@959@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@959@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 11
(push) ; 11
; [else-branch: 997 | $struct_get[Int]($struct_loc[Int](self@959@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@959@01 3)) 0)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@959@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@959@01 3)) 0)))
(push) ; 10
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@959@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@959@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@959@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@959@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 10
; [then-branch: 998 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
; [else-branch: 998 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(push) ; 11
; [else-branch: 998 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 999 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5))) | live]
; [else-branch: 999 | $struct_get[Bool]($struct_loc[Int](self@959@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 999 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5))))
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@959@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@959@01 7))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@959@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@959@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1000 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5))) | live]
; [else-branch: 1000 | $struct_get[Bool]($struct_loc[Int](self@959@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1000 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@959@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@959@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 1001 | $struct_get[Bool]($struct_loc[Int](self@959@01, 5)) | dead]
; [else-branch: 1001 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5))) | live]
(push) ; 11
; [else-branch: 1001 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 10
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@959@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 10
; [then-branch: 1002 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
; [else-branch: 1002 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(push) ; 11
; [else-branch: 1002 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@959@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@959@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@959@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@959@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1003 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5))) | live]
; [else-branch: 1003 | $struct_get[Bool]($struct_loc[Int](self@959@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1003 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5)))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@959@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 1004 | $struct_get[Bool]($struct_loc[Int](self@959@01, 5)) | dead]
; [else-branch: 1004 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5))) | live]
(push) ; 11
; [else-branch: 1004 | !($struct_get[Bool]($struct_loc[Int](self@959@01, 5)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) ($struct_get<Int> ($struct_loc<Int> self@959@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@959@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) ($struct_get<Int> ($struct_loc<Int> self@959@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@959@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) ($struct_get<Int> ($struct_loc<Int> self@959@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@960@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1005 | !(0 <= q$a@960@01) | live]
; [else-branch: 1005 | 0 <= q$a@960@01 | live]
(push) ; 12
; [then-branch: 1005 | !(0 <= q$a@960@01)]
(assert (not (<= 0 q$a@960@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1005 | 0 <= q$a@960@01]
(assert (<= 0 q$a@960@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@960@01) (not (<= 0 q$a@960@01))))
(push) ; 11
; [then-branch: 1006 | 0 <= q$a@960@01 && q$a@960@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1006 | !(0 <= q$a@960@01 && q$a@960@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1006 | 0 <= q$a@960@01 && q$a@960@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@960@01)
  (<= q$a@960@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 13
; [then-branch: 1007 | q$a@960@01 == $struct_get[Int]($struct_loc[Int](self@959@01, 3)) | live]
; [else-branch: 1007 | q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 3)) | live]
(push) ; 14
; [then-branch: 1007 | q$a@960@01 == $struct_get[Int]($struct_loc[Int](self@959@01, 3))]
(assert (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
(pop) ; 14
(push) ; 14
; [else-branch: 1007 | q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 3))]
(assert (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
  (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3)))))
(push) ; 13
; [then-branch: 1008 | q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 3)) && q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0)) | live]
; [else-branch: 1008 | !(q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 3)) && q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0))) | live]
(push) ; 14
; [then-branch: 1008 | q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 3)) && q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0))]
(assert (and
  (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
  (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(push) ; 14
; [else-branch: 1008 | !(q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 3)) && q$a@960@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0)))]
(assert (not
  (and
    (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
    (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
      (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))))
  (and
    (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
    (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))))
(pop) ; 12
(push) ; 12
; [else-branch: 1006 | !(0 <= q$a@960@01 && q$a@960@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@960@01)
    (<= q$a@960@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@960@01)
    (<= q$a@960@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@960@01)
    (<= q$a@960@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
      (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
          (not
            (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))))
      (and
        (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
        (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@960@01)
      (<= q$a@960@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@960@01)
    (<= q$a@960@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@960@01 Int)) (!
  (and
    (or (<= 0 q$a@960@01) (not (<= 0 q$a@960@01)))
    (=>
      (and
        (<= 0 q$a@960@01)
        (<= q$a@960@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@960@01)
        (<= q$a@960@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
          (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@960@01
                  ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
              (not
                (=
                  q$a@960@01
                  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))))
          (and
            (not
              (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
            (not
              (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@960@01)
          (<= q$a@960@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@960@01)
        (<= q$a@960@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@960@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513-aux|)))
(push) ; 10
(assert (not (forall ((q$a@960@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@960@01)
        (<= q$a@960@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
        (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) q$a@960@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@960@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@960@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@960@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@960@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@960@01)
        (<= q$a@960@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 3))))
        (not (= q$a@960@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) q$a@960@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@960@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@960@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@960@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@961@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1009 | !(0 <= q$a@961@01) | live]
; [else-branch: 1009 | 0 <= q$a@961@01 | live]
(push) ; 12
; [then-branch: 1009 | !(0 <= q$a@961@01)]
(assert (not (<= 0 q$a@961@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1009 | 0 <= q$a@961@01]
(assert (<= 0 q$a@961@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@961@01) (not (<= 0 q$a@961@01))))
(push) ; 11
; [then-branch: 1010 | 0 <= q$a@961@01 && q$a@961@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1010 | !(0 <= q$a@961@01 && q$a@961@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1010 | 0 <= q$a@961@01 && q$a@961@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@961@01)
  (<= q$a@961@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 13
; [then-branch: 1011 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 6)), q$a@961@01) != 0 | live]
; [else-branch: 1011 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 6)), q$a@961@01) == 0 | live]
(push) ; 14
; [then-branch: 1011 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 6)), q$a@961@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(push) ; 14
; [else-branch: 1011 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 6)), q$a@961@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
  0))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
      0))))
(pop) ; 12
(push) ; 12
; [else-branch: 1010 | !(0 <= q$a@961@01 && q$a@961@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@961@01)
    (<= q$a@961@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@961@01)
    (<= q$a@961@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@961@01)
    (<= q$a@961@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@961@01)
      (<= q$a@961@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@961@01)
    (<= q$a@961@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@961@01 Int)) (!
  (and
    (or (<= 0 q$a@961@01) (not (<= 0 q$a@961@01)))
    (=>
      (and
        (<= 0 q$a@961@01)
        (<= q$a@961@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@961@01)
        (<= q$a@961@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@961@01)
          (<= q$a@961@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@961@01)
        (<= q$a@961@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343-aux|)))
(push) ; 10
(assert (not (forall ((q$a@961@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@961@01)
        (<= q$a@961@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@961@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@961@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@961@01)
        (<= q$a@961@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@961@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@961@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@962@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1012 | !(0 <= q$a@962@01) | live]
; [else-branch: 1012 | 0 <= q$a@962@01 | live]
(push) ; 12
; [then-branch: 1012 | !(0 <= q$a@962@01)]
(assert (not (<= 0 q$a@962@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1012 | 0 <= q$a@962@01]
(assert (<= 0 q$a@962@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@962@01) (not (<= 0 q$a@962@01))))
(push) ; 11
; [then-branch: 1013 | 0 <= q$a@962@01 && q$a@962@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1013 | !(0 <= q$a@962@01 && q$a@962@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1013 | 0 <= q$a@962@01 && q$a@962@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@962@01)
  (<= q$a@962@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 13
; [then-branch: 1014 | q$a@962@01 == $struct_get[Int]($struct_loc[Int](self@959@01, 0)) | live]
; [else-branch: 1014 | q$a@962@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0)) | live]
(push) ; 14
; [then-branch: 1014 | q$a@962@01 == $struct_get[Int]($struct_loc[Int](self@959@01, 0))]
(assert (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
(pop) ; 14
(push) ; 14
; [else-branch: 1014 | q$a@962@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0))]
(assert (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
  (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0)))))
(push) ; 13
; [then-branch: 1015 | q$a@962@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 11)), q$a@962@01) == 0 | live]
; [else-branch: 1015 | !(q$a@962@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 11)), q$a@962@01) == 0) | live]
(push) ; 14
; [then-branch: 1015 | q$a@962@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 11)), q$a@962@01) == 0]
(assert (and
  (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 14
(push) ; 14
; [else-branch: 1015 | !(q$a@962@01 != $struct_get[Int]($struct_loc[Int](self@959@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 11)), q$a@962@01) == 0)]
(assert (not
  (and
    (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
      0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
        0)))
  (and
    (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
      0))))
(pop) ; 12
(push) ; 12
; [else-branch: 1013 | !(0 <= q$a@962@01 && q$a@962@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@962@01)
    (<= q$a@962@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@962@01)
    (<= q$a@962@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@962@01)
    (<= q$a@962@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
      (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
            0)))
      (and
        (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@962@01)
      (<= q$a@962@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@962@01)
    (<= q$a@962@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@962@01 Int)) (!
  (and
    (or (<= 0 q$a@962@01) (not (<= 0 q$a@962@01)))
    (=>
      (and
        (<= 0 q$a@962@01)
        (<= q$a@962@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@962@01)
        (<= q$a@962@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
          (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@962@01
                  ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
                0)))
          (and
            (not
              (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@962@01)
          (<= q$a@962@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@962@01)
        (<= q$a@962@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396-aux|)))
(push) ; 10
(assert (not (forall ((q$a@962@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@962@01)
        (<= q$a@962@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) q$a@962@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@962@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@962@01)
        (<= q$a@962@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@962@01 ($struct_get<Int> ($struct_loc<Int> self@959@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 10)) q$a@962@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 11)) q$a@962@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@963@01 Int)
(declare-const q$v@964@01 Int)
(push) ; 10
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1016 | !(0 <= q$a@963@01) | live]
; [else-branch: 1016 | 0 <= q$a@963@01 | live]
(push) ; 12
; [then-branch: 1016 | !(0 <= q$a@963@01)]
(assert (not (<= 0 q$a@963@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1016 | 0 <= q$a@963@01]
(assert (<= 0 q$a@963@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 13
; [then-branch: 1017 | !(q$a@963@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 1017 | q$a@963@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 14
; [then-branch: 1017 | !(q$a@963@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@963@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 14
(push) ; 14
; [else-branch: 1017 | q$a@963@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@963@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 15
; [then-branch: 1018 | !(0 <= q$v@964@01) | live]
; [else-branch: 1018 | 0 <= q$v@964@01 | live]
(push) ; 16
; [then-branch: 1018 | !(0 <= q$v@964@01)]
(assert (not (<= 0 q$v@964@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 1018 | 0 <= q$v@964@01]
(assert (<= 0 q$v@964@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@964@01) (not (<= 0 q$v@964@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@964@01) (not (<= 0 q$v@964@01))))))
(assert (or
  (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@963@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@963@01)
  (and
    (<= 0 q$a@963@01)
    (=>
      (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@964@01) (not (<= 0 q$v@964@01)))))
    (or
      (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@963@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@963@01) (not (<= 0 q$a@963@01))))
(push) ; 11
; [then-branch: 1019 | 0 <= q$a@963@01 && q$a@963@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@964@01 && q$v@964@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 1019 | !(0 <= q$a@963@01 && q$a@963@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@964@01 && q$v@964@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 12
; [then-branch: 1019 | 0 <= q$a@963@01 && q$a@963@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@964@01 && q$v@964@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@963@01)
  (and
    (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@964@01)
      (<=
        q$v@964@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 13
; [then-branch: 1020 | q$v@964@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 6)), q$a@963@01) | live]
; [else-branch: 1020 | q$v@964@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 6)), q$a@963@01) | live]
(push) ; 14
; [then-branch: 1020 | q$v@964@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 6)), q$a@963@01)]
(assert (=
  q$v@964@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@963@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 1020 | q$v@964@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@959@01, 6)), q$a@963@01)]
(assert (not
  (=
    q$v@964@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@963@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@964@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@963@01)))
  (=
    q$v@964@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@963@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 1019 | !(0 <= q$a@963@01 && q$a@963@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@964@01 && q$v@964@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@963@01)
    (and
      (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@964@01)
        (<=
          q$v@964@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@963@01)
    (and
      (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@964@01)
        (<=
          q$v@964@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@963@01)
    (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@964@01)
    (<=
      q$v@964@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@964@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@963@01)))
      (=
        q$v@964@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@963@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@963@01)
      (and
        (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@964@01)
          (<=
            q$v@964@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@963@01)
    (and
      (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@964@01)
        (<=
          q$v@964@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@965@01 $PSF<$accessible$withdraw>)
(declare-const s@966@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@963@01 Int) (q$v@964@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@963@01)
      (and
        (<= 0 q$a@963@01)
        (=>
          (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@964@01) (not (<= 0 q$v@964@01)))))
        (or
          (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@963@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@963@01) (not (<= 0 q$a@963@01)))
    (=>
      (and
        (<= 0 q$a@963@01)
        (and
          (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@964@01)
            (<=
              q$v@964@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@963@01)
        (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@964@01)
        (<=
          q$v@964@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@964@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@963@01)))
          (=
            q$v@964@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@959@01 6)) q$a@963@01)))))
    (or
      (not
        (and
          (<= 0 q$a@963@01)
          (and
            (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@964@01)
              (<=
                q$v@964@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@963@01)
        (and
          (<= q$a@963@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@964@01)
            (<=
              q$v@964@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@965@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@963@01))
    ($SortWrappers.IntTo$Snap q$v@964@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@963@01))
    ($SortWrappers.IntTo$Snap q$v@964@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1666@11@1666@344-aux|)))
(pop) ; 9
; [then-branch: 1021 | False | dead]
; [else-branch: 1021 | True | live]
(push) ; 9
; [else-branch: 1021 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 993 | !($out_of_gas@808@01)]
(assert (not $out_of_gas@808@01))
(pop) ; 8
; [eval] !$out_of_gas
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@808@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@808@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1022 | !($out_of_gas@808@01) | live]
; [else-branch: 1022 | $out_of_gas@808@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1022 | !($out_of_gas@808@01)]
(assert (not $out_of_gas@808@01))
; [exec]
; label end
; [exec]
; exhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) ==
;   ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 9
; [then-branch: 1023 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
; [else-branch: 1023 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
(push) ; 10
; [else-branch: 1023 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 9
; [then-branch: 1024 | False | live]
; [else-branch: 1024 | True | live]
(push) ; 10
; [then-branch: 1024 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1024 | True]
; [eval] ($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(push) ; 11
; [then-branch: 1025 | !($struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4))) | live]
; [else-branch: 1025 | $struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)) | live]
(push) ; 12
; [then-branch: 1025 | !($struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)))]
(assert (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(pop) ; 12
(push) ; 12
; [else-branch: 1025 | $struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4))]
(assert (>
  ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1026 | $struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)) && $struct_get[Int]($struct_loc[Int](self@892@01, 3)) != 0 | dead]
; [else-branch: 1026 | !($struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)) && $struct_get[Int]($struct_loc[Int](self@892@01, 3)) != 0) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1026 | !($struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)) && $struct_get[Int]($struct_loc[Int](self@892@01, 3)) != 0)]
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> self@892@01 3)) 0)))))
; [eval] !$succ
; [then-branch: 1027 | False | dead]
; [else-branch: 1027 | True | live]
(push) ; 9
; [else-branch: 1027 | True]
(pop) ; 9
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1028 | True | live]
; [else-branch: 1028 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1028 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@967@01 $Snap)
(assert (= $t@967@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@809@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@968@01 $Struct)
(assert (=
  self@968@01
  ($struct_set<$Struct> self@892@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@892@01 7))
    l$havoc$6@809@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@968@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@968@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1029 | $struct_get[Int]($struct_loc[Int](self@968@01, 3)) == 0 | live]
; [else-branch: 1029 | $struct_get[Int]($struct_loc[Int](self@968@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1029 | $struct_get[Int]($struct_loc[Int](self@968@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@968@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 11
(push) ; 11
; [else-branch: 1029 | $struct_get[Int]($struct_loc[Int](self@968@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@968@01 3)) 0)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@968@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@968@01 3)) 0)))
(push) ; 10
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@968@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@968@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@968@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@968@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@968@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@892@01 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@968@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@892@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@892@01 5)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1030 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
; [else-branch: 1030 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1030 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@968@01 5)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@968@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@968@01 5))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1031 | !($struct_get[Bool]($struct_loc[Int](self@968@01, 5))) | dead]
; [else-branch: 1031 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5)) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 1031 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@968@01 5)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($struct_get<Bool> ($struct_loc<Int> self@968@01 5)))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 1032 | !($struct_get[Bool]($struct_loc[Int](self@968@01, 5))) | dead]
; [else-branch: 1032 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5)) | live]
(push) ; 11
; [else-branch: 1032 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@968@01 5)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1033 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5)) | live]
; [else-branch: 1033 | !($struct_get[Bool]($struct_loc[Int](self@968@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1033 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@968@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@968@01 7))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@968@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@968@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 10
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@892@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@892@01 5)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1034 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5)) | live]
; [else-branch: 1034 | !($struct_get[Bool]($struct_loc[Int](self@892@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1034 | $struct_get[Bool]($struct_loc[Int](self@892@01, 5))]
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 12
; [then-branch: 1035 | $struct_get[Int]($struct_loc[Int](self@968@01, 4)) != $struct_get[Int]($struct_loc[Int](self@892@01, 4)) | live]
; [else-branch: 1035 | $struct_get[Int]($struct_loc[Int](self@968@01, 4)) == $struct_get[Int]($struct_loc[Int](self@892@01, 4)) | live]
(push) ; 13
; [then-branch: 1035 | $struct_get[Int]($struct_loc[Int](self@968@01, 4)) != $struct_get[Int]($struct_loc[Int](self@892@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))))
(pop) ; 13
(push) ; 13
; [else-branch: 1035 | $struct_get[Int]($struct_loc[Int](self@968@01, 4)) == $struct_get[Int]($struct_loc[Int](self@892@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@892@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (or
    (=
      ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
        ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))))))
(push) ; 10
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@968@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 3)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@892@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@968@01 4))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@968@01 3))
      ($struct_get<Int> ($struct_loc<Int> self@892@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@968@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@968@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@968@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@968@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 1036 | !($struct_get[Bool]($struct_loc[Int](self@968@01, 5))) | dead]
; [else-branch: 1036 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5)) | live]
(push) ; 11
; [else-branch: 1036 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@968@01 5)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1037 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5)) | live]
; [else-branch: 1037 | !($struct_get[Bool]($struct_loc[Int](self@968@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1037 | $struct_get[Bool]($struct_loc[Int](self@968@01, 5))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@968@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@968@01 4))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@968@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@968@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) ($struct_get<Int> ($struct_loc<Int> self@968@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@968@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) ($struct_get<Int> ($struct_loc<Int> self@968@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@968@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) ($struct_get<Int> ($struct_loc<Int> self@968@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@969@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1038 | !(0 <= q$a@969@01) | live]
; [else-branch: 1038 | 0 <= q$a@969@01 | live]
(push) ; 12
; [then-branch: 1038 | !(0 <= q$a@969@01)]
(assert (not (<= 0 q$a@969@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1038 | 0 <= q$a@969@01]
(assert (<= 0 q$a@969@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@969@01) (not (<= 0 q$a@969@01))))
(push) ; 11
; [then-branch: 1039 | 0 <= q$a@969@01 && q$a@969@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1039 | !(0 <= q$a@969@01 && q$a@969@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1039 | 0 <= q$a@969@01 && q$a@969@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@969@01)
  (<= q$a@969@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 13
; [then-branch: 1040 | q$a@969@01 == $struct_get[Int]($struct_loc[Int](self@968@01, 3)) | live]
; [else-branch: 1040 | q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 3)) | live]
(push) ; 14
; [then-branch: 1040 | q$a@969@01 == $struct_get[Int]($struct_loc[Int](self@968@01, 3))]
(assert (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
(pop) ; 14
(push) ; 14
; [else-branch: 1040 | q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 3))]
(assert (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
  (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3)))))
(push) ; 13
; [then-branch: 1041 | q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 3)) && q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0)) | live]
; [else-branch: 1041 | !(q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 3)) && q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0))) | live]
(push) ; 14
; [then-branch: 1041 | q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 3)) && q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0))]
(assert (and
  (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
  (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(push) ; 14
; [else-branch: 1041 | !(q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 3)) && q$a@969@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0)))]
(assert (not
  (and
    (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
    (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
      (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))))
  (and
    (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
    (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))))))
(pop) ; 12
(push) ; 12
; [else-branch: 1039 | !(0 <= q$a@969@01 && q$a@969@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@969@01)
    (<= q$a@969@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@969@01)
    (<= q$a@969@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@969@01)
    (<= q$a@969@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
      (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
          (not
            (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))))
      (and
        (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
        (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@969@01)
      (<= q$a@969@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@969@01)
    (<= q$a@969@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@969@01 Int)) (!
  (and
    (or (<= 0 q$a@969@01) (not (<= 0 q$a@969@01)))
    (=>
      (and
        (<= 0 q$a@969@01)
        (<= q$a@969@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@969@01)
        (<= q$a@969@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
          (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@969@01
                  ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
              (not
                (=
                  q$a@969@01
                  ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))))
          (and
            (not
              (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
            (not
              (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@969@01)
          (<= q$a@969@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@969@01)
        (<= q$a@969@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@969@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513-aux|)))
(push) ; 10
(assert (not (forall ((q$a@969@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@969@01)
        (<= q$a@969@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
        (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) q$a@969@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@969@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@969@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@969@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@969@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@969@01)
        (<= q$a@969@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 3))))
        (not (= q$a@969@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) q$a@969@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@969@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@969@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@969@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@970@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1042 | !(0 <= q$a@970@01) | live]
; [else-branch: 1042 | 0 <= q$a@970@01 | live]
(push) ; 12
; [then-branch: 1042 | !(0 <= q$a@970@01)]
(assert (not (<= 0 q$a@970@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1042 | 0 <= q$a@970@01]
(assert (<= 0 q$a@970@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@970@01) (not (<= 0 q$a@970@01))))
(push) ; 11
; [then-branch: 1043 | 0 <= q$a@970@01 && q$a@970@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1043 | !(0 <= q$a@970@01 && q$a@970@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1043 | 0 <= q$a@970@01 && q$a@970@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@970@01)
  (<= q$a@970@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 13
; [then-branch: 1044 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 6)), q$a@970@01) != 0 | live]
; [else-branch: 1044 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 6)), q$a@970@01) == 0 | live]
(push) ; 14
; [then-branch: 1044 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 6)), q$a@970@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(push) ; 14
; [else-branch: 1044 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 6)), q$a@970@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
  0))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
      0))))
(pop) ; 12
(push) ; 12
; [else-branch: 1043 | !(0 <= q$a@970@01 && q$a@970@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@970@01)
    (<= q$a@970@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@970@01)
    (<= q$a@970@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@970@01)
    (<= q$a@970@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@970@01)
      (<= q$a@970@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@970@01)
    (<= q$a@970@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@970@01 Int)) (!
  (and
    (or (<= 0 q$a@970@01) (not (<= 0 q$a@970@01)))
    (=>
      (and
        (<= 0 q$a@970@01)
        (<= q$a@970@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@970@01)
        (<= q$a@970@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@970@01)
          (<= q$a@970@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@970@01)
        (<= q$a@970@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343-aux|)))
(push) ; 10
(assert (not (forall ((q$a@970@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@970@01)
        (<= q$a@970@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@970@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@970@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@970@01)
        (<= q$a@970@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@970@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@970@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@971@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1045 | !(0 <= q$a@971@01) | live]
; [else-branch: 1045 | 0 <= q$a@971@01 | live]
(push) ; 12
; [then-branch: 1045 | !(0 <= q$a@971@01)]
(assert (not (<= 0 q$a@971@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1045 | 0 <= q$a@971@01]
(assert (<= 0 q$a@971@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@971@01) (not (<= 0 q$a@971@01))))
(push) ; 11
; [then-branch: 1046 | 0 <= q$a@971@01 && q$a@971@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1046 | !(0 <= q$a@971@01 && q$a@971@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1046 | 0 <= q$a@971@01 && q$a@971@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@971@01)
  (<= q$a@971@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 13
; [then-branch: 1047 | q$a@971@01 == $struct_get[Int]($struct_loc[Int](self@968@01, 0)) | live]
; [else-branch: 1047 | q$a@971@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0)) | live]
(push) ; 14
; [then-branch: 1047 | q$a@971@01 == $struct_get[Int]($struct_loc[Int](self@968@01, 0))]
(assert (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
(pop) ; 14
(push) ; 14
; [else-branch: 1047 | q$a@971@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0))]
(assert (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
  (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0)))))
(push) ; 13
; [then-branch: 1048 | q$a@971@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 11)), q$a@971@01) == 0 | live]
; [else-branch: 1048 | !(q$a@971@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 11)), q$a@971@01) == 0) | live]
(push) ; 14
; [then-branch: 1048 | q$a@971@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 11)), q$a@971@01) == 0]
(assert (and
  (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 14
(push) ; 14
; [else-branch: 1048 | !(q$a@971@01 != $struct_get[Int]($struct_loc[Int](self@968@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 11)), q$a@971@01) == 0)]
(assert (not
  (and
    (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
      0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
        0)))
  (and
    (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
      0))))
(pop) ; 12
(push) ; 12
; [else-branch: 1046 | !(0 <= q$a@971@01 && q$a@971@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@971@01)
    (<= q$a@971@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@971@01)
    (<= q$a@971@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@971@01)
    (<= q$a@971@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
      (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
            0)))
      (and
        (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@971@01)
      (<= q$a@971@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@971@01)
    (<= q$a@971@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@971@01 Int)) (!
  (and
    (or (<= 0 q$a@971@01) (not (<= 0 q$a@971@01)))
    (=>
      (and
        (<= 0 q$a@971@01)
        (<= q$a@971@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@971@01)
        (<= q$a@971@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
          (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@971@01
                  ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
                0)))
          (and
            (not
              (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@971@01)
          (<= q$a@971@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@971@01)
        (<= q$a@971@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396-aux|)))
(push) ; 10
(assert (not (forall ((q$a@971@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@971@01)
        (<= q$a@971@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) q$a@971@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@971@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@971@01)
        (<= q$a@971@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@971@01 ($struct_get<Int> ($struct_loc<Int> self@968@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 10)) q$a@971@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 11)) q$a@971@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@972@01 Int)
(declare-const q$v@973@01 Int)
(push) ; 10
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1049 | !(0 <= q$a@972@01) | live]
; [else-branch: 1049 | 0 <= q$a@972@01 | live]
(push) ; 12
; [then-branch: 1049 | !(0 <= q$a@972@01)]
(assert (not (<= 0 q$a@972@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1049 | 0 <= q$a@972@01]
(assert (<= 0 q$a@972@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 13
; [then-branch: 1050 | !(q$a@972@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 1050 | q$a@972@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 14
; [then-branch: 1050 | !(q$a@972@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@972@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 14
(push) ; 14
; [else-branch: 1050 | q$a@972@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@972@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 15
; [then-branch: 1051 | !(0 <= q$v@973@01) | live]
; [else-branch: 1051 | 0 <= q$v@973@01 | live]
(push) ; 16
; [then-branch: 1051 | !(0 <= q$v@973@01)]
(assert (not (<= 0 q$v@973@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 1051 | 0 <= q$v@973@01]
(assert (<= 0 q$v@973@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@973@01) (not (<= 0 q$v@973@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@973@01) (not (<= 0 q$v@973@01))))))
(assert (or
  (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@972@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@972@01)
  (and
    (<= 0 q$a@972@01)
    (=>
      (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@973@01) (not (<= 0 q$v@973@01)))))
    (or
      (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@972@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@972@01) (not (<= 0 q$a@972@01))))
(push) ; 11
; [then-branch: 1052 | 0 <= q$a@972@01 && q$a@972@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@973@01 && q$v@973@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 1052 | !(0 <= q$a@972@01 && q$a@972@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@973@01 && q$v@973@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 12
; [then-branch: 1052 | 0 <= q$a@972@01 && q$a@972@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@973@01 && q$v@973@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@972@01)
  (and
    (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@973@01)
      (<=
        q$v@973@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 13
; [then-branch: 1053 | q$v@973@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 6)), q$a@972@01) | live]
; [else-branch: 1053 | q$v@973@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 6)), q$a@972@01) | live]
(push) ; 14
; [then-branch: 1053 | q$v@973@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 6)), q$a@972@01)]
(assert (=
  q$v@973@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@972@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 1053 | q$v@973@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@968@01, 6)), q$a@972@01)]
(assert (not
  (=
    q$v@973@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@972@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@973@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@972@01)))
  (=
    q$v@973@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@972@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 1052 | !(0 <= q$a@972@01 && q$a@972@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@973@01 && q$v@973@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@972@01)
    (and
      (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@973@01)
        (<=
          q$v@973@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@972@01)
    (and
      (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@973@01)
        (<=
          q$v@973@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@972@01)
    (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@973@01)
    (<=
      q$v@973@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@973@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@972@01)))
      (=
        q$v@973@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@972@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@972@01)
      (and
        (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@973@01)
          (<=
            q$v@973@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@972@01)
    (and
      (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@973@01)
        (<=
          q$v@973@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@974@01 $PSF<$accessible$withdraw>)
(declare-const s@975@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@972@01 Int) (q$v@973@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@972@01)
      (and
        (<= 0 q$a@972@01)
        (=>
          (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@973@01) (not (<= 0 q$v@973@01)))))
        (or
          (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@972@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@972@01) (not (<= 0 q$a@972@01)))
    (=>
      (and
        (<= 0 q$a@972@01)
        (and
          (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@973@01)
            (<=
              q$v@973@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@972@01)
        (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@973@01)
        (<=
          q$v@973@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@973@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@972@01)))
          (=
            q$v@973@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@968@01 6)) q$a@972@01)))))
    (or
      (not
        (and
          (<= 0 q$a@972@01)
          (and
            (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@973@01)
              (<=
                q$v@973@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@972@01)
        (and
          (<= q$a@972@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@973@01)
            (<=
              q$v@973@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@974@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@972@01))
    ($SortWrappers.IntTo$Snap q$v@973@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@972@01))
    ($SortWrappers.IntTo$Snap q$v@973@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1666@11@1666@344-aux|)))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 1022 | $out_of_gas@808@01]
(assert $out_of_gas@808@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 992 | !(l$no_reentrant_call@805@01)]
(assert (not l$no_reentrant_call@805@01))
(pop) ; 7
; [eval] !l$no_reentrant_call
(push) ; 7
(set-option :timeout 10)
(assert (not l$no_reentrant_call@805@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@805@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1054 | !(l$no_reentrant_call@805@01) | live]
; [else-branch: 1054 | l$no_reentrant_call@805@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1054 | !(l$no_reentrant_call@805@01)]
(assert (not l$no_reentrant_call@805@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@808@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@808@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1055 | $out_of_gas@808@01 | live]
; [else-branch: 1055 | !($out_of_gas@808@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1055 | $out_of_gas@808@01]
(assert $out_of_gas@808@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) ==
;   ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@789@01 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1056 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
; [else-branch: 1056 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1056 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 9
; [then-branch: 1057 | False | dead]
; [else-branch: 1057 | True | live]
(push) ; 10
; [else-branch: 1057 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1058 | True | live]
; [else-branch: 1058 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1058 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@976@01 $Snap)
(assert (= $t@976@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@809@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@977@01 $Struct)
(assert (=
  self@977@01
  ($struct_set<$Struct> self@789@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@789@01 7))
    l$havoc$6@809@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@977@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@977@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1059 | $struct_get[Int]($struct_loc[Int](self@977@01, 3)) == 0 | live]
; [else-branch: 1059 | $struct_get[Int]($struct_loc[Int](self@977@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1059 | $struct_get[Int]($struct_loc[Int](self@977@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@977@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 11
(push) ; 11
; [else-branch: 1059 | $struct_get[Int]($struct_loc[Int](self@977@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@977@01 3)) 0)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@977@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@977@01 3)) 0)))
(push) ; 10
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@977@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@977@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@977@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@977@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@977@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@977@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 10
; [then-branch: 1060 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
; [else-branch: 1060 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(push) ; 11
; [else-branch: 1060 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1061 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5))) | live]
; [else-branch: 1061 | $struct_get[Bool]($struct_loc[Int](self@977@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1061 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5))))
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@977@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@977@01 7))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5)))
  (<=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@977@01 4)))
    ($struct_get<Int> ($struct_loc<Int> self@977@01 7)))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1062 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5))) | live]
; [else-branch: 1062 | $struct_get[Bool]($struct_loc[Int](self@977@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1062 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5)))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@977@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5)))
  (=
    (+
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)))
      ($struct_get<Int> ($struct_loc<Int> self@977@01 4)))
    (-
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)))
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)))))))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 1063 | $struct_get[Bool]($struct_loc[Int](self@977@01, 5)) | dead]
; [else-branch: 1063 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5))) | live]
(push) ; 11
; [else-branch: 1063 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 10
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@977@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@977@01 4))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 10
; [then-branch: 1064 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5)) | dead]
; [else-branch: 1064 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5))) | live]
(push) ; 11
; [else-branch: 1064 | !($struct_get[Bool]($struct_loc[Int](self@789@01, 5)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@977@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@977@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@977@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@977@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1065 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5))) | live]
; [else-branch: 1065 | $struct_get[Bool]($struct_loc[Int](self@977@01, 5)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1065 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5)))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not ($struct_get<Bool> ($struct_loc<Int> self@977@01 5)))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 1066 | $struct_get[Bool]($struct_loc[Int](self@977@01, 5)) | dead]
; [else-branch: 1066 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5))) | live]
(push) ; 11
; [else-branch: 1066 | !($struct_get[Bool]($struct_loc[Int](self@977@01, 5)))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) ($struct_get<Int> ($struct_loc<Int> self@977@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@977@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) ($struct_get<Int> ($struct_loc<Int> self@977@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@977@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) ($struct_get<Int> ($struct_loc<Int> self@977@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@978@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1067 | !(0 <= q$a@978@01) | live]
; [else-branch: 1067 | 0 <= q$a@978@01 | live]
(push) ; 12
; [then-branch: 1067 | !(0 <= q$a@978@01)]
(assert (not (<= 0 q$a@978@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1067 | 0 <= q$a@978@01]
(assert (<= 0 q$a@978@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@978@01) (not (<= 0 q$a@978@01))))
(push) ; 11
; [then-branch: 1068 | 0 <= q$a@978@01 && q$a@978@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1068 | !(0 <= q$a@978@01 && q$a@978@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1068 | 0 <= q$a@978@01 && q$a@978@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@978@01)
  (<= q$a@978@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 13
; [then-branch: 1069 | q$a@978@01 == $struct_get[Int]($struct_loc[Int](self@977@01, 3)) | live]
; [else-branch: 1069 | q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 3)) | live]
(push) ; 14
; [then-branch: 1069 | q$a@978@01 == $struct_get[Int]($struct_loc[Int](self@977@01, 3))]
(assert (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
(pop) ; 14
(push) ; 14
; [else-branch: 1069 | q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 3))]
(assert (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
  (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3)))))
(push) ; 13
; [then-branch: 1070 | q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 3)) && q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0)) | live]
; [else-branch: 1070 | !(q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 3)) && q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0))) | live]
(push) ; 14
; [then-branch: 1070 | q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 3)) && q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0))]
(assert (and
  (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
  (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(push) ; 14
; [else-branch: 1070 | !(q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 3)) && q$a@978@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0)))]
(assert (not
  (and
    (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
    (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
      (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))))
  (and
    (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
    (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))))))
(pop) ; 12
(push) ; 12
; [else-branch: 1068 | !(0 <= q$a@978@01 && q$a@978@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@978@01)
    (<= q$a@978@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@978@01)
    (<= q$a@978@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@978@01)
    (<= q$a@978@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
      (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
          (not
            (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))))
      (and
        (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
        (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@978@01)
      (<= q$a@978@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@978@01)
    (<= q$a@978@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@978@01 Int)) (!
  (and
    (or (<= 0 q$a@978@01) (not (<= 0 q$a@978@01)))
    (=>
      (and
        (<= 0 q$a@978@01)
        (<= q$a@978@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@978@01)
        (<= q$a@978@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
          (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@978@01
                  ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
              (not
                (=
                  q$a@978@01
                  ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))))
          (and
            (not
              (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
            (not
              (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@978@01)
          (<= q$a@978@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@978@01)
        (<= q$a@978@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@978@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513-aux|)))
(push) ; 10
(assert (not (forall ((q$a@978@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@978@01)
        (<= q$a@978@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
        (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) q$a@978@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@978@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@978@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@978@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@978@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@978@01)
        (<= q$a@978@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 3))))
        (not (= q$a@978@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) q$a@978@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@978@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@978@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@978@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@979@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1071 | !(0 <= q$a@979@01) | live]
; [else-branch: 1071 | 0 <= q$a@979@01 | live]
(push) ; 12
; [then-branch: 1071 | !(0 <= q$a@979@01)]
(assert (not (<= 0 q$a@979@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1071 | 0 <= q$a@979@01]
(assert (<= 0 q$a@979@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@979@01) (not (<= 0 q$a@979@01))))
(push) ; 11
; [then-branch: 1072 | 0 <= q$a@979@01 && q$a@979@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1072 | !(0 <= q$a@979@01 && q$a@979@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1072 | 0 <= q$a@979@01 && q$a@979@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@979@01)
  (<= q$a@979@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 13
; [then-branch: 1073 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 6)), q$a@979@01) != 0 | live]
; [else-branch: 1073 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 6)), q$a@979@01) == 0 | live]
(push) ; 14
; [then-branch: 1073 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 6)), q$a@979@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(push) ; 14
; [else-branch: 1073 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 6)), q$a@979@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
  0))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
      0))))
(pop) ; 12
(push) ; 12
; [else-branch: 1072 | !(0 <= q$a@979@01 && q$a@979@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@979@01)
    (<= q$a@979@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@979@01)
    (<= q$a@979@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@979@01)
    (<= q$a@979@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@979@01)
      (<= q$a@979@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@979@01)
    (<= q$a@979@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@979@01 Int)) (!
  (and
    (or (<= 0 q$a@979@01) (not (<= 0 q$a@979@01)))
    (=>
      (and
        (<= 0 q$a@979@01)
        (<= q$a@979@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@979@01)
        (<= q$a@979@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@979@01)
          (<= q$a@979@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@979@01)
        (<= q$a@979@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343-aux|)))
(push) ; 10
(assert (not (forall ((q$a@979@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@979@01)
        (<= q$a@979@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@979@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@979@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@979@01)
        (<= q$a@979@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@979@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@979@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@980@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1074 | !(0 <= q$a@980@01) | live]
; [else-branch: 1074 | 0 <= q$a@980@01 | live]
(push) ; 12
; [then-branch: 1074 | !(0 <= q$a@980@01)]
(assert (not (<= 0 q$a@980@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1074 | 0 <= q$a@980@01]
(assert (<= 0 q$a@980@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@980@01) (not (<= 0 q$a@980@01))))
(push) ; 11
; [then-branch: 1075 | 0 <= q$a@980@01 && q$a@980@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1075 | !(0 <= q$a@980@01 && q$a@980@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1075 | 0 <= q$a@980@01 && q$a@980@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@980@01)
  (<= q$a@980@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 13
; [then-branch: 1076 | q$a@980@01 == $struct_get[Int]($struct_loc[Int](self@977@01, 0)) | live]
; [else-branch: 1076 | q$a@980@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0)) | live]
(push) ; 14
; [then-branch: 1076 | q$a@980@01 == $struct_get[Int]($struct_loc[Int](self@977@01, 0))]
(assert (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
(pop) ; 14
(push) ; 14
; [else-branch: 1076 | q$a@980@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0))]
(assert (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
  (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0)))))
(push) ; 13
; [then-branch: 1077 | q$a@980@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 11)), q$a@980@01) == 0 | live]
; [else-branch: 1077 | !(q$a@980@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 11)), q$a@980@01) == 0) | live]
(push) ; 14
; [then-branch: 1077 | q$a@980@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 11)), q$a@980@01) == 0]
(assert (and
  (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 14
(push) ; 14
; [else-branch: 1077 | !(q$a@980@01 != $struct_get[Int]($struct_loc[Int](self@977@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 11)), q$a@980@01) == 0)]
(assert (not
  (and
    (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
      0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
        0)))
  (and
    (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
      0))))
(pop) ; 12
(push) ; 12
; [else-branch: 1075 | !(0 <= q$a@980@01 && q$a@980@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@980@01)
    (<= q$a@980@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@980@01)
    (<= q$a@980@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@980@01)
    (<= q$a@980@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
      (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
            0)))
      (and
        (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@980@01)
      (<= q$a@980@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@980@01)
    (<= q$a@980@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@980@01 Int)) (!
  (and
    (or (<= 0 q$a@980@01) (not (<= 0 q$a@980@01)))
    (=>
      (and
        (<= 0 q$a@980@01)
        (<= q$a@980@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@980@01)
        (<= q$a@980@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
          (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@980@01
                  ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
                0)))
          (and
            (not
              (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@980@01)
          (<= q$a@980@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@980@01)
        (<= q$a@980@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396-aux|)))
(push) ; 10
(assert (not (forall ((q$a@980@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@980@01)
        (<= q$a@980@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) q$a@980@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@980@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@980@01)
        (<= q$a@980@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@980@01 ($struct_get<Int> ($struct_loc<Int> self@977@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 10)) q$a@980@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 11)) q$a@980@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@981@01 Int)
(declare-const q$v@982@01 Int)
(push) ; 10
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1078 | !(0 <= q$a@981@01) | live]
; [else-branch: 1078 | 0 <= q$a@981@01 | live]
(push) ; 12
; [then-branch: 1078 | !(0 <= q$a@981@01)]
(assert (not (<= 0 q$a@981@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1078 | 0 <= q$a@981@01]
(assert (<= 0 q$a@981@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 13
; [then-branch: 1079 | !(q$a@981@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 1079 | q$a@981@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 14
; [then-branch: 1079 | !(q$a@981@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@981@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 14
(push) ; 14
; [else-branch: 1079 | q$a@981@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@981@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 15
; [then-branch: 1080 | !(0 <= q$v@982@01) | live]
; [else-branch: 1080 | 0 <= q$v@982@01 | live]
(push) ; 16
; [then-branch: 1080 | !(0 <= q$v@982@01)]
(assert (not (<= 0 q$v@982@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 1080 | 0 <= q$v@982@01]
(assert (<= 0 q$v@982@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@982@01) (not (<= 0 q$v@982@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@982@01) (not (<= 0 q$v@982@01))))))
(assert (or
  (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@981@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@981@01)
  (and
    (<= 0 q$a@981@01)
    (=>
      (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@982@01) (not (<= 0 q$v@982@01)))))
    (or
      (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@981@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@981@01) (not (<= 0 q$a@981@01))))
(push) ; 11
; [then-branch: 1081 | 0 <= q$a@981@01 && q$a@981@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@982@01 && q$v@982@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 1081 | !(0 <= q$a@981@01 && q$a@981@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@982@01 && q$v@982@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 12
; [then-branch: 1081 | 0 <= q$a@981@01 && q$a@981@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@982@01 && q$v@982@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@981@01)
  (and
    (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@982@01)
      (<=
        q$v@982@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 13
; [then-branch: 1082 | q$v@982@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 6)), q$a@981@01) | live]
; [else-branch: 1082 | q$v@982@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 6)), q$a@981@01) | live]
(push) ; 14
; [then-branch: 1082 | q$v@982@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 6)), q$a@981@01)]
(assert (=
  q$v@982@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@981@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 1082 | q$v@982@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@977@01, 6)), q$a@981@01)]
(assert (not
  (=
    q$v@982@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@981@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@982@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@981@01)))
  (=
    q$v@982@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@981@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 1081 | !(0 <= q$a@981@01 && q$a@981@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@982@01 && q$v@982@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@981@01)
    (and
      (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@982@01)
        (<=
          q$v@982@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@981@01)
    (and
      (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@982@01)
        (<=
          q$v@982@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@981@01)
    (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@982@01)
    (<=
      q$v@982@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@982@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@981@01)))
      (=
        q$v@982@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@981@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@981@01)
      (and
        (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@982@01)
          (<=
            q$v@982@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@981@01)
    (and
      (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@982@01)
        (<=
          q$v@982@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@983@01 $PSF<$accessible$withdraw>)
(declare-const s@984@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@981@01 Int) (q$v@982@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@981@01)
      (and
        (<= 0 q$a@981@01)
        (=>
          (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@982@01) (not (<= 0 q$v@982@01)))))
        (or
          (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@981@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@981@01) (not (<= 0 q$a@981@01)))
    (=>
      (and
        (<= 0 q$a@981@01)
        (and
          (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@982@01)
            (<=
              q$v@982@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@981@01)
        (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@982@01)
        (<=
          q$v@982@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@982@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@981@01)))
          (=
            q$v@982@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@977@01 6)) q$a@981@01)))))
    (or
      (not
        (and
          (<= 0 q$a@981@01)
          (and
            (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@982@01)
              (<=
                q$v@982@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@981@01)
        (and
          (<= q$a@981@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@982@01)
            (<=
              q$v@982@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@983@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@981@01))
    ($SortWrappers.IntTo$Snap q$v@982@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@981@01))
    ($SortWrappers.IntTo$Snap q$v@982@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1666@11@1666@344-aux|)))
(pop) ; 9
; [then-branch: 1083 | False | dead]
; [else-branch: 1083 | True | live]
(push) ; 9
; [else-branch: 1083 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 1055 | !($out_of_gas@808@01)]
(assert (not $out_of_gas@808@01))
(pop) ; 8
; [eval] !$out_of_gas
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@808@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@808@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1084 | !($out_of_gas@808@01) | live]
; [else-branch: 1084 | $out_of_gas@808@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1084 | !($out_of_gas@808@01)]
(assert (not $out_of_gas@808@01))
; [exec]
; label end
; [exec]
; exhale !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) ==
;   ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int) == ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 9
; [then-branch: 1085 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))) | dead]
; [else-branch: 1085 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5)) | live]
(push) ; 10
; [else-branch: 1085 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert $succ &&
;   (($struct_get($struct_loc(msg, 1)): Int) >
;   ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) != 0) ==>
;   ($struct_get($struct_loc(msg, 0)): Int) ==
;   ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0) ==> ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 3)): Int)
; [eval] $succ && (($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) != 0)
(push) ; 9
; [then-branch: 1086 | False | live]
; [else-branch: 1086 | True | live]
(push) ; 10
; [then-branch: 1086 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1086 | True]
; [eval] ($struct_get($struct_loc(msg, 1)): Int) > ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(push) ; 11
; [then-branch: 1087 | !($struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4))) | live]
; [else-branch: 1087 | $struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)) | live]
(push) ; 12
; [then-branch: 1087 | !($struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)))]
(assert (not
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))))
(pop) ; 12
(push) ; 12
; [else-branch: 1087 | $struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4))]
(assert (>
  ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
  (not
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4))))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1088 | $struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)) && $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) != 0 | dead]
; [else-branch: 1088 | !($struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)) && $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) != 0) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1088 | !($struct_get[Int]($struct_loc[Int](msg@785@01, 1)) > $struct_get[Int]($struct_loc[Int](self@789@01, 4)) && $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 3)) != 0)]
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not
  (and
    (>
      ($struct_get<Int> ($struct_loc<Int> msg@785@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@789@01 4)))
    (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)) 0)))))
; [eval] !$succ
; [then-branch: 1089 | False | dead]
; [else-branch: 1089 | True | live]
(push) ; 9
; [else-branch: 1089 | True]
(pop) ; 9
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1090 | True | live]
; [else-branch: 1090 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1090 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@985@01 $Snap)
(assert (= $t@985@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@809@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@986@01 $Struct)
(assert (=
  self@986@01
  ($struct_set<$Struct> l$havoc$2@803@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 7))
    l$havoc$6@809@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) == 0 ==>
;   ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0 ==> ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@986@01 3)) 0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@986@01 3)) 0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1091 | $struct_get[Int]($struct_loc[Int](self@986@01, 3)) == 0 | live]
; [else-branch: 1091 | $struct_get[Int]($struct_loc[Int](self@986@01, 3)) != 0 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1091 | $struct_get[Int]($struct_loc[Int](self@986@01, 3)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@986@01 3)) 0))
; [eval] ($struct_get($struct_loc(self, 4)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 11
(push) ; 11
; [else-branch: 1091 | $struct_get[Int]($struct_loc[Int](self@986@01, 3)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@986@01 3)) 0)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($struct_get<Int> ($struct_loc<Int> self@986@01 3)) 0))
  (= ($struct_get<Int> ($struct_loc<Int> self@986@01 3)) 0)))
(push) ; 10
(assert (not (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@986@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@986@01 4)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= ($struct_get<Int> ($struct_loc<Int> self@986@01 3)) 0)
  (= ($struct_get<Int> ($struct_loc<Int> self@986@01 4)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) ==
;   ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int) == ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc($old_self, 0)): Int)
; [eval] $struct_loc($old_self, 0)
(push) ; 10
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 0))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 0))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1092 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5)) | live]
; [else-branch: 1092 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1092 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))]
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@986@01 5)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))
  ($struct_get<Bool> ($struct_loc<Int> self@986@01 5))))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@986@01 5))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1093 | !($struct_get[Bool]($struct_loc[Int](self@986@01, 5))) | dead]
; [else-branch: 1093 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5)) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 1093 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@986@01 5)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($struct_get<Bool> ($struct_loc<Int> self@986@01 5)))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) -
;   ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) + ($struct_get($struct_loc(self, 4)): Int) == ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int) - ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 1094 | !($struct_get[Bool]($struct_loc[Int](self@986@01, 5))) | dead]
; [else-branch: 1094 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5)) | live]
(push) ; 11
; [else-branch: 1094 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <=
;   ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@986@01 5)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1095 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5)) | live]
; [else-branch: 1095 | !($struct_get[Bool]($struct_loc[Int](self@986@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1095 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5))]
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int) <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_sum(($struct_get($struct_loc(self, 6)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@986@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@986@01 7))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@986@01 5))
  (<=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)))
    ($struct_get<Int> ($struct_loc<Int> self@986@01 7)))))
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 10
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))))
; [exec]
; assert ($struct_get($struct_loc($old_self, 5)): Bool) ==>
;   ($struct_get($struct_loc(self, 4)): Int) ==
;   ($struct_get($struct_loc($old_self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) ==
;   ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool) ==> ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc($old_self, 5)): Bool)
; [eval] $struct_loc($old_self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1096 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5)) | live]
; [else-branch: 1096 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1096 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@803@01, 5))]
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int) && ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) == ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc($old_self, 4)): Int)
; [eval] $struct_loc($old_self, 4)
(push) ; 12
; [then-branch: 1097 | $struct_get[Int]($struct_loc[Int](self@986@01, 4)) != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 4)) | live]
; [else-branch: 1097 | $struct_get[Int]($struct_loc[Int](self@986@01, 4)) == $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 4)) | live]
(push) ; 13
; [then-branch: 1097 | $struct_get[Int]($struct_loc[Int](self@986@01, 4)) != $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 4))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))))
(pop) ; 13
(push) ; 13
; [else-branch: 1097 | $struct_get[Int]($struct_loc[Int](self@986@01, 4)) == $struct_get[Int]($struct_loc[Int](l$havoc$2@803@01, 4))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) == ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Int)
; [eval] $struct_loc($old_self, 3)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))
  (not
    (=
      ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))
  (or
    (=
      ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))
    (not
      (=
        ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
        ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))))))
(push) ; 10
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@986@01 3))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@803@01 5))
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> self@986@01 4))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 4)))
    (=
      ($struct_get<Int> ($struct_loc<Int> self@986@01 3))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@803@01 3))))))
; [exec]
; assert ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@986@01 0)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@986@01 0)) 0)))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Int) !=
;   ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@986@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> self@986@01 3))
    ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))
  0))
; [exec]
; assert !($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   0
; [eval] !($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == 0
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 1098 | !($struct_get[Bool]($struct_loc[Int](self@986@01, 5))) | dead]
; [else-branch: 1098 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5)) | live]
(push) ; 11
; [else-branch: 1098 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 5)): Bool) ==>
;   ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   0)): Int)): Int) ==
;   ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@986@01 5)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1099 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5)) | live]
; [else-branch: 1099 | !($struct_get[Bool]($struct_loc[Int](self@986@01, 5))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 1099 | $struct_get[Bool]($struct_loc[Int](self@986@01, 5))]
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) == ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@986@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@986@01 4))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@986@01 5))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@986@01 4)))))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) +
;   ($struct_get($struct_loc(self, 4)): Int) +
;   ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int) ==
;   ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int) + ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(self, 3)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 10
(assert (not (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) ($struct_get<Int> ($struct_loc<Int> self@986@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@986@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (+
    (+
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) ($struct_get<Int> ($struct_loc<Int> self@986@01 3)))
      ($struct_get<Int> ($struct_loc<Int> self@986@01 4)))
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) ($struct_get<Int> ($struct_loc<Int> self@986@01 3)))))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 3)): Int) &&
;     q$a != ($struct_get($struct_loc(self, 0)): Int) ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) +
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int))
(declare-const q$a@987@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1100 | !(0 <= q$a@987@01) | live]
; [else-branch: 1100 | 0 <= q$a@987@01 | live]
(push) ; 12
; [then-branch: 1100 | !(0 <= q$a@987@01)]
(assert (not (<= 0 q$a@987@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1100 | 0 <= q$a@987@01]
(assert (<= 0 q$a@987@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@987@01) (not (<= 0 q$a@987@01))))
(push) ; 11
; [then-branch: 1101 | 0 <= q$a@987@01 && q$a@987@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1101 | !(0 <= q$a@987@01 && q$a@987@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1101 | 0 <= q$a@987@01 && q$a@987@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@987@01)
  (<= q$a@987@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int) ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int) && q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] q$a != ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 13
; [then-branch: 1102 | q$a@987@01 == $struct_get[Int]($struct_loc[Int](self@986@01, 3)) | live]
; [else-branch: 1102 | q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 3)) | live]
(push) ; 14
; [then-branch: 1102 | q$a@987@01 == $struct_get[Int]($struct_loc[Int](self@986@01, 3))]
(assert (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
(pop) ; 14
(push) ; 14
; [else-branch: 1102 | q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 3))]
(assert (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3)))))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
  (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3)))))
(push) ; 13
; [then-branch: 1103 | q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 3)) && q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0)) | live]
; [else-branch: 1103 | !(q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 3)) && q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0))) | live]
(push) ; 14
; [then-branch: 1103 | q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 3)) && q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0))]
(assert (and
  (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
  (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) == ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) + ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(push) ; 14
; [else-branch: 1103 | !(q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 3)) && q$a@987@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0)))]
(assert (not
  (and
    (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
    (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
      (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))))
  (and
    (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
    (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))))))
(pop) ; 12
(push) ; 12
; [else-branch: 1101 | !(0 <= q$a@987@01 && q$a@987@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@987@01)
    (<= q$a@987@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@987@01)
    (<= q$a@987@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@987@01)
    (<= q$a@987@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
      (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
    (or
      (not
        (and
          (not
            (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
          (not
            (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))))
      (and
        (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
        (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@987@01)
      (<= q$a@987@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@987@01)
    (<= q$a@987@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@987@01 Int)) (!
  (and
    (or (<= 0 q$a@987@01) (not (<= 0 q$a@987@01)))
    (=>
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
          (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
        (or
          (not
            (and
              (not
                (=
                  q$a@987@01
                  ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
              (not
                (=
                  q$a@987@01
                  ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))))
          (and
            (not
              (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
            (not
              (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))))))
    (or
      (not
        (and
          (<= 0 q$a@987@01)
          (<= q$a@987@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@987@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513-aux|)))
(push) ; 10
(assert (not (forall ((q$a@987@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
        (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) q$a@987@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@987@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@987@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@987@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@987@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@987@01)
        (<= q$a@987@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 3))))
        (not (= q$a@987@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))))
    (=
      (+
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) q$a@987@01)
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@987@01))
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@987@01)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@987@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1662@11@1662@513|)))
; [exec]
; assert ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) ==
;   0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), 0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 10
(assert (not (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) 0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) 0)
  0))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) !=
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) !=
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0)
(declare-const q$a@988@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1104 | !(0 <= q$a@988@01) | live]
; [else-branch: 1104 | 0 <= q$a@988@01 | live]
(push) ; 12
; [then-branch: 1104 | !(0 <= q$a@988@01)]
(assert (not (<= 0 q$a@988@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1104 | 0 <= q$a@988@01]
(assert (<= 0 q$a@988@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@988@01) (not (<= 0 q$a@988@01))))
(push) ; 11
; [then-branch: 1105 | 0 <= q$a@988@01 && q$a@988@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1105 | !(0 <= q$a@988@01 && q$a@988@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1105 | 0 <= q$a@988@01 && q$a@988@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@988@01)
  (<= q$a@988@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0 ==> ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 13
; [then-branch: 1106 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 6)), q$a@988@01) != 0 | live]
; [else-branch: 1106 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 6)), q$a@988@01) == 0 | live]
(push) ; 14
; [then-branch: 1106 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 6)), q$a@988@01) != 0]
(assert (not
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) != 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(push) ; 14
; [else-branch: 1106 | $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 6)), q$a@988@01) == 0]
(assert (=
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
  0))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
    0)
  (not
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
      0))))
(pop) ; 12
(push) ; 12
; [else-branch: 1105 | !(0 <= q$a@988@01 && q$a@988@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@988@01)
    (<= q$a@988@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@988@01)
    (<= q$a@988@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@988@01)
    (<= q$a@988@01 1461501637330902918203684832716283019655932542975)
    (or
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
        0)
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@988@01)
      (<= q$a@988@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@988@01)
    (<= q$a@988@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@988@01 Int)) (!
  (and
    (or (<= 0 q$a@988@01) (not (<= 0 q$a@988@01)))
    (=>
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975)
        (or
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
            0)
          (not
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@988@01)
          (<= q$a@988@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343-aux|)))
(push) ; 10
(assert (not (forall ((q$a@988@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@988@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@988@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@988@01)
        (<= q$a@988@01 1461501637330902918203684832716283019655932542975))
      (not
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01)
          0)))
    (not
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@988@01)
        0)))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@988@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1664@11@1664@343|)))
; [exec]
; assert (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     q$a != ($struct_get($struct_loc(self, 0)): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) ==
;     0 ==>
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) ==
;     0)
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0)
(declare-const q$a@989@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1107 | !(0 <= q$a@989@01) | live]
; [else-branch: 1107 | 0 <= q$a@989@01 | live]
(push) ; 12
; [then-branch: 1107 | !(0 <= q$a@989@01)]
(assert (not (<= 0 q$a@989@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1107 | 0 <= q$a@989@01]
(assert (<= 0 q$a@989@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@989@01) (not (<= 0 q$a@989@01))))
(push) ; 11
; [then-branch: 1108 | 0 <= q$a@989@01 && q$a@989@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 1108 | !(0 <= q$a@989@01 && q$a@989@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 1108 | 0 <= q$a@989@01 && q$a@989@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@989@01)
  (<= q$a@989@01 1461501637330902918203684832716283019655932542975)))
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0 ==> ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] q$a != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 13
; [then-branch: 1109 | q$a@989@01 == $struct_get[Int]($struct_loc[Int](self@986@01, 0)) | live]
; [else-branch: 1109 | q$a@989@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0)) | live]
(push) ; 14
; [then-branch: 1109 | q$a@989@01 == $struct_get[Int]($struct_loc[Int](self@986@01, 0))]
(assert (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
(pop) ; 14
(push) ; 14
; [else-branch: 1109 | q$a@989@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0))]
(assert (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
  (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0)))))
(push) ; 13
; [then-branch: 1110 | q$a@989@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 11)), q$a@989@01) == 0 | live]
; [else-branch: 1110 | !(q$a@989@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 11)), q$a@989@01) == 0) | live]
(push) ; 14
; [then-branch: 1110 | q$a@989@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 11)), q$a@989@01) == 0]
(assert (and
  (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
  (=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
    0)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int) == 0
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 14
(push) ; 14
; [else-branch: 1110 | !(q$a@989@01 != $struct_get[Int]($struct_loc[Int](self@986@01, 0)) && $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 11)), q$a@989@01) == 0)]
(assert (not
  (and
    (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
      0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
        0)))
  (and
    (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
      0))))
(pop) ; 12
(push) ; 12
; [else-branch: 1108 | !(0 <= q$a@989@01 && q$a@989@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@989@01)
    (<= q$a@989@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@989@01)
    (<= q$a@989@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@989@01)
    (<= q$a@989@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
      (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
    (or
      (not
        (and
          (not
            (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
          (=
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
            0)))
      (and
        (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
          0))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@989@01)
      (<= q$a@989@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@989@01)
    (<= q$a@989@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@989@01 Int)) (!
  (and
    (or (<= 0 q$a@989@01) (not (<= 0 q$a@989@01)))
    (=>
      (and
        (<= 0 q$a@989@01)
        (<= q$a@989@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@989@01)
        (<= q$a@989@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
          (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
        (or
          (not
            (and
              (not
                (=
                  q$a@989@01
                  ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
              (=
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
                0)))
          (and
            (not
              (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
            (=
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
              0)))))
    (or
      (not
        (and
          (<= 0 q$a@989@01)
          (<= q$a@989@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@989@01)
        (<= q$a@989@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396-aux|)))
(push) ; 10
(assert (not (forall ((q$a@989@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@989@01)
        (<= q$a@989@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) q$a@989@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((q$a@989@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a@989@01)
        (<= q$a@989@01 1461501637330902918203684832716283019655932542975))
      (and
        (not (= q$a@989@01 ($struct_get<Int> ($struct_loc<Int> self@986@01 0))))
        (=
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01)
          0)))
    (=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 10)) q$a@989@01)
      0))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 11)) q$a@989@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1665@11@1665@396|)))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(18, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(18, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@990@01 Int)
(declare-const q$v@991@01 Int)
(push) ; 10
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 1111 | !(0 <= q$a@990@01) | live]
; [else-branch: 1111 | 0 <= q$a@990@01 | live]
(push) ; 12
; [then-branch: 1111 | !(0 <= q$a@990@01)]
(assert (not (<= 0 q$a@990@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 1111 | 0 <= q$a@990@01]
(assert (<= 0 q$a@990@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 13
; [then-branch: 1112 | !(q$a@990@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 1112 | q$a@990@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 14
; [then-branch: 1112 | !(q$a@990@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@990@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 14
(push) ; 14
; [else-branch: 1112 | q$a@990@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@990@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 15
; [then-branch: 1113 | !(0 <= q$v@991@01) | live]
; [else-branch: 1113 | 0 <= q$v@991@01 | live]
(push) ; 16
; [then-branch: 1113 | !(0 <= q$v@991@01)]
(assert (not (<= 0 q$v@991@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 1113 | 0 <= q$v@991@01]
(assert (<= 0 q$v@991@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@991@01) (not (<= 0 q$v@991@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@991@01) (not (<= 0 q$v@991@01))))))
(assert (or
  (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@990@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@990@01)
  (and
    (<= 0 q$a@990@01)
    (=>
      (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@991@01) (not (<= 0 q$v@991@01)))))
    (or
      (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@990@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@990@01) (not (<= 0 q$a@990@01))))
(push) ; 11
; [then-branch: 1114 | 0 <= q$a@990@01 && q$a@990@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@991@01 && q$v@991@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 1114 | !(0 <= q$a@990@01 && q$a@990@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@991@01 && q$v@991@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 12
; [then-branch: 1114 | 0 <= q$a@990@01 && q$a@990@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@991@01 && q$v@991@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@990@01)
  (and
    (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@991@01)
      (<=
        q$v@991@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 6)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 6)): $Map[Int, Int])
; [eval] $struct_loc(self, 6)
(push) ; 13
; [then-branch: 1115 | q$v@991@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 6)), q$a@990@01) | live]
; [else-branch: 1115 | q$v@991@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 6)), q$a@990@01) | live]
(push) ; 14
; [then-branch: 1115 | q$v@991@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 6)), q$a@990@01)]
(assert (=
  q$v@991@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@990@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 1115 | q$v@991@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@986@01, 6)), q$a@990@01)]
(assert (not
  (=
    q$v@991@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@990@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@991@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@990@01)))
  (=
    q$v@991@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@990@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 1114 | !(0 <= q$a@990@01 && q$a@990@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@991@01 && q$v@991@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@990@01)
    (and
      (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@991@01)
        (<=
          q$v@991@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@990@01)
    (and
      (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@991@01)
        (<=
          q$v@991@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@990@01)
    (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@991@01)
    (<=
      q$v@991@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@991@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@990@01)))
      (=
        q$v@991@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@990@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@990@01)
      (and
        (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@991@01)
          (<=
            q$v@991@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@990@01)
    (and
      (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@991@01)
        (<=
          q$v@991@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@992@01 $PSF<$accessible$withdraw>)
(declare-const s@993@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@990@01 Int) (q$v@991@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@990@01)
      (and
        (<= 0 q$a@990@01)
        (=>
          (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@991@01) (not (<= 0 q$v@991@01)))))
        (or
          (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@990@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@990@01) (not (<= 0 q$a@990@01)))
    (=>
      (and
        (<= 0 q$a@990@01)
        (and
          (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@991@01)
            (<=
              q$v@991@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@990@01)
        (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@991@01)
        (<=
          q$v@991@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@991@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@990@01)))
          (=
            q$v@991@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@986@01 6)) q$a@990@01)))))
    (or
      (not
        (and
          (<= 0 q$a@990@01)
          (and
            (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@991@01)
              (<=
                q$v@991@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@990@01)
        (and
          (<= q$a@990@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@991@01)
            (<=
              q$v@991@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@992@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@990@01))
    ($SortWrappers.IntTo$Snap q$v@991@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 18)
      ($SortWrappers.IntTo$Snap q$a@990@01))
    ($SortWrappers.IntTo$Snap q$v@991@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesauction.vy.vpr@1666@11@1666@344-aux|)))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 1084 | $out_of_gas@808@01]
(assert $out_of_gas@808@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 1054 | l$no_reentrant_call@805@01]
(assert l$no_reentrant_call@805@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 963 | l$send_fail@799@01]
(assert l$send_fail@799@01)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 907 | $struct_get[Bool]($struct_loc[Int](self@789@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@789@01 5)))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 876 | !($struct_get[Int]($struct_loc[Int](block@786@01, 4)) >= $struct_get[Int]($struct_loc[Int](self@789@01, 2)))]
(assert (not
  (>=
    ($struct_get<Int> ($struct_loc<Int> block@786@01 4))
    ($struct_get<Int> ($struct_loc<Int> self@789@01 2)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
