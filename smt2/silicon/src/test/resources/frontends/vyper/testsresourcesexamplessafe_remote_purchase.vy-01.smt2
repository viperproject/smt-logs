(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-13 17:31:43
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Contract 0)
(declare-sort $Blockchain 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
(declare-sort $PSF<$accessible$abort> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<$accessible$abort>To$Snap ($PSF<$accessible$abort>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<$accessible$abort> ($Snap) $PSF<$accessible$abort>)
(assert (forall ((x $PSF<$accessible$abort>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<$accessible$abort>($SortWrappers.$PSF<$accessible$abort>To$Snap x)))
    :pattern (($SortWrappers.$PSF<$accessible$abort>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<$accessible$abort>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<$accessible$abort>To$Snap($SortWrappers.$SnapTo$PSF<$accessible$abort> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<$accessible$abort> x))
    :qid |$Snap.$PSF<$accessible$abort>To$SnapTo$PSF<$accessible$abort>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun s$struct$self$init<$Struct> (Int Int Int Bool Bool Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
; /predicate_snap_functions_declarations.smt2 [$accessible$abort: Snap]
(declare-fun $PSF.domain_$accessible$abort ($PSF<$accessible$abort>) Set<$Snap>)
(declare-fun $PSF.lookup_$accessible$abort ($PSF<$accessible$abort> $Snap) $Snap)
(declare-fun $PSF.after_$accessible$abort ($PSF<$accessible$abort> $PSF<$accessible$abort>) Bool)
(declare-fun $PSF.loc_$accessible$abort ($Snap $Snap) Bool)
(declare-fun $PSF.perm_$accessible$abort ($PPM $Snap) $Perm)
(declare-const $psfTOP_$accessible$abort $PSF<$accessible$abort>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$abort%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$abort_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$purchase%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$purchase_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$received%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$received_0%trigger ($Snap Int Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 Int) ($arg_3 Bool) ($arg_4 Bool) ($arg_5 Int) ($arg_6 Int) ($arg_7 Bool) ($arg_8 $Map<Int~_Int>) ($arg_9 $Map<Int~_Int>) ($arg_10 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 1))
          $arg_1)
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 2))
            $arg_2)
          (and
            (=
              ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 3))
              $arg_3)
            (and
              (=
                ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 4))
                $arg_4)
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 8))
                        $arg_8)
                      (and
                        (=
                          ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 9))
                          $arg_9)
                        (=
                          ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 10))
                          $arg_10))))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 2))
                ($struct_get<Int> ($struct_loc<Int> $r 2)))
              (and
                (=
                  ($struct_get<Bool> ($struct_loc<Int> $l 3))
                  ($struct_get<Bool> ($struct_loc<Int> $r 3)))
                (and
                  (=
                    ($struct_get<Bool> ($struct_loc<Int> $l 4))
                    ($struct_get<Bool> ($struct_loc<Int> $r 4)))
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> $l 5))
                      ($struct_get<Int> ($struct_loc<Int> $r 5)))
                    (and
                      (=
                        ($struct_get<Int> ($struct_loc<Int> $l 6))
                        ($struct_get<Int> ($struct_loc<Int> $r 6)))
                      (and
                        (=
                          ($struct_get<Bool> ($struct_loc<Int> $l 7))
                          ($struct_get<Bool> ($struct_loc<Int> $r 7)))
                        (and
                          ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 8)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 8)))
                          (and
                            ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 9)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 9)))
                            (=
                              ($struct_get<Bool> ($struct_loc<Int> $l 10))
                              ($struct_get<Bool> ($struct_loc<Int> $r 10))))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
; /predicate_snap_functions_axioms.smt2 [$accessible$abort: Snap]
(assert (forall ((vs $PSF<$accessible$abort>) (ws $PSF<$accessible$abort>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_$accessible$abort vs) ($PSF.domain_$accessible$abort ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_$accessible$abort vs))
            (= ($PSF.lookup_$accessible$abort vs x) ($PSF.lookup_$accessible$abort ws x)))
          :pattern (($PSF.lookup_$accessible$abort vs x) ($PSF.lookup_$accessible$abort ws x))
          :qid |qp.$PSF<$accessible$abort>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<$accessible$abort>To$Snap vs)
              ($SortWrappers.$PSF<$accessible$abort>To$Snap ws)
              )
    :qid |qp.$PSF<$accessible$abort>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_$accessible$abort pm s))
    :pattern (($PSF.perm_$accessible$abort pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_$accessible$abort f s) true)
    :pattern (($PSF.loc_$accessible$abort f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1324|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-1325|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1330|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1331|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1326|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-1327|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1332|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1333|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1328|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1329|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1334|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1335|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))))
(assert (= ($Snap.second $t@10@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 ($Snap.combine ($Snap.first $t@11@01) ($Snap.second $t@11@01))))
(assert (= ($Snap.first $t@11@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))))
(assert (= ($Snap.second $t@11@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 6)): Int) &&
;   ($struct_get($struct_loc($self$0, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 6))))
(assert (= ($Snap.second $t@12@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@14@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q0@14@01)) | live]
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q0@14@01) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q0@14@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q0@14@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@14@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@615@11@615@354-aux|)))
(assert (forall (($q0@14@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@14@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@615@11@615@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q0@16@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@16@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@16@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q0@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@616@11@616@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@18@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(push) ; 4
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q1@18@01)) | live]
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q1@18@01) | live]
(push) ; 5
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q1@18@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q1@18@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@18@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@617@11@617@354-aux|)))
(assert (forall (($q1@18@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@18@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@617@11@617@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $q1@20@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@20@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@20@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q1@20@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@618@11@618@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01))))
(assert (= ($Snap.first $t@22@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@22@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 ($Snap.combine ($Snap.first $t@23@01) ($Snap.second $t@23@01))))
(assert (= ($Snap.first $t@23@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@23@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@24@01 $Snap)
(assert (= $t@24@01 ($Snap.combine ($Snap.first $t@24@01) ($Snap.second $t@24@01))))
(assert (= ($Snap.first $t@24@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))))
(assert (= ($Snap.second $t@24@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 ($Snap.combine ($Snap.first $t@25@01) ($Snap.second $t@25@01))))
(assert (= ($Snap.first $t@25@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))))
(assert (= ($Snap.second $t@25@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 6)): Int) &&
;   ($struct_get($struct_loc($self$1, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 ($Snap.combine ($Snap.first $t@26@01) ($Snap.second $t@26@01))))
(assert (= ($Snap.first $t@26@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 6))))
(assert (= ($Snap.second $t@26@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@28@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q0@28@01)) | live]
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q0@28@01) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q0@28@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q0@28@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@28@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@625@11@625@354-aux|)))
(assert (forall (($q0@28@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@28@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@625@11@625@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q0@30@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@30@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@30@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q0@30@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@626@11@626@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@32@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q1@32@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q1@32@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q1@32@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q1@32@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@32@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@627@11@627@354-aux|)))
(assert (forall (($q1@32@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@32@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@627@11@627@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $q1@34@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@34@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@34@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q1@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@628@11@628@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@36@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 ($Snap.combine ($Snap.first $t@37@01) ($Snap.second $t@37@01))))
(assert (= ($Snap.first $t@37@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@37@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 2)): Int) &&
;   ($struct_get($struct_loc($self$2, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 ($Snap.combine ($Snap.first $t@38@01) ($Snap.second $t@38@01))))
(assert (= ($Snap.first $t@38@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))))
(assert (= ($Snap.second $t@38@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 5)): Int) &&
;   ($struct_get($struct_loc($self$2, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 ($Snap.combine ($Snap.first $t@39@01) ($Snap.second $t@39@01))))
(assert (= ($Snap.first $t@39@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))))
(assert (= ($Snap.second $t@39@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 6)): Int) &&
;   ($struct_get($struct_loc($self$2, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@40@01 $Snap)
(assert (= $t@40@01 ($Snap.combine ($Snap.first $t@40@01) ($Snap.second $t@40@01))))
(assert (= ($Snap.first $t@40@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] $struct_loc($self$2, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 6))))
(assert (= ($Snap.second $t@40@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] $struct_loc($self$2, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@42@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q0@42@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q0@42@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q0@42@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q0@42@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@42@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@635@11@635@354-aux|)))
(assert (forall (($q0@42@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@635@11@635@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $q0@44@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@44@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@44@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q0@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@636@11@636@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@46@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(push) ; 4
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q1@46@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q1@46@01) | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q1@46@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q1@46@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@46@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@637@11@637@354-aux|)))
(assert (forall (($q1@46@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@46@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@637@11@637@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int))
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int))
(declare-const $q1@48@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@48@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@48@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q1@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@638@11@638@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 ($Snap.combine ($Snap.first $t@50@01) ($Snap.second $t@50@01))))
(assert (= ($Snap.first $t@50@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@50@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 ($Snap.combine ($Snap.first $t@51@01) ($Snap.second $t@51@01))))
(assert (= ($Snap.first $t@51@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@51@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 ($Snap.combine ($Snap.first $t@52@01) ($Snap.second $t@52@01))))
(assert (= ($Snap.first $t@52@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@52@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (= ($Snap.first $t@54@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@54@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@57@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Bool) ==
;   (($struct_get($struct_loc($self$0, 2)): Int) == 0)
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool) == (($struct_get($struct_loc($self$0, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$0, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
(declare-const $t@60@01 $Snap)
(assert (= $t@60@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$0, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | live]
; [else-branch: 6 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 6 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$0, 10)): Bool) &&
;   ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$0, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$0, 10)): Bool) && ($struct_get($struct_loc($self$0, 3)): Bool) ==> ($struct_get($struct_loc($self$0, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$0, 10)): Bool) && ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$0, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 10)): Bool)
; [eval] $struct_loc($self$0, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 7 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)) | live]
; [else-branch: 7 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) | live]
(push) ; 4
; [then-branch: 7 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 7 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 8 | !(!($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 8 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$0, 0)): Int))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(!($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$0, 10)): Bool) &&
;   ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int) ==
;   0
(declare-const $t@62@01 $Snap)
(assert (= $t@62@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$0, 10)): Bool) && ($struct_get($struct_loc($self$0, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$0, 10)): Bool) && ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$0, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 10)): Bool)
; [eval] $struct_loc($self$0, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 9 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)) | live]
; [else-branch: 9 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) | live]
(push) ; 4
; [then-branch: 9 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 10 | !(!($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 10 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(!($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 10)): Bool) &&
;   ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$0,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 10)): Bool) && ($struct_get($struct_loc($self$0, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$0, 10)): Bool) && ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 10)): Bool)
; [eval] $struct_loc($self$0, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 11 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) | live]
; [else-branch: 11 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)) | live]
(push) ; 4
; [then-branch: 11 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))))
(pop) ; 4
(push) ; 4
; [else-branch: 11 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 12 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 12 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$0, 0)): Int))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(push) ; 5
; [then-branch: 13 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$0@0@01, 0))))) | live]
; [else-branch: 13 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)))) | live]
(push) ; 6
; [then-branch: 13 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$0@0@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 13 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$0@0@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$0, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$0, 0)): Int))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))))))
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
      ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$0, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) :
;       0))
(declare-const $t@64@01 $Snap)
(assert (= $t@64@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$0, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 14 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 14 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$0, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) : 0))
(declare-const q$a@65@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$0, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 15 | !(0 <= q$a@65@01) | live]
; [else-branch: 15 | 0 <= q$a@65@01 | live]
(push) ; 7
; [then-branch: 15 | !(0 <= q$a@65@01)]
(assert (not (<= 0 q$a@65@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 15 | 0 <= q$a@65@01]
(assert (<= 0 q$a@65@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@65@01) (not (<= 0 q$a@65@01))))
(push) ; 6
; [then-branch: 16 | 0 <= q$a@65@01 && q$a@65@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 16 | !(0 <= q$a@65@01 && q$a@65@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 16 | 0 <= q$a@65@01 && q$a@65@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@65@01)
  (<= q$a@65@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$0, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$0, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(push) ; 8
; [then-branch: 17 | q$a@65@01 == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1)) | live]
; [else-branch: 17 | q$a@65@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1)) | live]
(push) ; 9
; [then-branch: 17 | q$a@65@01 == $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1))]
(assert (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$0, 0)): Int))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 17 | q$a@65@01 != $struct_get[Int]($struct_loc[Int]($self$0@0@01, 1))]
(assert (not (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
  (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 16 | !(0 <= q$a@65@01 && q$a@65@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@65@01)
    (<= q$a@65@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@65@01)
    (<= q$a@65@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@65@01)
    (<= q$a@65@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
      (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@65@01)
      (<= q$a@65@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@65@01)
    (<= q$a@65@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@65@01 Int)) (!
  (and
    (or (<= 0 q$a@65@01) (not (<= 0 q$a@65@01)))
    (=>
      (and
        (<= 0 q$a@65@01)
        (<= q$a@65@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@65@01)
        (<= q$a@65@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
          (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@65@01)
          (<= q$a@65@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@65@01)
        (<= q$a@65@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) q$a@65@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@653@60@653@354-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
    (forall ((q$a@65@01 Int)) (!
      (and
        (or (<= 0 q$a@65@01) (not (<= 0 q$a@65@01)))
        (=>
          (and
            (<= 0 q$a@65@01)
            (<= q$a@65@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@65@01)
            (<= q$a@65@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@65@01
                  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
              (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@65@01)
              (<= q$a@65@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@65@01)
            (<= q$a@65@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) q$a@65@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@653@60@653@354-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))
  (forall ((q$a@65@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@65@01)
        (<= q$a@65@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) q$a@65@01)
        (ite
          (= q$a@65@01 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) q$a@65@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@653@60@653@354|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$0, 10)): Bool) &&
;   ($struct_get($struct_loc($self$0, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$0, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$0, 10)): Bool) && ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$0, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$0, 10)): Bool)
; [eval] $struct_loc($self$0, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 18 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)) | live]
; [else-branch: 18 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) | live]
(push) ; 4
; [then-branch: 18 | $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 18 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10))))
; [eval] ($struct_get($struct_loc($self$0, 3)): Bool)
; [eval] $struct_loc($self$0, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)) | live]
; [else-branch: 19 | !(!($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 19 | !($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3))))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$0, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$0, 0)): Int))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(declare-const $t@66@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@68@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@68@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@68@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $a@68@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@68@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@655@11@655@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@69@01 $Snap)
(assert (= $t@69@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==
;   (($struct_get($struct_loc($self$1, 2)): Int) == 0)
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) == (($struct_get($struct_loc($self$1, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$1, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | dead]
; [else-branch: 20 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 20 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 21 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) | live]
; [else-branch: 21 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) | live]
(push) ; 5
; [then-branch: 21 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 22 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 22 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 5
(push) ; 5
; [else-branch: 22 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) ==
;   0
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 23 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) | live]
; [else-branch: 23 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) | live]
(push) ; 5
; [then-branch: 23 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 23 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 24 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 24 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(push) ; 5
; [else-branch: 24 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 25 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) | live]
; [else-branch: 25 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) | live]
(push) ; 5
; [then-branch: 25 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
(pop) ; 5
(push) ; 5
; [else-branch: 25 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 26 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 26 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(push) ; 6
; [then-branch: 27 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@2@01, 0))))) | live]
; [else-branch: 27 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)))) | live]
(push) ; 7
; [then-branch: 27 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 27 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@2@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))))
(pop) ; 5
(push) ; 5
; [else-branch: 26 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
      ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) :
;       0))
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 28 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 28 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
(declare-const q$a@76@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 29 | !(0 <= q$a@76@01) | live]
; [else-branch: 29 | 0 <= q$a@76@01 | live]
(push) ; 8
; [then-branch: 29 | !(0 <= q$a@76@01)]
(assert (not (<= 0 q$a@76@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 29 | 0 <= q$a@76@01]
(assert (<= 0 q$a@76@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@76@01) (not (<= 0 q$a@76@01))))
(push) ; 7
; [then-branch: 30 | 0 <= q$a@76@01 && q$a@76@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 30 | !(0 <= q$a@76@01 && q$a@76@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 30 | 0 <= q$a@76@01 && q$a@76@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@76@01)
  (<= q$a@76@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(push) ; 9
; [then-branch: 31 | q$a@76@01 == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1)) | live]
; [else-branch: 31 | q$a@76@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1)) | live]
(push) ; 10
; [then-branch: 31 | q$a@76@01 == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1))]
(assert (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 10
(push) ; 10
; [else-branch: 31 | q$a@76@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1))]
(assert (not (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
  (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))
(pop) ; 8
(push) ; 8
; [else-branch: 30 | !(0 <= q$a@76@01 && q$a@76@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@76@01)
    (<= q$a@76@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@76@01)
    (<= q$a@76@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@76@01)
    (<= q$a@76@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
      (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@76@01)
      (<= q$a@76@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@76@01)
    (<= q$a@76@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@76@01 Int)) (!
  (and
    (or (<= 0 q$a@76@01) (not (<= 0 q$a@76@01)))
    (=>
      (and
        (<= 0 q$a@76@01)
        (<= q$a@76@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@76@01)
        (<= q$a@76@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
          (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@76@01)
          (<= q$a@76@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@76@01)
        (<= q$a@76@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) q$a@76@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@662@60@662@354-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 28 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
    (forall ((q$a@76@01 Int)) (!
      (and
        (or (<= 0 q$a@76@01) (not (<= 0 q$a@76@01)))
        (=>
          (and
            (<= 0 q$a@76@01)
            (<= q$a@76@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@76@01)
            (<= q$a@76@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@76@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
              (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@76@01)
              (<= q$a@76@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@76@01)
            (<= q$a@76@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) q$a@76@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@662@60@662@354-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  (forall ((q$a@76@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@76@01)
        (<= q$a@76@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) q$a@76@01)
        (ite
          (= q$a@76@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) q$a@76@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@662@60@662@354|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$1, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 32 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) | live]
; [else-branch: 32 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) | live]
(push) ; 5
; [then-branch: 32 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 32 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 33 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 33 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(declare-const $t@77@01 $Snap)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))
  (=
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@79@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@79@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@79@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@79@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@664@11@664@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
(declare-const $t@81@01 $Snap)
(assert (= $t@81@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$1, 2)): Int)
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) != 0 | dead]
; [else-branch: 34 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 34 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 35 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 35 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 35 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 35 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 36 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 36 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 6
(push) ; 6
; [else-branch: 36 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 37 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 37 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 37 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 37 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 38 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 38 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 6
(push) ; 6
; [else-branch: 38 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 39 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 39 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 6
; [then-branch: 39 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(pop) ; 6
(push) ; 6
; [else-branch: 39 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 40 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 40 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 7
; [then-branch: 41 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))) | live]
; [else-branch: 41 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))) | live]
(push) ; 8
; [then-branch: 41 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 41 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 40 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 42 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 42 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@87@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 43 | !(0 <= q$a@87@01) | live]
; [else-branch: 43 | 0 <= q$a@87@01 | live]
(push) ; 9
; [then-branch: 43 | !(0 <= q$a@87@01)]
(assert (not (<= 0 q$a@87@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 43 | 0 <= q$a@87@01]
(assert (<= 0 q$a@87@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@87@01) (not (<= 0 q$a@87@01))))
(push) ; 8
; [then-branch: 44 | 0 <= q$a@87@01 && q$a@87@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 44 | !(0 <= q$a@87@01 && q$a@87@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 44 | 0 <= q$a@87@01 && q$a@87@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@87@01)
  (<= q$a@87@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 10
; [then-branch: 45 | q$a@87@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 45 | q$a@87@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 11
; [then-branch: 45 | q$a@87@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 11
(push) ; 11
; [else-branch: 45 | q$a@87@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 44 | !(0 <= q$a@87@01 && q$a@87@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@87@01)
    (<= q$a@87@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@87@01)
    (<= q$a@87@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@87@01)
    (<= q$a@87@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@87@01)
      (<= q$a@87@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@87@01)
    (<= q$a@87@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@87@01 Int)) (!
  (and
    (or (<= 0 q$a@87@01) (not (<= 0 q$a@87@01)))
    (=>
      (and
        (<= 0 q$a@87@01)
        (<= q$a@87@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@87@01)
        (<= q$a@87@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@87@01)
          (<= q$a@87@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@87@01)
        (<= q$a@87@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@87@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 42 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@87@01 Int)) (!
      (and
        (or (<= 0 q$a@87@01) (not (<= 0 q$a@87@01)))
        (=>
          (and
            (<= 0 q$a@87@01)
            (<= q$a@87@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@87@01)
            (<= q$a@87@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@87@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
              (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@87@01)
              (<= q$a@87@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@87@01)
            (<= q$a@87@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@87@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@87@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@87@01)
        (<= q$a@87@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@87@01)
        (ite
          (= q$a@87@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@87@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 46 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 46 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 46 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 46 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 47 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 47 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(declare-const $t@88@01 $Snap)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
  (=
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
  (=
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [exec]
; assert ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 6
; [then-branch: 48 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | dead]
; [else-branch: 48 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(push) ; 7
; [else-branch: 48 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 49 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 49 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 49 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 49 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 50 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 50 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 51 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 51 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 51 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 51 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 52 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 52 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 53 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 53 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 7
; [then-branch: 53 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(pop) ; 7
(push) ; 7
; [else-branch: 53 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 54 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 54 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 55 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 55 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@89@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 56 | !(0 <= q$a@89@01) | live]
; [else-branch: 56 | 0 <= q$a@89@01 | live]
(push) ; 10
; [then-branch: 56 | !(0 <= q$a@89@01)]
(assert (not (<= 0 q$a@89@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 56 | 0 <= q$a@89@01]
(assert (<= 0 q$a@89@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@89@01) (not (<= 0 q$a@89@01))))
(push) ; 9
; [then-branch: 57 | 0 <= q$a@89@01 && q$a@89@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 57 | !(0 <= q$a@89@01 && q$a@89@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 57 | 0 <= q$a@89@01 && q$a@89@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@89@01)
  (<= q$a@89@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 11
; [then-branch: 58 | q$a@89@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 58 | q$a@89@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 12
; [then-branch: 58 | q$a@89@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 12
(push) ; 12
; [else-branch: 58 | q$a@89@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 57 | !(0 <= q$a@89@01 && q$a@89@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@89@01)
    (<= q$a@89@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@89@01)
    (<= q$a@89@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@89@01)
    (<= q$a@89@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@89@01)
      (<= q$a@89@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@89@01)
    (<= q$a@89@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@89@01 Int)) (!
  (and
    (or (<= 0 q$a@89@01) (not (<= 0 q$a@89@01)))
    (=>
      (and
        (<= 0 q$a@89@01)
        (<= q$a@89@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@89@01)
        (<= q$a@89@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@89@01)
          (<= q$a@89@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@89@01)
        (<= q$a@89@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@89@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@89@01 Int)) (!
    (and
      (or (<= 0 q$a@89@01) (not (<= 0 q$a@89@01)))
      (=>
        (and
          (<= 0 q$a@89@01)
          (<= q$a@89@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@89@01)
          (<= q$a@89@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
            (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@89@01)
            (<= q$a@89@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@89@01)
          (<= q$a@89@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@89@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|))))
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@89@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@89@01)
        (<= q$a@89@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@89@01)
        (ite
          (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@89@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@89@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@89@01)
        (<= q$a@89@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@89@01)
        (ite
          (= q$a@89@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@89@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 59 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 59 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 59 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 59 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 60 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 60 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 47 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [exec]
; assert ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 6
; [then-branch: 61 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | dead]
; [else-branch: 61 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(push) ; 7
; [else-branch: 61 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 62 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 62 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 62 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 62 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 63 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 63 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 7
; [else-branch: 63 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 64 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 64 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 64 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 64 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 65 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 65 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 7
; [else-branch: 65 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 66 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 66 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 7
; [then-branch: 66 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(pop) ; 7
(push) ; 7
; [else-branch: 66 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 67 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 67 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 8
; [then-branch: 68 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))) | live]
; [else-branch: 68 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))) | live]
(push) ; 9
; [then-branch: 68 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 68 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 67 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 69 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 69 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@91@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 70 | !(0 <= q$a@91@01) | live]
; [else-branch: 70 | 0 <= q$a@91@01 | live]
(push) ; 10
; [then-branch: 70 | !(0 <= q$a@91@01)]
(assert (not (<= 0 q$a@91@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 70 | 0 <= q$a@91@01]
(assert (<= 0 q$a@91@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@91@01) (not (<= 0 q$a@91@01))))
(push) ; 9
; [then-branch: 71 | 0 <= q$a@91@01 && q$a@91@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 71 | !(0 <= q$a@91@01 && q$a@91@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 71 | 0 <= q$a@91@01 && q$a@91@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@91@01)
  (<= q$a@91@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 11
; [then-branch: 72 | q$a@91@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 72 | q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 12
; [then-branch: 72 | q$a@91@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 12
(push) ; 12
; [else-branch: 72 | q$a@91@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 71 | !(0 <= q$a@91@01 && q$a@91@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@91@01)
    (<= q$a@91@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@91@01)
    (<= q$a@91@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@91@01)
    (<= q$a@91@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@91@01)
      (<= q$a@91@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@91@01)
    (<= q$a@91@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@91@01 Int)) (!
  (and
    (or (<= 0 q$a@91@01) (not (<= 0 q$a@91@01)))
    (=>
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@91@01)
          (<= q$a@91@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@91@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 69 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@91@01 Int)) (!
      (and
        (or (<= 0 q$a@91@01) (not (<= 0 q$a@91@01)))
        (=>
          (and
            (<= 0 q$a@91@01)
            (<= q$a@91@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@91@01)
            (<= q$a@91@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@91@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
              (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@91@01)
              (<= q$a@91@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@91@01)
            (<= q$a@91@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@91@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@91@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@91@01)
        (ite
          (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@91@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@91@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@91@01)
        (<= q$a@91@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@91@01)
        (ite
          (= q$a@91@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@91@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 73 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 73 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 73 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 73 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 74 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 74 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 6
; [else-branch: 74 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 33 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@93@01 $Snap)
(assert (= $t@93@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@94@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@94@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@94@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@94@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@664@11@664@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
(declare-const $t@95@01 $Snap)
(assert (= $t@95@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$1, 2)): Int)
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) != 0 | live]
; [else-branch: 75 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 75 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(pop) ; 6
(push) ; 6
; [else-branch: 75 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))))
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 76 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 76 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 76 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 76 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 77 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 77 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 6
(push) ; 6
; [else-branch: 77 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
(declare-const $t@99@01 $Snap)
(assert (= $t@99@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 78 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 78 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 78 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 78 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 79 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 79 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 6
(push) ; 6
; [else-branch: 79 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 80 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 80 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 6
; [then-branch: 80 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(pop) ; 6
(push) ; 6
; [else-branch: 80 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 81 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 81 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 7
; [then-branch: 82 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))) | live]
; [else-branch: 82 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))) | live]
(push) ; 8
; [then-branch: 82 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 82 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 81 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
(declare-const $t@101@01 $Snap)
(assert (= $t@101@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 83 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 83 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@102@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 84 | !(0 <= q$a@102@01) | live]
; [else-branch: 84 | 0 <= q$a@102@01 | live]
(push) ; 9
; [then-branch: 84 | !(0 <= q$a@102@01)]
(assert (not (<= 0 q$a@102@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 84 | 0 <= q$a@102@01]
(assert (<= 0 q$a@102@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@102@01) (not (<= 0 q$a@102@01))))
(push) ; 8
; [then-branch: 85 | 0 <= q$a@102@01 && q$a@102@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 85 | !(0 <= q$a@102@01 && q$a@102@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 85 | 0 <= q$a@102@01 && q$a@102@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@102@01)
  (<= q$a@102@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 10
; [then-branch: 86 | q$a@102@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 86 | q$a@102@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 11
; [then-branch: 86 | q$a@102@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 11
(push) ; 11
; [else-branch: 86 | q$a@102@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 85 | !(0 <= q$a@102@01 && q$a@102@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@102@01)
    (<= q$a@102@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@102@01)
    (<= q$a@102@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@102@01)
    (<= q$a@102@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@102@01)
      (<= q$a@102@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@102@01)
    (<= q$a@102@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@102@01 Int)) (!
  (and
    (or (<= 0 q$a@102@01) (not (<= 0 q$a@102@01)))
    (=>
      (and
        (<= 0 q$a@102@01)
        (<= q$a@102@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@102@01)
        (<= q$a@102@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@102@01)
          (<= q$a@102@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@102@01)
        (<= q$a@102@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 83 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@102@01 Int)) (!
      (and
        (or (<= 0 q$a@102@01) (not (<= 0 q$a@102@01)))
        (=>
          (and
            (<= 0 q$a@102@01)
            (<= q$a@102@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@102@01)
            (<= q$a@102@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@102@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
              (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@102@01)
              (<= q$a@102@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@102@01)
            (<= q$a@102@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@102@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@102@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@102@01)
        (<= q$a@102@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@102@01)
        (ite
          (= q$a@102@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@102@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 87 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 87 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 87 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 87 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 88 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 88 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(declare-const $t@103@01 $Snap)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
  (=
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0)))))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [exec]
; assert ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 6
; [then-branch: 89 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | dead]
; [else-branch: 89 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(push) ; 7
; [else-branch: 89 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 90 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 90 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 90 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 90 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 91 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 91 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 92 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 92 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 92 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 92 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 93 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 93 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 94 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 94 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 7
; [then-branch: 94 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(pop) ; 7
(push) ; 7
; [else-branch: 94 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 95 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 95 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 96 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 96 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@104@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 97 | !(0 <= q$a@104@01) | live]
; [else-branch: 97 | 0 <= q$a@104@01 | live]
(push) ; 10
; [then-branch: 97 | !(0 <= q$a@104@01)]
(assert (not (<= 0 q$a@104@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 97 | 0 <= q$a@104@01]
(assert (<= 0 q$a@104@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@104@01) (not (<= 0 q$a@104@01))))
(push) ; 9
; [then-branch: 98 | 0 <= q$a@104@01 && q$a@104@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 98 | !(0 <= q$a@104@01 && q$a@104@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 98 | 0 <= q$a@104@01 && q$a@104@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@104@01)
  (<= q$a@104@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 11
; [then-branch: 99 | q$a@104@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 99 | q$a@104@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 12
; [then-branch: 99 | q$a@104@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 12
(push) ; 12
; [else-branch: 99 | q$a@104@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 98 | !(0 <= q$a@104@01 && q$a@104@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@104@01)
    (<= q$a@104@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@104@01)
    (<= q$a@104@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@104@01)
    (<= q$a@104@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@104@01)
      (<= q$a@104@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@104@01)
    (<= q$a@104@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@104@01 Int)) (!
  (and
    (or (<= 0 q$a@104@01) (not (<= 0 q$a@104@01)))
    (=>
      (and
        (<= 0 q$a@104@01)
        (<= q$a@104@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@104@01)
        (<= q$a@104@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@104@01)
          (<= q$a@104@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@104@01)
        (<= q$a@104@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@104@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@104@01 Int)) (!
    (and
      (or (<= 0 q$a@104@01) (not (<= 0 q$a@104@01)))
      (=>
        (and
          (<= 0 q$a@104@01)
          (<= q$a@104@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@104@01)
          (<= q$a@104@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
            (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@104@01)
            (<= q$a@104@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@104@01)
          (<= q$a@104@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@104@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|))))
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@104@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@104@01)
        (<= q$a@104@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@104@01)
        (ite
          (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@104@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@104@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@104@01)
        (<= q$a@104@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@104@01)
        (ite
          (= q$a@104@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@104@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 100 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 100 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 100 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 100 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 101 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 101 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 88 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [exec]
; assert ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 6
; [then-branch: 102 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | dead]
; [else-branch: 102 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(push) ; 7
; [else-branch: 102 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 103 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 103 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 103 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 103 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 104 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 104 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 7
; [else-branch: 104 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 105 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 105 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 105 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 105 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 106 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 106 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 7
; [else-branch: 106 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 107 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 107 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 7
; [then-branch: 107 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(pop) ; 7
(push) ; 7
; [else-branch: 107 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 108 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 108 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 8
; [then-branch: 109 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))) | live]
; [else-branch: 109 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))) | live]
(push) ; 9
; [then-branch: 109 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 109 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 108 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 110 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 110 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@106@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 111 | !(0 <= q$a@106@01) | live]
; [else-branch: 111 | 0 <= q$a@106@01 | live]
(push) ; 10
; [then-branch: 111 | !(0 <= q$a@106@01)]
(assert (not (<= 0 q$a@106@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 111 | 0 <= q$a@106@01]
(assert (<= 0 q$a@106@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@106@01) (not (<= 0 q$a@106@01))))
(push) ; 9
; [then-branch: 112 | 0 <= q$a@106@01 && q$a@106@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 112 | !(0 <= q$a@106@01 && q$a@106@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 112 | 0 <= q$a@106@01 && q$a@106@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@106@01)
  (<= q$a@106@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 11
; [then-branch: 113 | q$a@106@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 113 | q$a@106@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 12
; [then-branch: 113 | q$a@106@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 12
(push) ; 12
; [else-branch: 113 | q$a@106@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 112 | !(0 <= q$a@106@01 && q$a@106@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@106@01)
    (<= q$a@106@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@106@01)
    (<= q$a@106@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@106@01)
    (<= q$a@106@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@106@01)
      (<= q$a@106@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@106@01)
    (<= q$a@106@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@106@01 Int)) (!
  (and
    (or (<= 0 q$a@106@01) (not (<= 0 q$a@106@01)))
    (=>
      (and
        (<= 0 q$a@106@01)
        (<= q$a@106@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@106@01)
        (<= q$a@106@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@106@01)
          (<= q$a@106@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@106@01)
        (<= q$a@106@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@106@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 110 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@106@01 Int)) (!
      (and
        (or (<= 0 q$a@106@01) (not (<= 0 q$a@106@01)))
        (=>
          (and
            (<= 0 q$a@106@01)
            (<= q$a@106@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@106@01)
            (<= q$a@106@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@106@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
              (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@106@01)
              (<= q$a@106@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@106@01)
            (<= q$a@106@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@106@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@106@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@106@01)
        (<= q$a@106@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@106@01)
        (ite
          (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@106@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@106@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@106@01)
        (<= q$a@106@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@106@01)
        (ite
          (= q$a@106@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@106@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 114 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 114 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 114 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 114 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 115 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 115 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 6
; [else-branch: 115 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 19 | !(!($struct_get[Bool]($struct_loc[Int]($self$0@0@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$0@0@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$0@0@01 3)))))
(declare-const $t@107@01 $Snap)
(assert (= $t@107@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@109@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@109@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@109@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $a@109@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@109@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@655@11@655@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@110@01 $Snap)
(assert (= $t@110@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==
;   (($struct_get($struct_loc($self$1, 2)): Int) == 0)
(declare-const $t@111@01 $Snap)
(assert (= $t@111@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) == (($struct_get($struct_loc($self$1, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$1, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | live]
; [else-branch: 116 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 116 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(push) ; 5
; [else-branch: 116 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 117 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) | live]
; [else-branch: 117 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) | live]
(push) ; 5
; [then-branch: 117 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 117 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 118 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 118 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 5
(push) ; 5
; [else-branch: 118 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) ==
;   0
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 119 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) | live]
; [else-branch: 119 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) | live]
(push) ; 5
; [then-branch: 119 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 119 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 120 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 120 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(push) ; 5
; [else-branch: 120 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
(declare-const $t@115@01 $Snap)
(assert (= $t@115@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 121 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) | live]
; [else-branch: 121 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) | live]
(push) ; 5
; [then-branch: 121 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
(pop) ; 5
(push) ; 5
; [else-branch: 121 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 122 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 122 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(push) ; 6
; [then-branch: 123 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@2@01, 0))))) | live]
; [else-branch: 123 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)))) | live]
(push) ; 7
; [then-branch: 123 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@2@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 123 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@2@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))))
(pop) ; 5
(push) ; 5
; [else-branch: 122 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
      ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) :
;       0))
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 124 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 124 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
(declare-const q$a@117@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 125 | !(0 <= q$a@117@01) | live]
; [else-branch: 125 | 0 <= q$a@117@01 | live]
(push) ; 8
; [then-branch: 125 | !(0 <= q$a@117@01)]
(assert (not (<= 0 q$a@117@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 125 | 0 <= q$a@117@01]
(assert (<= 0 q$a@117@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@117@01) (not (<= 0 q$a@117@01))))
(push) ; 7
; [then-branch: 126 | 0 <= q$a@117@01 && q$a@117@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 126 | !(0 <= q$a@117@01 && q$a@117@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 126 | 0 <= q$a@117@01 && q$a@117@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@117@01)
  (<= q$a@117@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(push) ; 9
; [then-branch: 127 | q$a@117@01 == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1)) | live]
; [else-branch: 127 | q$a@117@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1)) | live]
(push) ; 10
; [then-branch: 127 | q$a@117@01 == $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1))]
(assert (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 10
(push) ; 10
; [else-branch: 127 | q$a@117@01 != $struct_get[Int]($struct_loc[Int]($self$1@2@01, 1))]
(assert (not (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
  (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))
(pop) ; 8
(push) ; 8
; [else-branch: 126 | !(0 <= q$a@117@01 && q$a@117@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@117@01)
    (<= q$a@117@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@117@01)
    (<= q$a@117@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@117@01)
    (<= q$a@117@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
      (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@117@01)
      (<= q$a@117@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@117@01)
    (<= q$a@117@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@117@01 Int)) (!
  (and
    (or (<= 0 q$a@117@01) (not (<= 0 q$a@117@01)))
    (=>
      (and
        (<= 0 q$a@117@01)
        (<= q$a@117@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@117@01)
        (<= q$a@117@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
          (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@117@01)
          (<= q$a@117@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@117@01)
        (<= q$a@117@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) q$a@117@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@662@60@662@354-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 124 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
    (forall ((q$a@117@01 Int)) (!
      (and
        (or (<= 0 q$a@117@01) (not (<= 0 q$a@117@01)))
        (=>
          (and
            (<= 0 q$a@117@01)
            (<= q$a@117@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@117@01)
            (<= q$a@117@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@117@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
              (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@117@01)
              (<= q$a@117@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@117@01)
            (<= q$a@117@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) q$a@117@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@662@60@662@354-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))
  (forall ((q$a@117@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@117@01)
        (<= q$a@117@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) q$a@117@01)
        (ite
          (= q$a@117@01 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) q$a@117@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@662@60@662@354|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$1, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 128 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)) | live]
; [else-branch: 128 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) | live]
(push) ; 5
; [then-branch: 128 | $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 128 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)) | live]
; [else-branch: 129 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 129 | !($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3))))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(declare-const $t@118@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@119@01 $Snap)
(assert (= $t@119@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@120@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@120@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@120@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@120@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@120@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@664@11@664@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$1, 2)): Int)
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) != 0 | dead]
; [else-branch: 130 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 130 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 131 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 131 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 131 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 131 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 132 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 132 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 6
(push) ; 6
; [else-branch: 132 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
(declare-const $t@125@01 $Snap)
(assert (= $t@125@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 133 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 133 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 133 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 133 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 134 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 134 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 6
(push) ; 6
; [else-branch: 134 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 135 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 135 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 6
; [then-branch: 135 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(pop) ; 6
(push) ; 6
; [else-branch: 135 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 136 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 136 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 7
; [then-branch: 137 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))) | live]
; [else-branch: 137 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))) | live]
(push) ; 8
; [then-branch: 137 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 137 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 136 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 138 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 138 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@128@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 139 | !(0 <= q$a@128@01) | live]
; [else-branch: 139 | 0 <= q$a@128@01 | live]
(push) ; 9
; [then-branch: 139 | !(0 <= q$a@128@01)]
(assert (not (<= 0 q$a@128@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 139 | 0 <= q$a@128@01]
(assert (<= 0 q$a@128@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@128@01) (not (<= 0 q$a@128@01))))
(push) ; 8
; [then-branch: 140 | 0 <= q$a@128@01 && q$a@128@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 140 | !(0 <= q$a@128@01 && q$a@128@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 140 | 0 <= q$a@128@01 && q$a@128@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@128@01)
  (<= q$a@128@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 10
; [then-branch: 141 | q$a@128@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 141 | q$a@128@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 11
; [then-branch: 141 | q$a@128@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 11
(push) ; 11
; [else-branch: 141 | q$a@128@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 140 | !(0 <= q$a@128@01 && q$a@128@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@128@01)
    (<= q$a@128@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@128@01)
    (<= q$a@128@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@128@01)
    (<= q$a@128@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@128@01)
      (<= q$a@128@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@128@01)
    (<= q$a@128@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@128@01 Int)) (!
  (and
    (or (<= 0 q$a@128@01) (not (<= 0 q$a@128@01)))
    (=>
      (and
        (<= 0 q$a@128@01)
        (<= q$a@128@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@128@01)
        (<= q$a@128@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@128@01)
          (<= q$a@128@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@128@01)
        (<= q$a@128@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@128@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 138 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@128@01 Int)) (!
      (and
        (or (<= 0 q$a@128@01) (not (<= 0 q$a@128@01)))
        (=>
          (and
            (<= 0 q$a@128@01)
            (<= q$a@128@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@128@01)
            (<= q$a@128@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@128@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
              (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@128@01)
              (<= q$a@128@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@128@01)
            (<= q$a@128@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@128@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@128@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@128@01)
        (<= q$a@128@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@128@01)
        (ite
          (= q$a@128@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@128@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 142 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 142 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 142 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 142 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 143 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 143 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(declare-const $t@129@01 $Snap)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
  (=
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0)))))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [exec]
; assert ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | dead]
; [else-branch: 144 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 144 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 145 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 145 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 145 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 145 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 146 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 146 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 147 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 147 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 147 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 147 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 148 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 148 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 149 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 149 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 7
; [then-branch: 149 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(pop) ; 7
(push) ; 7
; [else-branch: 149 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 150 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 150 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 151 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 151 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@130@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 152 | !(0 <= q$a@130@01) | live]
; [else-branch: 152 | 0 <= q$a@130@01 | live]
(push) ; 10
; [then-branch: 152 | !(0 <= q$a@130@01)]
(assert (not (<= 0 q$a@130@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 152 | 0 <= q$a@130@01]
(assert (<= 0 q$a@130@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@130@01) (not (<= 0 q$a@130@01))))
(push) ; 9
; [then-branch: 153 | 0 <= q$a@130@01 && q$a@130@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 153 | !(0 <= q$a@130@01 && q$a@130@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 153 | 0 <= q$a@130@01 && q$a@130@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@130@01)
  (<= q$a@130@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 11
; [then-branch: 154 | q$a@130@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 154 | q$a@130@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 12
; [then-branch: 154 | q$a@130@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 12
(push) ; 12
; [else-branch: 154 | q$a@130@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 153 | !(0 <= q$a@130@01 && q$a@130@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@130@01)
    (<= q$a@130@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@130@01)
    (<= q$a@130@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@130@01)
    (<= q$a@130@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@130@01)
      (<= q$a@130@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@130@01)
    (<= q$a@130@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@130@01 Int)) (!
  (and
    (or (<= 0 q$a@130@01) (not (<= 0 q$a@130@01)))
    (=>
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@130@01)
          (<= q$a@130@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@130@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@130@01 Int)) (!
    (and
      (or (<= 0 q$a@130@01) (not (<= 0 q$a@130@01)))
      (=>
        (and
          (<= 0 q$a@130@01)
          (<= q$a@130@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@130@01)
          (<= q$a@130@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
            (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@130@01)
            (<= q$a@130@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@130@01)
          (<= q$a@130@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@130@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|))))
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@130@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@130@01)
        (ite
          (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@130@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@130@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@130@01)
        (<= q$a@130@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@130@01)
        (ite
          (= q$a@130@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@130@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 155 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 155 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 155 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 155 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 156 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 156 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 143 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(declare-const $t@131@01 $Snap)
(assert (= $t@131@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [exec]
; assert ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 157 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | dead]
; [else-branch: 157 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 157 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 158 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 158 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 158 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 158 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 159 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 159 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 7
; [else-branch: 159 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 160 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 160 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 160 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 160 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 161 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 161 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 7
; [else-branch: 161 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 162 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 162 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 7
; [then-branch: 162 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(pop) ; 7
(push) ; 7
; [else-branch: 162 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 163 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 163 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 8
; [then-branch: 164 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))) | live]
; [else-branch: 164 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))) | live]
(push) ; 9
; [then-branch: 164 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 164 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 163 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 165 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 165 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@132@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 166 | !(0 <= q$a@132@01) | live]
; [else-branch: 166 | 0 <= q$a@132@01 | live]
(push) ; 10
; [then-branch: 166 | !(0 <= q$a@132@01)]
(assert (not (<= 0 q$a@132@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 166 | 0 <= q$a@132@01]
(assert (<= 0 q$a@132@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@132@01) (not (<= 0 q$a@132@01))))
(push) ; 9
; [then-branch: 167 | 0 <= q$a@132@01 && q$a@132@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 167 | !(0 <= q$a@132@01 && q$a@132@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 167 | 0 <= q$a@132@01 && q$a@132@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@132@01)
  (<= q$a@132@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 11
; [then-branch: 168 | q$a@132@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 168 | q$a@132@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 12
; [then-branch: 168 | q$a@132@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 12
(push) ; 12
; [else-branch: 168 | q$a@132@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 167 | !(0 <= q$a@132@01 && q$a@132@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@132@01)
    (<= q$a@132@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@132@01)
    (<= q$a@132@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@132@01)
    (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@132@01)
      (<= q$a@132@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@132@01)
    (<= q$a@132@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@132@01 Int)) (!
  (and
    (or (<= 0 q$a@132@01) (not (<= 0 q$a@132@01)))
    (=>
      (and
        (<= 0 q$a@132@01)
        (<= q$a@132@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@132@01)
        (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@132@01)
          (<= q$a@132@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@132@01)
        (<= q$a@132@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@132@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 165 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@132@01 Int)) (!
      (and
        (or (<= 0 q$a@132@01) (not (<= 0 q$a@132@01)))
        (=>
          (and
            (<= 0 q$a@132@01)
            (<= q$a@132@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@132@01)
            (<= q$a@132@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@132@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
              (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@132@01)
              (<= q$a@132@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@132@01)
            (<= q$a@132@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@132@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@132@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@132@01)
        (<= q$a@132@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@132@01)
        (ite
          (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@132@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@132@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@132@01)
        (<= q$a@132@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@132@01)
        (ite
          (= q$a@132@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@132@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 169 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 169 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 169 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 169 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 170 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 170 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 6
; [else-branch: 170 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 129 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@2@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@2@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@2@01 3)))))
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@134@01 $Snap)
(assert (= $t@134@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@135@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@135@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@135@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@135@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@135@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@664@11@664@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
(declare-const $t@136@01 $Snap)
(assert (= $t@136@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
(declare-const $t@137@01 $Snap)
(assert (= $t@137@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$1, 2)): Int)
(declare-const $t@138@01 $Snap)
(assert (= $t@138@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) != 0 | live]
; [else-branch: 171 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 171 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(pop) ; 6
(push) ; 6
; [else-branch: 171 | $struct_get[Int]($struct_loc[Int]($self$1@2@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))))
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
    ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
(declare-const $t@139@01 $Snap)
(assert (= $t@139@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 172 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 172 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 172 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 172 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 173 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 173 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 6
(push) ; 6
; [else-branch: 173 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 174 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 174 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 174 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 174 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 175 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 175 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 175 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 6
(push) ; 6
; [else-branch: 175 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
(declare-const $t@141@01 $Snap)
(assert (= $t@141@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 176 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 176 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 6
; [then-branch: 176 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(pop) ; 6
(push) ; 6
; [else-branch: 176 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 177 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 177 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 7
; [then-branch: 178 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))) | live]
; [else-branch: 178 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))) | live]
(push) ; 8
; [then-branch: 178 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 178 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 177 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
      ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 179 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 179 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@143@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 180 | !(0 <= q$a@143@01) | live]
; [else-branch: 180 | 0 <= q$a@143@01 | live]
(push) ; 9
; [then-branch: 180 | !(0 <= q$a@143@01)]
(assert (not (<= 0 q$a@143@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 180 | 0 <= q$a@143@01]
(assert (<= 0 q$a@143@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@143@01) (not (<= 0 q$a@143@01))))
(push) ; 8
; [then-branch: 181 | 0 <= q$a@143@01 && q$a@143@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 181 | !(0 <= q$a@143@01 && q$a@143@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 181 | 0 <= q$a@143@01 && q$a@143@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@143@01)
  (<= q$a@143@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 10
; [then-branch: 182 | q$a@143@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 182 | q$a@143@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 11
; [then-branch: 182 | q$a@143@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 11
(push) ; 11
; [else-branch: 182 | q$a@143@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 181 | !(0 <= q$a@143@01 && q$a@143@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@143@01)
    (<= q$a@143@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@143@01)
    (<= q$a@143@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@143@01)
    (<= q$a@143@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@143@01)
      (<= q$a@143@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@143@01)
    (<= q$a@143@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@143@01 Int)) (!
  (and
    (or (<= 0 q$a@143@01) (not (<= 0 q$a@143@01)))
    (=>
      (and
        (<= 0 q$a@143@01)
        (<= q$a@143@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@143@01)
        (<= q$a@143@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@143@01)
          (<= q$a@143@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@143@01)
        (<= q$a@143@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354-aux|)))
(pop) ; 6
(push) ; 6
; [else-branch: 179 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@143@01 Int)) (!
      (and
        (or (<= 0 q$a@143@01) (not (<= 0 q$a@143@01)))
        (=>
          (and
            (<= 0 q$a@143@01)
            (<= q$a@143@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@143@01)
            (<= q$a@143@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@143@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
              (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@143@01)
              (<= q$a@143@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@143@01)
            (<= q$a@143@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@143@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@143@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@143@01)
        (<= q$a@143@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@143@01)
        (ite
          (= q$a@143@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@143@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@671@60@671@354|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 183 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 183 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 6
; [then-branch: 183 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 183 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 184 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 184 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(declare-const $t@144@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [exec]
; assert ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | dead]
; [else-branch: 185 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 185 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 186 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 186 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 186 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 186 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 187 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 187 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 188 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 188 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 188 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 188 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 189 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 189 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 190 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 190 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 7
; [then-branch: 190 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(pop) ; 7
(push) ; 7
; [else-branch: 190 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 191 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 191 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 192 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 192 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@145@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 193 | !(0 <= q$a@145@01) | live]
; [else-branch: 193 | 0 <= q$a@145@01 | live]
(push) ; 10
; [then-branch: 193 | !(0 <= q$a@145@01)]
(assert (not (<= 0 q$a@145@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 193 | 0 <= q$a@145@01]
(assert (<= 0 q$a@145@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@145@01) (not (<= 0 q$a@145@01))))
(push) ; 9
; [then-branch: 194 | 0 <= q$a@145@01 && q$a@145@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 194 | !(0 <= q$a@145@01 && q$a@145@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 194 | 0 <= q$a@145@01 && q$a@145@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@145@01)
  (<= q$a@145@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 11
; [then-branch: 195 | q$a@145@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 195 | q$a@145@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 12
; [then-branch: 195 | q$a@145@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 12
(push) ; 12
; [else-branch: 195 | q$a@145@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 194 | !(0 <= q$a@145@01 && q$a@145@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@145@01)
    (<= q$a@145@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@145@01)
    (<= q$a@145@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@145@01)
    (<= q$a@145@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@145@01)
      (<= q$a@145@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@145@01)
    (<= q$a@145@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@145@01 Int)) (!
  (and
    (or (<= 0 q$a@145@01) (not (<= 0 q$a@145@01)))
    (=>
      (and
        (<= 0 q$a@145@01)
        (<= q$a@145@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@145@01)
        (<= q$a@145@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@145@01)
          (<= q$a@145@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@145@01)
        (<= q$a@145@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@145@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@145@01 Int)) (!
    (and
      (or (<= 0 q$a@145@01) (not (<= 0 q$a@145@01)))
      (=>
        (and
          (<= 0 q$a@145@01)
          (<= q$a@145@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@145@01)
          (<= q$a@145@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
            (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@145@01)
            (<= q$a@145@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@145@01)
          (<= q$a@145@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@145@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|))))
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@145@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@145@01)
        (<= q$a@145@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@145@01)
        (ite
          (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@145@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@145@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@145@01)
        (<= q$a@145@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@145@01)
        (ite
          (= q$a@145@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@145@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 196 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 196 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 196 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 196 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 197 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 197 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 184 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==
;   (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) == (($struct_get($struct_loc($self$2, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [exec]
; assert ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$2, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0 | live]
; [else-branch: 198 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 198 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0)))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 198 | $struct_get[Int]($struct_loc[Int]($self$0@0@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
    ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2)))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$2, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($struct_get($struct_loc($self$2, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 199 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 199 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 199 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 199 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 200 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 200 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 7
; [else-branch: 200 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 201 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 201 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 201 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 201 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 202 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 202 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 7
; [else-branch: 202 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 203 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
; [else-branch: 203 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
(push) ; 7
; [then-branch: 203 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
(pop) ; 7
(push) ; 7
; [else-branch: 203 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 204 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 204 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(push) ; 8
; [then-branch: 205 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))) | live]
; [else-branch: 205 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))) | live]
(push) ; 9
; [then-branch: 205 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 205 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$2@4@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$2, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 204 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | live]
; [else-branch: 206 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 206 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0))
(declare-const q$a@147@01 Int)
(push) ; 8
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 207 | !(0 <= q$a@147@01) | live]
; [else-branch: 207 | 0 <= q$a@147@01 | live]
(push) ; 10
; [then-branch: 207 | !(0 <= q$a@147@01)]
(assert (not (<= 0 q$a@147@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 207 | 0 <= q$a@147@01]
(assert (<= 0 q$a@147@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@147@01) (not (<= 0 q$a@147@01))))
(push) ; 9
; [then-branch: 208 | 0 <= q$a@147@01 && q$a@147@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 208 | !(0 <= q$a@147@01 && q$a@147@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 10
; [then-branch: 208 | 0 <= q$a@147@01 && q$a@147@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@147@01)
  (<= q$a@147@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$2, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(push) ; 11
; [then-branch: 209 | q$a@147@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
; [else-branch: 209 | q$a@147@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1)) | live]
(push) ; 12
; [then-branch: 209 | q$a@147@01 == $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$2, 0)): Int))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(pop) ; 12
(push) ; 12
; [else-branch: 209 | q$a@147@01 != $struct_get[Int]($struct_loc[Int]($self$2@4@01, 1))]
(assert (not (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
  (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 208 | !(0 <= q$a@147@01 && q$a@147@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@147@01)
    (<= q$a@147@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@147@01)
    (<= q$a@147@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@147@01)
    (<= q$a@147@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
      (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@147@01)
      (<= q$a@147@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@147@01)
    (<= q$a@147@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@147@01 Int)) (!
  (and
    (or (<= 0 q$a@147@01) (not (<= 0 q$a@147@01)))
    (=>
      (and
        (<= 0 q$a@147@01)
        (<= q$a@147@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@147@01)
        (<= q$a@147@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
          (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@147@01)
          (<= q$a@147@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@147@01)
        (<= q$a@147@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))
(pop) ; 7
(push) ; 7
; [else-branch: 206 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
    (forall ((q$a@147@01 Int)) (!
      (and
        (or (<= 0 q$a@147@01) (not (<= 0 q$a@147@01)))
        (=>
          (and
            (<= 0 q$a@147@01)
            (<= q$a@147@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@147@01)
            (<= q$a@147@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@147@01
                  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
              (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@147@01)
              (<= q$a@147@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@147@01)
            (<= q$a@147@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@147@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354-aux|)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@147@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@147@01)
        (<= q$a@147@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@147@01)
        (ite
          (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@147@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 3))
  (forall ((q$a@147@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@147@01)
        (<= q$a@147@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@147@01)
        (ite
          (= q$a@147@01 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) q$a@147@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@679@60@679@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$2, 10)): Bool) &&
;   ($struct_get($struct_loc($self$2, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$2, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$2, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool) && ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$2, 10)): Bool)
; [eval] $struct_loc($self$2, 10)
(push) ; 6
; [then-branch: 210 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)) | live]
; [else-branch: 210 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) | live]
(push) ; 7
; [then-branch: 210 | $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 210 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$2@4@01 10))))
; [eval] ($struct_get($struct_loc($self$2, 3)): Bool)
; [eval] $struct_loc($self$2, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [then-branch: 211 | !($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)) | dead]
; [else-branch: 211 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3))) | live]
(push) ; 6
; [else-branch: 211 | !(!($struct_get[Bool]($struct_loc[Int]($self$2@4@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$2@4@01, 3)))]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@148@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@149@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@150@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@151@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@152@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@153@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 ($Snap.combine ($Snap.first $t@154@01) ($Snap.second $t@154@01))))
(assert (= ($Snap.first $t@154@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 0))))
(assert (= ($Snap.second $t@154@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 ($Snap.combine ($Snap.first $t@155@01) ($Snap.second $t@155@01))))
(assert (= ($Snap.first $t@155@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 1))))
(assert (= ($Snap.second $t@155@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@156@01 $Snap)
(assert (= $t@156@01 ($Snap.combine ($Snap.first $t@156@01) ($Snap.second $t@156@01))))
(assert (= ($Snap.first $t@156@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2))))
(assert (= ($Snap.second $t@156@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@157@01 $Snap)
(assert (= $t@157@01 ($Snap.combine ($Snap.first $t@157@01) ($Snap.second $t@157@01))))
(assert (= ($Snap.first $t@157@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 5))))
(assert (= ($Snap.second $t@157@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 6)): Int) &&
;   ($struct_get($struct_loc($self$0, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 ($Snap.combine ($Snap.first $t@158@01) ($Snap.second $t@158@01))))
(assert (= ($Snap.first $t@158@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 6))))
(assert (= ($Snap.second $t@158@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@160@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 212 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@148@01, 8)), $q0@160@01)) | live]
; [else-branch: 212 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@148@01, 8)), $q0@160@01) | live]
(push) ; 5
; [then-branch: 212 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@148@01, 8)), $q0@160@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 212 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@148@01, 8)), $q0@160@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@160@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@696@11@696@354-aux|)))
(assert (forall (($q0@160@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@696@11@696@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q0@162@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@162@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@162@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $q0@162@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@697@11@697@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@164@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(push) ; 4
; [then-branch: 213 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@148@01, 9)), $q1@164@01)) | live]
; [else-branch: 213 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@148@01, 9)), $q1@164@01) | live]
(push) ; 5
; [then-branch: 213 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@148@01, 9)), $q1@164@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 213 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@148@01, 9)), $q1@164@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@164@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@698@11@698@354-aux|)))
(assert (forall (($q1@164@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@164@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@698@11@698@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $t@165@01 $Snap)
(assert (= $t@165@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $q1@166@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@166@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@166@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 9)) $q1@166@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@699@11@699@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 ($Snap.combine ($Snap.first $t@168@01) ($Snap.second $t@168@01))))
(assert (= ($Snap.first $t@168@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))))
(assert (= ($Snap.second $t@168@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@169@01 $Snap)
(assert (= $t@169@01 ($Snap.combine ($Snap.first $t@169@01) ($Snap.second $t@169@01))))
(assert (= ($Snap.first $t@169@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
(assert (= ($Snap.second $t@169@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 ($Snap.combine ($Snap.first $t@170@01) ($Snap.second $t@170@01))))
(assert (= ($Snap.first $t@170@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2))))
(assert (= ($Snap.second $t@170@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 ($Snap.combine ($Snap.first $t@171@01) ($Snap.second $t@171@01))))
(assert (= ($Snap.first $t@171@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 5))))
(assert (= ($Snap.second $t@171@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 6)): Int) &&
;   ($struct_get($struct_loc($self$1, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 ($Snap.combine ($Snap.first $t@172@01) ($Snap.second $t@172@01))))
(assert (= ($Snap.first $t@172@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 6))))
(assert (= ($Snap.second $t@172@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@173@01 $Snap)
(assert (= $t@173@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@174@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 214 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8)), $q0@174@01)) | live]
; [else-branch: 214 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8)), $q0@174@01) | live]
(push) ; 5
; [then-branch: 214 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8)), $q0@174@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 214 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8)), $q0@174@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@174@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@706@11@706@354-aux|)))
(assert (forall (($q0@174@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@174@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@706@11@706@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q0@176@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@176@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@176@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $q0@176@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@707@11@707@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@177@01 $Snap)
(assert (= $t@177@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@178@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(push) ; 4
; [then-branch: 215 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 9)), $q1@178@01)) | live]
; [else-branch: 215 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 9)), $q1@178@01) | live]
(push) ; 5
; [then-branch: 215 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 9)), $q1@178@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 215 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 9)), $q1@178@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@178@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@708@11@708@354-aux|)))
(assert (forall (($q1@178@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@178@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@708@11@708@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $t@179@01 $Snap)
(assert (= $t@179@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $q1@180@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@180@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@180@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) $q1@180@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@709@11@709@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@181@01 $Snap)
(assert (= $t@181@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@182@01 $Snap)
(assert (= $t@182@01 ($Snap.combine ($Snap.first $t@182@01) ($Snap.second $t@182@01))))
(assert (= ($Snap.first $t@182@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@152@01 0))))
(assert (= ($Snap.second $t@182@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@152@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@183@01 $Snap)
(assert (= $t@183@01 ($Snap.combine ($Snap.first $t@183@01) ($Snap.second $t@183@01))))
(assert (= ($Snap.first $t@183@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@152@01 1))))
(assert (= ($Snap.second $t@183@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@152@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@184@01 $Snap)
(assert (= $t@184@01 ($Snap.combine ($Snap.first $t@184@01) ($Snap.second $t@184@01))))
(assert (= ($Snap.first $t@184@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@152@01 2))))
(assert (= ($Snap.second $t@184@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@152@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@152@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@186@01 $Snap)
(assert (= $t@186@01 ($Snap.combine ($Snap.first $t@186@01) ($Snap.second $t@186@01))))
(assert (= ($Snap.first $t@186@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@152@01 4))))
(assert (= ($Snap.second $t@186@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@152@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@187@01 $Snap)
(assert (= $t@187@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@152@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@188@01 $Snap)
(assert (= $t@188@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@189@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@189@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $a@189@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@148@01 8)) $a@189@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) $a@189@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@717@11@717@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$0, 1)): Int)
(declare-const $t@190@01 $Snap)
(assert (= $t@190@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))
  ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==
;   (($struct_get($struct_loc($self$1, 2)): Int) == 0)
(declare-const $t@191@01 $Snap)
(assert (= $t@191@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) == (($struct_get($struct_loc($self$1, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$1, 2)): Int) ==
;   ($struct_get($struct_loc($self$0, 2)): Int)
(declare-const $t@192@01 $Snap)
(assert (= $t@192@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | $struct_get[Int]($struct_loc[Int]($self$0@148@01, 2)) != 0 | live]
; [else-branch: 216 | $struct_get[Int]($struct_loc[Int]($self$0@148@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 216 | $struct_get[Int]($struct_loc[Int]($self$0@148@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2)) 0)))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(pop) ; 4
(push) ; 4
; [else-branch: 216 | $struct_get[Int]($struct_loc[Int]($self$0@148@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2)) 0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2)) 0))))
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2))
    ($struct_get<Int> ($struct_loc<Int> $self$0@148@01 2)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
(declare-const $t@193@01 $Snap)
(assert (= $t@193@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 217 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 217 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 4
; [then-branch: 217 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 217 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 218 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 218 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 218 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) ==
;   0
(declare-const $t@194@01 $Snap)
(assert (= $t@194@01 $Snap.unit))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 219 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 219 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 4
; [then-branch: 219 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 219 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 220 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 220 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 4
(push) ; 4
; [else-branch: 220 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
(declare-const $t@195@01 $Snap)
(assert (= $t@195@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 221 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
; [else-branch: 221 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
(push) ; 4
; [then-branch: 221 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
(pop) ; 4
(push) ; 4
; [else-branch: 221 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 222 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 222 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(push) ; 5
; [then-branch: 223 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@150@01, 0))))) | live]
; [else-branch: 223 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@150@01, 0)))) | live]
(push) ; 6
; [then-branch: 223 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@150@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 223 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@150@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))))))
(pop) ; 4
(push) ; 4
; [else-branch: 222 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
      ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)) ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) :
;       0))
(declare-const $t@196@01 $Snap)
(assert (= $t@196@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 224 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 224 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
(declare-const q$a@197@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 225 | !(0 <= q$a@197@01) | live]
; [else-branch: 225 | 0 <= q$a@197@01 | live]
(push) ; 7
; [then-branch: 225 | !(0 <= q$a@197@01)]
(assert (not (<= 0 q$a@197@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 225 | 0 <= q$a@197@01]
(assert (<= 0 q$a@197@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@197@01) (not (<= 0 q$a@197@01))))
(push) ; 6
; [then-branch: 226 | 0 <= q$a@197@01 && q$a@197@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 226 | !(0 <= q$a@197@01 && q$a@197@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 226 | 0 <= q$a@197@01 && q$a@197@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@197@01)
  (<= q$a@197@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(push) ; 8
; [then-branch: 227 | q$a@197@01 == $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1)) | live]
; [else-branch: 227 | q$a@197@01 != $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1)) | live]
(push) ; 9
; [then-branch: 227 | q$a@197@01 == $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1))]
(assert (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 227 | q$a@197@01 != $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1))]
(assert (not (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
  (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 226 | !(0 <= q$a@197@01 && q$a@197@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@197@01)
    (<= q$a@197@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@197@01)
    (<= q$a@197@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@197@01)
    (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
      (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@197@01)
      (<= q$a@197@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@197@01)
    (<= q$a@197@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@197@01 Int)) (!
  (and
    (or (<= 0 q$a@197@01) (not (<= 0 q$a@197@01)))
    (=>
      (and
        (<= 0 q$a@197@01)
        (<= q$a@197@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@197@01)
        (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
          (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@197@01)
          (<= q$a@197@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@197@01)
        (<= q$a@197@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@197@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@724@60@724@354-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 224 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
    (forall ((q$a@197@01 Int)) (!
      (and
        (or (<= 0 q$a@197@01) (not (<= 0 q$a@197@01)))
        (=>
          (and
            (<= 0 q$a@197@01)
            (<= q$a@197@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@197@01)
            (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@197@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
              (=
                q$a@197@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@197@01)
              (<= q$a@197@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@197@01)
            (<= q$a@197@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@197@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@724@60@724@354-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (forall ((q$a@197@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@197@01)
        (<= q$a@197@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@197@01)
        (ite
          (= q$a@197@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@197@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@724@60@724@354|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$1, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 228 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 228 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 4
; [then-branch: 228 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 228 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 229 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 229 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(declare-const $t@198@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Bool) ==
;   (($struct_get($struct_loc($self$1, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) == (($struct_get($struct_loc($self$1, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
; [exec]
; assert ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$1, 2)): Int) ==
;   ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | $struct_get[Int]($struct_loc[Int]($self$1@150@01, 2)) != 0 | dead]
; [else-branch: 230 | $struct_get[Int]($struct_loc[Int]($self$1@150@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 230 | $struct_get[Int]($struct_loc[Int]($self$1@150@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 231 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 231 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 5
; [then-branch: 231 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 231 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 232 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 232 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [exec]
; assert !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 233 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 233 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 5
; [then-branch: 233 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 233 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 234 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 234 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [exec]
; assert ($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 235 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
; [else-branch: 235 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
(push) ; 5
; [then-branch: 235 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(pop) ; 5
(push) ; 5
; [else-branch: 235 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | dead]
; [else-branch: 236 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 236 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 237 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 237 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
(declare-const q$a@199@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 238 | !(0 <= q$a@199@01) | live]
; [else-branch: 238 | 0 <= q$a@199@01 | live]
(push) ; 8
; [then-branch: 238 | !(0 <= q$a@199@01)]
(assert (not (<= 0 q$a@199@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 238 | 0 <= q$a@199@01]
(assert (<= 0 q$a@199@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@199@01) (not (<= 0 q$a@199@01))))
(push) ; 7
; [then-branch: 239 | 0 <= q$a@199@01 && q$a@199@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 239 | !(0 <= q$a@199@01 && q$a@199@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 239 | 0 <= q$a@199@01 && q$a@199@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@199@01)
  (<= q$a@199@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(push) ; 9
; [then-branch: 240 | q$a@199@01 == $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1)) | live]
; [else-branch: 240 | q$a@199@01 != $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1)) | live]
(push) ; 10
; [then-branch: 240 | q$a@199@01 == $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1))]
(assert (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 10
(push) ; 10
; [else-branch: 240 | q$a@199@01 != $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1))]
(assert (not (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
  (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))
(pop) ; 8
(push) ; 8
; [else-branch: 239 | !(0 <= q$a@199@01 && q$a@199@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@199@01)
    (<= q$a@199@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@199@01)
    (<= q$a@199@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@199@01)
    (<= q$a@199@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
      (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@199@01)
      (<= q$a@199@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@199@01)
    (<= q$a@199@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@199@01 Int)) (!
  (and
    (or (<= 0 q$a@199@01) (not (<= 0 q$a@199@01)))
    (=>
      (and
        (<= 0 q$a@199@01)
        (<= q$a@199@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@199@01)
        (<= q$a@199@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
          (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@199@01)
          (<= q$a@199@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@199@01)
        (<= q$a@199@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@199@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@732@60@732@354-aux|)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (forall ((q$a@199@01 Int)) (!
    (and
      (or (<= 0 q$a@199@01) (not (<= 0 q$a@199@01)))
      (=>
        (and
          (<= 0 q$a@199@01)
          (<= q$a@199@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@199@01)
          (<= q$a@199@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (=
                q$a@199@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
            (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@199@01)
            (<= q$a@199@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@199@01)
          (<= q$a@199@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@199@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@732@60@732@354-aux|))))
(push) ; 4
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (forall ((q$a@199@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@199@01)
        (<= q$a@199@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@199@01)
        (ite
          (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@199@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@732@60@732@354|)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (forall ((q$a@199@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@199@01)
        (<= q$a@199@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@199@01)
        (ite
          (= q$a@199@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@199@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@732@60@732@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$1, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 241 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 241 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 5
; [then-branch: 241 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 241 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 242 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 242 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 229 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(declare-const $t@200@01 $Snap)
(assert (= $t@200@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$1, 1)): Int) ==
;   ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Bool) ==
;   (($struct_get($struct_loc($self$1, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) == (($struct_get($struct_loc($self$1, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
; [exec]
; assert ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc($self$1, 2)): Int) ==
;   ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0 ==> ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | $struct_get[Int]($struct_loc[Int]($self$1@150@01, 2)) != 0 | live]
; [else-branch: 243 | $struct_get[Int]($struct_loc[Int]($self$1@150@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 243 | $struct_get[Int]($struct_loc[Int]($self$1@150@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0)))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) == ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(push) ; 5
; [else-branch: 243 | $struct_get[Int]($struct_loc[Int]($self$1@150@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 2)) 0))))
; [exec]
; assert !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($struct_get($struct_loc($self$1, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($struct_get($struct_loc($self$1, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 244 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 244 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 5
; [then-branch: 244 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 244 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 245 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | dead]
; [else-branch: 245 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(push) ; 5
; [else-branch: 245 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [exec]
; assert !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) ==
;   0
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 246 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 246 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 5
; [then-branch: 246 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 246 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 247 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | dead]
; [else-branch: 247 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(push) ; 5
; [else-branch: 247 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 248 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
; [else-branch: 248 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
(push) ; 5
; [then-branch: 248 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
(pop) ; 5
(push) ; 5
; [else-branch: 248 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 249 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 249 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(push) ; 6
; [then-branch: 250 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@150@01, 0))))) | live]
; [else-branch: 250 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@150@01, 0)))) | live]
(push) ; 7
; [then-branch: 250 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@150@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))))))))
(pop) ; 7
(push) ; 7
; [else-branch: 250 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@150@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int]($self$1@150@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), ($struct_get($struct_loc($self$1, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))))))
(pop) ; 5
(push) ; 5
; [else-branch: 249 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | live]
; [else-branch: 251 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 251 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0))
(declare-const q$a@201@01 Int)
(push) ; 6
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 252 | !(0 <= q$a@201@01) | live]
; [else-branch: 252 | 0 <= q$a@201@01 | live]
(push) ; 8
; [then-branch: 252 | !(0 <= q$a@201@01)]
(assert (not (<= 0 q$a@201@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 252 | 0 <= q$a@201@01]
(assert (<= 0 q$a@201@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@201@01) (not (<= 0 q$a@201@01))))
(push) ; 7
; [then-branch: 253 | 0 <= q$a@201@01 && q$a@201@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 253 | !(0 <= q$a@201@01 && q$a@201@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 8
; [then-branch: 253 | 0 <= q$a@201@01 && q$a@201@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@201@01)
  (<= q$a@201@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] (q$a == ($struct_get($struct_loc($self$1, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(push) ; 9
; [then-branch: 254 | q$a@201@01 == $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1)) | live]
; [else-branch: 254 | q$a@201@01 != $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1)) | live]
(push) ; 10
; [then-branch: 254 | q$a@201@01 == $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1))]
(assert (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc($self$1, 0)): Int))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(pop) ; 10
(push) ; 10
; [else-branch: 254 | q$a@201@01 != $struct_get[Int]($struct_loc[Int]($self$1@150@01, 1))]
(assert (not (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
  (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))
(pop) ; 8
(push) ; 8
; [else-branch: 253 | !(0 <= q$a@201@01 && q$a@201@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@201@01)
    (<= q$a@201@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@201@01)
    (<= q$a@201@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@201@01)
    (<= q$a@201@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
      (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@201@01)
      (<= q$a@201@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@201@01)
    (<= q$a@201@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@201@01 Int)) (!
  (and
    (or (<= 0 q$a@201@01) (not (<= 0 q$a@201@01)))
    (=>
      (and
        (<= 0 q$a@201@01)
        (<= q$a@201@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@201@01)
        (<= q$a@201@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
          (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@201@01)
          (<= q$a@201@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@201@01)
        (<= q$a@201@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@201@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@732@60@732@354-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 251 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
    (forall ((q$a@201@01 Int)) (!
      (and
        (or (<= 0 q$a@201@01) (not (<= 0 q$a@201@01)))
        (=>
          (and
            (<= 0 q$a@201@01)
            (<= q$a@201@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@201@01)
            (<= q$a@201@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@201@01
                  ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))
              (=
                q$a@201@01
                ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@201@01)
              (<= q$a@201@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@201@01)
            (<= q$a@201@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@201@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@732@60@732@354-aux|)))))
; Joined path conditions
(push) ; 4
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (forall ((q$a@201@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@201@01)
        (<= q$a@201@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@201@01)
        (ite
          (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@201@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@732@60@732@354|)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 3))
  (forall ((q$a@201@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@201@01)
        (<= q$a@201@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@201@01)
        (ite
          (= q$a@201@01 ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> $self$1@150@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@150@01 9)) q$a@201@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@732@60@732@354|))))
; [exec]
; assert !($struct_get($struct_loc($self$1, 10)): Bool) &&
;   ($struct_get($struct_loc($self$1, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc($self$1, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc($self$1, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool) && ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] !($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] ($struct_get($struct_loc($self$1, 10)): Bool)
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 255 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)) | live]
; [else-branch: 255 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) | live]
(push) ; 5
; [then-branch: 255 | $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10)))
(pop) ; 5
(push) ; 5
; [else-branch: 255 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> $self$1@150@01 10))))
; [eval] ($struct_get($struct_loc($self$1, 3)): Bool)
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [then-branch: 256 | !($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)) | dead]
; [else-branch: 256 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3))) | live]
(push) ; 4
; [else-branch: 256 | !(!($struct_get[Bool]($struct_loc[Int]($self$1@150@01, 10))) && $struct_get[Bool]($struct_loc[Int]($self$1@150@01, 3)))]
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@202@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@203@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@204@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@205@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@206@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@207@01 Int)
; [exec]
; var block: $Struct
(declare-const block@208@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@209@01 $Snap)
(assert (= $t@209@01 ($Snap.combine ($Snap.first $t@209@01) ($Snap.second $t@209@01))))
(assert (= ($Snap.first $t@209@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@202@01 0))))
(assert (= ($Snap.second $t@209@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@202@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@210@01 $Snap)
(assert (= $t@210@01 ($Snap.combine ($Snap.first $t@210@01) ($Snap.second $t@210@01))))
(assert (= ($Snap.first $t@210@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@202@01 1))))
(assert (= ($Snap.second $t@210@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@202@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 ($Snap.combine ($Snap.first $t@211@01) ($Snap.second $t@211@01))))
(assert (= ($Snap.first $t@211@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@202@01 2))))
(assert (= ($Snap.second $t@211@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@202@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 ($Snap.combine ($Snap.first $t@212@01) ($Snap.second $t@212@01))))
(assert (= ($Snap.first $t@212@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@202@01 5))))
(assert (= ($Snap.second $t@212@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@202@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@213@01 $Snap)
(assert (= $t@213@01 ($Snap.combine ($Snap.first $t@213@01) ($Snap.second $t@213@01))))
(assert (= ($Snap.first $t@213@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@202@01 6))))
(assert (= ($Snap.second $t@213@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@202@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@215@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 257 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 8)), $q0@215@01)) | live]
; [else-branch: 257 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 8)), $q0@215@01) | live]
(push) ; 5
; [then-branch: 257 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 8)), $q0@215@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 257 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 8)), $q0@215@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@215@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@750@11@750@345-aux|)))
(assert (forall (($q0@215@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@750@11@750@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@216@01 $Snap)
(assert (= $t@216@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q0@217@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@217@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@217@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) $q0@217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@751@11@751@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@219@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 258 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 9)), $q1@219@01)) | live]
; [else-branch: 258 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 9)), $q1@219@01) | live]
(push) ; 5
; [then-branch: 258 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 9)), $q1@219@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 258 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 9)), $q1@219@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@219@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@752@11@752@345-aux|)))
(assert (forall (($q1@219@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@219@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@752@11@752@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q1@221@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@221@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@221@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) $q1@221@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@753@11@753@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@202@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 ($Snap.combine ($Snap.first $t@223@01) ($Snap.second $t@223@01))))
(assert (= ($Snap.first $t@223@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 0))))
(assert (= ($Snap.second $t@223@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 ($Snap.combine ($Snap.first $t@224@01) ($Snap.second $t@224@01))))
(assert (= ($Snap.first $t@224@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 1))))
(assert (= ($Snap.second $t@224@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 2)): Int) &&
;   ($struct_get($struct_loc($pre_self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 ($Snap.combine ($Snap.first $t@225@01) ($Snap.second $t@225@01))))
(assert (= ($Snap.first $t@225@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 2))))
(assert (= ($Snap.second $t@225@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 5)): Int) &&
;   ($struct_get($struct_loc($pre_self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@226@01 $Snap)
(assert (= $t@226@01 ($Snap.combine ($Snap.first $t@226@01) ($Snap.second $t@226@01))))
(assert (= ($Snap.first $t@226@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 5))))
(assert (= ($Snap.second $t@226@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 6)): Int) &&
;   ($struct_get($struct_loc($pre_self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 ($Snap.combine ($Snap.first $t@227@01) ($Snap.second $t@227@01))))
(assert (= ($Snap.first $t@227@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] $struct_loc($pre_self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 6))))
(assert (= ($Snap.second $t@227@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] $struct_loc($pre_self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@228@01 $Snap)
(assert (= $t@228@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@229@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(push) ; 4
; [then-branch: 259 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@204@01, 8)), $q0@229@01)) | live]
; [else-branch: 259 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@204@01, 8)), $q0@229@01) | live]
(push) ; 5
; [then-branch: 259 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@204@01, 8)), $q0@229@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 259 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@204@01, 8)), $q0@229@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@229@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@760@11@760@360-aux|)))
(assert (forall (($q0@229@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@229@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@760@11@760@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $t@230@01 $Snap)
(assert (= $t@230@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $q0@231@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@231@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@231@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 8)) $q0@231@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@761@11@761@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@232@01 $Snap)
(assert (= $t@232@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@233@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(push) ; 4
; [then-branch: 260 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@204@01, 9)), $q1@233@01)) | live]
; [else-branch: 260 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@204@01, 9)), $q1@233@01) | live]
(push) ; 5
; [then-branch: 260 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@204@01, 9)), $q1@233@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 260 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@204@01, 9)), $q1@233@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@233@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@762@11@762@360-aux|)))
(assert (forall (($q1@233@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@233@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@762@11@762@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int))
(declare-const $t@234@01 $Snap)
(assert (= $t@234@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int))
(declare-const $q1@235@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@235@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@235@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@204@01 9)) $q1@235@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@763@11@763@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@236@01 $Snap)
(assert (= $t@236@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@204@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 ($Snap.combine ($Snap.first $t@237@01) ($Snap.second $t@237@01))))
(assert (= ($Snap.first $t@237@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@208@01 0))))
(assert (= ($Snap.second $t@237@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@208@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@238@01 $Snap)
(assert (= $t@238@01 ($Snap.combine ($Snap.first $t@238@01) ($Snap.second $t@238@01))))
(assert (= ($Snap.first $t@238@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@208@01 1))))
(assert (= ($Snap.second $t@238@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@208@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 ($Snap.combine ($Snap.first $t@239@01) ($Snap.second $t@239@01))))
(assert (= ($Snap.first $t@239@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@208@01 2))))
(assert (= ($Snap.second $t@239@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@208@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@240@01 $Snap)
(assert (= $t@240@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@208@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@241@01 $Snap)
(assert (= $t@241@01 ($Snap.combine ($Snap.first $t@241@01) ($Snap.second $t@241@01))))
(assert (= ($Snap.first $t@241@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@208@01 4))))
(assert (= ($Snap.second $t@241@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@208@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@242@01 $Snap)
(assert (= $t@242@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@208@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@207@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@245@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@246@01 $Snap)
(assert (= $t@246@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
(declare-const $t@247@01 $Snap)
(assert (= $t@247@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@202@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@248@01 $Snap)
(assert (= $t@248@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@202@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@202@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | $struct_get[Int]($struct_loc[Int](self@202@01, 2)) != 0 | live]
; [else-branch: 261 | $struct_get[Int]($struct_loc[Int](self@202@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 261 | $struct_get[Int]($struct_loc[Int](self@202@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@202@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 4
(push) ; 4
; [else-branch: 261 | $struct_get[Int]($struct_loc[Int](self@202@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@202@01 2)) 0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> self@202@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> self@202@01 2)) 0))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@249@01 $Snap)
(assert (= $t@249@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 262 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10)) | live]
; [else-branch: 262 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) | live]
(push) ; 4
; [then-branch: 262 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 262 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3)) | live]
; [else-branch: 263 | !(!($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 263 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 263 | !(!($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@202@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
(declare-const $t@250@01 $Snap)
(assert (= $t@250@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 264 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10)) | live]
; [else-branch: 264 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) | live]
(push) ; 4
; [then-branch: 264 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 264 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3)) | live]
; [else-branch: 265 | !(!($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 265 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 4
(push) ; 4
; [else-branch: 265 | !(!($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@251@01 $Snap)
(assert (= $t@251@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 266 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) | live]
; [else-branch: 266 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10)) | live]
(push) ; 4
; [then-branch: 266 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))))
(pop) ; 4
(push) ; 4
; [else-branch: 266 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3)) | live]
; [else-branch: 267 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 267 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
; [then-branch: 268 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@202@01, 0))))) | live]
; [else-branch: 268 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@202@01, 0)))) | live]
(push) ; 6
; [then-branch: 268 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@202@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 268 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@202@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@202@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0)))))))))
(pop) ; 4
(push) ; 4
; [else-branch: 267 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
      ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 8)) ($struct_get<Int> ($struct_loc<Int> self@202@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
(declare-const $t@252@01 $Snap)
(assert (= $t@252@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | $struct_get[Bool]($struct_loc[Int](self@202@01, 3)) | live]
; [else-branch: 269 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 269 | $struct_get[Bool]($struct_loc[Int](self@202@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@253@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 270 | !(0 <= q$a@253@01) | live]
; [else-branch: 270 | 0 <= q$a@253@01 | live]
(push) ; 7
; [then-branch: 270 | !(0 <= q$a@253@01)]
(assert (not (<= 0 q$a@253@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 270 | 0 <= q$a@253@01]
(assert (<= 0 q$a@253@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@253@01) (not (<= 0 q$a@253@01))))
(push) ; 6
; [then-branch: 271 | 0 <= q$a@253@01 && q$a@253@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 271 | !(0 <= q$a@253@01 && q$a@253@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 271 | 0 <= q$a@253@01 && q$a@253@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@253@01)
  (<= q$a@253@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 8
; [then-branch: 272 | q$a@253@01 == $struct_get[Int]($struct_loc[Int](self@202@01, 1)) | live]
; [else-branch: 272 | q$a@253@01 != $struct_get[Int]($struct_loc[Int](self@202@01, 1)) | live]
(push) ; 9
; [then-branch: 272 | q$a@253@01 == $struct_get[Int]($struct_loc[Int](self@202@01, 1))]
(assert (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 272 | q$a@253@01 != $struct_get[Int]($struct_loc[Int](self@202@01, 1))]
(assert (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1))))
  (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 271 | !(0 <= q$a@253@01 && q$a@253@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@253@01)
    (<= q$a@253@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@253@01)
    (<= q$a@253@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@253@01)
    (<= q$a@253@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1))))
      (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@253@01)
      (<= q$a@253@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@253@01)
    (<= q$a@253@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@253@01 Int)) (!
  (and
    (or (<= 0 q$a@253@01) (not (<= 0 q$a@253@01)))
    (=>
      (and
        (<= 0 q$a@253@01)
        (<= q$a@253@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@253@01)
        (<= q$a@253@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1))))
          (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@253@01)
          (<= q$a@253@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@253@01)
        (<= q$a@253@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) q$a@253@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@779@57@779@342-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 269 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))
    (forall ((q$a@253@01 Int)) (!
      (and
        (or (<= 0 q$a@253@01) (not (<= 0 q$a@253@01)))
        (=>
          (and
            (<= 0 q$a@253@01)
            (<= q$a@253@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@253@01)
            (<= q$a@253@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@253@01
                  ($struct_get<Int> ($struct_loc<Int> self@202@01 1))))
              (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@253@01)
              (<= q$a@253@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@253@01)
            (<= q$a@253@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) q$a@253@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@779@57@779@342-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))
  (forall ((q$a@253@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@253@01)
        (<= q$a@253@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) q$a@253@01)
        (ite
          (= q$a@253@01 ($struct_get<Int> ($struct_loc<Int> self@202@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@202@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@202@01 9)) q$a@253@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@779@57@779@342|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc(self, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 273 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10)) | live]
; [else-branch: 273 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) | live]
(push) ; 4
; [then-branch: 273 | $struct_get[Bool]($struct_loc[Int](self@202@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 273 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3)) | live]
; [else-branch: 274 | !(!($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 274 | !($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@202@01 3))))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@254@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@255@01 $Struct)
(assert (=
  self@255@01
  ($struct_set<$Struct> self@202@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@202@01 5))
    $havoc@207@01))))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 274 | !(!($struct_get[Bool]($struct_loc[Int](self@202@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@202@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@202@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@202@01 3)))))
(declare-const $t@256@01 $Snap)
(assert (= $t@256@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@257@01 $Struct)
(assert (=
  self@257@01
  ($struct_set<$Struct> self@202@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@202@01 5))
    $havoc@207@01))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const $succ@258@01 Bool)
(declare-const $succ@259@01 Bool)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@260@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@261@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@262@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@263@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@264@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@265@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@266@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@267@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@268@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@269@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@270@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@271@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@272@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@273@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@274@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@275@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@276@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@277@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@278@01 $Snap)
(assert (= $t@278@01 ($Snap.combine ($Snap.first $t@278@01) ($Snap.second $t@278@01))))
(assert (= ($Snap.first $t@278@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@264@01 0))))
(assert (= ($Snap.second $t@278@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@264@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@279@01 $Snap)
(assert (= $t@279@01 ($Snap.combine ($Snap.first $t@279@01) ($Snap.second $t@279@01))))
(assert (= ($Snap.first $t@279@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@264@01 1))))
(assert (= ($Snap.second $t@279@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@264@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@280@01 $Snap)
(assert (= $t@280@01 ($Snap.combine ($Snap.first $t@280@01) ($Snap.second $t@280@01))))
(assert (= ($Snap.first $t@280@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@264@01 2))))
(assert (= ($Snap.second $t@280@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@264@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@281@01 $Snap)
(assert (= $t@281@01 ($Snap.combine ($Snap.first $t@281@01) ($Snap.second $t@281@01))))
(assert (= ($Snap.first $t@281@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@264@01 5))))
(assert (= ($Snap.second $t@281@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@264@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@282@01 $Snap)
(assert (= $t@282@01 ($Snap.combine ($Snap.first $t@282@01) ($Snap.second $t@282@01))))
(assert (= ($Snap.first $t@282@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@264@01 6))))
(assert (= ($Snap.second $t@282@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@264@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@283@01 $Snap)
(assert (= $t@283@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@284@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 275 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@264@01, 8)), $q0@284@01)) | live]
; [else-branch: 275 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@264@01, 8)), $q0@284@01) | live]
(push) ; 5
; [then-branch: 275 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@264@01, 8)), $q0@284@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 275 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@264@01, 8)), $q0@284@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@284@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@813@11@813@345-aux|)))
(assert (forall (($q0@284@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@284@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@813@11@813@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@285@01 $Snap)
(assert (= $t@285@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q0@286@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@286@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@286@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 8)) $q0@286@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@814@11@814@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@287@01 $Snap)
(assert (= $t@287@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@288@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 276 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@264@01, 9)), $q1@288@01)) | live]
; [else-branch: 276 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@264@01, 9)), $q1@288@01) | live]
(push) ; 5
; [then-branch: 276 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@264@01, 9)), $q1@288@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 276 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@264@01, 9)), $q1@288@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@288@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@815@11@815@345-aux|)))
(assert (forall (($q1@288@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@288@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@815@11@815@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q1@290@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@290@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@290@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@264@01 9)) $q1@290@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@816@11@816@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@264@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@292@01 $Snap)
(assert (= $t@292@01 ($Snap.combine ($Snap.first $t@292@01) ($Snap.second $t@292@01))))
(assert (= ($Snap.first $t@292@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@292@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@293@01 $Snap)
(assert (= $t@293@01 ($Snap.combine ($Snap.first $t@293@01) ($Snap.second $t@293@01))))
(assert (= ($Snap.first $t@293@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@261@01 0))))
(assert (= ($Snap.second $t@293@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@261@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@294@01 $Snap)
(assert (= $t@294@01 ($Snap.combine ($Snap.first $t@294@01) ($Snap.second $t@294@01))))
(assert (= ($Snap.first $t@294@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@261@01 1))))
(assert (= ($Snap.second $t@294@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@261@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@295@01 $Snap)
(assert (= $t@295@01 ($Snap.combine ($Snap.first $t@295@01) ($Snap.second $t@295@01))))
(assert (= ($Snap.first $t@295@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@261@01 2))))
(assert (= ($Snap.second $t@295@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@261@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@296@01 $Snap)
(assert (= $t@296@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@261@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 ($Snap.combine ($Snap.first $t@297@01) ($Snap.second $t@297@01))))
(assert (= ($Snap.first $t@297@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@261@01 4))))
(assert (= ($Snap.second $t@297@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@261@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@298@01 $Snap)
(assert (= $t@298@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@261@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@299@01 $Snap)
(assert (= $t@299@01 ($Snap.combine ($Snap.first $t@299@01) ($Snap.second $t@299@01))))
(assert (= ($Snap.first $t@299@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@260@01 0))))
(assert (= ($Snap.second $t@299@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@260@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@300@01 $Snap)
(assert (= $t@300@01 ($Snap.combine ($Snap.first $t@300@01) ($Snap.second $t@300@01))))
(assert (= ($Snap.first $t@300@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
(assert (= ($Snap.second $t@300@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@301@01 $Snap)
(assert (= $t@301@01 ($Snap.combine ($Snap.first $t@301@01) ($Snap.second $t@301@01))))
(assert (= ($Snap.first $t@301@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@260@01 2))))
(assert (= ($Snap.second $t@301@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@260@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@260@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@303@01 $Snap)
(assert (= $t@303@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@260@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, 0, false, false, 0, 0, false, ($map_init(0): $Map[Int, Int]),
;   ($map_init(0): $Map[Int, Int]), false)
; [eval] s$struct$self$init(0, 0, 0, false, false, 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@304@01 $Struct)
(assert (=
  self@304@01
  (s$struct$self$init<$Struct> 0 0 0 false false 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@305@01 $Snap)
(assert (= $t@305@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@274@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@306@01 $Struct)
(assert (=
  self@306@01
  ($struct_set<$Struct> self@304@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@304@01 5))
    l$havoc@274@01))))
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@307@01 $Struct)
(assert (=
  self@307@01
  ($struct_set<$Struct> self@306@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@306@01 5))
    ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))))
; [exec]
; self := ($struct_set(self, 9, ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 9, ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@308@01 $Struct)
(assert (=
  self@308@01
  ($struct_set<$Struct> self@307@01 9 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@307@01 9)) ($struct_get<Int> ($struct_loc<Int> msg@260@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@307@01 9)) ($struct_get<Int> ($struct_loc<Int> msg@260@01 0)))
    ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))))))
; [eval] 2 == 0
; [then-branch: 277 | False | dead]
; [else-branch: 277 | True | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 277 | True]
(pop) ; 3
; [eval] !(2 == 0)
; [eval] 2 == 0
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | True | live]
; [else-branch: 278 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 278 | True]
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) < 0
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) < 0 | dead]
; [else-branch: 279 | !($mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) < 0) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 279 | !($mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) < 0)]
(assert (not
  (<
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0)))
(pop) ; 4
; [eval] !($mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) < 0)
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) < 0
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (<
  ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | !($mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) < 0) | live]
; [else-branch: 280 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) < 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 280 | !($mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) < 0)]
(assert (not
  (<
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0)))
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 281 | !($mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 281 | !($mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 5
; [eval] !($mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 282 | !($mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 282 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 282 | !($mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !($mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) == 0)
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) == 0
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2))
  0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) != 0 | live]
; [else-branch: 283 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) == 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 283 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) != 0]
(assert (not
  (=
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | True | live]
; [else-branch: 284 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 284 | True]
; [exec]
; $old_self := self
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | True | live]
; [else-branch: 285 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 285 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@276@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@310@01 $Struct)
(assert (=
  self@310@01
  ($struct_set<$Struct> self@264@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@264@01 5))
    l$havoc$1@276@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | True | live]
; [else-branch: 286 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 286 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 10
; [then-branch: 287 | False | dead]
; [else-branch: 287 | True | live]
(push) ; 11
; [else-branch: 287 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
(push) ; 10
; [then-branch: 288 | False | dead]
; [else-branch: 288 | True | live]
(push) ; 11
; [else-branch: 288 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
(push) ; 10
; [then-branch: 289 | False | dead]
; [else-branch: 289 | True | live]
(push) ; 11
; [else-branch: 289 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(push) ; 10
; [then-branch: 290 | False | dead]
; [else-branch: 290 | True | live]
(push) ; 11
; [else-branch: 290 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
(push) ; 10
; [then-branch: 291 | False | dead]
; [else-branch: 291 | True | live]
(push) ; 11
; [else-branch: 291 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $succ ==> ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(push) ; 10
; [then-branch: 292 | False | dead]
; [else-branch: 292 | True | live]
(push) ; 11
; [else-branch: 292 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(push) ; 10
; [then-branch: 293 | False | dead]
; [else-branch: 293 | True | live]
(push) ; 11
; [else-branch: 293 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
(push) ; 10
; [then-branch: 294 | False | dead]
; [else-branch: 294 | True | live]
(push) ; 11
; [else-branch: 294 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
; [eval] !$first_public_state
; [then-branch: 295 | False | dead]
; [else-branch: 295 | True | live]
(push) ; 9
; [else-branch: 295 | True]
(pop) ; 9
(pop) ; 8
; [then-branch: 296 | False | dead]
; [else-branch: 296 | True | live]
(push) ; 8
; [else-branch: 296 | True]
(pop) ; 8
(pop) ; 7
; [eval] !$first_public_state
; [then-branch: 297 | False | dead]
; [else-branch: 297 | True | live]
(push) ; 7
; [else-branch: 297 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 283 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) == 0]
(assert (=
  ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2))
  0))
(pop) ; 6
; [eval] !!($mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) == 0)
; [eval] !($mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) == 0)
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2) == 0
; [eval] $mod($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) % 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2))
  0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) == 0 | live]
; [else-branch: 298 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 298 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) == 0]
(assert (=
  ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2))
  0))
; [eval] 2 == 0
; [then-branch: 299 | False | dead]
; [else-branch: 299 | True | live]
(push) ; 7
; [else-branch: 299 | True]
(pop) ; 7
; [eval] !(2 == 0)
; [eval] 2 == 0
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | True | live]
; [else-branch: 300 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 300 | True]
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2) < 0
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) < 0 | dead]
; [else-branch: 301 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) < 0) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 301 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0)))
(pop) ; 8
; [eval] !($div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2) < 0)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2) < 0
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2))
  0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) < 0) | live]
; [else-branch: 302 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) < 0 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 302 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0)))
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 303 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 303 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 9
; [eval] !($div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(push) ; 9
(set-option :timeout 10)
(assert (not (>
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 304 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 304 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 0, $unwrap($wrap($div($unwrap($wrap(($struct_get($struct_loc(msg,
;   1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \
;   2)))): $Struct)
; [eval] ($struct_set(self, 0, $unwrap($wrap($div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2)))): $Struct)
; [eval] $unwrap($wrap($div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2)))
; [eval] $wrap($div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2))
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))), 2, $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int))) \ 2
; [eval] $unwrap($wrap(($struct_get($struct_loc(msg, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@311@01 $Struct)
(assert (=
  self@311@01
  ($struct_set<$Struct> self@308@01 0 ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
    2)))))))
; [exec]
; self := ($struct_set(self, 1, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_set(self, 1, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@312@01 $Struct)
(assert (=
  self@312@01
  ($struct_set<$Struct> self@311@01 1 ($struct_get<Int> ($struct_loc<Int> msg@260@01 0)))))
; [exec]
; self := ($struct_set(self, 3, true): $Struct)
; [eval] ($struct_set(self, 3, true): $Struct)
(declare-const self@313@01 $Struct)
(assert (= self@313@01 ($struct_set<$Struct> self@312@01 3 true)))
; [exec]
; label return
(push) ; 10
(set-option :timeout 10)
(assert (not (not $out_of_gas@275@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not $out_of_gas@275@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | $out_of_gas@275@01 | live]
; [else-branch: 305 | !($out_of_gas@275@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 305 | $out_of_gas@275@01]
(assert $out_of_gas@275@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 306 | True | live]
; [else-branch: 306 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 306 | True]
; [exec]
; $old_self := self
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | True | live]
; [else-branch: 307 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 307 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@314@01 $Snap)
(assert (= $t@314@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@276@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@315@01 $Struct)
(assert (=
  self@315@01
  ($struct_set<$Struct> self@264@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@264@01 5))
    l$havoc$1@276@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | True | live]
; [else-branch: 308 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 308 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 14
; [then-branch: 309 | False | dead]
; [else-branch: 309 | True | live]
(push) ; 15
; [else-branch: 309 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
(push) ; 14
; [then-branch: 310 | False | dead]
; [else-branch: 310 | True | live]
(push) ; 15
; [else-branch: 310 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
(push) ; 14
; [then-branch: 311 | False | dead]
; [else-branch: 311 | True | live]
(push) ; 15
; [else-branch: 311 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(push) ; 14
; [then-branch: 312 | False | dead]
; [else-branch: 312 | True | live]
(push) ; 15
; [else-branch: 312 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
(push) ; 14
; [then-branch: 313 | False | dead]
; [else-branch: 313 | True | live]
(push) ; 15
; [else-branch: 313 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $succ ==> ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(push) ; 14
; [then-branch: 314 | False | dead]
; [else-branch: 314 | True | live]
(push) ; 15
; [else-branch: 314 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(push) ; 14
; [then-branch: 315 | False | dead]
; [else-branch: 315 | True | live]
(push) ; 15
; [else-branch: 315 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
(push) ; 14
; [then-branch: 316 | False | dead]
; [else-branch: 316 | True | live]
(push) ; 15
; [else-branch: 316 | True]
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
; [eval] !$first_public_state
; [then-branch: 317 | False | dead]
; [else-branch: 317 | True | live]
(push) ; 13
; [else-branch: 317 | True]
(pop) ; 13
(pop) ; 12
; [then-branch: 318 | False | dead]
; [else-branch: 318 | True | live]
(push) ; 12
; [else-branch: 318 | True]
(pop) ; 12
(pop) ; 11
; [eval] !$first_public_state
; [then-branch: 319 | False | dead]
; [else-branch: 319 | True | live]
(push) ; 11
; [else-branch: 319 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 305 | !($out_of_gas@275@01)]
(assert (not $out_of_gas@275@01))
(pop) ; 10
; [eval] !$out_of_gas
(push) ; 10
(set-option :timeout 10)
(assert (not $out_of_gas@275@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not $out_of_gas@275@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | !($out_of_gas@275@01) | live]
; [else-branch: 320 | $out_of_gas@275@01 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 320 | !($out_of_gas@275@01)]
(assert (not $out_of_gas@275@01))
; [exec]
; label end
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | True | live]
; [else-branch: 321 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 321 | True]
; [exec]
; $old_self := self
; [eval] !$succ
; [then-branch: 322 | False | dead]
; [else-branch: 322 | True | live]
(push) ; 12
; [else-branch: 322 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | True | live]
; [else-branch: 323 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 323 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@276@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@317@01 $Struct)
(assert (=
  self@317@01
  ($struct_set<$Struct> self@313@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@313@01 5))
    l$havoc$1@276@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | True | live]
; [else-branch: 324 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 324 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | True | live]
; [else-branch: 325 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 325 | True]
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | True | live]
; [else-branch: 326 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 326 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 15
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@317@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@317@01 2)) 0)))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $succ ==> ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | True | live]
; [else-branch: 327 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 327 | True]
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@317@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | $struct_get[Int]($struct_loc[Int](self@317@01, 2)) != 0 | dead]
; [else-branch: 328 | $struct_get[Int]($struct_loc[Int](self@317@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 328 | $struct_get[Int]($struct_loc[Int](self@317@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@317@01 2)) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@317@01 2)) 0))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@317@01 2)) 0))
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | True | live]
; [else-branch: 329 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 329 | True]
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 16
; [then-branch: 330 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10)) | live]
; [else-branch: 330 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) | live]
(push) ; 17
; [then-branch: 330 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
(pop) ; 17
(push) ; 17
; [else-branch: 330 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3)) | live]
; [else-branch: 331 | !(!($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 331 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (and
  (or
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
(push) ; 14
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@317@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@317@01 0)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@317@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@317@01 0))))))))
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | True | live]
; [else-branch: 332 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 332 | True]
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 16
; [then-branch: 333 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10)) | live]
; [else-branch: 333 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) | live]
(push) ; 17
; [then-branch: 333 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
(pop) ; 17
(push) ; 17
; [else-branch: 333 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10)))]
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 334 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3)) | live]
; [else-branch: 334 | !(!($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 334 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
(push) ; 14
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 8)))
    0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 8)))
    0)))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $succ ==> ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 335 | True | live]
; [else-branch: 335 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 335 | True]
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 16
; [then-branch: 336 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) | live]
; [else-branch: 336 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10)) | live]
(push) ; 17
; [then-branch: 336 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10)))]
(pop) ; 17
(push) ; 17
; [else-branch: 336 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 337 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3)) | dead]
; [else-branch: 337 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3))) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 337 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (and
  (or
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))))
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> self@317@01 10))
      ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))))
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 338 | True | live]
; [else-branch: 338 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 338 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 339 | $struct_get[Bool]($struct_loc[Int](self@317@01, 3)) | live]
; [else-branch: 339 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 339 | $struct_get[Bool]($struct_loc[Int](self@317@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@318@01 Int)
(push) ; 18
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 19
; [then-branch: 340 | !(0 <= q$a@318@01) | live]
; [else-branch: 340 | 0 <= q$a@318@01 | live]
(push) ; 20
; [then-branch: 340 | !(0 <= q$a@318@01)]
(assert (not (<= 0 q$a@318@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 340 | 0 <= q$a@318@01]
(assert (<= 0 q$a@318@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@318@01) (not (<= 0 q$a@318@01))))
(push) ; 19
; [then-branch: 341 | 0 <= q$a@318@01 && q$a@318@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 341 | !(0 <= q$a@318@01 && q$a@318@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 20
; [then-branch: 341 | 0 <= q$a@318@01 && q$a@318@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@318@01)
  (<= q$a@318@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 21
; [then-branch: 342 | q$a@318@01 == $struct_get[Int]($struct_loc[Int](self@317@01, 1)) | live]
; [else-branch: 342 | q$a@318@01 != $struct_get[Int]($struct_loc[Int](self@317@01, 1)) | live]
(push) ; 22
; [then-branch: 342 | q$a@318@01 == $struct_get[Int]($struct_loc[Int](self@317@01, 1))]
(assert (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 22
(push) ; 22
; [else-branch: 342 | q$a@318@01 != $struct_get[Int]($struct_loc[Int](self@317@01, 1))]
(assert (not (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))
  (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1)))))
(pop) ; 20
(push) ; 20
; [else-branch: 341 | !(0 <= q$a@318@01 && q$a@318@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@318@01)
    (<= q$a@318@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@318@01)
    (<= q$a@318@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@318@01)
    (<= q$a@318@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))
      (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@318@01)
      (<= q$a@318@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@318@01)
    (<= q$a@318@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 18
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@318@01 Int)) (!
  (and
    (or (<= 0 q$a@318@01) (not (<= 0 q$a@318@01)))
    (=>
      (and
        (<= 0 q$a@318@01)
        (<= q$a@318@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@318@01)
        (<= q$a@318@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))
          (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@318@01)
          (<= q$a@318@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@318@01)
        (<= q$a@318@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 9)) q$a@318@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@910@67@910@352-aux|)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))
  (forall ((q$a@318@01 Int)) (!
    (and
      (or (<= 0 q$a@318@01) (not (<= 0 q$a@318@01)))
      (=>
        (and
          (<= 0 q$a@318@01)
          (<= q$a@318@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@318@01)
          (<= q$a@318@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))
            (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@318@01)
            (<= q$a@318@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@318@01)
          (<= q$a@318@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 9)) q$a@318@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@910@67@910@352-aux|))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))
  (forall ((q$a@318@01 Int)) (!
    (and
      (or (<= 0 q$a@318@01) (not (<= 0 q$a@318@01)))
      (=>
        (and
          (<= 0 q$a@318@01)
          (<= q$a@318@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@318@01)
          (<= q$a@318@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))
            (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@318@01)
            (<= q$a@318@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@318@01)
          (<= q$a@318@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 9)) q$a@318@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@910@67@910@352-aux|))))
(push) ; 14
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))
  (forall ((q$a@318@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@318@01)
        (<= q$a@318@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 9)) q$a@318@01)
        (ite
          (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@317@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 9)) q$a@318@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@910@67@910@352|)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))
  (forall ((q$a@318@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@318@01)
        (<= q$a@318@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 9)) q$a@318@01)
        (ite
          (= q$a@318@01 ($struct_get<Int> ($struct_loc<Int> self@317@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@317@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@317@01 9)) q$a@318@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@910@67@910@352|))))
; [exec]
; assert $succ ==>
;   !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] $succ ==> !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | True | live]
; [else-branch: 343 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 343 | True]
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 16
; [then-branch: 344 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10)) | live]
; [else-branch: 344 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) | live]
(push) ; 17
; [then-branch: 344 | $struct_get[Bool]($struct_loc[Int](self@317@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
(pop) ; 17
(push) ; 17
; [else-branch: 344 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10)))]
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 345 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3)) | live]
; [else-branch: 345 | !(!($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 345 | !($struct_get[Bool]($struct_loc[Int](self@317@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@317@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@317@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@317@01 3))))
(pop) ; 13
; [eval] !$first_public_state
; [then-branch: 346 | False | dead]
; [else-branch: 346 | True | live]
(push) ; 13
; [else-branch: 346 | True]
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !$first_public_state
; [then-branch: 347 | False | dead]
; [else-branch: 347 | True | live]
(push) ; 11
; [else-branch: 347 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 320 | $out_of_gas@275@01]
(assert $out_of_gas@275@01)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 298 | $mod[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))), 2, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](msg@260@01, 1)))) % 2) != 0]
(assert (not
  (=
    ($mod<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1)))) 2 (mod
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@260@01 1))))
      2))
    0)))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$abort ----------
(declare-const $succ@319@01 Bool)
(declare-const $succ@320@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@321@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@322@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@323@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@324@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@325@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@326@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@327@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@328@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@329@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@330@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@331@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@332@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@333@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@334@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@335@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@336@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@337@01 $Snap)
(assert (= $t@337@01 ($Snap.combine ($Snap.first $t@337@01) ($Snap.second $t@337@01))))
(assert (= ($Snap.first $t@337@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@325@01 0))))
(assert (= ($Snap.second $t@337@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@325@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@338@01 $Snap)
(assert (= $t@338@01 ($Snap.combine ($Snap.first $t@338@01) ($Snap.second $t@338@01))))
(assert (= ($Snap.first $t@338@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
(assert (= ($Snap.second $t@338@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@339@01 $Snap)
(assert (= $t@339@01 ($Snap.combine ($Snap.first $t@339@01) ($Snap.second $t@339@01))))
(assert (= ($Snap.first $t@339@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@325@01 2))))
(assert (= ($Snap.second $t@339@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@325@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@340@01 $Snap)
(assert (= $t@340@01 ($Snap.combine ($Snap.first $t@340@01) ($Snap.second $t@340@01))))
(assert (= ($Snap.first $t@340@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@325@01 5))))
(assert (= ($Snap.second $t@340@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@325@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 ($Snap.combine ($Snap.first $t@341@01) ($Snap.second $t@341@01))))
(assert (= ($Snap.first $t@341@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@325@01 6))))
(assert (= ($Snap.second $t@341@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@325@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@343@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 348 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 8)), $q0@343@01)) | live]
; [else-branch: 348 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 8)), $q0@343@01) | live]
(push) ; 5
; [then-branch: 348 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 8)), $q0@343@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 348 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 8)), $q0@343@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@343@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@938@11@938@345-aux|)))
(assert (forall (($q0@343@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@343@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@938@11@938@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@344@01 $Snap)
(assert (= $t@344@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q0@345@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@345@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@345@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) $q0@345@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@939@11@939@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@346@01 $Snap)
(assert (= $t@346@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@347@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 349 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 9)), $q1@347@01)) | live]
; [else-branch: 349 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 9)), $q1@347@01) | live]
(push) ; 5
; [then-branch: 349 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 9)), $q1@347@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 349 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 9)), $q1@347@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@347@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@940@11@940@345-aux|)))
(assert (forall (($q1@347@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@347@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@940@11@940@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q1@349@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@349@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@349@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) $q1@349@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@941@11@941@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@350@01 $Snap)
(assert (= $t@350@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@325@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@351@01 $Snap)
(assert (= $t@351@01 ($Snap.combine ($Snap.first $t@351@01) ($Snap.second $t@351@01))))
(assert (= ($Snap.first $t@351@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@351@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 ($Snap.combine ($Snap.first $t@352@01) ($Snap.second $t@352@01))))
(assert (= ($Snap.first $t@352@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@322@01 0))))
(assert (= ($Snap.second $t@352@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@322@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@353@01 $Snap)
(assert (= $t@353@01 ($Snap.combine ($Snap.first $t@353@01) ($Snap.second $t@353@01))))
(assert (= ($Snap.first $t@353@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@322@01 1))))
(assert (= ($Snap.second $t@353@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@322@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@354@01 $Snap)
(assert (= $t@354@01 ($Snap.combine ($Snap.first $t@354@01) ($Snap.second $t@354@01))))
(assert (= ($Snap.first $t@354@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@322@01 2))))
(assert (= ($Snap.second $t@354@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@322@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@355@01 $Snap)
(assert (= $t@355@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@322@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@356@01 $Snap)
(assert (= $t@356@01 ($Snap.combine ($Snap.first $t@356@01) ($Snap.second $t@356@01))))
(assert (= ($Snap.first $t@356@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@322@01 4))))
(assert (= ($Snap.second $t@356@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@322@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@322@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@358@01 $Snap)
(assert (= $t@358@01 ($Snap.combine ($Snap.first $t@358@01) ($Snap.second $t@358@01))))
(assert (= ($Snap.first $t@358@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
(assert (= ($Snap.second $t@358@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@359@01 $Snap)
(assert (= $t@359@01 ($Snap.combine ($Snap.first $t@359@01) ($Snap.second $t@359@01))))
(assert (= ($Snap.first $t@359@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@321@01 1))))
(assert (= ($Snap.second $t@359@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@360@01 $Snap)
(assert (= $t@360@01 ($Snap.combine ($Snap.first $t@360@01) ($Snap.second $t@360@01))))
(assert (= ($Snap.first $t@360@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@321@01 2))))
(assert (= ($Snap.second $t@360@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@361@01 $Snap)
(assert (= $t@361@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@321@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@364@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@365@01 $Snap)
(assert (= $t@365@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@367@01 $Snap)
(assert (= $t@367@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 350 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0 | live]
; [else-branch: 350 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 350 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 4
(push) ; 4
; [else-branch: 350 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 351 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10)) | live]
; [else-branch: 351 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) | live]
(push) ; 4
; [then-branch: 351 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 351 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
; [else-branch: 352 | !(!($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 352 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 352 | !(!($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@325@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 353 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10)) | live]
; [else-branch: 353 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) | live]
(push) ; 4
; [then-branch: 353 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 353 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 354 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
; [else-branch: 354 | !(!($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 354 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 4
(push) ; 4
; [else-branch: 354 | !(!($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 355 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) | live]
; [else-branch: 355 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10)) | live]
(push) ; 4
; [then-branch: 355 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))))
(pop) ; 4
(push) ; 4
; [else-branch: 355 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 356 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
; [else-branch: 356 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 356 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
; [then-branch: 357 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@325@01, 0))))) | live]
; [else-branch: 357 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@325@01, 0)))) | live]
(push) ; 6
; [then-branch: 357 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@325@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 357 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@325@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@325@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))))
(pop) ; 4
(push) ; 4
; [else-branch: 356 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
      ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
(declare-const $t@371@01 $Snap)
(assert (= $t@371@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 358 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
; [else-branch: 358 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 358 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@372@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 359 | !(0 <= q$a@372@01) | live]
; [else-branch: 359 | 0 <= q$a@372@01 | live]
(push) ; 7
; [then-branch: 359 | !(0 <= q$a@372@01)]
(assert (not (<= 0 q$a@372@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 359 | 0 <= q$a@372@01]
(assert (<= 0 q$a@372@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@372@01) (not (<= 0 q$a@372@01))))
(push) ; 6
; [then-branch: 360 | 0 <= q$a@372@01 && q$a@372@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 360 | !(0 <= q$a@372@01 && q$a@372@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 360 | 0 <= q$a@372@01 && q$a@372@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@372@01)
  (<= q$a@372@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 8
; [then-branch: 361 | q$a@372@01 == $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
; [else-branch: 361 | q$a@372@01 != $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
(push) ; 9
; [then-branch: 361 | q$a@372@01 == $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 361 | q$a@372@01 != $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (not (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
  (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 360 | !(0 <= q$a@372@01 && q$a@372@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@372@01)
    (<= q$a@372@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@372@01)
    (<= q$a@372@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@372@01)
    (<= q$a@372@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
      (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@372@01)
      (<= q$a@372@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@372@01)
    (<= q$a@372@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@372@01 Int)) (!
  (and
    (or (<= 0 q$a@372@01) (not (<= 0 q$a@372@01)))
    (=>
      (and
        (<= 0 q$a@372@01)
        (<= q$a@372@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@372@01)
        (<= q$a@372@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
          (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@372@01)
          (<= q$a@372@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@372@01)
        (<= q$a@372@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) q$a@372@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@966@57@966@342-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 358 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))
    (forall ((q$a@372@01 Int)) (!
      (and
        (or (<= 0 q$a@372@01) (not (<= 0 q$a@372@01)))
        (=>
          (and
            (<= 0 q$a@372@01)
            (<= q$a@372@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@372@01)
            (<= q$a@372@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@372@01
                  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
              (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@372@01)
              (<= q$a@372@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@372@01)
            (<= q$a@372@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) q$a@372@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@966@57@966@342-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))
  (forall ((q$a@372@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@372@01)
        (<= q$a@372@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) q$a@372@01)
        (ite
          (= q$a@372@01 ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 9)) q$a@372@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@966@57@966@342|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   acc($accessible$abort(7, ($struct_get($struct_loc(self, 1)): Int), 2 *
;   $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))), write)
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 362 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10)) | live]
; [else-branch: 362 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) | live]
(push) ; 4
; [then-branch: 362 | $struct_get[Bool]($struct_loc[Int](self@325@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 362 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
; [else-branch: 363 | !(!($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 363 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@373@01 $Snap)
(declare-const sm@374@01 $PSF<$accessible$abort>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
    ($SortWrappers.IntTo$Snap (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0))))))))
  $t@373@01))
(assert (<=
  $Perm.No
  (ite
    (and
      (= 7 7)
      (=
        ($struct_get<Int> ($struct_loc<Int> self@325@01 1))
        ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
      (=
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
    $Perm.Write
    $Perm.No)))
(declare-const sm@375@01 $PSF<$accessible$abort>)
(declare-const s@376@01 $Snap)
; Definitional axioms for snapshot map values
(assert ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@375@01  $PSF<$accessible$abort>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
  ($SortWrappers.IntTo$Snap (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
  ($SortWrappers.IntTo$Snap (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@321@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [then-branch: 364 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | dead]
; [else-branch: 364 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 364 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
(pop) ; 4
; [eval] !!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
; [else-branch: 365 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 365 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) != $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
; [else-branch: 366 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) == $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 366 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) != $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | True | live]
; [else-branch: 367 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 367 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@378@01 $Snap)
(assert (= $t@378@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@335@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@379@01 $Struct)
(assert (=
  self@379@01
  ($struct_set<$Struct> self@325@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@325@01 5))
    l$havoc@335@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@379@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 7
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@379@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@379@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0 | dead]
; [else-branch: 368 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 368 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 369 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10)) | live]
; [else-branch: 369 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) | live]
(push) ; 8
; [then-branch: 369 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 369 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 10))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 370 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3)) | live]
; [else-branch: 370 | !(!($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 370 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))
(push) ; 7
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@379@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@379@01 0)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@379@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@379@01 0))))))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 371 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10)) | live]
; [else-branch: 371 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) | live]
(push) ; 8
; [then-branch: 371 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 371 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10)))]
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 372 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3)) | live]
; [else-branch: 372 | !(!($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 372 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))
(push) ; 7
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 8)))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 8)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 373 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) | live]
; [else-branch: 373 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10)) | live]
(push) ; 8
; [then-branch: 373 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10)))]
(pop) ; 8
(push) ; 8
; [else-branch: 373 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 374 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3)) | dead]
; [else-branch: 374 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 374 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 375 | $struct_get[Bool]($struct_loc[Int](self@379@01, 3)) | live]
; [else-branch: 375 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 375 | $struct_get[Bool]($struct_loc[Int](self@379@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@380@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 376 | !(0 <= q$a@380@01) | live]
; [else-branch: 376 | 0 <= q$a@380@01 | live]
(push) ; 11
; [then-branch: 376 | !(0 <= q$a@380@01)]
(assert (not (<= 0 q$a@380@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 376 | 0 <= q$a@380@01]
(assert (<= 0 q$a@380@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@380@01) (not (<= 0 q$a@380@01))))
(push) ; 10
; [then-branch: 377 | 0 <= q$a@380@01 && q$a@380@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 377 | !(0 <= q$a@380@01 && q$a@380@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 377 | 0 <= q$a@380@01 && q$a@380@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@380@01)
  (<= q$a@380@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 12
; [then-branch: 378 | q$a@380@01 == $struct_get[Int]($struct_loc[Int](self@379@01, 1)) | live]
; [else-branch: 378 | q$a@380@01 != $struct_get[Int]($struct_loc[Int](self@379@01, 1)) | live]
(push) ; 13
; [then-branch: 378 | q$a@380@01 == $struct_get[Int]($struct_loc[Int](self@379@01, 1))]
(assert (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 13
(push) ; 13
; [else-branch: 378 | q$a@380@01 != $struct_get[Int]($struct_loc[Int](self@379@01, 1))]
(assert (not (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1))))
  (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 377 | !(0 <= q$a@380@01 && q$a@380@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@380@01)
    (<= q$a@380@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@380@01)
    (<= q$a@380@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@380@01)
    (<= q$a@380@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1))))
      (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@380@01)
      (<= q$a@380@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@380@01)
    (<= q$a@380@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@380@01 Int)) (!
  (and
    (or (<= 0 q$a@380@01) (not (<= 0 q$a@380@01)))
    (=>
      (and
        (<= 0 q$a@380@01)
        (<= q$a@380@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@380@01)
        (<= q$a@380@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1))))
          (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@380@01)
          (<= q$a@380@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@380@01)
        (<= q$a@380@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 9)) q$a@380@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))
  (forall ((q$a@380@01 Int)) (!
    (and
      (or (<= 0 q$a@380@01) (not (<= 0 q$a@380@01)))
      (=>
        (and
          (<= 0 q$a@380@01)
          (<= q$a@380@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@380@01)
          (<= q$a@380@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1))))
            (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@380@01)
            (<= q$a@380@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@380@01)
          (<= q$a@380@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 9)) q$a@380@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))
  (forall ((q$a@380@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@380@01)
        (<= q$a@380@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 9)) q$a@380@01)
        (ite
          (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@379@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 9)) q$a@380@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))
  (forall ((q$a@380@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@380@01)
        (<= q$a@380@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 9)) q$a@380@01)
        (ite
          (= q$a@380@01 ($struct_get<Int> ($struct_loc<Int> self@379@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@379@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@379@01 9)) q$a@380@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 379 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10)) | live]
; [else-branch: 379 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) | live]
(push) ; 8
; [then-branch: 379 | $struct_get[Bool]($struct_loc[Int](self@379@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 379 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10)))]
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 380 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3)) | live]
; [else-branch: 380 | !(!($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 380 | !($struct_get[Bool]($struct_loc[Int](self@379@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@379@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@379@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@379@01 3))))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@381@01 Int)
(push) ; 7
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const sm@382@01 $PSF<$accessible$abort>)
(declare-const s@383@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@383@01 $Snap)) (!
  (=>
    (and
      (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@383@01))) 7)
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@383@01)))
        ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
      (=
        ($SortWrappers.$SnapToInt ($Snap.second s@383@01))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
    (and
      (not (= s@383@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) s@383@01)
        ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@383@01))))
  :pattern (($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) s@383@01))
  :pattern (($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@383@01))
  :qid |qp.psmValDef1|)))
(assert (forall ((s@383@01 $Snap)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@383@01) s@383@01)
  :pattern (($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) s@383@01))
  :qid |qp.psmResTrgDef2|)))
(declare-const pm@384@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (= $tag 7)
        (= $to ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
        (=
          $amount
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef3|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef4|)))
(assert ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@381@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@381@01))))
(push) ; 8
; [then-branch: 381 | PredicatePermLookup($accessible$abort, pm@384@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@381@01)) > Z | live]
; [else-branch: 381 | !(PredicatePermLookup($accessible$abort, pm@384@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@381@01)) > Z) | live]
(push) ; 9
; [then-branch: 381 | PredicatePermLookup($accessible$abort, pm@384@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@381@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@381@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 382 | False | live]
; [else-branch: 382 | True | live]
(push) ; 11
; [then-branch: 382 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 382 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 383 | !($out_of_gas@334@01) | dead]
; [else-branch: 383 | $out_of_gas@334@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 383 | $out_of_gas@334@01]
(assert $out_of_gas@334@01)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert $out_of_gas@334@01)
(push) ; 10
; [then-branch: 384 | False | live]
; [else-branch: 384 | True | live]
(push) ; 11
; [then-branch: 384 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 384 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 12
; [then-branch: 385 | False | dead]
; [else-branch: 385 | True | live]
(push) ; 13
; [else-branch: 385 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 381 | !(PredicatePermLookup($accessible$abort, pm@384@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@381@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@381@01)))
    $Perm.No)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (>
    ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@381@01)))
    $Perm.No)
  (and
    (>
      ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@381@01)))
      $Perm.No)
    $out_of_gas@334@01)))
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@381@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@381@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((s@383@01 $Snap)) (!
  (=>
    (and
      (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@383@01))) 7)
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@383@01)))
        ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
      (=
        ($SortWrappers.$SnapToInt ($Snap.second s@383@01))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
    (and
      (not (= s@383@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) s@383@01)
        ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@383@01))))
  :pattern (($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) s@383@01))
  :pattern (($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@383@01))
  :qid |qp.psmValDef1|)))
(assert (forall ((s@383@01 $Snap)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@383@01) s@383@01)
  :pattern (($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) s@383@01))
  :qid |qp.psmResTrgDef2|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (= $tag 7)
        (= $to ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
        (=
          $amount
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef3|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef4|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@381@01 Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@381@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@381@01)))
    (=>
      (>
        ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@381@01)))
        $Perm.No)
      (and
        (>
          ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@381@01)))
          $Perm.No)
        $out_of_gas@334@01))
    (or
      (not
        (>
          ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@381@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$abort (as pm@384@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@381@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@382@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@381@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@381@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521-aux|)))
(pop) ; 6
; [then-branch: 386 | False | dead]
; [else-branch: 386 | True | live]
(push) ; 6
; [else-branch: 386 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 366 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) == $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
(pop) ; 5
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 387 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) == $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
; [else-branch: 387 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) != $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 387 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) == $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; self := ($struct_set(self, 10, true): $Struct)
; [eval] ($struct_set(self, 10, true): $Struct)
(declare-const self@385@01 $Struct)
(assert (= self@385@01 ($struct_set<$Struct> self@325@01 10 true)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@386@01 $Struct)
(assert (=
  self@386@01
  ($struct_set<$Struct> self@385@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@385@01 8)) ($struct_get<Int> ($struct_loc<Int> self@385@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@385@01 8)) ($struct_get<Int> ($struct_loc<Int> self@385@01 1)))
    ($struct_get<Int> ($struct_loc<Int> self@385@01 5)))))))
; [exec]
; self := ($struct_set(self, 5, 0): $Struct)
; [eval] ($struct_set(self, 5, 0): $Struct)
(declare-const self@387@01 $Struct)
(assert (= self@387@01 ($struct_set<$Struct> self@386@01 5 0)))
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@334@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 388 | $out_of_gas@334@01 | live]
; [else-branch: 388 | !($out_of_gas@334@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 388 | $out_of_gas@334@01]
(assert $out_of_gas@334@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | True | live]
; [else-branch: 389 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 389 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@335@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@389@01 $Struct)
(assert (=
  self@389@01
  ($struct_set<$Struct> self@325@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@325@01 5))
    l$havoc@335@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@389@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@389@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@389@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@389@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0 | dead]
; [else-branch: 390 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 390 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 391 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10)) | live]
; [else-branch: 391 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) | live]
(push) ; 9
; [then-branch: 391 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 391 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 10))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3)) | live]
; [else-branch: 392 | !(!($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 392 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))
(push) ; 8
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@389@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@389@01 0)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@389@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@389@01 0))))))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 393 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10)) | live]
; [else-branch: 393 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) | live]
(push) ; 9
; [then-branch: 393 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 393 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10)))]
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3)) | live]
; [else-branch: 394 | !(!($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 394 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))
(push) ; 8
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 8)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 8)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 395 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) | live]
; [else-branch: 395 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10)) | live]
(push) ; 9
; [then-branch: 395 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10)))]
(pop) ; 9
(push) ; 9
; [else-branch: 395 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3)) | dead]
; [else-branch: 396 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 396 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | $struct_get[Bool]($struct_loc[Int](self@389@01, 3)) | live]
; [else-branch: 397 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 397 | $struct_get[Bool]($struct_loc[Int](self@389@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@390@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 398 | !(0 <= q$a@390@01) | live]
; [else-branch: 398 | 0 <= q$a@390@01 | live]
(push) ; 12
; [then-branch: 398 | !(0 <= q$a@390@01)]
(assert (not (<= 0 q$a@390@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 398 | 0 <= q$a@390@01]
(assert (<= 0 q$a@390@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@390@01) (not (<= 0 q$a@390@01))))
(push) ; 11
; [then-branch: 399 | 0 <= q$a@390@01 && q$a@390@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 399 | !(0 <= q$a@390@01 && q$a@390@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 399 | 0 <= q$a@390@01 && q$a@390@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@390@01)
  (<= q$a@390@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 400 | q$a@390@01 == $struct_get[Int]($struct_loc[Int](self@389@01, 1)) | live]
; [else-branch: 400 | q$a@390@01 != $struct_get[Int]($struct_loc[Int](self@389@01, 1)) | live]
(push) ; 14
; [then-branch: 400 | q$a@390@01 == $struct_get[Int]($struct_loc[Int](self@389@01, 1))]
(assert (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(push) ; 14
; [else-branch: 400 | q$a@390@01 != $struct_get[Int]($struct_loc[Int](self@389@01, 1))]
(assert (not (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1))))
  (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 399 | !(0 <= q$a@390@01 && q$a@390@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@390@01)
    (<= q$a@390@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@390@01)
    (<= q$a@390@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@390@01)
    (<= q$a@390@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1))))
      (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@390@01)
      (<= q$a@390@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@390@01)
    (<= q$a@390@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@390@01 Int)) (!
  (and
    (or (<= 0 q$a@390@01) (not (<= 0 q$a@390@01)))
    (=>
      (and
        (<= 0 q$a@390@01)
        (<= q$a@390@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@390@01)
        (<= q$a@390@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1))))
          (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@390@01)
          (<= q$a@390@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@390@01)
        (<= q$a@390@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 9)) q$a@390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))
  (forall ((q$a@390@01 Int)) (!
    (and
      (or (<= 0 q$a@390@01) (not (<= 0 q$a@390@01)))
      (=>
        (and
          (<= 0 q$a@390@01)
          (<= q$a@390@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@390@01)
          (<= q$a@390@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1))))
            (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@390@01)
            (<= q$a@390@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@390@01)
          (<= q$a@390@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 9)) q$a@390@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))
  (forall ((q$a@390@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@390@01)
        (<= q$a@390@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 9)) q$a@390@01)
        (ite
          (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@389@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 9)) q$a@390@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))
  (forall ((q$a@390@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@390@01)
        (<= q$a@390@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 9)) q$a@390@01)
        (ite
          (= q$a@390@01 ($struct_get<Int> ($struct_loc<Int> self@389@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@389@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 9)) q$a@390@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 401 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10)) | live]
; [else-branch: 401 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) | live]
(push) ; 9
; [then-branch: 401 | $struct_get[Bool]($struct_loc[Int](self@389@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 401 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10)))]
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3)) | live]
; [else-branch: 402 | !(!($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 402 | !($struct_get[Bool]($struct_loc[Int](self@389@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@389@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@389@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@389@01 3))))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@391@01 Int)
(push) ; 8
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const sm@392@01 $PSF<$accessible$abort>)
(declare-const s@393@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@393@01 $Snap)) (!
  (=>
    (and
      (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@393@01))) 7)
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@393@01)))
        ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
      (=
        ($SortWrappers.$SnapToInt ($Snap.second s@393@01))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
    (and
      (not (= s@393@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) s@393@01)
        ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@393@01))))
  :pattern (($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) s@393@01))
  :pattern (($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@393@01))
  :qid |qp.psmValDef5|)))
(assert (forall ((s@393@01 $Snap)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@393@01) s@393@01)
  :pattern (($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) s@393@01))
  :qid |qp.psmResTrgDef6|)))
(declare-const pm@394@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (= $tag 7)
        (= $to ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
        (=
          $amount
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef8|)))
(assert ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@391@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@391@01))))
(push) ; 9
; [then-branch: 403 | PredicatePermLookup($accessible$abort, pm@394@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@391@01)) > Z | live]
; [else-branch: 403 | !(PredicatePermLookup($accessible$abort, pm@394@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@391@01)) > Z) | live]
(push) ; 10
; [then-branch: 403 | PredicatePermLookup($accessible$abort, pm@394@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@391@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@391@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 404 | False | live]
; [else-branch: 404 | True | live]
(push) ; 12
; [then-branch: 404 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 404 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 405 | !($out_of_gas@334@01) | dead]
; [else-branch: 405 | $out_of_gas@334@01 | live]
(push) ; 12
; [else-branch: 405 | $out_of_gas@334@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 406 | False | live]
; [else-branch: 406 | True | live]
(push) ; 12
; [then-branch: 406 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 406 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
; [then-branch: 407 | False | dead]
; [else-branch: 407 | True | live]
(push) ; 14
; [else-branch: 407 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 403 | !(PredicatePermLookup($accessible$abort, pm@394@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@391@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@391@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@391@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@391@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((s@393@01 $Snap)) (!
  (=>
    (and
      (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@393@01))) 7)
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@393@01)))
        ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
      (=
        ($SortWrappers.$SnapToInt ($Snap.second s@393@01))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
    (and
      (not (= s@393@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) s@393@01)
        ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@393@01))))
  :pattern (($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) s@393@01))
  :pattern (($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@393@01))
  :qid |qp.psmValDef5|)))
(assert (forall ((s@393@01 $Snap)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@393@01) s@393@01)
  :pattern (($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) s@393@01))
  :qid |qp.psmResTrgDef6|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (= $tag 7)
        (= $to ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
        (=
          $amount
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef7|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef8|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@391@01 Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@391@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@391@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@391@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$abort (as pm@394@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@391@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@392@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@391@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@391@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521-aux|)))
(pop) ; 7
; [then-branch: 408 | False | dead]
; [else-branch: 408 | True | live]
(push) ; 7
; [else-branch: 408 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 388 | !($out_of_gas@334@01)]
(assert (not $out_of_gas@334@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@334@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | !($out_of_gas@334@01) | live]
; [else-branch: 409 | $out_of_gas@334@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 409 | !($out_of_gas@334@01)]
(assert (not $out_of_gas@334@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 410 | False | dead]
; [else-branch: 410 | True | live]
(push) ; 7
; [else-branch: 410 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 411 | True | live]
; [else-branch: 411 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 411 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@395@01 $Snap)
(assert (= $t@395@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@335@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@396@01 $Struct)
(assert (=
  self@396@01
  ($struct_set<$Struct> self@387@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@387@01 5))
    l$havoc@335@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@396@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@396@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@396@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@396@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 412 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0 | dead]
; [else-branch: 412 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 412 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 413 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10)) | live]
; [else-branch: 413 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) | live]
(push) ; 9
; [then-branch: 413 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@396@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 413 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 414 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3)) | dead]
; [else-branch: 414 | !(!($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 414 | !(!($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 415 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10)) | live]
; [else-branch: 415 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) | live]
(push) ; 9
; [then-branch: 415 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@396@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 415 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 416 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3)) | dead]
; [else-branch: 416 | !(!($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3))) | live]
(push) ; 9
; [else-branch: 416 | !(!($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 417 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) | live]
; [else-branch: 417 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10)) | live]
(push) ; 9
; [then-branch: 417 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))))
(pop) ; 9
(push) ; 9
; [else-branch: 417 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@396@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 418 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3)) | live]
; [else-branch: 418 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 418 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
; [then-branch: 419 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@396@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@396@01, 0))))) | live]
; [else-branch: 419 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@396@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@396@01, 0)))) | live]
(push) ; 11
; [then-branch: 419 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@396@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@396@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 419 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@396@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@396@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0)))))))))))
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))))
(push) ; 8
(assert (not (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)) ($struct_get<Int> ($struct_loc<Int> self@396@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@396@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)) ($struct_get<Int> ($struct_loc<Int> self@396@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0)))))))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | $struct_get[Bool]($struct_loc[Int](self@396@01, 3)) | live]
; [else-branch: 420 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 420 | $struct_get[Bool]($struct_loc[Int](self@396@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@397@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 421 | !(0 <= q$a@397@01) | live]
; [else-branch: 421 | 0 <= q$a@397@01 | live]
(push) ; 12
; [then-branch: 421 | !(0 <= q$a@397@01)]
(assert (not (<= 0 q$a@397@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 421 | 0 <= q$a@397@01]
(assert (<= 0 q$a@397@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@397@01) (not (<= 0 q$a@397@01))))
(push) ; 11
; [then-branch: 422 | 0 <= q$a@397@01 && q$a@397@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 422 | !(0 <= q$a@397@01 && q$a@397@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 422 | 0 <= q$a@397@01 && q$a@397@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@397@01)
  (<= q$a@397@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 423 | q$a@397@01 == $struct_get[Int]($struct_loc[Int](self@396@01, 1)) | live]
; [else-branch: 423 | q$a@397@01 != $struct_get[Int]($struct_loc[Int](self@396@01, 1)) | live]
(push) ; 14
; [then-branch: 423 | q$a@397@01 == $struct_get[Int]($struct_loc[Int](self@396@01, 1))]
(assert (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(push) ; 14
; [else-branch: 423 | q$a@397@01 != $struct_get[Int]($struct_loc[Int](self@396@01, 1))]
(assert (not (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1))))
  (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 422 | !(0 <= q$a@397@01 && q$a@397@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@397@01)
    (<= q$a@397@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@397@01)
    (<= q$a@397@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@397@01)
    (<= q$a@397@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1))))
      (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@397@01)
      (<= q$a@397@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@397@01)
    (<= q$a@397@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@397@01 Int)) (!
  (and
    (or (<= 0 q$a@397@01) (not (<= 0 q$a@397@01)))
    (=>
      (and
        (<= 0 q$a@397@01)
        (<= q$a@397@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@397@01)
        (<= q$a@397@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1))))
          (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@397@01)
          (<= q$a@397@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@397@01)
        (<= q$a@397@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 9)) q$a@397@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))
  (forall ((q$a@397@01 Int)) (!
    (and
      (or (<= 0 q$a@397@01) (not (<= 0 q$a@397@01)))
      (=>
        (and
          (<= 0 q$a@397@01)
          (<= q$a@397@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@397@01)
          (<= q$a@397@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1))))
            (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@397@01)
            (<= q$a@397@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@397@01)
          (<= q$a@397@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 9)) q$a@397@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))
  (forall ((q$a@397@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@397@01)
        (<= q$a@397@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 9)) q$a@397@01)
        (ite
          (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 9)) q$a@397@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@396@01 3))
  (forall ((q$a@397@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@397@01)
        (<= q$a@397@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 9)) q$a@397@01)
        (ite
          (= q$a@397@01 ($struct_get<Int> ($struct_loc<Int> self@396@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@396@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 9)) q$a@397@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 424 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10)) | live]
; [else-branch: 424 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) | live]
(push) ; 9
; [then-branch: 424 | $struct_get[Bool]($struct_loc[Int](self@396@01, 10))]
(pop) ; 9
(push) ; 9
; [else-branch: 424 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@396@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 425 | !($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3)) | dead]
; [else-branch: 425 | !(!($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3))) | live]
(push) ; 9
; [else-branch: 425 | !(!($struct_get[Bool]($struct_loc[Int](self@396@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@396@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert (forall $a: Int ::
;     { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@398@01 Int)
(push) ; 8
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const sm@399@01 $PSF<$accessible$abort>)
(declare-const s@400@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@400@01 $Snap)) (!
  (=>
    (and
      (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@400@01))) 7)
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@400@01)))
        ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
      (=
        ($SortWrappers.$SnapToInt ($Snap.second s@400@01))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
    (and
      (not (= s@400@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) s@400@01)
        ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@400@01))))
  :pattern (($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) s@400@01))
  :pattern (($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@400@01))
  :qid |qp.psmValDef9|)))
(assert (forall ((s@400@01 $Snap)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@400@01) s@400@01)
  :pattern (($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) s@400@01))
  :qid |qp.psmResTrgDef10|)))
(declare-const pm@401@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (= $tag 7)
        (= $to ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
        (=
          $amount
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef11|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef12|)))
(assert ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@398@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@398@01))))
(push) ; 9
; [then-branch: 426 | PredicatePermLookup($accessible$abort, pm@401@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@398@01)) > Z | live]
; [else-branch: 426 | !(PredicatePermLookup($accessible$abort, pm@401@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@398@01)) > Z) | live]
(push) ; 10
; [then-branch: 426 | PredicatePermLookup($accessible$abort, pm@401@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@398@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@398@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 427 | False | live]
; [else-branch: 427 | True | live]
(push) ; 12
; [then-branch: 427 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 427 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 428 | !($out_of_gas@334@01) | live]
; [else-branch: 428 | $out_of_gas@334@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 428 | !($out_of_gas@334@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 429 | False | live]
; [else-branch: 429 | True | live]
(push) ; 12
; [then-branch: 429 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 429 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 430 | True | live]
; [else-branch: 430 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 430 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 426 | !(PredicatePermLookup($accessible$abort, pm@401@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@398@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@398@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@398@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@398@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall ((s@400@01 $Snap)) (!
  (=>
    (and
      (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@400@01))) 7)
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@400@01)))
        ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
      (=
        ($SortWrappers.$SnapToInt ($Snap.second s@400@01))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
    (and
      (not (= s@400@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) s@400@01)
        ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@400@01))))
  :pattern (($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) s@400@01))
  :pattern (($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@400@01))
  :qid |qp.psmValDef9|)))
(assert (forall ((s@400@01 $Snap)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) s@400@01) s@400@01)
  :pattern (($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) s@400@01))
  :qid |qp.psmResTrgDef10|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (= $tag 7)
        (= $to ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))
        (=
          $amount
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@325@01 0)))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef11|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@374@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef12|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@398@01 Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@398@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@398@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@398@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@398@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@398@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@398@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521-aux|)))
(push) ; 8
(assert (not (forall (($a@398@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@398@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@321@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      $a@398@01))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@398@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@398@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall (($a@398@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$abort (as pm@401@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@398@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@396@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@321@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@325@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      $a@398@01))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@399@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@398@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@398@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521|)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 409 | $out_of_gas@334@01]
(assert $out_of_gas@334@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 387 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) != $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 363 | !(!($struct_get[Bool]($struct_loc[Int](self@325@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@325@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@403@01 $Snap)
(assert (= $t@403@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@321@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 431 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | live]
; [else-branch: 431 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 431 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 432 | True | live]
; [else-branch: 432 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 432 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@404@01 $Snap)
(assert (= $t@404@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@335@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@405@01 $Struct)
(assert (=
  self@405@01
  ($struct_set<$Struct> self@325@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@325@01 5))
    l$havoc@335@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@405@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@405@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@405@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@405@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@405@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@405@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0 | live]
; [else-branch: 433 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 433 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(push) ; 6
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@405@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@405@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 434 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10)) | live]
; [else-branch: 434 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) | live]
(push) ; 7
; [then-branch: 434 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 434 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 435 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3)) | dead]
; [else-branch: 435 | !(!($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 435 | !(!($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 436 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10)) | live]
; [else-branch: 436 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) | live]
(push) ; 7
; [then-branch: 436 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 436 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 437 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3)) | dead]
; [else-branch: 437 | !(!($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3))) | live]
(push) ; 7
; [else-branch: 437 | !(!($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 438 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) | live]
; [else-branch: 438 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10)) | live]
(push) ; 7
; [then-branch: 438 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))))
(pop) ; 7
(push) ; 7
; [else-branch: 438 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 439 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3)) | dead]
; [else-branch: 439 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 439 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@405@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 440 | $struct_get[Bool]($struct_loc[Int](self@405@01, 3)) | dead]
; [else-branch: 440 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 440 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 441 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10)) | live]
; [else-branch: 441 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) | live]
(push) ; 7
; [then-branch: 441 | $struct_get[Bool]($struct_loc[Int](self@405@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@405@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 441 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@405@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 442 | !($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3)) | dead]
; [else-branch: 442 | !(!($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3))) | live]
(push) ; 7
; [else-branch: 442 | !(!($struct_get[Bool]($struct_loc[Int](self@405@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@405@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert (forall $a: Int ::
;     { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@406@01 Int)
(push) ; 6
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const sm@407@01 $PSF<$accessible$abort>)
(declare-const s@408@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@409@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    $Perm.No)
  :pattern (($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef14|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@407@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount)))
  :pattern (($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef15|)))
(assert ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@407@01  $PSF<$accessible$abort>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@406@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@406@01))))
(push) ; 7
; [then-branch: 443 | PredicatePermLookup($accessible$abort, pm@409@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@406@01)) > Z | live]
; [else-branch: 443 | !(PredicatePermLookup($accessible$abort, pm@409@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@406@01)) > Z) | live]
(push) ; 8
; [then-branch: 443 | PredicatePermLookup($accessible$abort, pm@409@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@406@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@406@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 9
; [then-branch: 444 | False | live]
; [else-branch: 444 | True | live]
(push) ; 10
; [then-branch: 444 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 444 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 445 | !($out_of_gas@334@01) | dead]
; [else-branch: 445 | $out_of_gas@334@01 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 445 | $out_of_gas@334@01]
(assert $out_of_gas@334@01)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert $out_of_gas@334@01)
(push) ; 9
; [then-branch: 446 | False | live]
; [else-branch: 446 | True | live]
(push) ; 10
; [then-branch: 446 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 446 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 11
; [then-branch: 447 | False | dead]
; [else-branch: 447 | True | live]
(push) ; 12
; [else-branch: 447 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 443 | !(PredicatePermLookup($accessible$abort, pm@409@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@406@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@406@01)))
    $Perm.No)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@406@01)))
    $Perm.No)
  (and
    (>
      ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@406@01)))
      $Perm.No)
    $out_of_gas@334@01)))
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@406@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@406@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    $Perm.No)
  :pattern (($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef14|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@407@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount)))
  :pattern (($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef15|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@406@01 Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@407@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@406@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@406@01)))
    (=>
      (>
        ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@406@01)))
        $Perm.No)
      (and
        (>
          ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@406@01)))
          $Perm.No)
        $out_of_gas@334@01))
    (or
      (not
        (>
          ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@406@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$abort (as pm@409@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@406@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@407@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@406@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@406@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521-aux|)))
(pop) ; 5
; [then-branch: 448 | False | dead]
; [else-branch: 448 | True | live]
(push) ; 5
; [else-branch: 448 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 431 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))
(pop) ; 4
; [eval] !!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 449 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3)) | live]
; [else-branch: 449 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 449 | $struct_get[Bool]($struct_loc[Int](self@325@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@325@01 3)))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 450 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) != $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
; [else-branch: 450 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) == $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 450 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) != $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 451 | True | live]
; [else-branch: 451 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 451 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@335@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@411@01 $Struct)
(assert (=
  self@411@01
  ($struct_set<$Struct> self@325@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@325@01 5))
    l$havoc@335@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@411@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@411@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 7
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@411@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@411@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 452 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0 | dead]
; [else-branch: 452 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 452 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 453 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10)) | live]
; [else-branch: 453 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) | live]
(push) ; 8
; [then-branch: 453 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@411@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 453 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 454 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3)) | dead]
; [else-branch: 454 | !(!($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 454 | !(!($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 3)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 455 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10)) | live]
; [else-branch: 455 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) | live]
(push) ; 8
; [then-branch: 455 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@411@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 455 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 456 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3)) | dead]
; [else-branch: 456 | !(!($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3))) | live]
(push) ; 8
; [else-branch: 456 | !(!($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 457 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) | live]
; [else-branch: 457 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10)) | live]
(push) ; 8
; [then-branch: 457 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))))
(pop) ; 8
(push) ; 8
; [else-branch: 457 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@411@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 458 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3)) | live]
; [else-branch: 458 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 458 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 9
; [then-branch: 459 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@411@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@411@01, 0))))) | live]
; [else-branch: 459 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@411@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@411@01, 0)))) | live]
(push) ; 10
; [then-branch: 459 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@411@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@411@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 459 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@411@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@411@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0)))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0)))))))))))
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))))
(push) ; 7
(assert (not (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)) ($struct_get<Int> ($struct_loc<Int> self@411@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@411@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 8)) ($struct_get<Int> ($struct_loc<Int> self@411@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0)))))))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 3)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 460 | $struct_get[Bool]($struct_loc[Int](self@411@01, 3)) | live]
; [else-branch: 460 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 460 | $struct_get[Bool]($struct_loc[Int](self@411@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@412@01 Int)
(push) ; 9
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 461 | !(0 <= q$a@412@01) | live]
; [else-branch: 461 | 0 <= q$a@412@01 | live]
(push) ; 11
; [then-branch: 461 | !(0 <= q$a@412@01)]
(assert (not (<= 0 q$a@412@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 461 | 0 <= q$a@412@01]
(assert (<= 0 q$a@412@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@412@01) (not (<= 0 q$a@412@01))))
(push) ; 10
; [then-branch: 462 | 0 <= q$a@412@01 && q$a@412@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 462 | !(0 <= q$a@412@01 && q$a@412@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 11
; [then-branch: 462 | 0 <= q$a@412@01 && q$a@412@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@412@01)
  (<= q$a@412@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 12
; [then-branch: 463 | q$a@412@01 == $struct_get[Int]($struct_loc[Int](self@411@01, 1)) | live]
; [else-branch: 463 | q$a@412@01 != $struct_get[Int]($struct_loc[Int](self@411@01, 1)) | live]
(push) ; 13
; [then-branch: 463 | q$a@412@01 == $struct_get[Int]($struct_loc[Int](self@411@01, 1))]
(assert (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 13
(push) ; 13
; [else-branch: 463 | q$a@412@01 != $struct_get[Int]($struct_loc[Int](self@411@01, 1))]
(assert (not (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1))))
  (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 462 | !(0 <= q$a@412@01 && q$a@412@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@412@01)
    (<= q$a@412@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@412@01)
    (<= q$a@412@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@412@01)
    (<= q$a@412@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1))))
      (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@412@01)
      (<= q$a@412@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@412@01)
    (<= q$a@412@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@412@01 Int)) (!
  (and
    (or (<= 0 q$a@412@01) (not (<= 0 q$a@412@01)))
    (=>
      (and
        (<= 0 q$a@412@01)
        (<= q$a@412@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@412@01)
        (<= q$a@412@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1))))
          (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@412@01)
          (<= q$a@412@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@412@01)
        (<= q$a@412@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 9)) q$a@412@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))
  (forall ((q$a@412@01 Int)) (!
    (and
      (or (<= 0 q$a@412@01) (not (<= 0 q$a@412@01)))
      (=>
        (and
          (<= 0 q$a@412@01)
          (<= q$a@412@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@412@01)
          (<= q$a@412@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1))))
            (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@412@01)
            (<= q$a@412@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@412@01)
          (<= q$a@412@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 9)) q$a@412@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|))))
(push) ; 7
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))
  (forall ((q$a@412@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@412@01)
        (<= q$a@412@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 9)) q$a@412@01)
        (ite
          (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 9)) q$a@412@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@411@01 3))
  (forall ((q$a@412@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@412@01)
        (<= q$a@412@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 9)) q$a@412@01)
        (ite
          (= q$a@412@01 ($struct_get<Int> ($struct_loc<Int> self@411@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@411@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@411@01 9)) q$a@412@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 464 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10)) | live]
; [else-branch: 464 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) | live]
(push) ; 8
; [then-branch: 464 | $struct_get[Bool]($struct_loc[Int](self@411@01, 10))]
(pop) ; 8
(push) ; 8
; [else-branch: 464 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@411@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 465 | !($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3)) | dead]
; [else-branch: 465 | !(!($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3))) | live]
(push) ; 8
; [else-branch: 465 | !(!($struct_get[Bool]($struct_loc[Int](self@411@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@411@01, 3)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert (forall $a: Int ::
;     { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@413@01 Int)
(push) ; 7
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const sm@414@01 $PSF<$accessible$abort>)
(declare-const s@415@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@416@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    $Perm.No)
  :pattern (($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef17|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@414@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount)))
  :pattern (($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef18|)))
(assert ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@414@01  $PSF<$accessible$abort>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@413@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@413@01))))
(push) ; 8
; [then-branch: 466 | PredicatePermLookup($accessible$abort, pm@416@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@413@01)) > Z | live]
; [else-branch: 466 | !(PredicatePermLookup($accessible$abort, pm@416@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@413@01)) > Z) | live]
(push) ; 9
; [then-branch: 466 | PredicatePermLookup($accessible$abort, pm@416@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@413@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@413@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 10
; [then-branch: 467 | False | live]
; [else-branch: 467 | True | live]
(push) ; 11
; [then-branch: 467 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 467 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 468 | !($out_of_gas@334@01) | dead]
; [else-branch: 468 | $out_of_gas@334@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 468 | $out_of_gas@334@01]
(assert $out_of_gas@334@01)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert $out_of_gas@334@01)
(push) ; 10
; [then-branch: 469 | False | live]
; [else-branch: 469 | True | live]
(push) ; 11
; [then-branch: 469 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 469 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 12
; [then-branch: 470 | False | dead]
; [else-branch: 470 | True | live]
(push) ; 13
; [else-branch: 470 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 466 | !(PredicatePermLookup($accessible$abort, pm@416@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@413@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@413@01)))
    $Perm.No)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (>
    ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@413@01)))
    $Perm.No)
  (and
    (>
      ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@413@01)))
      $Perm.No)
    $out_of_gas@334@01)))
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@413@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@413@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    $Perm.No)
  :pattern (($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef17|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@414@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount)))
  :pattern (($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@413@01 Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@414@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@413@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@413@01)))
    (=>
      (>
        ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@413@01)))
        $Perm.No)
      (and
        (>
          ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@413@01)))
          $Perm.No)
        $out_of_gas@334@01))
    (or
      (not
        (>
          ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@413@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$abort (as pm@416@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@413@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@414@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@413@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@413@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521-aux|)))
(pop) ; 6
; [then-branch: 471 | False | dead]
; [else-branch: 471 | True | live]
(push) ; 6
; [else-branch: 471 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 450 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) == $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
(pop) ; 5
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 472 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) == $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
; [else-branch: 472 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) != $struct_get[Int]($struct_loc[Int](self@325@01, 1)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 472 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) == $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; self := ($struct_set(self, 10, true): $Struct)
; [eval] ($struct_set(self, 10, true): $Struct)
(declare-const self@417@01 $Struct)
(assert (= self@417@01 ($struct_set<$Struct> self@325@01 10 true)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@418@01 $Struct)
(assert (=
  self@418@01
  ($struct_set<$Struct> self@417@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@417@01 8)) ($struct_get<Int> ($struct_loc<Int> self@417@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@417@01 8)) ($struct_get<Int> ($struct_loc<Int> self@417@01 1)))
    ($struct_get<Int> ($struct_loc<Int> self@417@01 5)))))))
; [exec]
; self := ($struct_set(self, 5, 0): $Struct)
; [eval] ($struct_set(self, 5, 0): $Struct)
(declare-const self@419@01 $Struct)
(assert (= self@419@01 ($struct_set<$Struct> self@418@01 5 0)))
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@334@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 473 | $out_of_gas@334@01 | live]
; [else-branch: 473 | !($out_of_gas@334@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 473 | $out_of_gas@334@01]
(assert $out_of_gas@334@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 474 | True | live]
; [else-branch: 474 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 474 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@420@01 $Snap)
(assert (= $t@420@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@335@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@421@01 $Struct)
(assert (=
  self@421@01
  ($struct_set<$Struct> self@325@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@325@01 5))
    l$havoc@335@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@421@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@421@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@421@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@421@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 475 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0 | dead]
; [else-branch: 475 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 475 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 476 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10)) | live]
; [else-branch: 476 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) | live]
(push) ; 9
; [then-branch: 476 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@421@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 476 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 477 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3)) | dead]
; [else-branch: 477 | !(!($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 477 | !(!($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 478 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10)) | live]
; [else-branch: 478 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) | live]
(push) ; 9
; [then-branch: 478 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@421@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 478 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 479 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3)) | dead]
; [else-branch: 479 | !(!($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3))) | live]
(push) ; 9
; [else-branch: 479 | !(!($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 480 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) | live]
; [else-branch: 480 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10)) | live]
(push) ; 9
; [then-branch: 480 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))))
(pop) ; 9
(push) ; 9
; [else-branch: 480 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@421@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 481 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3)) | live]
; [else-branch: 481 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 481 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
; [then-branch: 482 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@421@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@421@01, 0))))) | live]
; [else-branch: 482 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@421@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@421@01, 0)))) | live]
(push) ; 11
; [then-branch: 482 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@421@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@421@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 482 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@421@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@421@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0)))))))))))
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))))
(push) ; 8
(assert (not (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)) ($struct_get<Int> ($struct_loc<Int> self@421@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@421@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 8)) ($struct_get<Int> ($struct_loc<Int> self@421@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0)))))))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 483 | $struct_get[Bool]($struct_loc[Int](self@421@01, 3)) | live]
; [else-branch: 483 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 483 | $struct_get[Bool]($struct_loc[Int](self@421@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@422@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 484 | !(0 <= q$a@422@01) | live]
; [else-branch: 484 | 0 <= q$a@422@01 | live]
(push) ; 12
; [then-branch: 484 | !(0 <= q$a@422@01)]
(assert (not (<= 0 q$a@422@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 484 | 0 <= q$a@422@01]
(assert (<= 0 q$a@422@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@422@01) (not (<= 0 q$a@422@01))))
(push) ; 11
; [then-branch: 485 | 0 <= q$a@422@01 && q$a@422@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 485 | !(0 <= q$a@422@01 && q$a@422@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 485 | 0 <= q$a@422@01 && q$a@422@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@422@01)
  (<= q$a@422@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 486 | q$a@422@01 == $struct_get[Int]($struct_loc[Int](self@421@01, 1)) | live]
; [else-branch: 486 | q$a@422@01 != $struct_get[Int]($struct_loc[Int](self@421@01, 1)) | live]
(push) ; 14
; [then-branch: 486 | q$a@422@01 == $struct_get[Int]($struct_loc[Int](self@421@01, 1))]
(assert (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(push) ; 14
; [else-branch: 486 | q$a@422@01 != $struct_get[Int]($struct_loc[Int](self@421@01, 1))]
(assert (not (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1))))
  (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 485 | !(0 <= q$a@422@01 && q$a@422@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@422@01)
    (<= q$a@422@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@422@01)
    (<= q$a@422@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@422@01)
    (<= q$a@422@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1))))
      (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@422@01)
      (<= q$a@422@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@422@01)
    (<= q$a@422@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@422@01 Int)) (!
  (and
    (or (<= 0 q$a@422@01) (not (<= 0 q$a@422@01)))
    (=>
      (and
        (<= 0 q$a@422@01)
        (<= q$a@422@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@422@01)
        (<= q$a@422@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1))))
          (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@422@01)
          (<= q$a@422@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@422@01)
        (<= q$a@422@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 9)) q$a@422@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))
  (forall ((q$a@422@01 Int)) (!
    (and
      (or (<= 0 q$a@422@01) (not (<= 0 q$a@422@01)))
      (=>
        (and
          (<= 0 q$a@422@01)
          (<= q$a@422@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@422@01)
          (<= q$a@422@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1))))
            (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@422@01)
            (<= q$a@422@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@422@01)
          (<= q$a@422@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 9)) q$a@422@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))
  (forall ((q$a@422@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@422@01)
        (<= q$a@422@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 9)) q$a@422@01)
        (ite
          (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 9)) q$a@422@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@421@01 3))
  (forall ((q$a@422@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@422@01)
        (<= q$a@422@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 9)) q$a@422@01)
        (ite
          (= q$a@422@01 ($struct_get<Int> ($struct_loc<Int> self@421@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@421@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@421@01 9)) q$a@422@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 487 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10)) | live]
; [else-branch: 487 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) | live]
(push) ; 9
; [then-branch: 487 | $struct_get[Bool]($struct_loc[Int](self@421@01, 10))]
(pop) ; 9
(push) ; 9
; [else-branch: 487 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@421@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 488 | !($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3)) | dead]
; [else-branch: 488 | !(!($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3))) | live]
(push) ; 9
; [else-branch: 488 | !(!($struct_get[Bool]($struct_loc[Int](self@421@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@421@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert (forall $a: Int ::
;     { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@423@01 Int)
(push) ; 8
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const sm@424@01 $PSF<$accessible$abort>)
(declare-const s@425@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@426@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    $Perm.No)
  :pattern (($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef20|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@424@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount)))
  :pattern (($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef21|)))
(assert ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@424@01  $PSF<$accessible$abort>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@423@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@423@01))))
(push) ; 9
; [then-branch: 489 | PredicatePermLookup($accessible$abort, pm@426@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@423@01)) > Z | live]
; [else-branch: 489 | !(PredicatePermLookup($accessible$abort, pm@426@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@423@01)) > Z) | live]
(push) ; 10
; [then-branch: 489 | PredicatePermLookup($accessible$abort, pm@426@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@423@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@423@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 490 | False | live]
; [else-branch: 490 | True | live]
(push) ; 12
; [then-branch: 490 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 490 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 491 | !($out_of_gas@334@01) | dead]
; [else-branch: 491 | $out_of_gas@334@01 | live]
(push) ; 12
; [else-branch: 491 | $out_of_gas@334@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 492 | False | live]
; [else-branch: 492 | True | live]
(push) ; 12
; [then-branch: 492 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 492 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
; [then-branch: 493 | False | dead]
; [else-branch: 493 | True | live]
(push) ; 14
; [else-branch: 493 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 489 | !(PredicatePermLookup($accessible$abort, pm@426@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@423@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@423@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@423@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@423@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    $Perm.No)
  :pattern (($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef20|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@424@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount)))
  :pattern (($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef21|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@423@01 Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@424@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@423@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@423@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@423@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$abort (as pm@426@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@423@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@424@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@423@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@423@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521-aux|)))
(pop) ; 7
; [then-branch: 494 | False | dead]
; [else-branch: 494 | True | live]
(push) ; 7
; [else-branch: 494 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 473 | !($out_of_gas@334@01)]
(assert (not $out_of_gas@334@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@334@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 495 | !($out_of_gas@334@01) | live]
; [else-branch: 495 | $out_of_gas@334@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 495 | !($out_of_gas@334@01)]
(assert (not $out_of_gas@334@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 496 | False | dead]
; [else-branch: 496 | True | live]
(push) ; 7
; [else-branch: 496 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 497 | True | live]
; [else-branch: 497 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 497 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@427@01 $Snap)
(assert (= $t@427@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@335@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@428@01 $Struct)
(assert (=
  self@428@01
  ($struct_set<$Struct> self@419@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@419@01 5))
    l$havoc@335@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@428@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@428@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@325@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@428@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@428@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 498 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) != 0 | dead]
; [else-branch: 498 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 498 | $struct_get[Int]($struct_loc[Int](self@325@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@325@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 499 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10)) | live]
; [else-branch: 499 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) | live]
(push) ; 9
; [then-branch: 499 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@428@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 499 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3)) | dead]
; [else-branch: 500 | !(!($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 500 | !(!($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 501 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10)) | live]
; [else-branch: 501 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) | live]
(push) ; 9
; [then-branch: 501 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@428@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 501 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 502 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3)) | dead]
; [else-branch: 502 | !(!($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3))) | live]
(push) ; 9
; [else-branch: 502 | !(!($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 503 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) | live]
; [else-branch: 503 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10)) | live]
(push) ; 9
; [then-branch: 503 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))))
(pop) ; 9
(push) ; 9
; [else-branch: 503 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@428@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 504 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3)) | live]
; [else-branch: 504 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 504 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
; [then-branch: 505 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@428@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@428@01, 0))))) | live]
; [else-branch: 505 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@428@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@428@01, 0)))) | live]
(push) ; 11
; [then-branch: 505 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@428@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@428@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 505 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@428@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@428@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0)))))))))))
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))))
(push) ; 8
(assert (not (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)) ($struct_get<Int> ($struct_loc<Int> self@428@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@428@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 8)) ($struct_get<Int> ($struct_loc<Int> self@428@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0)))))))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 506 | $struct_get[Bool]($struct_loc[Int](self@428@01, 3)) | live]
; [else-branch: 506 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 506 | $struct_get[Bool]($struct_loc[Int](self@428@01, 3))]
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@429@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 507 | !(0 <= q$a@429@01) | live]
; [else-branch: 507 | 0 <= q$a@429@01 | live]
(push) ; 12
; [then-branch: 507 | !(0 <= q$a@429@01)]
(assert (not (<= 0 q$a@429@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 507 | 0 <= q$a@429@01]
(assert (<= 0 q$a@429@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@429@01) (not (<= 0 q$a@429@01))))
(push) ; 11
; [then-branch: 508 | 0 <= q$a@429@01 && q$a@429@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 508 | !(0 <= q$a@429@01 && q$a@429@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 508 | 0 <= q$a@429@01 && q$a@429@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@429@01)
  (<= q$a@429@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 509 | q$a@429@01 == $struct_get[Int]($struct_loc[Int](self@428@01, 1)) | live]
; [else-branch: 509 | q$a@429@01 != $struct_get[Int]($struct_loc[Int](self@428@01, 1)) | live]
(push) ; 14
; [then-branch: 509 | q$a@429@01 == $struct_get[Int]($struct_loc[Int](self@428@01, 1))]
(assert (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(push) ; 14
; [else-branch: 509 | q$a@429@01 != $struct_get[Int]($struct_loc[Int](self@428@01, 1))]
(assert (not (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1))))
  (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 508 | !(0 <= q$a@429@01 && q$a@429@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@429@01)
    (<= q$a@429@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@429@01)
    (<= q$a@429@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@429@01)
    (<= q$a@429@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1))))
      (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@429@01)
      (<= q$a@429@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@429@01)
    (<= q$a@429@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@429@01 Int)) (!
  (and
    (or (<= 0 q$a@429@01) (not (<= 0 q$a@429@01)))
    (=>
      (and
        (<= 0 q$a@429@01)
        (<= q$a@429@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@429@01)
        (<= q$a@429@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1))))
          (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@429@01)
          (<= q$a@429@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@429@01)
        (<= q$a@429@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 9)) q$a@429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))
  (forall ((q$a@429@01 Int)) (!
    (and
      (or (<= 0 q$a@429@01) (not (<= 0 q$a@429@01)))
      (=>
        (and
          (<= 0 q$a@429@01)
          (<= q$a@429@01 1461501637330902918203684832716283019655932542975))
        (and
          (<= 0 q$a@429@01)
          (<= q$a@429@01 1461501637330902918203684832716283019655932542975)
          (or
            (not
              (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1))))
            (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1))))))
      (or
        (not
          (and
            (<= 0 q$a@429@01)
            (<= q$a@429@01 1461501637330902918203684832716283019655932542975)))
        (and
          (<= 0 q$a@429@01)
          (<= q$a@429@01 1461501637330902918203684832716283019655932542975))))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 9)) q$a@429@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342-aux|))))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))
  (forall ((q$a@429@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@429@01)
        (<= q$a@429@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 9)) q$a@429@01)
        (ite
          (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 9)) q$a@429@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@428@01 3))
  (forall ((q$a@429@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@429@01)
        (<= q$a@429@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 9)) q$a@429@01)
        (ite
          (= q$a@429@01 ($struct_get<Int> ($struct_loc<Int> self@428@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@428@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 9)) q$a@429@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1018@57@1018@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 510 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10)) | live]
; [else-branch: 510 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) | live]
(push) ; 9
; [then-branch: 510 | $struct_get[Bool]($struct_loc[Int](self@428@01, 10))]
(pop) ; 9
(push) ; 9
; [else-branch: 510 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@428@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 511 | !($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3)) | dead]
; [else-branch: 511 | !(!($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3))) | live]
(push) ; 9
; [else-branch: 511 | !(!($struct_get[Bool]($struct_loc[Int](self@428@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@428@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert (forall $a: Int ::
;     { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@430@01 Int)
(push) ; 8
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$abort(7, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const sm@431@01 $PSF<$accessible$abort>)
(declare-const s@432@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@433@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    $Perm.No)
  :pattern (($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef23|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@431@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount)))
  :pattern (($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef24|)))
(assert ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@431@01  $PSF<$accessible$abort>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@430@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 7)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
  ($SortWrappers.IntTo$Snap $a@430@01))))
(push) ; 9
; [then-branch: 512 | PredicatePermLookup($accessible$abort, pm@433@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@430@01)) > Z | live]
; [else-branch: 512 | !(PredicatePermLookup($accessible$abort, pm@433@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@430@01)) > Z) | live]
(push) ; 10
; [then-branch: 512 | PredicatePermLookup($accessible$abort, pm@433@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@430@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@430@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 513 | False | live]
; [else-branch: 513 | True | live]
(push) ; 12
; [then-branch: 513 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 513 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@334@01))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 514 | !($out_of_gas@334@01) | dead]
; [else-branch: 514 | $out_of_gas@334@01 | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 514 | $out_of_gas@334@01]
(assert $out_of_gas@334@01)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert $out_of_gas@334@01)
(push) ; 11
; [then-branch: 515 | False | live]
; [else-branch: 515 | True | live]
(push) ; 12
; [then-branch: 515 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 515 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 516 | True | dead]
; [else-branch: 516 | False | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 516 | False]
(assert false)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 512 | !(PredicatePermLookup($accessible$abort, pm@433@01, List(7, $struct_get[Int]($struct_loc[Int](msg@321@01, 0)), $a@430@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@430@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (>
    ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@430@01)))
    $Perm.No)
  false))
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 7)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
        ($SortWrappers.IntTo$Snap $a@430@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@430@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    $Perm.No)
  :pattern (($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef23|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@431@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount)))
  :pattern (($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@430@01 Int)) (!
  (and
    ($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@431@01  $PSF<$accessible$abort>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@430@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 7)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
      ($SortWrappers.IntTo$Snap $a@430@01)))
    (=>
      (>
        ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@430@01)))
        $Perm.No)
      false)
    (or
      (not
        (>
          ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 7)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
            ($SortWrappers.IntTo$Snap $a@430@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$abort (as pm@433@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 7)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
          ($SortWrappers.IntTo$Snap $a@430@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$abort ($PSF.lookup_$accessible$abort (as sm@431@01  $PSF<$accessible$abort>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@430@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 7)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))))
    ($SortWrappers.IntTo$Snap $a@430@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1021@11@1021@521-aux|)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 495 | $out_of_gas@334@01]
(assert $out_of_gas@334@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 472 | $struct_get[Int]($struct_loc[Int](msg@321@01, 0)) != $struct_get[Int]($struct_loc[Int](self@325@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@321@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@325@01 1)))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 449 | !($struct_get[Bool]($struct_loc[Int](self@325@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@325@01 3))))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$purchase ----------
(declare-const $succ@434@01 Bool)
(declare-const $succ@435@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@436@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@437@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@438@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@439@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@440@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@441@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@442@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@443@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@444@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@445@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@446@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@447@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@448@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@449@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@450@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@451@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@452@01 $Snap)
(assert (= $t@452@01 ($Snap.combine ($Snap.first $t@452@01) ($Snap.second $t@452@01))))
(assert (= ($Snap.first $t@452@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@440@01 0))))
(assert (= ($Snap.second $t@452@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@440@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@453@01 $Snap)
(assert (= $t@453@01 ($Snap.combine ($Snap.first $t@453@01) ($Snap.second $t@453@01))))
(assert (= ($Snap.first $t@453@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
(assert (= ($Snap.second $t@453@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 ($Snap.combine ($Snap.first $t@454@01) ($Snap.second $t@454@01))))
(assert (= ($Snap.first $t@454@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@440@01 2))))
(assert (= ($Snap.second $t@454@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@440@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@455@01 $Snap)
(assert (= $t@455@01 ($Snap.combine ($Snap.first $t@455@01) ($Snap.second $t@455@01))))
(assert (= ($Snap.first $t@455@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@440@01 5))))
(assert (= ($Snap.second $t@455@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@440@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 ($Snap.combine ($Snap.first $t@456@01) ($Snap.second $t@456@01))))
(assert (= ($Snap.first $t@456@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@440@01 6))))
(assert (= ($Snap.second $t@456@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@440@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@457@01 $Snap)
(assert (= $t@457@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@458@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 517 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 8)), $q0@458@01)) | live]
; [else-branch: 517 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 8)), $q0@458@01) | live]
(push) ; 5
; [then-branch: 517 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 8)), $q0@458@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 517 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 8)), $q0@458@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@458@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1048@11@1048@345-aux|)))
(assert (forall (($q0@458@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@458@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1048@11@1048@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@459@01 $Snap)
(assert (= $t@459@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q0@460@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@460@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@460@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) $q0@460@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1049@11@1049@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@461@01 $Snap)
(assert (= $t@461@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@462@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 518 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 9)), $q1@462@01)) | live]
; [else-branch: 518 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 9)), $q1@462@01) | live]
(push) ; 5
; [then-branch: 518 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 9)), $q1@462@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 518 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 9)), $q1@462@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@462@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1050@11@1050@345-aux|)))
(assert (forall (($q1@462@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1050@11@1050@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@463@01 $Snap)
(assert (= $t@463@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q1@464@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@464@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@464@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) $q1@464@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1051@11@1051@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@465@01 $Snap)
(assert (= $t@465@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@440@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@466@01 $Snap)
(assert (= $t@466@01 ($Snap.combine ($Snap.first $t@466@01) ($Snap.second $t@466@01))))
(assert (= ($Snap.first $t@466@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@466@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 ($Snap.combine ($Snap.first $t@467@01) ($Snap.second $t@467@01))))
(assert (= ($Snap.first $t@467@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@437@01 0))))
(assert (= ($Snap.second $t@467@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@437@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@468@01 $Snap)
(assert (= $t@468@01 ($Snap.combine ($Snap.first $t@468@01) ($Snap.second $t@468@01))))
(assert (= ($Snap.first $t@468@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@437@01 1))))
(assert (= ($Snap.second $t@468@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@437@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 ($Snap.combine ($Snap.first $t@469@01) ($Snap.second $t@469@01))))
(assert (= ($Snap.first $t@469@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@437@01 2))))
(assert (= ($Snap.second $t@469@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@437@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@437@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 ($Snap.combine ($Snap.first $t@471@01) ($Snap.second $t@471@01))))
(assert (= ($Snap.first $t@471@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@437@01 4))))
(assert (= ($Snap.second $t@471@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@437@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@472@01 $Snap)
(assert (= $t@472@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@437@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@473@01 $Snap)
(assert (= $t@473@01 ($Snap.combine ($Snap.first $t@473@01) ($Snap.second $t@473@01))))
(assert (= ($Snap.first $t@473@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@436@01 0))))
(assert (= ($Snap.second $t@473@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@436@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 ($Snap.combine ($Snap.first $t@474@01) ($Snap.second $t@474@01))))
(assert (= ($Snap.first $t@474@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))))
(assert (= ($Snap.second $t@474@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@475@01 $Snap)
(assert (= $t@475@01 ($Snap.combine ($Snap.first $t@475@01) ($Snap.second $t@475@01))))
(assert (= ($Snap.first $t@475@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@436@01 2))))
(assert (= ($Snap.second $t@475@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@436@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@436@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@436@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@478@01 $Snap)
(assert (= $t@478@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@479@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@480@01 $Snap)
(assert (= $t@480@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
(declare-const $t@481@01 $Snap)
(assert (= $t@481@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@482@01 $Snap)
(assert (= $t@482@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 519 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) != 0 | live]
; [else-branch: 519 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 519 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 4
(push) ; 4
; [else-branch: 519 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@483@01 $Snap)
(assert (= $t@483@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 520 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10)) | live]
; [else-branch: 520 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) | live]
(push) ; 4
; [then-branch: 520 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 520 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 521 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3)) | live]
; [else-branch: 521 | !(!($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 521 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 521 | !(!($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@440@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
(declare-const $t@484@01 $Snap)
(assert (= $t@484@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 522 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10)) | live]
; [else-branch: 522 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) | live]
(push) ; 4
; [then-branch: 522 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 522 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3)) | live]
; [else-branch: 523 | !(!($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 523 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 4
(push) ; 4
; [else-branch: 523 | !(!($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@485@01 $Snap)
(assert (= $t@485@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 524 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) | live]
; [else-branch: 524 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10)) | live]
(push) ; 4
; [then-branch: 524 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))))
(pop) ; 4
(push) ; 4
; [else-branch: 524 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 525 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3)) | live]
; [else-branch: 525 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 525 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
; [then-branch: 526 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@440@01, 0))))) | live]
; [else-branch: 526 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@440@01, 0)))) | live]
(push) ; 6
; [then-branch: 526 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@440@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 526 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@440@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@440@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0)))))))))
(pop) ; 4
(push) ; 4
; [else-branch: 525 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
      ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 8)) ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
(declare-const $t@486@01 $Snap)
(assert (= $t@486@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 527 | $struct_get[Bool]($struct_loc[Int](self@440@01, 3)) | live]
; [else-branch: 527 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 527 | $struct_get[Bool]($struct_loc[Int](self@440@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@487@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 528 | !(0 <= q$a@487@01) | live]
; [else-branch: 528 | 0 <= q$a@487@01 | live]
(push) ; 7
; [then-branch: 528 | !(0 <= q$a@487@01)]
(assert (not (<= 0 q$a@487@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 528 | 0 <= q$a@487@01]
(assert (<= 0 q$a@487@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@487@01) (not (<= 0 q$a@487@01))))
(push) ; 6
; [then-branch: 529 | 0 <= q$a@487@01 && q$a@487@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 529 | !(0 <= q$a@487@01 && q$a@487@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 529 | 0 <= q$a@487@01 && q$a@487@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@487@01)
  (<= q$a@487@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 8
; [then-branch: 530 | q$a@487@01 == $struct_get[Int]($struct_loc[Int](self@440@01, 1)) | live]
; [else-branch: 530 | q$a@487@01 != $struct_get[Int]($struct_loc[Int](self@440@01, 1)) | live]
(push) ; 9
; [then-branch: 530 | q$a@487@01 == $struct_get[Int]($struct_loc[Int](self@440@01, 1))]
(assert (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 530 | q$a@487@01 != $struct_get[Int]($struct_loc[Int](self@440@01, 1))]
(assert (not (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
  (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 529 | !(0 <= q$a@487@01 && q$a@487@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@487@01)
    (<= q$a@487@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@487@01)
    (<= q$a@487@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@487@01)
    (<= q$a@487@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
      (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@487@01)
      (<= q$a@487@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@487@01)
    (<= q$a@487@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@487@01 Int)) (!
  (and
    (or (<= 0 q$a@487@01) (not (<= 0 q$a@487@01)))
    (=>
      (and
        (<= 0 q$a@487@01)
        (<= q$a@487@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@487@01)
        (<= q$a@487@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
          (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@487@01)
          (<= q$a@487@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@487@01)
        (<= q$a@487@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) q$a@487@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1076@57@1076@342-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 527 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))
    (forall ((q$a@487@01 Int)) (!
      (and
        (or (<= 0 q$a@487@01) (not (<= 0 q$a@487@01)))
        (=>
          (and
            (<= 0 q$a@487@01)
            (<= q$a@487@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@487@01)
            (<= q$a@487@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@487@01
                  ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
              (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@487@01)
              (<= q$a@487@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@487@01)
            (<= q$a@487@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) q$a@487@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1076@57@1076@342-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))
  (forall ((q$a@487@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@487@01)
        (<= q$a@487@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) q$a@487@01)
        (ite
          (= q$a@487@01 ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@440@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@440@01 9)) q$a@487@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1076@57@1076@342|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
(declare-const $t@488@01 $Snap)
(assert (= $t@488@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 531 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10)) | live]
; [else-branch: 531 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) | live]
(push) ; 4
; [then-branch: 531 | $struct_get[Bool]($struct_loc[Int](self@440@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 531 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 532 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3)) | live]
; [else-branch: 532 | !(!($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 532 | !($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@440@01 3))))
(pop) ; 4
(push) ; 4
; [else-branch: 532 | !(!($struct_get[Bool]($struct_loc[Int](self@440@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@440@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@440@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@440@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@489@01 $Struct)
(assert (=
  self@489@01
  ($struct_set<$Struct> self@440@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@440@01 5))
    ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))))))
; [exec]
; self := ($struct_set(self, 9, ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 9, ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@490@01 $Struct)
(assert (=
  self@490@01
  ($struct_set<$Struct> self@489@01 9 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@489@01 9)) ($struct_get<Int> ($struct_loc<Int> msg@436@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@489@01 9)) ($struct_get<Int> ($struct_loc<Int> msg@436@01 0)))
    ($struct_get<Int> ($struct_loc<Int> msg@436@01 1)))))))
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@490@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@490@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 533 | !($struct_get[Bool]($struct_loc[Int](self@490@01, 3))) | live]
; [else-branch: 533 | $struct_get[Bool]($struct_loc[Int](self@490@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 533 | !($struct_get[Bool]($struct_loc[Int](self@490@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@490@01 3))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 534 | True | live]
; [else-branch: 534 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 534 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@491@01 $Snap)
(assert (= $t@491@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@450@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@492@01 $Struct)
(assert (=
  self@492@01
  ($struct_set<$Struct> self@440@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@440@01 5))
    l$havoc@450@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@492@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@492@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@492@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@492@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@492@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@492@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 535 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) != 0 | live]
; [else-branch: 535 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 535 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
(push) ; 5
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@492@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@440@01 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@492@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@440@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 5
; [then-branch: 536 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10)) | live]
; [else-branch: 536 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) | live]
(push) ; 6
; [then-branch: 536 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 536 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 537 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3)) | dead]
; [else-branch: 537 | !(!($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 537 | !(!($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 5
; [then-branch: 538 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10)) | live]
; [else-branch: 538 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) | live]
(push) ; 6
; [then-branch: 538 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 538 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 539 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3)) | dead]
; [else-branch: 539 | !(!($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3))) | live]
(push) ; 6
; [else-branch: 539 | !(!($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3)))]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 5
; [then-branch: 540 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) | live]
; [else-branch: 540 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10)) | live]
(push) ; 6
; [then-branch: 540 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))))
(pop) ; 6
(push) ; 6
; [else-branch: 540 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 541 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3)) | dead]
; [else-branch: 541 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 541 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@492@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 542 | $struct_get[Bool]($struct_loc[Int](self@492@01, 3)) | dead]
; [else-branch: 542 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 542 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 3))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 5
; [then-branch: 543 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10)) | live]
; [else-branch: 543 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) | live]
(push) ; 6
; [then-branch: 543 | $struct_get[Bool]($struct_loc[Int](self@492@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@492@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 543 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@492@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 544 | !($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3)) | dead]
; [else-branch: 544 | !(!($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3))) | live]
(push) ; 6
; [else-branch: 544 | !(!($struct_get[Bool]($struct_loc[Int](self@492@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@492@01, 3)))]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
; [then-branch: 545 | False | dead]
; [else-branch: 545 | True | live]
(push) ; 4
; [else-branch: 545 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 533 | $struct_get[Bool]($struct_loc[Int](self@490@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@490@01 3)))
(pop) ; 3
; [eval] !!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 3
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@490@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@490@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 546 | $struct_get[Bool]($struct_loc[Int](self@490@01, 3)) | live]
; [else-branch: 546 | !($struct_get[Bool]($struct_loc[Int](self@490@01, 3))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 546 | $struct_get[Bool]($struct_loc[Int](self@490@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@490@01 3)))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) < 0
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 547 | 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) < 0 | dead]
; [else-branch: 547 | !(2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) < 0) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 547 | !(2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) < 0)]
(assert (not
  (<
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
    0)))
(pop) ; 4
; [eval] !(2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) < 0)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) < 0
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (<
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 548 | !(2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) < 0) | live]
; [else-branch: 548 | 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) < 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 548 | !(2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) < 0)]
(assert (not
  (<
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
    0)))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 549 | 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 549 | !(2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 549 | !(2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 5
; [eval] !(2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 550 | !(2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 550 | 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 550 | !(2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] !(($struct_get($struct_loc(msg, 1)): Int) == 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 551 | $struct_get[Int]($struct_loc[Int](msg@436@01, 1)) != 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) | live]
; [else-branch: 551 | $struct_get[Int]($struct_loc[Int](msg@436@01, 1)) == 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 551 | $struct_get[Int]($struct_loc[Int](msg@436@01, 1)) != 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0))))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0))))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 552 | True | live]
; [else-branch: 552 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 552 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@493@01 $Snap)
(assert (= $t@493@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@450@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@494@01 $Struct)
(assert (=
  self@494@01
  ($struct_set<$Struct> self@440@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@440@01 5))
    l$havoc@450@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@494@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@494@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@494@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@494@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 553 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) != 0 | dead]
; [else-branch: 553 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 553 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 554 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10)) | live]
; [else-branch: 554 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) | live]
(push) ; 9
; [then-branch: 554 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 554 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 555 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3)) | live]
; [else-branch: 555 | !(!($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 555 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 555 | !(!($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(push) ; 8
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@494@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@494@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0))))))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 556 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10)) | live]
; [else-branch: 556 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) | live]
(push) ; 9
; [then-branch: 556 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 556 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 557 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3)) | live]
; [else-branch: 557 | !(!($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 557 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 9
(push) ; 9
; [else-branch: 557 | !(!($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 558 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) | live]
; [else-branch: 558 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10)) | live]
(push) ; 9
; [then-branch: 558 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))))
(pop) ; 9
(push) ; 9
; [else-branch: 558 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 559 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3)) | live]
; [else-branch: 559 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 559 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 10
; [then-branch: 560 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@494@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@494@01, 0))))) | live]
; [else-branch: 560 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@494@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@494@01, 0)))) | live]
(push) ; 11
; [then-branch: 560 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@494@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@494@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 560 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@494@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@494@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0)))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 559 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
      ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(push) ; 8
(assert (not (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)) ($struct_get<Int> ($struct_loc<Int> self@494@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 8)) ($struct_get<Int> ($struct_loc<Int> self@494@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0)))))))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 561 | $struct_get[Bool]($struct_loc[Int](self@494@01, 3)) | live]
; [else-branch: 561 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 561 | $struct_get[Bool]($struct_loc[Int](self@494@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@495@01 Int)
(push) ; 10
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 11
; [then-branch: 562 | !(0 <= q$a@495@01) | live]
; [else-branch: 562 | 0 <= q$a@495@01 | live]
(push) ; 12
; [then-branch: 562 | !(0 <= q$a@495@01)]
(assert (not (<= 0 q$a@495@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 562 | 0 <= q$a@495@01]
(assert (<= 0 q$a@495@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@495@01) (not (<= 0 q$a@495@01))))
(push) ; 11
; [then-branch: 563 | 0 <= q$a@495@01 && q$a@495@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 563 | !(0 <= q$a@495@01 && q$a@495@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 12
; [then-branch: 563 | 0 <= q$a@495@01 && q$a@495@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@495@01)
  (<= q$a@495@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 13
; [then-branch: 564 | q$a@495@01 == $struct_get[Int]($struct_loc[Int](self@494@01, 1)) | live]
; [else-branch: 564 | q$a@495@01 != $struct_get[Int]($struct_loc[Int](self@494@01, 1)) | live]
(push) ; 14
; [then-branch: 564 | q$a@495@01 == $struct_get[Int]($struct_loc[Int](self@494@01, 1))]
(assert (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 14
(push) ; 14
; [else-branch: 564 | q$a@495@01 != $struct_get[Int]($struct_loc[Int](self@494@01, 1))]
(assert (not (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1))))
  (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 563 | !(0 <= q$a@495@01 && q$a@495@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@495@01)
    (<= q$a@495@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@495@01)
    (<= q$a@495@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@495@01)
    (<= q$a@495@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1))))
      (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@495@01)
      (<= q$a@495@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@495@01)
    (<= q$a@495@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@495@01 Int)) (!
  (and
    (or (<= 0 q$a@495@01) (not (<= 0 q$a@495@01)))
    (=>
      (and
        (<= 0 q$a@495@01)
        (<= q$a@495@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@495@01)
        (<= q$a@495@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1))))
          (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@495@01)
          (<= q$a@495@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@495@01)
        (<= q$a@495@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 9)) q$a@495@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1134@57@1134@342-aux|)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))
    (forall ((q$a@495@01 Int)) (!
      (and
        (or (<= 0 q$a@495@01) (not (<= 0 q$a@495@01)))
        (=>
          (and
            (<= 0 q$a@495@01)
            (<= q$a@495@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@495@01)
            (<= q$a@495@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@495@01
                  ($struct_get<Int> ($struct_loc<Int> self@494@01 1))))
              (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@495@01)
              (<= q$a@495@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@495@01)
            (<= q$a@495@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 9)) q$a@495@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1134@57@1134@342-aux|)))))
(assert ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))
(push) ; 8
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))
  (forall ((q$a@495@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@495@01)
        (<= q$a@495@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 9)) q$a@495@01)
        (ite
          (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 9)) q$a@495@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1134@57@1134@342|)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))
  (forall ((q$a@495@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@495@01)
        (<= q$a@495@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 9)) q$a@495@01)
        (ite
          (= q$a@495@01 ($struct_get<Int> ($struct_loc<Int> self@494@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@494@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@494@01 9)) q$a@495@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1134@57@1134@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 565 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10)) | live]
; [else-branch: 565 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) | live]
(push) ; 9
; [then-branch: 565 | $struct_get[Bool]($struct_loc[Int](self@494@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 565 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 566 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3)) | live]
; [else-branch: 566 | !(!($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 566 | !($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@494@01 3))))
(pop) ; 9
(push) ; 9
; [else-branch: 566 | !(!($struct_get[Bool]($struct_loc[Int](self@494@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@494@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@494@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@494@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; [then-branch: 567 | False | dead]
; [else-branch: 567 | True | live]
(push) ; 7
; [else-branch: 567 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 551 | $struct_get[Int]($struct_loc[Int](msg@436@01, 1)) == 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0))))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))))
(pop) ; 6
; [eval] !!(($struct_get($struct_loc(msg, 1)): Int) == 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))))
; [eval] !(($struct_get($struct_loc(msg, 1)): Int) == 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 568 | $struct_get[Int]($struct_loc[Int](msg@436@01, 1)) == 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) | live]
; [else-branch: 568 | $struct_get[Int]($struct_loc[Int](msg@436@01, 1)) != 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 568 | $struct_get[Int]($struct_loc[Int](msg@436@01, 1)) == 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0))))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0)))))))
; [exec]
; self := ($struct_set(self, 2, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_set(self, 2, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@496@01 $Struct)
(assert (=
  self@496@01
  ($struct_set<$Struct> self@490@01 2 ($struct_get<Int> ($struct_loc<Int> msg@436@01 0)))))
; [exec]
; self := ($struct_set(self, 3, false): $Struct)
; [eval] ($struct_set(self, 3, false): $Struct)
(declare-const self@497@01 $Struct)
(assert (= self@497@01 ($struct_set<$Struct> self@496@01 3 false)))
; [exec]
; label return
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@449@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@449@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 569 | $out_of_gas@449@01 | live]
; [else-branch: 569 | !($out_of_gas@449@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 569 | $out_of_gas@449@01]
(assert $out_of_gas@449@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 570 | True | live]
; [else-branch: 570 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 570 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@498@01 $Snap)
(assert (= $t@498@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@450@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@499@01 $Struct)
(assert (=
  self@499@01
  ($struct_set<$Struct> self@440@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@440@01 5))
    l$havoc@450@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@499@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@499@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@499@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@499@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 571 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) != 0 | dead]
; [else-branch: 571 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 571 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 572 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10)) | live]
; [else-branch: 572 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) | live]
(push) ; 10
; [then-branch: 572 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 572 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 573 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3)) | live]
; [else-branch: 573 | !(!($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 573 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 10
(push) ; 10
; [else-branch: 573 | !(!($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(push) ; 9
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@499@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@499@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0))))))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 574 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10)) | live]
; [else-branch: 574 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) | live]
(push) ; 10
; [then-branch: 574 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 574 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 575 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3)) | live]
; [else-branch: 575 | !(!($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 575 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 10
(push) ; 10
; [else-branch: 575 | !(!($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 576 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) | live]
; [else-branch: 576 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10)) | live]
(push) ; 10
; [then-branch: 576 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))))
(pop) ; 10
(push) ; 10
; [else-branch: 576 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 577 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3)) | live]
; [else-branch: 577 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 577 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 11
; [then-branch: 578 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@499@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@499@01, 0))))) | live]
; [else-branch: 578 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@499@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@499@01, 0)))) | live]
(push) ; 12
; [then-branch: 578 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@499@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@499@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0))))))))
(pop) ; 12
(push) ; 12
; [else-branch: 578 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@499@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@499@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0)))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 577 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
      ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(push) ; 9
(assert (not (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)) ($struct_get<Int> ($struct_loc<Int> self@499@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 8)) ($struct_get<Int> ($struct_loc<Int> self@499@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0)))))))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 579 | $struct_get[Bool]($struct_loc[Int](self@499@01, 3)) | live]
; [else-branch: 579 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 579 | $struct_get[Bool]($struct_loc[Int](self@499@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@500@01 Int)
(push) ; 11
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 12
; [then-branch: 580 | !(0 <= q$a@500@01) | live]
; [else-branch: 580 | 0 <= q$a@500@01 | live]
(push) ; 13
; [then-branch: 580 | !(0 <= q$a@500@01)]
(assert (not (<= 0 q$a@500@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 580 | 0 <= q$a@500@01]
(assert (<= 0 q$a@500@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@500@01) (not (<= 0 q$a@500@01))))
(push) ; 12
; [then-branch: 581 | 0 <= q$a@500@01 && q$a@500@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 581 | !(0 <= q$a@500@01 && q$a@500@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 13
; [then-branch: 581 | 0 <= q$a@500@01 && q$a@500@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@500@01)
  (<= q$a@500@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 14
; [then-branch: 582 | q$a@500@01 == $struct_get[Int]($struct_loc[Int](self@499@01, 1)) | live]
; [else-branch: 582 | q$a@500@01 != $struct_get[Int]($struct_loc[Int](self@499@01, 1)) | live]
(push) ; 15
; [then-branch: 582 | q$a@500@01 == $struct_get[Int]($struct_loc[Int](self@499@01, 1))]
(assert (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 15
(push) ; 15
; [else-branch: 582 | q$a@500@01 != $struct_get[Int]($struct_loc[Int](self@499@01, 1))]
(assert (not (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1))))
  (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1)))))
(pop) ; 13
(push) ; 13
; [else-branch: 581 | !(0 <= q$a@500@01 && q$a@500@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@500@01)
    (<= q$a@500@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@500@01)
    (<= q$a@500@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@500@01)
    (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1))))
      (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@500@01)
      (<= q$a@500@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@500@01)
    (<= q$a@500@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@500@01 Int)) (!
  (and
    (or (<= 0 q$a@500@01) (not (<= 0 q$a@500@01)))
    (=>
      (and
        (<= 0 q$a@500@01)
        (<= q$a@500@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@500@01)
        (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1))))
          (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@500@01)
          (<= q$a@500@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@500@01)
        (<= q$a@500@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 9)) q$a@500@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1134@57@1134@342-aux|)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))
    (forall ((q$a@500@01 Int)) (!
      (and
        (or (<= 0 q$a@500@01) (not (<= 0 q$a@500@01)))
        (=>
          (and
            (<= 0 q$a@500@01)
            (<= q$a@500@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@500@01)
            (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@500@01
                  ($struct_get<Int> ($struct_loc<Int> self@499@01 1))))
              (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@500@01)
              (<= q$a@500@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@500@01)
            (<= q$a@500@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 9)) q$a@500@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1134@57@1134@342-aux|)))))
(assert ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))
(push) ; 9
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))
  (forall ((q$a@500@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@500@01)
        (<= q$a@500@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 9)) q$a@500@01)
        (ite
          (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 9)) q$a@500@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1134@57@1134@342|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))
  (forall ((q$a@500@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@500@01)
        (<= q$a@500@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 9)) q$a@500@01)
        (ite
          (= q$a@500@01 ($struct_get<Int> ($struct_loc<Int> self@499@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@499@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 9)) q$a@500@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1134@57@1134@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 583 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10)) | live]
; [else-branch: 583 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) | live]
(push) ; 10
; [then-branch: 583 | $struct_get[Bool]($struct_loc[Int](self@499@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 583 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 584 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3)) | live]
; [else-branch: 584 | !(!($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 584 | !($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@499@01 3))))
(pop) ; 10
(push) ; 10
; [else-branch: 584 | !(!($struct_get[Bool]($struct_loc[Int](self@499@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@499@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@499@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@499@01 3)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; [then-branch: 585 | False | dead]
; [else-branch: 585 | True | live]
(push) ; 8
; [else-branch: 585 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 569 | !($out_of_gas@449@01)]
(assert (not $out_of_gas@449@01))
(pop) ; 7
; [eval] !$out_of_gas
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@449@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@449@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | !($out_of_gas@449@01) | live]
; [else-branch: 586 | $out_of_gas@449@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 586 | !($out_of_gas@449@01)]
(assert (not $out_of_gas@449@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 587 | False | dead]
; [else-branch: 587 | True | live]
(push) ; 8
; [else-branch: 587 | True]
(pop) ; 8
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 588 | True | live]
; [else-branch: 588 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 588 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@501@01 $Snap)
(assert (= $t@501@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@450@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@502@01 $Struct)
(assert (=
  self@502@01
  ($struct_set<$Struct> self@497@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@497@01 5))
    l$havoc@450@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@502@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@502@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@440@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@502@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@502@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@502@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@502@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 589 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) != 0 | dead]
; [else-branch: 589 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 589 | $struct_get[Int]($struct_loc[Int](self@440@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@440@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 590 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10)) | live]
; [else-branch: 590 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) | live]
(push) ; 10
; [then-branch: 590 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 590 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 591 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3)) | dead]
; [else-branch: 591 | !(!($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 591 | !(!($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 3)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 592 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10)) | live]
; [else-branch: 592 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) | live]
(push) ; 10
; [then-branch: 592 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 592 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 593 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3)) | dead]
; [else-branch: 593 | !(!($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3))) | live]
(push) ; 10
; [else-branch: 593 | !(!($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 594 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) | live]
; [else-branch: 594 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10)) | live]
(push) ; 10
; [then-branch: 594 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))))
(pop) ; 10
(push) ; 10
; [else-branch: 594 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 595 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3)) | dead]
; [else-branch: 595 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 595 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 3)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@502@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 3)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 596 | $struct_get[Bool]($struct_loc[Int](self@502@01, 3)) | dead]
; [else-branch: 596 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 596 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 597 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10)) | live]
; [else-branch: 597 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) | live]
(push) ; 10
; [then-branch: 597 | $struct_get[Bool]($struct_loc[Int](self@502@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@502@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 597 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@502@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 598 | !($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3)) | dead]
; [else-branch: 598 | !(!($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3))) | live]
(push) ; 10
; [else-branch: 598 | !(!($struct_get[Bool]($struct_loc[Int](self@502@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@502@01, 3)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 586 | $out_of_gas@449@01]
(assert $out_of_gas@449@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 568 | $struct_get[Int]($struct_loc[Int](msg@436@01, 1)) != 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@490@01, 0))))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@436@01 1))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@490@01 0))))))))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 546 | !($struct_get[Bool]($struct_loc[Int](self@490@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@490@01 3))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$received ----------
(declare-const $succ@503@01 Bool)
(declare-const $succ@504@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@505@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@506@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@507@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@508@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@509@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@510@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@511@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@512@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@513@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@514@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@515@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@516@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@517@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@518@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@519@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@520@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@521@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@522@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@523@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@524@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@525@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@526@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@527@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@528@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@529@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@530@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@531@01 $Snap)
(assert (= $t@531@01 ($Snap.combine ($Snap.first $t@531@01) ($Snap.second $t@531@01))))
(assert (= ($Snap.first $t@531@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@509@01 0))))
(assert (= ($Snap.second $t@531@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@509@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@532@01 $Snap)
(assert (= $t@532@01 ($Snap.combine ($Snap.first $t@532@01) ($Snap.second $t@532@01))))
(assert (= ($Snap.first $t@532@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
(assert (= ($Snap.second $t@532@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@533@01 $Snap)
(assert (= $t@533@01 ($Snap.combine ($Snap.first $t@533@01) ($Snap.second $t@533@01))))
(assert (= ($Snap.first $t@533@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))
(assert (= ($Snap.second $t@533@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@509@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@534@01 $Snap)
(assert (= $t@534@01 ($Snap.combine ($Snap.first $t@534@01) ($Snap.second $t@534@01))))
(assert (= ($Snap.first $t@534@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@509@01 5))))
(assert (= ($Snap.second $t@534@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@535@01 $Snap)
(assert (= $t@535@01 ($Snap.combine ($Snap.first $t@535@01) ($Snap.second $t@535@01))))
(assert (= ($Snap.first $t@535@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@509@01 6))))
(assert (= ($Snap.second $t@535@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@509@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@536@01 $Snap)
(assert (= $t@536@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@537@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 599 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 8)), $q0@537@01)) | live]
; [else-branch: 599 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 8)), $q0@537@01) | live]
(push) ; 5
; [then-branch: 599 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 8)), $q0@537@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 599 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 8)), $q0@537@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@537@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1172@11@1172@345-aux|)))
(assert (forall (($q0@537@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1172@11@1172@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@538@01 $Snap)
(assert (= $t@538@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q0@539@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@539@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@539@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) $q0@539@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1173@11@1173@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@540@01 $Snap)
(assert (= $t@540@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@541@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 600 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 9)), $q1@541@01)) | live]
; [else-branch: 600 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 9)), $q1@541@01) | live]
(push) ; 5
; [then-branch: 600 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 9)), $q1@541@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 600 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 9)), $q1@541@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@541@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1174@11@1174@345-aux|)))
(assert (forall (($q1@541@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1174@11@1174@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@542@01 $Snap)
(assert (= $t@542@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q1@543@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@543@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@543@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) $q1@543@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1175@11@1175@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@544@01 $Snap)
(assert (= $t@544@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@509@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@545@01 $Snap)
(assert (= $t@545@01 ($Snap.combine ($Snap.first $t@545@01) ($Snap.second $t@545@01))))
(assert (= ($Snap.first $t@545@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@545@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@546@01 $Snap)
(assert (= $t@546@01 ($Snap.combine ($Snap.first $t@546@01) ($Snap.second $t@546@01))))
(assert (= ($Snap.first $t@546@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@506@01 0))))
(assert (= ($Snap.second $t@546@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@506@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@547@01 $Snap)
(assert (= $t@547@01 ($Snap.combine ($Snap.first $t@547@01) ($Snap.second $t@547@01))))
(assert (= ($Snap.first $t@547@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@506@01 1))))
(assert (= ($Snap.second $t@547@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@506@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@548@01 $Snap)
(assert (= $t@548@01 ($Snap.combine ($Snap.first $t@548@01) ($Snap.second $t@548@01))))
(assert (= ($Snap.first $t@548@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@506@01 2))))
(assert (= ($Snap.second $t@548@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@506@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@549@01 $Snap)
(assert (= $t@549@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@506@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@550@01 $Snap)
(assert (= $t@550@01 ($Snap.combine ($Snap.first $t@550@01) ($Snap.second $t@550@01))))
(assert (= ($Snap.first $t@550@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@506@01 4))))
(assert (= ($Snap.second $t@550@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@506@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@551@01 $Snap)
(assert (= $t@551@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@506@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@552@01 $Snap)
(assert (= $t@552@01 ($Snap.combine ($Snap.first $t@552@01) ($Snap.second $t@552@01))))
(assert (= ($Snap.first $t@552@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))))
(assert (= ($Snap.second $t@552@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@553@01 $Snap)
(assert (= $t@553@01 ($Snap.combine ($Snap.first $t@553@01) ($Snap.second $t@553@01))))
(assert (= ($Snap.first $t@553@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@505@01 1))))
(assert (= ($Snap.second $t@553@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@505@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@554@01 $Snap)
(assert (= $t@554@01 ($Snap.combine ($Snap.first $t@554@01) ($Snap.second $t@554@01))))
(assert (= ($Snap.first $t@554@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@505@01 2))))
(assert (= ($Snap.second $t@554@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@505@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@555@01 $Snap)
(assert (= $t@555@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@505@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@556@01 $Snap)
(assert (= $t@556@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@505@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@557@01 $Snap)
(assert (= $t@557@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@558@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc(self, 1)): Int)
(declare-const $t@559@01 $Snap)
(assert (= $t@559@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc(self, 2)): Int)
(declare-const $t@561@01 $Snap)
(assert (= $t@561@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 601 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | live]
; [else-branch: 601 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 601 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(pop) ; 4
(push) ; 4
; [else-branch: 601 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@562@01 $Snap)
(assert (= $t@562@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 602 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10)) | live]
; [else-branch: 602 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) | live]
(push) ; 4
; [then-branch: 602 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 602 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 603 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3)) | live]
; [else-branch: 603 | !(!($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 603 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 4
(push) ; 4
; [else-branch: 603 | !(!($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
(declare-const $t@563@01 $Snap)
(assert (= $t@563@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 604 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10)) | live]
; [else-branch: 604 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) | live]
(push) ; 4
; [then-branch: 604 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 604 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 605 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3)) | live]
; [else-branch: 605 | !(!($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 605 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 4
(push) ; 4
; [else-branch: 605 | !(!($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)))
    0)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@564@01 $Snap)
(assert (= $t@564@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 606 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) | live]
; [else-branch: 606 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10)) | live]
(push) ; 4
; [then-branch: 606 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))))
(pop) ; 4
(push) ; 4
; [else-branch: 606 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 607 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3)) | live]
; [else-branch: 607 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 607 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 5
; [then-branch: 608 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@509@01, 0))))) | live]
; [else-branch: 608 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@509@01, 0)))) | live]
(push) ; 6
; [then-branch: 608 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@509@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 608 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@509@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@509@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0)))))))))
(pop) ; 4
(push) ; 4
; [else-branch: 607 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
      ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 8)) ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
(declare-const $t@565@01 $Snap)
(assert (= $t@565@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 609 | $struct_get[Bool]($struct_loc[Int](self@509@01, 3)) | live]
; [else-branch: 609 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 609 | $struct_get[Bool]($struct_loc[Int](self@509@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@566@01 Int)
(push) ; 5
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 610 | !(0 <= q$a@566@01) | live]
; [else-branch: 610 | 0 <= q$a@566@01 | live]
(push) ; 7
; [then-branch: 610 | !(0 <= q$a@566@01)]
(assert (not (<= 0 q$a@566@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 610 | 0 <= q$a@566@01]
(assert (<= 0 q$a@566@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@566@01) (not (<= 0 q$a@566@01))))
(push) ; 6
; [then-branch: 611 | 0 <= q$a@566@01 && q$a@566@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 611 | !(0 <= q$a@566@01 && q$a@566@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 7
; [then-branch: 611 | 0 <= q$a@566@01 && q$a@566@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@566@01)
  (<= q$a@566@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 8
; [then-branch: 612 | q$a@566@01 == $struct_get[Int]($struct_loc[Int](self@509@01, 1)) | live]
; [else-branch: 612 | q$a@566@01 != $struct_get[Int]($struct_loc[Int](self@509@01, 1)) | live]
(push) ; 9
; [then-branch: 612 | q$a@566@01 == $struct_get[Int]($struct_loc[Int](self@509@01, 1))]
(assert (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 9
(push) ; 9
; [else-branch: 612 | q$a@566@01 != $struct_get[Int]($struct_loc[Int](self@509@01, 1))]
(assert (not (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
  (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 611 | !(0 <= q$a@566@01 && q$a@566@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@566@01)
    (<= q$a@566@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@566@01)
    (<= q$a@566@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@566@01)
    (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
      (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@566@01)
      (<= q$a@566@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@566@01)
    (<= q$a@566@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@566@01 Int)) (!
  (and
    (or (<= 0 q$a@566@01) (not (<= 0 q$a@566@01)))
    (=>
      (and
        (<= 0 q$a@566@01)
        (<= q$a@566@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@566@01)
        (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
          (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@566@01)
          (<= q$a@566@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@566@01)
        (<= q$a@566@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) q$a@566@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1200@57@1200@342-aux|)))
(pop) ; 4
(push) ; 4
; [else-branch: 609 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))
    (forall ((q$a@566@01 Int)) (!
      (and
        (or (<= 0 q$a@566@01) (not (<= 0 q$a@566@01)))
        (=>
          (and
            (<= 0 q$a@566@01)
            (<= q$a@566@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@566@01)
            (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@566@01
                  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
              (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@566@01)
              (<= q$a@566@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@566@01)
            (<= q$a@566@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) q$a@566@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1200@57@1200@342-aux|)))))
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))
  (forall ((q$a@566@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@566@01)
        (<= q$a@566@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) q$a@566@01)
        (ite
          (= q$a@566@01 ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@509@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@509@01 9)) q$a@566@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1200@57@1200@342|))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
(declare-const $t@567@01 $Snap)
(assert (= $t@567@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 613 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10)) | live]
; [else-branch: 613 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) | live]
(push) ; 4
; [then-branch: 613 | $struct_get[Bool]($struct_loc[Int](self@509@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
(pop) ; 4
(push) ; 4
; [else-branch: 613 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 614 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3)) | live]
; [else-branch: 614 | !(!($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 614 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
(pop) ; 4
(push) ; 4
; [else-branch: 614 | !(!($struct_get[Bool]($struct_loc[Int](self@509@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@509@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@568@01 $Snap)
(assert (= $t@568@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@505@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 615 | $struct_get[Bool]($struct_loc[Int](self@509@01, 3)) | live]
; [else-branch: 615 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 3))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 615 | $struct_get[Bool]($struct_loc[Int](self@509@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 616 | True | live]
; [else-branch: 616 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 616 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@569@01 $Snap)
(assert (= $t@569@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@570@01 $Struct)
(assert (=
  self@570@01
  ($struct_set<$Struct> self@509@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@570@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@570@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 5
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@570@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@570@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 617 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | dead]
; [else-branch: 617 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 617 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0]
(assert (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 5
; [then-branch: 618 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10)) | live]
; [else-branch: 618 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) | live]
(push) ; 6
; [then-branch: 618 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 618 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 619 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3)) | live]
; [else-branch: 619 | !(!($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 619 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))
; [eval] ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 6
(push) ; 6
; [else-branch: 619 | !(!($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
      ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(push) ; 5
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@570@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
  (>=
    ($struct_get<Int> ($struct_loc<Int> self@570@01 5))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0))))))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 5
; [then-branch: 620 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10)) | live]
; [else-branch: 620 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) | live]
(push) ; 6
; [then-branch: 620 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 620 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 621 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3)) | live]
; [else-branch: 621 | !(!($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 621 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 6
(push) ; 6
; [else-branch: 621 | !(!($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(assert (not (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
  (=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
    0)))
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 5
; [then-branch: 622 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) | live]
; [else-branch: 622 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10)) | live]
(push) ; 6
; [then-branch: 622 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))))
(pop) ; 6
(push) ; 6
; [else-branch: 622 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 623 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3)) | live]
; [else-branch: 623 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 623 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 7
; [then-branch: 624 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@570@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@570@01, 0))))) | live]
; [else-branch: 624 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@570@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@570@01, 0)))) | live]
(push) ; 8
; [then-branch: 624 | !($map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@570@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@570@01, 0)))))]
(assert (not
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 624 | $map_sum[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@570@01, 8))) >= 2 * $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@570@01, 0))))]
(assert (>=
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
  (*
    2
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0)))))))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (>=
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
    (*
      2
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0))))))
  (not
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0)))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 623 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))
    (or
      (>=
        ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
        (*
          2
          ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0))))))
      (not
        (>=
          ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0)))))))))))
; Joined path conditions
(assert (or
  (not
    (and
      ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
      ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(push) ; 5
(assert (not (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)) ($struct_get<Int> ($struct_loc<Int> self@570@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
  (and
    (>=
      ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0))))))
    (>=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)) ($struct_get<Int> ($struct_loc<Int> self@570@01 1)))
      (*
        2
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0)))))))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 625 | $struct_get[Bool]($struct_loc[Int](self@570@01, 3)) | live]
; [else-branch: 625 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 3))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 625 | $struct_get[Bool]($struct_loc[Int](self@570@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
; [eval] (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
(declare-const q$a@571@01 Int)
(push) ; 7
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975
; [eval] 0 <= q$a
(push) ; 8
; [then-branch: 626 | !(0 <= q$a@571@01) | live]
; [else-branch: 626 | 0 <= q$a@571@01 | live]
(push) ; 9
; [then-branch: 626 | !(0 <= q$a@571@01)]
(assert (not (<= 0 q$a@571@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 626 | 0 <= q$a@571@01]
(assert (<= 0 q$a@571@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$a@571@01) (not (<= 0 q$a@571@01))))
(push) ; 8
; [then-branch: 627 | 0 <= q$a@571@01 && q$a@571@01 <= 1461501637330902918203684832716283019655932542975 | live]
; [else-branch: 627 | !(0 <= q$a@571@01 && q$a@571@01 <= 1461501637330902918203684832716283019655932542975) | live]
(push) ; 9
; [then-branch: 627 | 0 <= q$a@571@01 && q$a@571@01 <= 1461501637330902918203684832716283019655932542975]
(assert (and
  (<= 0 q$a@571@01)
  (<= q$a@571@01 1461501637330902918203684832716283019655932542975)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0)
; [eval] q$a == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 10
; [then-branch: 628 | q$a@571@01 == $struct_get[Int]($struct_loc[Int](self@570@01, 1)) | live]
; [else-branch: 628 | q$a@571@01 != $struct_get[Int]($struct_loc[Int](self@570@01, 1)) | live]
(push) ; 11
; [then-branch: 628 | q$a@571@01 == $struct_get[Int]($struct_loc[Int](self@570@01, 1))]
(assert (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1))))
; [eval] 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(pop) ; 11
(push) ; 11
; [else-branch: 628 | q$a@571@01 != $struct_get[Int]($struct_loc[Int](self@570@01, 1))]
(assert (not (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1))))
  (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1)))))
(pop) ; 9
(push) ; 9
; [else-branch: 627 | !(0 <= q$a@571@01 && q$a@571@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not
  (and
    (<= 0 q$a@571@01)
    (<= q$a@571@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@571@01)
    (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
  (and
    (<= 0 q$a@571@01)
    (<= q$a@571@01 1461501637330902918203684832716283019655932542975)
    (or
      (not (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1))))
      (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@571@01)
      (<= q$a@571@01 1461501637330902918203684832716283019655932542975)))
  (and
    (<= 0 q$a@571@01)
    (<= q$a@571@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@571@01 Int)) (!
  (and
    (or (<= 0 q$a@571@01) (not (<= 0 q$a@571@01)))
    (=>
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975)
        (or
          (not
            (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1))))
          (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1))))))
    (or
      (not
        (and
          (<= 0 q$a@571@01)
          (<= q$a@571@01 1461501637330902918203684832716283019655932542975)))
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 9)) q$a@571@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1334@57@1334@342-aux|)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))
    (forall ((q$a@571@01 Int)) (!
      (and
        (or (<= 0 q$a@571@01) (not (<= 0 q$a@571@01)))
        (=>
          (and
            (<= 0 q$a@571@01)
            (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
          (and
            (<= 0 q$a@571@01)
            (<= q$a@571@01 1461501637330902918203684832716283019655932542975)
            (or
              (not
                (=
                  q$a@571@01
                  ($struct_get<Int> ($struct_loc<Int> self@570@01 1))))
              (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1))))))
        (or
          (not
            (and
              (<= 0 q$a@571@01)
              (<= q$a@571@01 1461501637330902918203684832716283019655932542975)))
          (and
            (<= 0 q$a@571@01)
            (<= q$a@571@01 1461501637330902918203684832716283019655932542975))))
      :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 9)) q$a@571@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1334@57@1334@342-aux|)))))
(assert ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))
(push) ; 5
(assert (not (=>
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))
  (forall ((q$a@571@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 9)) q$a@571@01)
        (ite
          (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 9)) q$a@571@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1334@57@1334@342|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))
  (forall ((q$a@571@01 Int)) (!
    (=>
      (and
        (<= 0 q$a@571@01)
        (<= q$a@571@01 1461501637330902918203684832716283019655932542975))
      (=
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 9)) q$a@571@01)
        (ite
          (= q$a@571@01 ($struct_get<Int> ($struct_loc<Int> self@570@01 1)))
          (*
            2
            ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@570@01 0)))))
          0)))
    :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 9)) q$a@571@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1334@57@1334@342|))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 5
; [then-branch: 629 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10)) | live]
; [else-branch: 629 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) | live]
(push) ; 6
; [then-branch: 629 | $struct_get[Bool]($struct_loc[Int](self@570@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
(pop) ; 6
(push) ; 6
; [else-branch: 629 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 630 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3)) | live]
; [else-branch: 630 | !(!($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 630 | !($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@570@01 3))))
(pop) ; 6
(push) ; 6
; [else-branch: 630 | !(!($struct_get[Bool]($struct_loc[Int](self@570@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@570@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@570@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@570@01 3)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; [then-branch: 631 | False | dead]
; [else-branch: 631 | True | live]
(push) ; 4
; [else-branch: 631 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 615 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
(pop) ; 3
; [eval] !!!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !!($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 3
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 632 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 3))) | live]
; [else-branch: 632 | $struct_get[Bool]($struct_loc[Int](self@509@01, 3)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 632 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 3))))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 633 | $struct_get[Int]($struct_loc[Int](msg@505@01, 0)) != $struct_get[Int]($struct_loc[Int](self@509@01, 2)) | live]
; [else-branch: 633 | $struct_get[Int]($struct_loc[Int](msg@505@01, 0)) == $struct_get[Int]($struct_loc[Int](self@509@01, 2)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 633 | $struct_get[Int]($struct_loc[Int](msg@505@01, 0)) != $struct_get[Int]($struct_loc[Int](self@509@01, 2))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 634 | True | live]
; [else-branch: 634 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 634 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@572@01 $Snap)
(assert (= $t@572@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@573@01 $Struct)
(assert (=
  self@573@01
  ($struct_set<$Struct> self@509@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@573@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@573@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@573@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@573@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 635 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | live]
; [else-branch: 635 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 635 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(push) ; 6
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@573@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@573@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 636 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10)) | live]
; [else-branch: 636 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) | live]
(push) ; 7
; [then-branch: 636 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 636 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 637 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3)) | dead]
; [else-branch: 637 | !(!($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 637 | !(!($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 638 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10)) | live]
; [else-branch: 638 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) | live]
(push) ; 7
; [then-branch: 638 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 638 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 639 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3)) | dead]
; [else-branch: 639 | !(!($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3))) | live]
(push) ; 7
; [else-branch: 639 | !(!($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 640 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) | live]
; [else-branch: 640 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10)) | live]
(push) ; 7
; [then-branch: 640 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))))
(pop) ; 7
(push) ; 7
; [else-branch: 640 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 641 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3)) | dead]
; [else-branch: 641 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 641 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 642 | $struct_get[Bool]($struct_loc[Int](self@573@01, 3)) | dead]
; [else-branch: 642 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 3))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 642 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 6
; [then-branch: 643 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10)) | live]
; [else-branch: 643 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) | live]
(push) ; 7
; [then-branch: 643 | $struct_get[Bool]($struct_loc[Int](self@573@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@573@01 10)))
(pop) ; 7
(push) ; 7
; [else-branch: 643 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@573@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
; [then-branch: 644 | !($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3)) | dead]
; [else-branch: 644 | !(!($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3))) | live]
(push) ; 7
; [else-branch: 644 | !(!($struct_get[Bool]($struct_loc[Int](self@573@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@573@01, 3)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
; [then-branch: 645 | False | dead]
; [else-branch: 645 | True | live]
(push) ; 5
; [else-branch: 645 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 633 | $struct_get[Int]($struct_loc[Int](msg@505@01, 0)) == $struct_get[Int]($struct_loc[Int](self@509@01, 2))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))
(pop) ; 4
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 646 | $struct_get[Int]($struct_loc[Int](msg@505@01, 0)) == $struct_get[Int]($struct_loc[Int](self@509@01, 2)) | live]
; [else-branch: 646 | $struct_get[Int]($struct_loc[Int](msg@505@01, 0)) != $struct_get[Int]($struct_loc[Int](self@509@01, 2)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 646 | $struct_get[Int]($struct_loc[Int](msg@505@01, 0)) == $struct_get[Int]($struct_loc[Int](self@509@01, 2))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))
; [eval] !!($struct_get($struct_loc(self, 4)): Bool)
; [eval] !($struct_get($struct_loc(self, 4)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 4))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 647 | $struct_get[Bool]($struct_loc[Int](self@509@01, 4)) | live]
; [else-branch: 647 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 4))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 647 | $struct_get[Bool]($struct_loc[Int](self@509@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 4)))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 648 | True | live]
; [else-branch: 648 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 648 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@574@01 $Snap)
(assert (= $t@574@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@575@01 $Struct)
(assert (=
  self@575@01
  ($struct_set<$Struct> self@509@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@575@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@575@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 7
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@575@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@575@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@575@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@575@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 649 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | live]
; [else-branch: 649 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 649 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(push) ; 7
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@575@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@575@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 650 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10)) | live]
; [else-branch: 650 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) | live]
(push) ; 8
; [then-branch: 650 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 650 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 651 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3)) | dead]
; [else-branch: 651 | !(!($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 651 | !(!($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 3)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 652 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10)) | live]
; [else-branch: 652 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) | live]
(push) ; 8
; [then-branch: 652 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 652 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 653 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3)) | dead]
; [else-branch: 653 | !(!($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3))) | live]
(push) ; 8
; [else-branch: 653 | !(!($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 654 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) | live]
; [else-branch: 654 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10)) | live]
(push) ; 8
; [then-branch: 654 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))))
(pop) ; 8
(push) ; 8
; [else-branch: 654 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 655 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3)) | dead]
; [else-branch: 655 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 655 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 3)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@575@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 656 | $struct_get[Bool]($struct_loc[Int](self@575@01, 3)) | dead]
; [else-branch: 656 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 656 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 657 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10)) | live]
; [else-branch: 657 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) | live]
(push) ; 8
; [then-branch: 657 | $struct_get[Bool]($struct_loc[Int](self@575@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@575@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 657 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@575@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 658 | !($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3)) | dead]
; [else-branch: 658 | !(!($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3))) | live]
(push) ; 8
; [else-branch: 658 | !(!($struct_get[Bool]($struct_loc[Int](self@575@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@575@01, 3)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; [then-branch: 659 | False | dead]
; [else-branch: 659 | True | live]
(push) ; 6
; [else-branch: 659 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 647 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 4))))
(pop) ; 5
; [eval] !!!($struct_get($struct_loc(self, 4)): Bool)
; [eval] !!($struct_get($struct_loc(self, 4)): Bool)
; [eval] !($struct_get($struct_loc(self, 4)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
(set-option :timeout 10)
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 4))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 660 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 4))) | live]
; [else-branch: 660 | $struct_get[Bool]($struct_loc[Int](self@509@01, 4)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 660 | !($struct_get[Bool]($struct_loc[Int](self@509@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@509@01 4))))
; [exec]
; self := ($struct_set(self, 4, true): $Struct)
; [eval] ($struct_set(self, 4, true): $Struct)
(declare-const self@576@01 $Struct)
(assert (= self@576@01 ($struct_set<$Struct> self@509@01 4 true)))
; [eval] ($struct_get($struct_loc(self, 5)): Int) < ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@576@01 5))
    ($struct_get<Int> ($struct_loc<Int> self@576@01 0))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@576@01 5))
  ($struct_get<Int> ($struct_loc<Int> self@576@01 0)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 661 | $struct_get[Int]($struct_loc[Int](self@576@01, 5)) < $struct_get[Int]($struct_loc[Int](self@576@01, 0)) | live]
; [else-branch: 661 | !($struct_get[Int]($struct_loc[Int](self@576@01, 5)) < $struct_get[Int]($struct_loc[Int](self@576@01, 0))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 661 | $struct_get[Int]($struct_loc[Int](self@576@01, 5)) < $struct_get[Int]($struct_loc[Int](self@576@01, 0))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> self@576@01 5))
  ($struct_get<Int> ($struct_loc<Int> self@576@01 0))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 662 | True | live]
; [else-branch: 662 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 662 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@577@01 $Snap)
(assert (= $t@577@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@578@01 $Struct)
(assert (=
  self@578@01
  ($struct_set<$Struct> self@509@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@578@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@578@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 8
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@578@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@578@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@578@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@578@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 663 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | live]
; [else-branch: 663 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 663 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(push) ; 8
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@578@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@578@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 664 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10)) | live]
; [else-branch: 664 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) | live]
(push) ; 9
; [then-branch: 664 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 664 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 665 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3)) | dead]
; [else-branch: 665 | !(!($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 665 | !(!($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 666 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10)) | live]
; [else-branch: 666 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) | live]
(push) ; 9
; [then-branch: 666 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 666 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 667 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3)) | dead]
; [else-branch: 667 | !(!($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3))) | live]
(push) ; 9
; [else-branch: 667 | !(!($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 668 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) | live]
; [else-branch: 668 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10)) | live]
(push) ; 9
; [then-branch: 668 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))))
(pop) ; 9
(push) ; 9
; [else-branch: 668 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 669 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3)) | dead]
; [else-branch: 669 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 669 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@578@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 670 | $struct_get[Bool]($struct_loc[Int](self@578@01, 3)) | dead]
; [else-branch: 670 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 670 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 671 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10)) | live]
; [else-branch: 671 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) | live]
(push) ; 9
; [then-branch: 671 | $struct_get[Bool]($struct_loc[Int](self@578@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@578@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 671 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@578@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 672 | !($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3)) | dead]
; [else-branch: 672 | !(!($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3))) | live]
(push) ; 9
; [else-branch: 672 | !(!($struct_get[Bool]($struct_loc[Int](self@578@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@578@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
; [then-branch: 673 | False | dead]
; [else-branch: 673 | True | live]
(push) ; 7
; [else-branch: 673 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 661 | !($struct_get[Int]($struct_loc[Int](self@576@01, 5)) < $struct_get[Int]($struct_loc[Int](self@576@01, 0)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@576@01 5))
    ($struct_get<Int> ($struct_loc<Int> self@576@01 0)))))
(pop) ; 6
; [eval] !(($struct_get($struct_loc(self, 5)): Int) < ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(self, 5)): Int) < ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@576@01 5))
  ($struct_get<Int> ($struct_loc<Int> self@576@01 0)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@576@01 5))
    ($struct_get<Int> ($struct_loc<Int> self@576@01 0))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 674 | !($struct_get[Int]($struct_loc[Int](self@576@01, 5)) < $struct_get[Int]($struct_loc[Int](self@576@01, 0))) | live]
; [else-branch: 674 | $struct_get[Int]($struct_loc[Int](self@576@01, 5)) < $struct_get[Int]($struct_loc[Int](self@576@01, 0)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 674 | !($struct_get[Int]($struct_loc[Int](self@576@01, 5)) < $struct_get[Int]($struct_loc[Int](self@576@01, 0)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@576@01 5))
    ($struct_get<Int> ($struct_loc<Int> self@576@01 0)))))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) +
;   ($struct_get($struct_loc(self, 0)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + ($struct_get($struct_loc(self, 0)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + ($struct_get($struct_loc(self, 0)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@579@01 $Struct)
(assert (=
  self@579@01
  ($struct_set<$Struct> self@576@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@576@01 8)) ($struct_get<Int> ($struct_loc<Int> self@576@01 2)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@576@01 8)) ($struct_get<Int> ($struct_loc<Int> self@576@01 2)))
    ($struct_get<Int> ($struct_loc<Int> self@576@01 0)))))))
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) -
;   ($struct_get($struct_loc(self, 0)): Int)): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) - ($struct_get($struct_loc(self, 0)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) - ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@580@01 $Struct)
(assert (=
  self@580@01
  ($struct_set<$Struct> self@579@01 5 (-
    ($struct_get<Int> ($struct_loc<Int> self@579@01 5))
    ($struct_get<Int> ($struct_loc<Int> self@579@01 0))))))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 7
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@580@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@580@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 7
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@580@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@580@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 675 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | live]
; [else-branch: 675 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 675 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(push) ; 7
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@580@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@580@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 676 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10)) | live]
; [else-branch: 676 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) | live]
(push) ; 8
; [then-branch: 676 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 676 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 677 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3)) | dead]
; [else-branch: 677 | !(!($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 677 | !(!($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 3)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 678 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10)) | live]
; [else-branch: 678 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) | live]
(push) ; 8
; [then-branch: 678 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 678 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 679 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3)) | dead]
; [else-branch: 679 | !(!($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3))) | live]
(push) ; 8
; [else-branch: 679 | !(!($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 680 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) | live]
; [else-branch: 680 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10)) | live]
(push) ; 8
; [then-branch: 680 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))))
(pop) ; 8
(push) ; 8
; [else-branch: 680 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 681 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3)) | dead]
; [else-branch: 681 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 681 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 3)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@580@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 682 | $struct_get[Bool]($struct_loc[Int](self@580@01, 3)) | dead]
; [else-branch: 682 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 3))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 682 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 3))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 683 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10)) | live]
; [else-branch: 683 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) | live]
(push) ; 8
; [then-branch: 683 | $struct_get[Bool]($struct_loc[Int](self@580@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@580@01 10)))
(pop) ; 8
(push) ; 8
; [else-branch: 683 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@580@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 684 | !($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3)) | dead]
; [else-branch: 684 | !(!($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3))) | live]
(push) ; 8
; [else-branch: 684 | !(!($struct_get[Bool]($struct_loc[Int](self@580@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@580@01, 3)))]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail@519@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail@519@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 685 | l$send_fail@519@01 | live]
; [else-branch: 685 | !(l$send_fail@519@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 685 | l$send_fail@519@01]
(assert l$send_fail@519@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 2)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(declare-const $t@581@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 686 | True | live]
; [else-branch: 686 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 686 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@582@01 $Snap)
(assert (= $t@582@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@583@01 $Struct)
(assert (=
  self@583@01
  ($struct_set<$Struct> self@509@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@583@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@583@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@583@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@583@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@583@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@583@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 687 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | live]
; [else-branch: 687 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 687 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0]
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@583@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@583@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 688 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10)) | live]
; [else-branch: 688 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) | live]
(push) ; 10
; [then-branch: 688 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 688 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 689 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3)) | dead]
; [else-branch: 689 | !(!($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 689 | !(!($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 3)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 690 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10)) | live]
; [else-branch: 690 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) | live]
(push) ; 10
; [then-branch: 690 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 690 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 691 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3)) | dead]
; [else-branch: 691 | !(!($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3))) | live]
(push) ; 10
; [else-branch: 691 | !(!($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 692 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) | live]
; [else-branch: 692 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10)) | live]
(push) ; 10
; [then-branch: 692 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))))
(pop) ; 10
(push) ; 10
; [else-branch: 692 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 3))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 693 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3)) | dead]
; [else-branch: 693 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 693 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 3)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@583@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 3)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 694 | $struct_get[Bool]($struct_loc[Int](self@583@01, 3)) | dead]
; [else-branch: 694 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 3))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 694 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 3))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 695 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10)) | live]
; [else-branch: 695 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) | live]
(push) ; 10
; [then-branch: 695 | $struct_get[Bool]($struct_loc[Int](self@583@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@583@01 10)))
(pop) ; 10
(push) ; 10
; [else-branch: 695 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@583@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 696 | !($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3)) | dead]
; [else-branch: 696 | !(!($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3))) | live]
(push) ; 10
; [else-branch: 696 | !(!($struct_get[Bool]($struct_loc[Int](self@583@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@583@01, 3)))]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
; [then-branch: 697 | False | dead]
; [else-branch: 697 | True | live]
(push) ; 8
; [else-branch: 697 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 685 | !(l$send_fail@519@01)]
(assert (not l$send_fail@519@01))
(pop) ; 7
; [eval] !l$send_fail
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail@519@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail@519@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 698 | !(l$send_fail@519@01) | live]
; [else-branch: 698 | l$send_fail@519@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 698 | !(l$send_fail@519@01)]
(assert (not l$send_fail@519@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@584@01 $Snap)
(assert (= $t@584@01 ($Snap.combine ($Snap.first $t@584@01) ($Snap.second $t@584@01))))
(assert (= ($Snap.first $t@584@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 0))))
(assert (= ($Snap.second $t@584@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@585@01 $Snap)
(assert (= $t@585@01 ($Snap.combine ($Snap.first $t@585@01) ($Snap.second $t@585@01))))
(assert (= ($Snap.first $t@585@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 1))))
(assert (= ($Snap.second $t@585@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@586@01 $Snap)
(assert (= $t@586@01 ($Snap.combine ($Snap.first $t@586@01) ($Snap.second $t@586@01))))
(assert (= ($Snap.first $t@586@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2))))
(assert (= ($Snap.second $t@586@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@587@01 $Snap)
(assert (= $t@587@01 ($Snap.combine ($Snap.first $t@587@01) ($Snap.second $t@587@01))))
(assert (= ($Snap.first $t@587@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 5))))
(assert (= ($Snap.second $t@587@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@588@01 $Snap)
(assert (= $t@588@01 ($Snap.combine ($Snap.first $t@588@01) ($Snap.second $t@588@01))))
(assert (= ($Snap.first $t@588@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 6))))
(assert (= ($Snap.second $t@588@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@589@01 $Snap)
(assert (= $t@589@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@590@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 9
; [then-branch: 699 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@523@01, 8)), $q0@590@01)) | live]
; [else-branch: 699 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@523@01, 8)), $q0@590@01) | live]
(push) ; 10
; [then-branch: 699 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@523@01, 8)), $q0@590@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 699 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@523@01, 8)), $q0@590@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@590@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1266@11@1266@345-aux|)))
(assert (forall (($q0@590@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@590@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1266@11@1266@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@591@01 $Snap)
(assert (= $t@591@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q0@592@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@592@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@592@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $q0@592@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1267@11@1267@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@593@01 $Snap)
(assert (= $t@593@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@594@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 9
; [then-branch: 700 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@523@01, 9)), $q1@594@01)) | live]
; [else-branch: 700 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@523@01, 9)), $q1@594@01) | live]
(push) ; 10
; [then-branch: 700 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@523@01, 9)), $q1@594@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 700 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@523@01, 9)), $q1@594@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@594@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1268@11@1268@345-aux|)))
(assert (forall (($q1@594@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@594@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1268@11@1268@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@595@01 $Snap)
(assert (= $t@595@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q1@596@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@596@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@596@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 9)) $q1@596@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1269@11@1269@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@597@01 $Snap)
(assert (= $t@597@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@598@01 $Snap)
(assert (= $t@598@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@599@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 8)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@599@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $a@599@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@580@01 8)) $a@599@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@523@01 8)) $a@599@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplessafe_remote_purchase.vy.vpr@1272@11@1272@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
(declare-const $t@600@01 $Snap)
(assert (= $t@600@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@580@01 1))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
(declare-const $t@601@01 $Snap)
(assert (= $t@601@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
(declare-const $t@602@01 $Snap)
(assert (= $t@602@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 701 | $struct_get[Int]($struct_loc[Int](self@580@01, 2)) != 0 | live]
; [else-branch: 701 | $struct_get[Int]($struct_loc[Int](self@580@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 701 | $struct_get[Int]($struct_loc[Int](self@580@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0)))
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@580@01 2)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@603@01 $Snap)
(assert (= $t@603@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 702 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)) | live]
; [else-branch: 702 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) | live]
(push) ; 9
; [then-branch: 702 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 702 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 703 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)) | dead]
; [else-branch: 703 | !(!($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 703 | !(!($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
(declare-const $t@604@01 $Snap)
(assert (= $t@604@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 704 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)) | live]
; [else-branch: 704 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) | live]
(push) ; 9
; [then-branch: 704 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 704 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 705 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)) | dead]
; [else-branch: 705 | !(!($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3))) | live]
(push) ; 9
; [else-branch: 705 | !(!($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
(declare-const $t@605@01 $Snap)
(assert (= $t@605@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 706 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) | live]
; [else-branch: 706 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)) | live]
(push) ; 9
; [then-branch: 706 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))))
(pop) ; 9
(push) ; 9
; [else-branch: 706 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 707 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)) | dead]
; [else-branch: 707 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 707 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))
    ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
(declare-const $t@606@01 $Snap)
(assert (= $t@606@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 708 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)) | dead]
; [else-branch: 708 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 708 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 3))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
(declare-const $t@607@01 $Snap)
(assert (= $t@607@01 $Snap.unit))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 709 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)) | live]
; [else-branch: 709 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) | live]
(push) ; 9
; [then-branch: 709 | $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10)))
(pop) ; 9
(push) ; 9
; [else-branch: 709 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> l$havoc$2@523@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 710 | !($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)) | dead]
; [else-branch: 710 | !(!($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3))) | live]
(push) ; 9
; [else-branch: 710 | !(!($struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 10))) && $struct_get[Bool]($struct_loc[Int](l$havoc$2@523@01, 3)))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@525@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call@525@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 711 | l$no_reentrant_call@525@01 | live]
; [else-branch: 711 | !(l$no_reentrant_call@525@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 711 | l$no_reentrant_call@525@01]
(assert l$no_reentrant_call@525@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 10, true): $Struct)
; [eval] ($struct_set(self, 10, true): $Struct)
(declare-const self@608@01 $Struct)
(assert (= self@608@01 ($struct_set<$Struct> self@580@01 10 true)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@609@01 $Struct)
(assert (=
  self@609@01
  ($struct_set<$Struct> self@608@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@608@01 8)) ($struct_get<Int> ($struct_loc<Int> self@608@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@608@01 8)) ($struct_get<Int> ($struct_loc<Int> self@608@01 1)))
    ($struct_get<Int> ($struct_loc<Int> self@608@01 5)))))))
; [exec]
; self := ($struct_set(self, 5, 0): $Struct)
; [eval] ($struct_set(self, 5, 0): $Struct)
(declare-const self@610@01 $Struct)
(assert (= self@610@01 ($struct_set<$Struct> self@609@01 5 0)))
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@528@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@528@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 712 | $out_of_gas@528@01 | live]
; [else-branch: 712 | !($out_of_gas@528@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 712 | $out_of_gas@528@01]
(assert $out_of_gas@528@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 713 | True | live]
; [else-branch: 713 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 713 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@611@01 $Snap)
(assert (= $t@611@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@612@01 $Struct)
(assert (=
  self@612@01
  ($struct_set<$Struct> self@509@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@612@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@612@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 11
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@612@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@612@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@612@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@612@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 714 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | live]
; [else-branch: 714 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 714 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0]
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@612@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@612@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 715 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10)) | live]
; [else-branch: 715 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) | live]
(push) ; 12
; [then-branch: 715 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 715 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 716 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3)) | dead]
; [else-branch: 716 | !(!($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 716 | !(!($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 3)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 717 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10)) | live]
; [else-branch: 717 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) | live]
(push) ; 12
; [then-branch: 717 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 717 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 718 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3)) | dead]
; [else-branch: 718 | !(!($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3))) | live]
(push) ; 12
; [else-branch: 718 | !(!($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 719 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) | live]
; [else-branch: 719 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10)) | live]
(push) ; 12
; [then-branch: 719 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))))
(pop) ; 12
(push) ; 12
; [else-branch: 719 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 720 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3)) | dead]
; [else-branch: 720 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 720 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 3)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@612@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 721 | $struct_get[Bool]($struct_loc[Int](self@612@01, 3)) | dead]
; [else-branch: 721 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 721 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 722 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10)) | live]
; [else-branch: 722 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) | live]
(push) ; 12
; [then-branch: 722 | $struct_get[Bool]($struct_loc[Int](self@612@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@612@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 722 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@612@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 723 | !($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3)) | dead]
; [else-branch: 723 | !(!($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3))) | live]
(push) ; 12
; [else-branch: 723 | !(!($struct_get[Bool]($struct_loc[Int](self@612@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@612@01, 3)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
; [then-branch: 724 | False | dead]
; [else-branch: 724 | True | live]
(push) ; 10
; [else-branch: 724 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 712 | !($out_of_gas@528@01)]
(assert (not $out_of_gas@528@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@528@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@528@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 725 | !($out_of_gas@528@01) | live]
; [else-branch: 725 | $out_of_gas@528@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 725 | !($out_of_gas@528@01)]
(assert (not $out_of_gas@528@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 726 | False | dead]
; [else-branch: 726 | True | live]
(push) ; 10
; [else-branch: 726 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 727 | True | live]
; [else-branch: 727 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 727 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@613@01 $Snap)
(assert (= $t@613@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@614@01 $Struct)
(assert (=
  self@614@01
  ($struct_set<$Struct> self@610@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@610@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@614@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@580@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@614@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@580@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 11
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@614@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@614@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@614@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@614@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 728 | $struct_get[Int]($struct_loc[Int](self@580@01, 2)) != 0 | live]
; [else-branch: 728 | $struct_get[Int]($struct_loc[Int](self@580@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 728 | $struct_get[Int]($struct_loc[Int](self@580@01, 2)) != 0]
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@614@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@580@01 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@580@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@614@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@580@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 729 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10)) | live]
; [else-branch: 729 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) | live]
(push) ; 12
; [then-branch: 729 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 729 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 730 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3)) | dead]
; [else-branch: 730 | !(!($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 730 | !(!($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 3)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 731 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10)) | live]
; [else-branch: 731 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) | live]
(push) ; 12
; [then-branch: 731 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 731 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 732 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3)) | dead]
; [else-branch: 732 | !(!($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3))) | live]
(push) ; 12
; [else-branch: 732 | !(!($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 733 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) | live]
; [else-branch: 733 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10)) | live]
(push) ; 12
; [then-branch: 733 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))))
(pop) ; 12
(push) ; 12
; [else-branch: 733 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 734 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3)) | dead]
; [else-branch: 734 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 734 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 3)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@614@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 735 | $struct_get[Bool]($struct_loc[Int](self@614@01, 3)) | dead]
; [else-branch: 735 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 735 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 736 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10)) | live]
; [else-branch: 736 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) | live]
(push) ; 12
; [then-branch: 736 | $struct_get[Bool]($struct_loc[Int](self@614@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@614@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 736 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@614@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 737 | !($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3)) | dead]
; [else-branch: 737 | !(!($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3))) | live]
(push) ; 12
; [else-branch: 737 | !(!($struct_get[Bool]($struct_loc[Int](self@614@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@614@01, 3)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 725 | $out_of_gas@528@01]
(assert $out_of_gas@528@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 711 | !(l$no_reentrant_call@525@01)]
(assert (not l$no_reentrant_call@525@01))
(pop) ; 8
; [eval] !l$no_reentrant_call
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call@525@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@525@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 738 | !(l$no_reentrant_call@525@01) | live]
; [else-branch: 738 | l$no_reentrant_call@525@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 738 | !(l$no_reentrant_call@525@01)]
(assert (not l$no_reentrant_call@525@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 10, true): $Struct)
; [eval] ($struct_set(self, 10, true): $Struct)
(declare-const self@615@01 $Struct)
(assert (= self@615@01 ($struct_set<$Struct> l$havoc$2@523@01 10 true)))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@616@01 $Struct)
(assert (=
  self@616@01
  ($struct_set<$Struct> self@615@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@615@01 8)) ($struct_get<Int> ($struct_loc<Int> self@615@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@615@01 8)) ($struct_get<Int> ($struct_loc<Int> self@615@01 1)))
    ($struct_get<Int> ($struct_loc<Int> self@615@01 5)))))))
; [exec]
; self := ($struct_set(self, 5, 0): $Struct)
; [eval] ($struct_set(self, 5, 0): $Struct)
(declare-const self@617@01 $Struct)
(assert (= self@617@01 ($struct_set<$Struct> self@616@01 5 0)))
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@528@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@528@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 739 | $out_of_gas@528@01 | live]
; [else-branch: 739 | !($out_of_gas@528@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 739 | $out_of_gas@528@01]
(assert $out_of_gas@528@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 740 | True | live]
; [else-branch: 740 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 740 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@618@01 $Snap)
(assert (= $t@618@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@619@01 $Struct)
(assert (=
  self@619@01
  ($struct_set<$Struct> self@509@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@509@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@619@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@619@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@509@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 11
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@619@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@619@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@619@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@619@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 741 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0 | live]
; [else-branch: 741 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 741 | $struct_get[Int]($struct_loc[Int](self@509@01, 2)) != 0]
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@619@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> self@509@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@619@01 2))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 742 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10)) | live]
; [else-branch: 742 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) | live]
(push) ; 12
; [then-branch: 742 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 742 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 743 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3)) | dead]
; [else-branch: 743 | !(!($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 743 | !(!($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 3)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 744 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10)) | live]
; [else-branch: 744 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) | live]
(push) ; 12
; [then-branch: 744 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 744 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 745 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3)) | dead]
; [else-branch: 745 | !(!($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3))) | live]
(push) ; 12
; [else-branch: 745 | !(!($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 746 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) | live]
; [else-branch: 746 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10)) | live]
(push) ; 12
; [then-branch: 746 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))))
(pop) ; 12
(push) ; 12
; [else-branch: 746 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 747 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3)) | dead]
; [else-branch: 747 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 747 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 3)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@619@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 748 | $struct_get[Bool]($struct_loc[Int](self@619@01, 3)) | dead]
; [else-branch: 748 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 748 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 749 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10)) | live]
; [else-branch: 749 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) | live]
(push) ; 12
; [then-branch: 749 | $struct_get[Bool]($struct_loc[Int](self@619@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@619@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 749 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@619@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 750 | !($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3)) | dead]
; [else-branch: 750 | !(!($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3))) | live]
(push) ; 12
; [else-branch: 750 | !(!($struct_get[Bool]($struct_loc[Int](self@619@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@619@01, 3)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
; [then-branch: 751 | False | dead]
; [else-branch: 751 | True | live]
(push) ; 10
; [else-branch: 751 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 739 | !($out_of_gas@528@01)]
(assert (not $out_of_gas@528@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@528@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@528@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 752 | !($out_of_gas@528@01) | live]
; [else-branch: 752 | $out_of_gas@528@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 752 | !($out_of_gas@528@01)]
(assert (not $out_of_gas@528@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 753 | False | dead]
; [else-branch: 753 | True | live]
(push) ; 10
; [else-branch: 753 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 754 | True | live]
; [else-branch: 754 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 754 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@620@01 $Snap)
(assert (= $t@620@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@529@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@621@01 $Struct)
(assert (=
  self@621@01
  ($struct_set<$Struct> self@617@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@617@01 5))
    l$havoc$6@529@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 1)): Int) ==
;   ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int) == ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(set-option :timeout 0)
(push) ; 11
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> self@621@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 1)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@621@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 1))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==
;   (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool) == (($struct_get($struct_loc(self, 2)): Int) == 0)
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 2)): Int) == 0
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 11
(assert (not (=
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@621@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))
  (= ($struct_get<Int> ($struct_loc<Int> self@621@01 2)) 0)))
; [exec]
; assert ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==>
;   ($struct_get($struct_loc(self, 2)): Int) ==
;   ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0 ==> ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int) != 0
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2)) 0)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2)) 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 755 | $struct_get[Int]($struct_loc[Int](l$havoc$2@523@01, 2)) != 0 | live]
; [else-branch: 755 | $struct_get[Int]($struct_loc[Int](l$havoc$2@523@01, 2)) == 0 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 755 | $struct_get[Int]($struct_loc[Int](l$havoc$2@523@01, 2)) != 0]
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2)) 0)))
; [eval] ($struct_get($struct_loc(self, 2)): Int) == ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): Int)
; [eval] $struct_loc($old_self, 2)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2)) 0)))
(push) ; 11
(assert (not (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@621@01 2))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2)) 0))
  (=
    ($struct_get<Int> ($struct_loc<Int> self@621@01 2))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@523@01 2)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($struct_get($struct_loc(self, 5)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($struct_get($struct_loc(self, 5)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 756 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10)) | live]
; [else-branch: 756 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) | live]
(push) ; 12
; [then-branch: 756 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 756 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 757 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3)) | dead]
; [else-branch: 757 | !(!($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 757 | !(!($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3)))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) == 0
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 758 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10)) | live]
; [else-branch: 758 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) | live]
(push) ; 12
; [then-branch: 758 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 758 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 759 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3)) | dead]
; [else-branch: 759 | !(!($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3))) | live]
(push) ; 12
; [else-branch: 759 | !(!($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [exec]
; assert ($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) &&
;   ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self,
;   1)): Int)): Int) >=
;   2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) >= 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int)))
; [eval] ($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 760 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) | live]
; [else-branch: 760 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10)) | live]
(push) ; 12
; [then-branch: 760 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))))
(pop) ; 12
(push) ; 12
; [else-branch: 760 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))
  (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 761 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3)) | dead]
; [else-branch: 761 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 761 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10)) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))
    ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))))
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Bool) ==>
;   (forall q$a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) }
;     0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==>
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) ==
;     (q$a == ($struct_get($struct_loc(self, 1)): Int) ?
;       2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) :
;       0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool) ==> (forall q$a: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) } 0 <= q$a && q$a <= 1461501637330902918203684832716283019655932542975 ==> ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), q$a): Int) == (q$a == ($struct_get($struct_loc(self, 1)): Int) ? 2 * $unwrap($wrap(($struct_get($struct_loc(self, 0)): Int))) : 0))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 762 | $struct_get[Bool]($struct_loc[Int](self@621@01, 3)) | dead]
; [else-branch: 762 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 3))) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 762 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 3)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 3))))
; [exec]
; assert !($struct_get($struct_loc(self, 10)): Bool) &&
;   ($struct_get($struct_loc(self, 3)): Bool) ==>
;   true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool) ==> true
; [eval] !($struct_get($struct_loc(self, 10)): Bool) && ($struct_get($struct_loc(self, 3)): Bool)
; [eval] !($struct_get($struct_loc(self, 10)): Bool)
; [eval] ($struct_get($struct_loc(self, 10)): Bool)
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 763 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10)) | live]
; [else-branch: 763 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) | live]
(push) ; 12
; [then-branch: 763 | $struct_get[Bool]($struct_loc[Int](self@621@01, 10))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@621@01 10)))
(pop) ; 12
(push) ; 12
; [else-branch: 763 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@621@01 10))))
; [eval] ($struct_get($struct_loc(self, 3)): Bool)
; [eval] $struct_loc(self, 3)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 764 | !($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3)) | dead]
; [else-branch: 764 | !(!($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3))) | live]
(push) ; 12
; [else-branch: 764 | !(!($struct_get[Bool]($struct_loc[Int](self@621@01, 10))) && $struct_get[Bool]($struct_loc[Int](self@621@01, 3)))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 752 | $out_of_gas@528@01]
(assert $out_of_gas@528@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 738 | l$no_reentrant_call@525@01]
(assert l$no_reentrant_call@525@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 698 | l$send_fail@519@01]
(assert l$send_fail@519@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 674 | $struct_get[Int]($struct_loc[Int](self@576@01, 5)) < $struct_get[Int]($struct_loc[Int](self@576@01, 0))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> self@576@01 5))
  ($struct_get<Int> ($struct_loc<Int> self@576@01 0))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 660 | $struct_get[Bool]($struct_loc[Int](self@509@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 4)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 646 | $struct_get[Int]($struct_loc[Int](msg@505@01, 0)) != $struct_get[Int]($struct_loc[Int](self@509@01, 2))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@505@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@509@01 2)))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 632 | $struct_get[Bool]($struct_loc[Int](self@509@01, 3))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@509@01 3)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
