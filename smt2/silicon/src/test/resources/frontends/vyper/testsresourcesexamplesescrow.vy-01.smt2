(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-08 21:11:35
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Contract 0)
(declare-sort $Blockchain 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
; ////////// Symbols
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun s$struct$self$init<$Struct> (Int Int Int Int Bool Bool Bool Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$thirty_days_passed%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$thirty_days_passed_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$pay_balance%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$pay_balance_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$accept%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$accept_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$deposit%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$deposit_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$cancel%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$cancel_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$kill%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$kill_0%trigger ($Snap Int Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 Int) ($arg_3 Int) ($arg_4 Bool) ($arg_5 Bool) ($arg_6 Bool) ($arg_7 Int) ($arg_8 Int) ($arg_9 Bool) ($arg_10 $Map<Int~_Int>) ($arg_11 $Map<Int~_Int>) ($arg_12 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 1))
          $arg_1)
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 2))
            $arg_2)
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 3))
              $arg_3)
            (and
              (=
                ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 4))
                $arg_4)
              (and
                (=
                  ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 8))
                        $arg_8)
                      (and
                        (=
                          ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 9))
                          $arg_9)
                        (and
                          (=
                            ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 10))
                            $arg_10)
                          (and
                            (=
                              ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 11))
                              $arg_11)
                            (=
                              ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12) 12))
                              $arg_12))))))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10 $arg_11 $arg_12))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 2))
                ($struct_get<Int> ($struct_loc<Int> $r 2)))
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> $l 3))
                  ($struct_get<Int> ($struct_loc<Int> $r 3)))
                (and
                  (=
                    ($struct_get<Bool> ($struct_loc<Int> $l 4))
                    ($struct_get<Bool> ($struct_loc<Int> $r 4)))
                  (and
                    (=
                      ($struct_get<Bool> ($struct_loc<Int> $l 5))
                      ($struct_get<Bool> ($struct_loc<Int> $r 5)))
                    (and
                      (=
                        ($struct_get<Bool> ($struct_loc<Int> $l 6))
                        ($struct_get<Bool> ($struct_loc<Int> $r 6)))
                      (and
                        (=
                          ($struct_get<Int> ($struct_loc<Int> $l 7))
                          ($struct_get<Int> ($struct_loc<Int> $r 7)))
                        (and
                          (=
                            ($struct_get<Int> ($struct_loc<Int> $l 8))
                            ($struct_get<Int> ($struct_loc<Int> $r 8)))
                          (and
                            (=
                              ($struct_get<Bool> ($struct_loc<Int> $l 9))
                              ($struct_get<Bool> ($struct_loc<Int> $r 9)))
                            (and
                              ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 10)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 10)))
                              (and
                                ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 11)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 11)))
                                (=
                                  ($struct_get<Bool> ($struct_loc<Int> $l 12))
                                  ($struct_get<Bool> ($struct_loc<Int> $r 12))))))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1556|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-1557|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1562|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1563|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1558|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-1559|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1564|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1565|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1560|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1561|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1566|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1567|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))))
(assert (= ($Snap.second $t@10@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 3)): Int) &&
;   ($struct_get($struct_loc($self$0, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 ($Snap.combine ($Snap.first $t@11@01) ($Snap.second $t@11@01))))
(assert (= ($Snap.first $t@11@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))))
(assert (= ($Snap.second $t@11@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 7)): Int) &&
;   ($struct_get($struct_loc($self$0, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 7))))
(assert (= ($Snap.second $t@12@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 8)): Int) &&
;   ($struct_get($struct_loc($self$0, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 ($Snap.combine ($Snap.first $t@13@01) ($Snap.second $t@13@01))))
(assert (= ($Snap.first $t@13@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] $struct_loc($self$0, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 8))))
(assert (= ($Snap.second $t@13@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] $struct_loc($self$0, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@15@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(push) ; 4
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 10)), $q0@15@01)) | live]
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 10)), $q0@15@01) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 10)), $q0@15@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 10)), $q0@15@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@15@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@628@11@628@357-aux|)))
(assert (forall (($q0@15@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@628@11@628@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int))
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int))
(declare-const $q0@17@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@17@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@17@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $q0@17@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@629@11@629@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@18@01 $Snap)
(assert (= $t@18@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@19@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(push) ; 4
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), $q1@19@01)) | live]
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), $q1@19@01) | live]
(push) ; 5
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), $q1@19@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 11)), $q1@19@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@19@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@630@11@630@357-aux|)))
(assert (forall (($q1@19@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@19@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@630@11@630@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int))
(declare-const $t@20@01 $Snap)
(assert (= $t@20@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int))
(declare-const $q1@21@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@21@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@21@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 11)) $q1@21@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@631@11@631@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 ($Snap.combine ($Snap.first $t@23@01) ($Snap.second $t@23@01))))
(assert (= ($Snap.first $t@23@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@23@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@24@01 $Snap)
(assert (= $t@24@01 ($Snap.combine ($Snap.first $t@24@01) ($Snap.second $t@24@01))))
(assert (= ($Snap.first $t@24@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@24@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 ($Snap.combine ($Snap.first $t@25@01) ($Snap.second $t@25@01))))
(assert (= ($Snap.first $t@25@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))))
(assert (= ($Snap.second $t@25@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 3)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 ($Snap.combine ($Snap.first $t@26@01) ($Snap.second $t@26@01))))
(assert (= ($Snap.first $t@26@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))))
(assert (= ($Snap.second $t@26@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 7)): Int) &&
;   ($struct_get($struct_loc($self$1, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 ($Snap.combine ($Snap.first $t@27@01) ($Snap.second $t@27@01))))
(assert (= ($Snap.first $t@27@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 7))))
(assert (= ($Snap.second $t@27@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 8)): Int) &&
;   ($struct_get($struct_loc($self$1, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 ($Snap.combine ($Snap.first $t@28@01) ($Snap.second $t@28@01))))
(assert (= ($Snap.first $t@28@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] $struct_loc($self$1, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 8))))
(assert (= ($Snap.second $t@28@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] $struct_loc($self$1, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@30@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 10)), $q0@30@01)) | live]
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 10)), $q0@30@01) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 10)), $q0@30@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 10)), $q0@30@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@30@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@639@11@639@357-aux|)))
(assert (forall (($q0@30@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@30@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@639@11@639@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int))
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int))
(declare-const $q0@32@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@32@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@32@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $q0@32@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@640@11@640@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@34@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), $q1@34@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), $q1@34@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), $q1@34@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 11)), $q1@34@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@34@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@641@11@641@357-aux|)))
(assert (forall (($q1@34@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@641@11@641@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int))
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int))
(declare-const $q1@36@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@36@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@36@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 11)) $q1@36@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@642@11@642@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 ($Snap.combine ($Snap.first $t@38@01) ($Snap.second $t@38@01))))
(assert (= ($Snap.first $t@38@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@38@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 ($Snap.combine ($Snap.first $t@39@01) ($Snap.second $t@39@01))))
(assert (= ($Snap.first $t@39@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@39@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 2)): Int) &&
;   ($struct_get($struct_loc($self$2, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@40@01 $Snap)
(assert (= $t@40@01 ($Snap.combine ($Snap.first $t@40@01) ($Snap.second $t@40@01))))
(assert (= ($Snap.first $t@40@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))))
(assert (= ($Snap.second $t@40@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 2)): Int)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 3)): Int) &&
;   ($struct_get($struct_loc($self$2, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 ($Snap.combine ($Snap.first $t@41@01) ($Snap.second $t@41@01))))
(assert (= ($Snap.first $t@41@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))))
(assert (= ($Snap.second $t@41@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 3)): Int)
; [eval] $struct_loc($self$2, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 7)): Int) &&
;   ($struct_get($struct_loc($self$2, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@42@01 $Snap)
(assert (= $t@42@01 ($Snap.combine ($Snap.first $t@42@01) ($Snap.second $t@42@01))))
(assert (= ($Snap.first $t@42@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 7))))
(assert (= ($Snap.second $t@42@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 7)): Int)
; [eval] $struct_loc($self$2, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 8)): Int) &&
;   ($struct_get($struct_loc($self$2, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 ($Snap.combine ($Snap.first $t@43@01) ($Snap.second $t@43@01))))
(assert (= ($Snap.first $t@43@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 8)): Int)
; [eval] $struct_loc($self$2, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 8))))
(assert (= ($Snap.second $t@43@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 8)): Int)
; [eval] $struct_loc($self$2, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@44@01 $Snap)
(assert (= $t@44@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@45@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 10)), $q0@45@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 10)), $q0@45@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 10)), $q0@45@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 10)), $q0@45@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@45@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@650@11@650@357-aux|)))
(assert (forall (($q0@45@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@45@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@650@11@650@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int))
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int))
(declare-const $q0@47@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@47@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@47@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $q0@47@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@651@11@651@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@48@01 $Snap)
(assert (= $t@48@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@49@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(push) ; 4
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), $q1@49@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), $q1@49@01) | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), $q1@49@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 11)), $q1@49@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@49@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@652@11@652@357-aux|)))
(assert (forall (($q1@49@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@652@11@652@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int))
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int))
(declare-const $q1@51@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@51@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@51@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 11)) $q1@51@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@653@11@653@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 ($Snap.combine ($Snap.first $t@53@01) ($Snap.second $t@53@01))))
(assert (= ($Snap.first $t@53@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@53@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (= ($Snap.first $t@54@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@54@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 ($Snap.combine ($Snap.first $t@55@01) ($Snap.second $t@55@01))))
(assert (= ($Snap.first $t@55@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@55@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 ($Snap.combine ($Snap.first $t@57@01) ($Snap.second $t@57@01))))
(assert (= ($Snap.first $t@57@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@57@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@60@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@62@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@62@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $a@62@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 10)) $a@62@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $a@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@662@11@662@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@64@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@64@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $a@64@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 10)) $a@64@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 10)) $a@64@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@663@11@663@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@65@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@66@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@67@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@68@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@69@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@70@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 ($Snap.combine ($Snap.first $t@71@01) ($Snap.second $t@71@01))))
(assert (= ($Snap.first $t@71@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 0))))
(assert (= ($Snap.second $t@71@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 ($Snap.combine ($Snap.first $t@72@01) ($Snap.second $t@72@01))))
(assert (= ($Snap.first $t@72@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 1))))
(assert (= ($Snap.second $t@72@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 2)): Int) &&
;   ($struct_get($struct_loc($self$0, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 ($Snap.combine ($Snap.first $t@73@01) ($Snap.second $t@73@01))))
(assert (= ($Snap.first $t@73@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 2))))
(assert (= ($Snap.second $t@73@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 2)): Int)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 3)): Int) &&
;   ($struct_get($struct_loc($self$0, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 ($Snap.combine ($Snap.first $t@74@01) ($Snap.second $t@74@01))))
(assert (= ($Snap.first $t@74@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 3))))
(assert (= ($Snap.second $t@74@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 3)): Int)
; [eval] $struct_loc($self$0, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 7)): Int) &&
;   ($struct_get($struct_loc($self$0, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 ($Snap.combine ($Snap.first $t@75@01) ($Snap.second $t@75@01))))
(assert (= ($Snap.first $t@75@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 7))))
(assert (= ($Snap.second $t@75@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 7)): Int)
; [eval] $struct_loc($self$0, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 8)): Int) &&
;   ($struct_get($struct_loc($self$0, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 ($Snap.combine ($Snap.first $t@76@01) ($Snap.second $t@76@01))))
(assert (= ($Snap.first $t@76@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] $struct_loc($self$0, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 8))))
(assert (= ($Snap.second $t@76@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 8)): Int)
; [eval] $struct_loc($self$0, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@78@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(push) ; 4
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@65@01, 10)), $q0@78@01)) | live]
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@65@01, 10)), $q0@78@01) | live]
(push) ; 5
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@65@01, 10)), $q0@78@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@65@01, 10)), $q0@78@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@78@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@680@11@680@357-aux|)))
(assert (forall (($q0@78@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@78@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@680@11@680@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int))
(declare-const $t@79@01 $Snap)
(assert (= $t@79@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int))
(declare-const $q0@80@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@80@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@80@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $q0@80@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@681@11@681@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@81@01 $Snap)
(assert (= $t@81@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@82@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(push) ; 4
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@65@01, 11)), $q1@82@01)) | live]
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@65@01, 11)), $q1@82@01) | live]
(push) ; 5
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@65@01, 11)), $q1@82@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@65@01, 11)), $q1@82@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@82@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@682@11@682@357-aux|)))
(assert (forall (($q1@82@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@82@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@682@11@682@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int))
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int))
(declare-const $q1@84@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@84@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@84@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 11)) $q1@84@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@683@11@683@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@65@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 ($Snap.combine ($Snap.first $t@86@01) ($Snap.second $t@86@01))))
(assert (= ($Snap.first $t@86@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 0))))
(assert (= ($Snap.second $t@86@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 ($Snap.combine ($Snap.first $t@87@01) ($Snap.second $t@87@01))))
(assert (= ($Snap.first $t@87@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 1))))
(assert (= ($Snap.second $t@87@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 2)): Int) &&
;   ($struct_get($struct_loc($self$1, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 ($Snap.combine ($Snap.first $t@88@01) ($Snap.second $t@88@01))))
(assert (= ($Snap.first $t@88@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 2))))
(assert (= ($Snap.second $t@88@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 2)): Int)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 3)): Int) &&
;   ($struct_get($struct_loc($self$1, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@89@01 $Snap)
(assert (= $t@89@01 ($Snap.combine ($Snap.first $t@89@01) ($Snap.second $t@89@01))))
(assert (= ($Snap.first $t@89@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 3))))
(assert (= ($Snap.second $t@89@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 3)): Int)
; [eval] $struct_loc($self$1, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 7)): Int) &&
;   ($struct_get($struct_loc($self$1, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 ($Snap.combine ($Snap.first $t@90@01) ($Snap.second $t@90@01))))
(assert (= ($Snap.first $t@90@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 7))))
(assert (= ($Snap.second $t@90@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 7)): Int)
; [eval] $struct_loc($self$1, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 8)): Int) &&
;   ($struct_get($struct_loc($self$1, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@91@01 $Snap)
(assert (= $t@91@01 ($Snap.combine ($Snap.first $t@91@01) ($Snap.second $t@91@01))))
(assert (= ($Snap.first $t@91@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] $struct_loc($self$1, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 8))))
(assert (= ($Snap.second $t@91@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 8)): Int)
; [eval] $struct_loc($self$1, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@93@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(push) ; 4
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@67@01, 10)), $q0@93@01)) | live]
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@67@01, 10)), $q0@93@01) | live]
(push) ; 5
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@67@01, 10)), $q0@93@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@67@01, 10)), $q0@93@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@93@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@691@11@691@357-aux|)))
(assert (forall (($q0@93@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@93@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@691@11@691@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int))
(declare-const $t@94@01 $Snap)
(assert (= $t@94@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int))
(declare-const $q0@95@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@95@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@95@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $q0@95@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@692@11@692@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@97@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(push) ; 4
; [then-branch: 9 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@67@01, 11)), $q1@97@01)) | live]
; [else-branch: 9 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@67@01, 11)), $q1@97@01) | live]
(push) ; 5
; [then-branch: 9 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@67@01, 11)), $q1@97@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 9 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@67@01, 11)), $q1@97@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@97@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@693@11@693@357-aux|)))
(assert (forall (($q1@97@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@97@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@693@11@693@357|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int))
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int))
(declare-const $q1@99@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 11)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@99@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@99@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 11)) $q1@99@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@694@11@694@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@67@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@101@01 $Snap)
(assert (= $t@101@01 ($Snap.combine ($Snap.first $t@101@01) ($Snap.second $t@101@01))))
(assert (= ($Snap.first $t@101@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@69@01 0))))
(assert (= ($Snap.second $t@101@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@69@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 ($Snap.combine ($Snap.first $t@102@01) ($Snap.second $t@102@01))))
(assert (= ($Snap.first $t@102@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@69@01 1))))
(assert (= ($Snap.second $t@102@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@69@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@103@01 $Snap)
(assert (= $t@103@01 ($Snap.combine ($Snap.first $t@103@01) ($Snap.second $t@103@01))))
(assert (= ($Snap.first $t@103@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@69@01 2))))
(assert (= ($Snap.second $t@103@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@69@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@104@01 $Snap)
(assert (= $t@104@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@69@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 ($Snap.combine ($Snap.first $t@105@01) ($Snap.second $t@105@01))))
(assert (= ($Snap.first $t@105@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@69@01 4))))
(assert (= ($Snap.second $t@105@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@69@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@106@01 $Snap)
(assert (= $t@106@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@69@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@107@01 $Snap)
(assert (= $t@107@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@108@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 10)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 10)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@108@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $a@108@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@65@01 10)) $a@108@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@67@01 10)) $a@108@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@702@11@702@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@109@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@110@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@111@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@112@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@113@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@114@01 Int)
; [exec]
; var block: $Struct
(declare-const block@115@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 ($Snap.combine ($Snap.first $t@116@01) ($Snap.second $t@116@01))))
(assert (= ($Snap.first $t@116@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@109@01 0))))
(assert (= ($Snap.second $t@116@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@109@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@117@01 $Snap)
(assert (= $t@117@01 ($Snap.combine ($Snap.first $t@117@01) ($Snap.second $t@117@01))))
(assert (= ($Snap.first $t@117@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@109@01 1))))
(assert (= ($Snap.second $t@117@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@109@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 ($Snap.combine ($Snap.first $t@118@01) ($Snap.second $t@118@01))))
(assert (= ($Snap.first $t@118@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@109@01 2))))
(assert (= ($Snap.second $t@118@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@109@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@119@01 $Snap)
(assert (= $t@119@01 ($Snap.combine ($Snap.first $t@119@01) ($Snap.second $t@119@01))))
(assert (= ($Snap.first $t@119@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@109@01 3))))
(assert (= ($Snap.second $t@119@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@109@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 ($Snap.combine ($Snap.first $t@120@01) ($Snap.second $t@120@01))))
(assert (= ($Snap.first $t@120@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@109@01 7))))
(assert (= ($Snap.second $t@120@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@109@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 ($Snap.combine ($Snap.first $t@121@01) ($Snap.second $t@121@01))))
(assert (= ($Snap.first $t@121@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@109@01 8))))
(assert (= ($Snap.second $t@121@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@109@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@123@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@109@01, 10)), $q0@123@01)) | live]
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@109@01, 10)), $q0@123@01) | live]
(push) ; 5
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@109@01, 10)), $q0@123@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@109@01, 10)), $q0@123@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@123@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@720@11@720@348-aux|)))
(assert (forall (($q0@123@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@123@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@720@11@720@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@125@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@125@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@125@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 10)) $q0@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@721@11@721@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@127@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@109@01, 11)), $q1@127@01)) | live]
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@109@01, 11)), $q1@127@01) | live]
(push) ; 5
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@109@01, 11)), $q1@127@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@109@01, 11)), $q1@127@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@127@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@722@11@722@348-aux|)))
(assert (forall (($q1@127@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@127@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@722@11@722@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@129@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@129@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@129@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@109@01 11)) $q1@129@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@723@11@723@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@130@01 $Snap)
(assert (= $t@130@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@109@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@131@01 $Snap)
(assert (= $t@131@01 ($Snap.combine ($Snap.first $t@131@01) ($Snap.second $t@131@01))))
(assert (= ($Snap.first $t@131@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 0))))
(assert (= ($Snap.second $t@131@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@132@01 $Snap)
(assert (= $t@132@01 ($Snap.combine ($Snap.first $t@132@01) ($Snap.second $t@132@01))))
(assert (= ($Snap.first $t@132@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 1))))
(assert (= ($Snap.second $t@132@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 2)): Int) &&
;   ($struct_get($struct_loc($pre_self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 ($Snap.combine ($Snap.first $t@133@01) ($Snap.second $t@133@01))))
(assert (= ($Snap.first $t@133@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 2))))
(assert (= ($Snap.second $t@133@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 2)): Int)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 3)): Int) &&
;   ($struct_get($struct_loc($pre_self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@134@01 $Snap)
(assert (= $t@134@01 ($Snap.combine ($Snap.first $t@134@01) ($Snap.second $t@134@01))))
(assert (= ($Snap.first $t@134@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] $struct_loc($pre_self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 3))))
(assert (= ($Snap.second $t@134@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 3)): Int)
; [eval] $struct_loc($pre_self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 7)): Int) &&
;   ($struct_get($struct_loc($pre_self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(assert (= ($Snap.first $t@135@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] $struct_loc($pre_self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 7))))
(assert (= ($Snap.second $t@135@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 7)): Int)
; [eval] $struct_loc($pre_self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 8)): Int) &&
;   ($struct_get($struct_loc($pre_self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@136@01 $Snap)
(assert (= $t@136@01 ($Snap.combine ($Snap.first $t@136@01) ($Snap.second $t@136@01))))
(assert (= ($Snap.first $t@136@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 8)): Int)
; [eval] $struct_loc($pre_self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 8))))
(assert (= ($Snap.second $t@136@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 8)): Int)
; [eval] $struct_loc($pre_self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@137@01 $Snap)
(assert (= $t@137@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@138@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(push) ; 4
; [then-branch: 12 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@111@01, 10)), $q0@138@01)) | live]
; [else-branch: 12 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@111@01, 10)), $q0@138@01) | live]
(push) ; 5
; [then-branch: 12 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@111@01, 10)), $q0@138@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@111@01, 10)), $q0@138@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@138@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@731@11@731@363-aux|)))
(assert (forall (($q0@138@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@138@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@731@11@731@363|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int))
(declare-const $t@139@01 $Snap)
(assert (= $t@139@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@140@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@140@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@140@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 10)) $q0@140@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@732@11@732@271|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@141@01 $Snap)
(assert (= $t@141@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@142@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 11)
(push) ; 4
; [then-branch: 13 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@111@01, 11)), $q1@142@01)) | live]
; [else-branch: 13 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@111@01, 11)), $q1@142@01) | live]
(push) ; 5
; [then-branch: 13 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@111@01, 11)), $q1@142@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 13 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@111@01, 11)), $q1@142@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@142@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@733@11@733@363-aux|)))
(assert (forall (($q1@142@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@142@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@733@11@733@363|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])): Int))
(declare-const $t@143@01 $Snap)
(assert (= $t@143@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@144@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 11)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 11)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@144@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@144@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@111@01 11)) $q1@144@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@734@11@734@271|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@111@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 ($Snap.combine ($Snap.first $t@146@01) ($Snap.second $t@146@01))))
(assert (= ($Snap.first $t@146@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@115@01 0))))
(assert (= ($Snap.second $t@146@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@115@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 ($Snap.combine ($Snap.first $t@147@01) ($Snap.second $t@147@01))))
(assert (= ($Snap.first $t@147@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@115@01 1))))
(assert (= ($Snap.second $t@147@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@115@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 ($Snap.combine ($Snap.first $t@148@01) ($Snap.second $t@148@01))))
(assert (= ($Snap.first $t@148@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@115@01 2))))
(assert (= ($Snap.second $t@148@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@115@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@115@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@150@01 $Snap)
(assert (= $t@150@01 ($Snap.combine ($Snap.first $t@150@01) ($Snap.second $t@150@01))))
(assert (= ($Snap.first $t@150@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@115@01 4))))
(assert (= ($Snap.second $t@150@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@115@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@115@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@114@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@153@01 $Snap)
(assert (= $t@153@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@154@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@155@01 $Struct)
(assert (=
  self@155@01
  ($struct_set<$Struct> self@109@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@109@01 7))
    $havoc@114@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const l$buyer_address@156@01 Int)
(declare-const l$seller_address@157@01 Int)
(declare-const $succ@158@01 Bool)
(declare-const l$buyer_address@159@01 Int)
(declare-const l$seller_address@160@01 Int)
(declare-const $succ@161@01 Bool)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@162@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@163@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@164@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@165@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@166@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@167@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@168@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@169@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@170@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@171@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@172@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@173@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@174@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@175@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@176@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@177@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@178@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@179@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@180@01 $Snap)
(assert (= $t@180@01 ($Snap.combine ($Snap.first $t@180@01) ($Snap.second $t@180@01))))
(assert (= ($Snap.first $t@180@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@166@01 0))))
(assert (= ($Snap.second $t@180@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@166@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@181@01 $Snap)
(assert (= $t@181@01 ($Snap.combine ($Snap.first $t@181@01) ($Snap.second $t@181@01))))
(assert (= ($Snap.first $t@181@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@166@01 1))))
(assert (= ($Snap.second $t@181@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@166@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@182@01 $Snap)
(assert (= $t@182@01 ($Snap.combine ($Snap.first $t@182@01) ($Snap.second $t@182@01))))
(assert (= ($Snap.first $t@182@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@166@01 2))))
(assert (= ($Snap.second $t@182@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@166@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@183@01 $Snap)
(assert (= $t@183@01 ($Snap.combine ($Snap.first $t@183@01) ($Snap.second $t@183@01))))
(assert (= ($Snap.first $t@183@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@166@01 3))))
(assert (= ($Snap.second $t@183@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@166@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@184@01 $Snap)
(assert (= $t@184@01 ($Snap.combine ($Snap.first $t@184@01) ($Snap.second $t@184@01))))
(assert (= ($Snap.first $t@184@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@166@01 7))))
(assert (= ($Snap.second $t@184@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@166@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 ($Snap.combine ($Snap.first $t@185@01) ($Snap.second $t@185@01))))
(assert (= ($Snap.first $t@185@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@166@01 8))))
(assert (= ($Snap.second $t@185@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@166@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@186@01 $Snap)
(assert (= $t@186@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@187@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 14 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@166@01, 10)), $q0@187@01)) | live]
; [else-branch: 14 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@166@01, 10)), $q0@187@01) | live]
(push) ; 5
; [then-branch: 14 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@166@01, 10)), $q0@187@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 14 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@166@01, 10)), $q0@187@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@187@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@777@11@777@348-aux|)))
(assert (forall (($q0@187@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@187@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@777@11@777@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@188@01 $Snap)
(assert (= $t@188@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@189@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@189@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@189@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 10)) $q0@189@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@778@11@778@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@190@01 $Snap)
(assert (= $t@190@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@191@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@166@01, 11)), $q1@191@01)) | live]
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@166@01, 11)), $q1@191@01) | live]
(push) ; 5
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@166@01, 11)), $q1@191@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@166@01, 11)), $q1@191@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@191@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@779@11@779@348-aux|)))
(assert (forall (($q1@191@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@779@11@779@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@192@01 $Snap)
(assert (= $t@192@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@193@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@193@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@193@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@166@01 11)) $q1@193@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@780@11@780@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@194@01 $Snap)
(assert (= $t@194@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@166@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@195@01 $Snap)
(assert (= $t@195@01 ($Snap.combine ($Snap.first $t@195@01) ($Snap.second $t@195@01))))
(assert (= ($Snap.first $t@195@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@195@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$buyer_address &&
;   l$buyer_address <= 1461501637330902918203684832716283019655932542975
(declare-const $t@196@01 $Snap)
(assert (= $t@196@01 ($Snap.combine ($Snap.first $t@196@01) ($Snap.second $t@196@01))))
(assert (= ($Snap.first $t@196@01) $Snap.unit))
; [eval] 0 <= l$buyer_address
(assert (<= 0 l$buyer_address@159@01))
(assert (= ($Snap.second $t@196@01) $Snap.unit))
; [eval] l$buyer_address <= 1461501637330902918203684832716283019655932542975
(assert (<= l$buyer_address@159@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= l$seller_address &&
;   l$seller_address <= 1461501637330902918203684832716283019655932542975
(declare-const $t@197@01 $Snap)
(assert (= $t@197@01 ($Snap.combine ($Snap.first $t@197@01) ($Snap.second $t@197@01))))
(assert (= ($Snap.first $t@197@01) $Snap.unit))
; [eval] 0 <= l$seller_address
(assert (<= 0 l$seller_address@160@01))
(assert (= ($Snap.second $t@197@01) $Snap.unit))
; [eval] l$seller_address <= 1461501637330902918203684832716283019655932542975
(assert (<= l$seller_address@160@01 1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@198@01 $Snap)
(assert (= $t@198@01 ($Snap.combine ($Snap.first $t@198@01) ($Snap.second $t@198@01))))
(assert (= ($Snap.first $t@198@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@163@01 0))))
(assert (= ($Snap.second $t@198@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@163@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@199@01 $Snap)
(assert (= $t@199@01 ($Snap.combine ($Snap.first $t@199@01) ($Snap.second $t@199@01))))
(assert (= ($Snap.first $t@199@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@163@01 1))))
(assert (= ($Snap.second $t@199@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@163@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@200@01 $Snap)
(assert (= $t@200@01 ($Snap.combine ($Snap.first $t@200@01) ($Snap.second $t@200@01))))
(assert (= ($Snap.first $t@200@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@163@01 2))))
(assert (= ($Snap.second $t@200@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@163@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@201@01 $Snap)
(assert (= $t@201@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@163@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@202@01 $Snap)
(assert (= $t@202@01 ($Snap.combine ($Snap.first $t@202@01) ($Snap.second $t@202@01))))
(assert (= ($Snap.first $t@202@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@163@01 4))))
(assert (= ($Snap.second $t@202@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@163@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@203@01 $Snap)
(assert (= $t@203@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@163@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@204@01 $Snap)
(assert (= $t@204@01 ($Snap.combine ($Snap.first $t@204@01) ($Snap.second $t@204@01))))
(assert (= ($Snap.first $t@204@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@162@01 0))))
(assert (= ($Snap.second $t@204@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@162@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 ($Snap.combine ($Snap.first $t@205@01) ($Snap.second $t@205@01))))
(assert (= ($Snap.first $t@205@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@162@01 1))))
(assert (= ($Snap.second $t@205@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@162@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 ($Snap.combine ($Snap.first $t@206@01) ($Snap.second $t@206@01))))
(assert (= ($Snap.first $t@206@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@162@01 2))))
(assert (= ($Snap.second $t@206@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@162@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@207@01 $Snap)
(assert (= $t@207@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@162@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@162@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, 0, 0, false, false, false, 0, 0, false, ($map_init(0): $Map[Int, Int]),
;   ($map_init(0): $Map[Int, Int]), false)
; [eval] s$struct$self$init(0, 0, 0, 0, false, false, false, 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@209@01 $Struct)
(assert (=
  self@209@01
  (s$struct$self$init<$Struct> 0 0 0 0 false false false 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@210@01 $Snap)
(assert (= $t@210@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@176@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@211@01 $Struct)
(assert (=
  self@211@01
  ($struct_set<$Struct> self@209@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@209@01 7))
    l$havoc@176@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@162@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, l$buyer_address): $Struct)
; [eval] ($struct_set(self, 0, l$buyer_address): $Struct)
(declare-const self@213@01 $Struct)
(assert (= self@213@01 ($struct_set<$Struct> self@211@01 0 l$buyer_address@159@01)))
; [exec]
; self := ($struct_set(self, 1, l$seller_address): $Struct)
; [eval] ($struct_set(self, 1, l$seller_address): $Struct)
(declare-const self@214@01 $Struct)
(assert (= self@214@01 ($struct_set<$Struct> self@213@01 1 l$seller_address@160@01)))
; [exec]
; self := ($struct_set(self, 2, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_set(self, 2, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@215@01 $Struct)
(assert (=
  self@215@01
  ($struct_set<$Struct> self@214@01 2 ($struct_get<Int> ($struct_loc<Int> msg@162@01 0)))))
; [exec]
; self := ($struct_set(self, 3, $unwrap($wrap(($struct_get($struct_loc(block,
;   4)): Int)))): $Struct)
; [eval] ($struct_set(self, 3, $unwrap($wrap(($struct_get($struct_loc(block, 4)): Int)))): $Struct)
; [eval] $unwrap($wrap(($struct_get($struct_loc(block, 4)): Int)))
; [eval] $wrap(($struct_get($struct_loc(block, 4)): Int))
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(declare-const self@216@01 $Struct)
(assert (=
  self@216@01
  ($struct_set<$Struct> self@215@01 3 ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> block@163@01 4)))))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@177@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@177@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | $out_of_gas@177@01 | live]
; [else-branch: 16 | !($out_of_gas@177@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 16 | $out_of_gas@177@01]
(assert $out_of_gas@177@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | True | live]
; [else-branch: 17 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 17 | True]
; [exec]
; $old_self := self
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | True | live]
; [else-branch: 18 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 18 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@217@01 $Snap)
(assert (= $t@217@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@178@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@218@01 $Struct)
(assert (=
  self@218@01
  ($struct_set<$Struct> self@166@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@166@01 7))
    l$havoc$1@178@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | True | live]
; [else-branch: 19 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 19 | True]
; [exec]
; $old_self := self
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 20 | False | dead]
; [else-branch: 20 | True | live]
(push) ; 6
; [else-branch: 20 | True]
(pop) ; 6
(pop) ; 5
; [then-branch: 21 | False | dead]
; [else-branch: 21 | True | live]
(push) ; 5
; [else-branch: 21 | True]
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 22 | False | dead]
; [else-branch: 22 | True | live]
(push) ; 4
; [else-branch: 22 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 16 | !($out_of_gas@177@01)]
(assert (not $out_of_gas@177@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@177@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@177@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | !($out_of_gas@177@01) | live]
; [else-branch: 23 | $out_of_gas@177@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 23 | !($out_of_gas@177@01)]
(assert (not $out_of_gas@177@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | True | live]
; [else-branch: 24 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 24 | True]
; [exec]
; $old_self := self
; [eval] !$succ
; [then-branch: 25 | False | dead]
; [else-branch: 25 | True | live]
(push) ; 5
; [else-branch: 25 | True]
(pop) ; 5
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | True | live]
; [else-branch: 26 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 26 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@178@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@220@01 $Struct)
(assert (=
  self@220@01
  ($struct_set<$Struct> self@216@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@216@01 7))
    l$havoc$1@178@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | True | live]
; [else-branch: 27 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 27 | True]
; [exec]
; $old_self := self
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 28 | False | dead]
; [else-branch: 28 | True | live]
(push) ; 6
; [else-branch: 28 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 29 | False | dead]
; [else-branch: 29 | True | live]
(push) ; 4
; [else-branch: 29 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 23 | $out_of_gas@177@01]
(assert $out_of_gas@177@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$accept ----------
(declare-const $succ@221@01 Bool)
(declare-const $succ@222@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@223@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@224@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@225@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@226@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@227@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@228@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@229@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@230@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@231@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@232@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@233@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@234@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@235@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@236@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@237@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$havoc: $Map[Int, $Struct]
(declare-const l$i0$havoc@238@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$send_fail: Bool
(declare-const l$i0$send_fail@239@01 Bool)
; [exec]
; var i1$$pre_self: $Struct
(declare-const i1$$pre_self@240@01 $Struct)
; [exec]
; var i1$$pre_$contracts: $Map[Int, $Struct]
(declare-const i1$$pre_$contracts@241@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$havoc$1: $Map[Int, $Struct]
(declare-const l$i0$havoc$1@242@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$havoc$2: $Struct
(declare-const l$i0$havoc$2@243@01 $Struct)
; [exec]
; var l$i0$havoc$3: $Map[Int, $Struct]
(declare-const l$i0$havoc$3@244@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$no_reentrant_call: Bool
(declare-const l$i0$no_reentrant_call@245@01 Bool)
; [exec]
; var l$i0$havoc$4: $Map[Int, $Struct]
(declare-const l$i0$havoc$4@246@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$havoc$5: $Map[Int, $Struct]
(declare-const l$i0$havoc$5@247@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$havoc$6: $Map[Int, $Struct]
(declare-const l$i0$havoc$6@248@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$send_fail$1: Bool
(declare-const l$i0$send_fail$1@249@01 Bool)
; [exec]
; var i2$$pre_self: $Struct
(declare-const i2$$pre_self@250@01 $Struct)
; [exec]
; var i2$$pre_$contracts: $Map[Int, $Struct]
(declare-const i2$$pre_$contracts@251@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$havoc$7: $Map[Int, $Struct]
(declare-const l$i0$havoc$7@252@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$havoc$8: $Struct
(declare-const l$i0$havoc$8@253@01 $Struct)
; [exec]
; var l$i0$havoc$9: $Map[Int, $Struct]
(declare-const l$i0$havoc$9@254@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$no_reentrant_call$1: Bool
(declare-const l$i0$no_reentrant_call$1@255@01 Bool)
; [exec]
; var l$i0$havoc$10: $Map[Int, $Struct]
(declare-const l$i0$havoc$10@256@01 $Map<Int~_$Struct>)
; [exec]
; var l$i0$havoc$11: $Map[Int, $Struct]
(declare-const l$i0$havoc$11@257@01 $Map<Int~_$Struct>)
; [exec]
; var i3$$res: Bool
(declare-const i3$$res@258@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@259@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@260@01 Bool)
; [exec]
; var i4$$pre_self: $Struct
(declare-const i4$$pre_self@261@01 $Struct)
; [exec]
; var i4$$pre_$contracts: $Map[Int, $Struct]
(declare-const i4$$pre_$contracts@262@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@263@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@264@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@265@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@266@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@267@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@268@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@269@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@270@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@271@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@272@01 $Snap)
(assert (= $t@272@01 ($Snap.combine ($Snap.first $t@272@01) ($Snap.second $t@272@01))))
(assert (= ($Snap.first $t@272@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@227@01 0))))
(assert (= ($Snap.second $t@272@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@227@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@273@01 $Snap)
(assert (= $t@273@01 ($Snap.combine ($Snap.first $t@273@01) ($Snap.second $t@273@01))))
(assert (= ($Snap.first $t@273@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@227@01 1))))
(assert (= ($Snap.second $t@273@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@227@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@274@01 $Snap)
(assert (= $t@274@01 ($Snap.combine ($Snap.first $t@274@01) ($Snap.second $t@274@01))))
(assert (= ($Snap.first $t@274@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@227@01 2))))
(assert (= ($Snap.second $t@274@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@227@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@275@01 $Snap)
(assert (= $t@275@01 ($Snap.combine ($Snap.first $t@275@01) ($Snap.second $t@275@01))))
(assert (= ($Snap.first $t@275@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@227@01 3))))
(assert (= ($Snap.second $t@275@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@227@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@276@01 $Snap)
(assert (= $t@276@01 ($Snap.combine ($Snap.first $t@276@01) ($Snap.second $t@276@01))))
(assert (= ($Snap.first $t@276@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@227@01 7))))
(assert (= ($Snap.second $t@276@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 ($Snap.combine ($Snap.first $t@277@01) ($Snap.second $t@277@01))))
(assert (= ($Snap.first $t@277@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@227@01 8))))
(assert (= ($Snap.second $t@277@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@227@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@278@01 $Snap)
(assert (= $t@278@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@279@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 30 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@227@01, 10)), $q0@279@01)) | live]
; [else-branch: 30 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@227@01, 10)), $q0@279@01) | live]
(push) ; 5
; [then-branch: 30 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@227@01, 10)), $q0@279@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 30 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@227@01, 10)), $q0@279@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@279@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@907@11@907@348-aux|)))
(assert (forall (($q0@279@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@279@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@907@11@907@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@280@01 $Snap)
(assert (= $t@280@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@281@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@281@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@281@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 10)) $q0@281@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@908@11@908@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@282@01 $Snap)
(assert (= $t@282@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@283@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 31 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@227@01, 11)), $q1@283@01)) | live]
; [else-branch: 31 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@227@01, 11)), $q1@283@01) | live]
(push) ; 5
; [then-branch: 31 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@227@01, 11)), $q1@283@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 31 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@227@01, 11)), $q1@283@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@283@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@909@11@909@348-aux|)))
(assert (forall (($q1@283@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@283@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@909@11@909@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@284@01 $Snap)
(assert (= $t@284@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@285@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@285@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@285@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@227@01 11)) $q1@285@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@910@11@910@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@286@01 $Snap)
(assert (= $t@286@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@227@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@287@01 $Snap)
(assert (= $t@287@01 ($Snap.combine ($Snap.first $t@287@01) ($Snap.second $t@287@01))))
(assert (= ($Snap.first $t@287@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@287@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 ($Snap.combine ($Snap.first $t@288@01) ($Snap.second $t@288@01))))
(assert (= ($Snap.first $t@288@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@224@01 0))))
(assert (= ($Snap.second $t@288@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@224@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 ($Snap.combine ($Snap.first $t@289@01) ($Snap.second $t@289@01))))
(assert (= ($Snap.first $t@289@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@224@01 1))))
(assert (= ($Snap.second $t@289@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@224@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 ($Snap.combine ($Snap.first $t@290@01) ($Snap.second $t@290@01))))
(assert (= ($Snap.first $t@290@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@224@01 2))))
(assert (= ($Snap.second $t@290@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@224@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@224@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@292@01 $Snap)
(assert (= $t@292@01 ($Snap.combine ($Snap.first $t@292@01) ($Snap.second $t@292@01))))
(assert (= ($Snap.first $t@292@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@224@01 4))))
(assert (= ($Snap.second $t@292@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@224@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@293@01 $Snap)
(assert (= $t@293@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@224@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@294@01 $Snap)
(assert (= $t@294@01 ($Snap.combine ($Snap.first $t@294@01) ($Snap.second $t@294@01))))
(assert (= ($Snap.first $t@294@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))))
(assert (= ($Snap.second $t@294@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@295@01 $Snap)
(assert (= $t@295@01 ($Snap.combine ($Snap.first $t@295@01) ($Snap.second $t@295@01))))
(assert (= ($Snap.first $t@295@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@223@01 1))))
(assert (= ($Snap.second $t@295@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@296@01 $Snap)
(assert (= $t@296@01 ($Snap.combine ($Snap.first $t@296@01) ($Snap.second $t@296@01))))
(assert (= ($Snap.first $t@296@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@223@01 2))))
(assert (= ($Snap.second $t@296@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@298@01 $Snap)
(assert (= $t@298@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@223@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@299@01 $Snap)
(assert (= $t@299@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@300@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@301@01 $Snap)
(assert (= $t@301@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@223@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@227@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@227@01 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) == $struct_get[Int]($struct_loc[Int](self@227@01, 0)) | live]
; [else-branch: 32 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) != $struct_get[Int]($struct_loc[Int](self@227@01, 0)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 32 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) == $struct_get[Int]($struct_loc[Int](self@227@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@227@01 0))))
; [exec]
; self := ($struct_set(self, 4, true): $Struct)
; [eval] ($struct_set(self, 4, true): $Struct)
(declare-const self@302@01 $Struct)
(assert (= self@302@01 ($struct_set<$Struct> self@227@01 4 true)))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 33 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4))) | live]
; [else-branch: 33 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) | live]
(push) ; 5
; [then-branch: 33 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))))
(pop) ; 5
(push) ; 5
; [else-branch: 33 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 4)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 4)))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@302@01, 5)) | live]
; [else-branch: 34 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@302@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 34 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@302@01, 5))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))
; [exec]
; self := ($struct_set(self, 6, true): $Struct)
; [eval] ($struct_set(self, 6, true): $Struct)
(declare-const self@303@01 $Struct)
(assert (= self@303@01 ($struct_set<$Struct> self@302@01 6 true)))
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [eval] 100 == 0
; [then-branch: 35 | False | dead]
; [else-branch: 35 | True | live]
(push) ; 5
; [else-branch: 35 | True]
(pop) ; 5
; [eval] !(100 == 0)
; [eval] 100 == 0
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | True | live]
; [else-branch: 36 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 36 | True]
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) < 0 | dead]
; [else-branch: 37 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) < 0) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 37 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))
    0)))
(pop) ; 6
; [eval] !($div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
    100))
  0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) < 0) | live]
; [else-branch: 38 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) < 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 38 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))
    0)))
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 39 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 39 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 7
; [eval] !($div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 7
(set-option :timeout 10)
(assert (not (>
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
    100))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 40 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 40 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@303@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | $struct_get[Int]($struct_loc[Int](self@303@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) | dead]
; [else-branch: 41 | !($struct_get[Int]($struct_loc[Int](self@303@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100)) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 41 | !($struct_get[Int]($struct_loc[Int](self@303@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@303@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100)))))
(pop) ; 8
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@303@01 7))
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
    100)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@303@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | !($struct_get[Int]($struct_loc[Int](self@303@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100)) | live]
; [else-branch: 42 | $struct_get[Int]($struct_loc[Int](self@303@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 42 | !($struct_get[Int]($struct_loc[Int](self@303@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@303@01, 7)))) / 100))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@303@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100)))))
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) +
;   $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self,
;   7)): Int))) \
;   100)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@304@01 $Struct)
(assert (=
  self@304@01
  ($struct_set<$Struct> self@303@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@303@01 10)) ($struct_get<Int> ($struct_loc<Int> self@303@01 2)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@303@01 10)) ($struct_get<Int> ($struct_loc<Int> self@303@01 2)))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@303@01 7))))
      100)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self,
;   7)): Int))) \
;   100)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@305@01 $Struct)
(assert (=
  self@305@01
  ($struct_set<$Struct> self@304@01 7 (-
    ($struct_get<Int> ($struct_loc<Int> self@304@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@304@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@304@01 7))))
      100))))))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$i0$send_fail@239@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$i0$send_fail@239@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | l$i0$send_fail@239@01 | live]
; [else-branch: 43 | !(l$i0$send_fail@239@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 43 | l$i0$send_fail@239@01]
(assert l$i0$send_fail@239@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 2)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(declare-const $t@306@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | True | live]
; [else-branch: 44 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 44 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@307@01 $Snap)
(assert (= $t@307@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@308@01 $Struct)
(assert (=
  self@308@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
; [then-branch: 45 | False | dead]
; [else-branch: 45 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 45 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 43 | !(l$i0$send_fail@239@01)]
(assert (not l$i0$send_fail@239@01))
(pop) ; 9
; [eval] !l$i0$send_fail
(push) ; 9
(set-option :timeout 10)
(assert (not l$i0$send_fail@239@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$i0$send_fail@239@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | !(l$i0$send_fail@239@01) | live]
; [else-branch: 46 | l$i0$send_fail@239@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 46 | !(l$i0$send_fail@239@01)]
(assert (not l$i0$send_fail@239@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i1$$pre_self := self
; [exec]
; i1$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$2
; [exec]
; $contracts := l$i0$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 ($Snap.combine ($Snap.first $t@309@01) ($Snap.second $t@309@01))))
(assert (= ($Snap.first $t@309@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 0))))
(assert (= ($Snap.second $t@309@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@310@01 $Snap)
(assert (= $t@310@01 ($Snap.combine ($Snap.first $t@310@01) ($Snap.second $t@310@01))))
(assert (= ($Snap.first $t@310@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1))))
(assert (= ($Snap.second $t@310@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 ($Snap.combine ($Snap.first $t@311@01) ($Snap.second $t@311@01))))
(assert (= ($Snap.first $t@311@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 2))))
(assert (= ($Snap.second $t@311@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 ($Snap.combine ($Snap.first $t@312@01) ($Snap.second $t@312@01))))
(assert (= ($Snap.first $t@312@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 3))))
(assert (= ($Snap.second $t@312@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@313@01 $Snap)
(assert (= $t@313@01 ($Snap.combine ($Snap.first $t@313@01) ($Snap.second $t@313@01))))
(assert (= ($Snap.first $t@313@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7))))
(assert (= ($Snap.second $t@313@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@314@01 $Snap)
(assert (= $t@314@01 ($Snap.combine ($Snap.first $t@314@01) ($Snap.second $t@314@01))))
(assert (= ($Snap.first $t@314@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 8))))
(assert (= ($Snap.second $t@314@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@316@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 47 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@316@01)) | live]
; [else-branch: 47 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@316@01) | live]
(push) ; 12
; [then-branch: 47 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@316@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 47 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@316@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01)))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@316@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@996@13@996@350-aux|)))
(assert (forall (($q0@316@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@316@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@996@13@996@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@317@01 $Snap)
(assert (= $t@317@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@318@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@318@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@318@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@318@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@997@13@997@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@319@01 $Snap)
(assert (= $t@319@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@320@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 11
; [then-branch: 48 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@320@01)) | live]
; [else-branch: 48 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@320@01) | live]
(push) ; 12
; [then-branch: 48 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@320@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 48 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@320@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01)))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@320@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@998@13@998@350-aux|)))
(assert (forall (($q1@320@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@320@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@998@13@998@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@321@01 $Snap)
(assert (= $t@321@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@322@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@322@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@322@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@322@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@999@13@999@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@323@01 $Snap)
(assert (= $t@323@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@324@01 $Snap)
(assert (= $t@324@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@325@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@325@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $a@325@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@305@01 10)) $a@325@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $a@325@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1002@13@1002@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call@245@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call@245@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | l$i0$no_reentrant_call@245@01 | live]
; [else-branch: 49 | !(l$i0$no_reentrant_call@245@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 49 | l$i0$no_reentrant_call@245@01]
(assert l$i0$no_reentrant_call@245@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$4
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$5
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 50 | False | dead]
; [else-branch: 50 | True | live]
(push) ; 11
; [else-branch: 50 | True]
(pop) ; 11
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | True | live]
; [else-branch: 51 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 51 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@326@01 $Struct)
(assert (=
  self@326@01
  ($struct_set<$Struct> self@305@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@305@01 10)) ($struct_get<Int> ($struct_loc<Int> self@305@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@305@01 10)) ($struct_get<Int> ($struct_loc<Int> self@305@01 1)))
    ($struct_get<Int> ($struct_loc<Int> self@305@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@327@01 $Struct)
(assert (= self@327@01 ($struct_set<$Struct> self@326@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$6
(push) ; 12
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | l$i0$send_fail$1@249@01 | live]
; [else-branch: 52 | !(l$i0$send_fail$1@249@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 52 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 1)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const $t@328@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | True | live]
; [else-branch: 53 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 53 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@330@01 $Struct)
(assert (=
  self@330@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 13
; [then-branch: 54 | False | dead]
; [else-branch: 54 | True | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 54 | True]
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 52 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
(pop) ; 12
; [eval] !l$i0$send_fail$1
(push) ; 12
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | !(l$i0$send_fail$1@249@01) | live]
; [else-branch: 55 | l$i0$send_fail$1@249@01 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 55 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$7
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$8
; [exec]
; $contracts := l$i0$havoc$9
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 ($Snap.combine ($Snap.first $t@331@01) ($Snap.second $t@331@01))))
(assert (= ($Snap.first $t@331@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))))
(assert (= ($Snap.second $t@331@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 ($Snap.combine ($Snap.first $t@332@01) ($Snap.second $t@332@01))))
(assert (= ($Snap.first $t@332@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))))
(assert (= ($Snap.second $t@332@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 ($Snap.combine ($Snap.first $t@333@01) ($Snap.second $t@333@01))))
(assert (= ($Snap.first $t@333@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))))
(assert (= ($Snap.second $t@333@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@334@01 $Snap)
(assert (= $t@334@01 ($Snap.combine ($Snap.first $t@334@01) ($Snap.second $t@334@01))))
(assert (= ($Snap.first $t@334@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))))
(assert (= ($Snap.second $t@334@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@335@01 $Snap)
(assert (= $t@335@01 ($Snap.combine ($Snap.first $t@335@01) ($Snap.second $t@335@01))))
(assert (= ($Snap.first $t@335@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))))
(assert (= ($Snap.second $t@335@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@336@01 $Snap)
(assert (= $t@336@01 ($Snap.combine ($Snap.first $t@336@01) ($Snap.second $t@336@01))))
(assert (= ($Snap.first $t@336@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))))
(assert (= ($Snap.second $t@336@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@337@01 $Snap)
(assert (= $t@337@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@338@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 14
; [then-branch: 56 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@338@01)) | live]
; [else-branch: 56 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@338@01) | live]
(push) ; 15
; [then-branch: 56 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@338@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 56 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@338@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01)))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@338@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350-aux|)))
(assert (forall (($q0@338@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@338@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@339@01 $Snap)
(assert (= $t@339@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@340@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@340@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@340@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1059@13@1059@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@342@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 14
; [then-branch: 57 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@342@01)) | live]
; [else-branch: 57 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@342@01) | live]
(push) ; 15
; [then-branch: 57 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@342@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 57 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@342@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01)))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@342@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350-aux|)))
(assert (forall (($q1@342@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@342@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@343@01 $Snap)
(assert (= $t@343@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@344@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@344@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@344@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@344@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1061@13@1061@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@345@01 $Snap)
(assert (= $t@345@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@346@01 $Snap)
(assert (= $t@346@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@347@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@347@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@347@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@327@01 10)) $a@347@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@347@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1064@13@1064@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | l$i0$no_reentrant_call$1@255@01 | live]
; [else-branch: 58 | !(l$i0$no_reentrant_call$1@255@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 58 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 14
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | $out_of_gas@269@01 | live]
; [else-branch: 59 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 59 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 60 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@349@01 $Struct)
(assert (=
  self@349@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 15
; [then-branch: 61 | False | dead]
; [else-branch: 61 | True | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 61 | True]
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 59 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 14
; [eval] !$out_of_gas
(push) ; 14
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | !($out_of_gas@269@01) | live]
; [else-branch: 62 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 62 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 63 | False | dead]
; [else-branch: 63 | True | live]
(push) ; 15
; [else-branch: 63 | True]
(pop) ; 15
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | True | live]
; [else-branch: 64 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 64 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@350@01 $Snap)
(assert (= $t@350@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@351@01 $Struct)
(assert (=
  self@351@01
  ($struct_set<$Struct> self@327@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@327@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 15
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 62 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 58 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
(pop) ; 13
; [eval] !l$i0$no_reentrant_call$1
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | !(l$i0$no_reentrant_call$1@255@01) | live]
; [else-branch: 65 | l$i0$no_reentrant_call$1@255@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 65 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 14
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | $out_of_gas@269@01 | live]
; [else-branch: 66 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 66 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | True | live]
; [else-branch: 67 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 67 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@353@01 $Struct)
(assert (=
  self@353@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 15
; [then-branch: 68 | False | dead]
; [else-branch: 68 | True | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 68 | True]
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 66 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 14
; [eval] !$out_of_gas
(push) ; 14
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | !($out_of_gas@269@01) | live]
; [else-branch: 69 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 69 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 70 | False | dead]
; [else-branch: 70 | True | live]
(push) ; 15
; [else-branch: 70 | True]
(pop) ; 15
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | True | live]
; [else-branch: 71 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 71 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@354@01 $Snap)
(assert (= $t@354@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@355@01 $Struct)
(assert (=
  self@355@01
  ($struct_set<$Struct> l$i0$havoc$8@253@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 15
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 69 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 65 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 55 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 49 | !(l$i0$no_reentrant_call@245@01)]
(assert (not l$i0$no_reentrant_call@245@01))
(pop) ; 10
; [eval] !l$i0$no_reentrant_call
(push) ; 10
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call@245@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call@245@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | !(l$i0$no_reentrant_call@245@01) | live]
; [else-branch: 72 | l$i0$no_reentrant_call@245@01 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 72 | !(l$i0$no_reentrant_call@245@01)]
(assert (not l$i0$no_reentrant_call@245@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$4
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$5
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 73 | False | dead]
; [else-branch: 73 | True | live]
(push) ; 11
; [else-branch: 73 | True]
(pop) ; 11
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | True | live]
; [else-branch: 74 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 74 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@356@01 $Struct)
(assert (=
  self@356@01
  ($struct_set<$Struct> l$i0$havoc$2@243@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1)))
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@357@01 $Struct)
(assert (= self@357@01 ($struct_set<$Struct> self@356@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$6
(push) ; 12
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | l$i0$send_fail$1@249@01 | live]
; [else-branch: 75 | !(l$i0$send_fail$1@249@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 75 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 1)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const $t@358@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | True | live]
; [else-branch: 76 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 76 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@359@01 $Snap)
(assert (= $t@359@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@360@01 $Struct)
(assert (=
  self@360@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 13
; [then-branch: 77 | False | dead]
; [else-branch: 77 | True | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 77 | True]
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 75 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
(pop) ; 12
; [eval] !l$i0$send_fail$1
(push) ; 12
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | !(l$i0$send_fail$1@249@01) | live]
; [else-branch: 78 | l$i0$send_fail$1@249@01 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 78 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$7
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$8
; [exec]
; $contracts := l$i0$havoc$9
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@361@01 $Snap)
(assert (= $t@361@01 ($Snap.combine ($Snap.first $t@361@01) ($Snap.second $t@361@01))))
(assert (= ($Snap.first $t@361@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))))
(assert (= ($Snap.second $t@361@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 ($Snap.combine ($Snap.first $t@362@01) ($Snap.second $t@362@01))))
(assert (= ($Snap.first $t@362@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))))
(assert (= ($Snap.second $t@362@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 ($Snap.combine ($Snap.first $t@363@01) ($Snap.second $t@363@01))))
(assert (= ($Snap.first $t@363@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))))
(assert (= ($Snap.second $t@363@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@364@01 $Snap)
(assert (= $t@364@01 ($Snap.combine ($Snap.first $t@364@01) ($Snap.second $t@364@01))))
(assert (= ($Snap.first $t@364@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))))
(assert (= ($Snap.second $t@364@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@365@01 $Snap)
(assert (= $t@365@01 ($Snap.combine ($Snap.first $t@365@01) ($Snap.second $t@365@01))))
(assert (= ($Snap.first $t@365@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))))
(assert (= ($Snap.second $t@365@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 ($Snap.combine ($Snap.first $t@366@01) ($Snap.second $t@366@01))))
(assert (= ($Snap.first $t@366@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))))
(assert (= ($Snap.second $t@366@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@367@01 $Snap)
(assert (= $t@367@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@368@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 14
; [then-branch: 79 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@368@01)) | live]
; [else-branch: 79 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@368@01) | live]
(push) ; 15
; [then-branch: 79 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@368@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 79 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@368@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01)))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@368@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350-aux|)))
(assert (forall (($q0@368@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@368@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@370@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@370@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@370@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1059@13@1059@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@371@01 $Snap)
(assert (= $t@371@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@372@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 14
; [then-branch: 80 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@372@01)) | live]
; [else-branch: 80 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@372@01) | live]
(push) ; 15
; [then-branch: 80 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@372@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 80 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@372@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01)))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@372@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350-aux|)))
(assert (forall (($q1@372@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@372@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@373@01 $Snap)
(assert (= $t@373@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@374@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@374@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@374@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@374@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1061@13@1061@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@375@01 $Snap)
(assert (= $t@375@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@376@01 $Snap)
(assert (= $t@376@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@377@01 Int)
(set-option :timeout 0)
(push) ; 13
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@377@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@377@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@357@01 10)) $a@377@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1064@13@1064@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | l$i0$no_reentrant_call$1@255@01 | live]
; [else-branch: 81 | !(l$i0$no_reentrant_call$1@255@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 81 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 14
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | $out_of_gas@269@01 | live]
; [else-branch: 82 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 82 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | True | live]
; [else-branch: 83 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 83 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@378@01 $Snap)
(assert (= $t@378@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@379@01 $Struct)
(assert (=
  self@379@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 15
; [then-branch: 84 | False | dead]
; [else-branch: 84 | True | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 84 | True]
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 82 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 14
; [eval] !$out_of_gas
(push) ; 14
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | !($out_of_gas@269@01) | live]
; [else-branch: 85 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 85 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 86 | False | dead]
; [else-branch: 86 | True | live]
(push) ; 15
; [else-branch: 86 | True]
(pop) ; 15
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | True | live]
; [else-branch: 87 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 87 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@380@01 $Snap)
(assert (= $t@380@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@381@01 $Struct)
(assert (=
  self@381@01
  ($struct_set<$Struct> self@357@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@357@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 15
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 85 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 81 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
(pop) ; 13
; [eval] !l$i0$no_reentrant_call$1
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | !(l$i0$no_reentrant_call$1@255@01) | live]
; [else-branch: 88 | l$i0$no_reentrant_call$1@255@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 88 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 14
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | $out_of_gas@269@01 | live]
; [else-branch: 89 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 89 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | True | live]
; [else-branch: 90 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 90 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@383@01 $Struct)
(assert (=
  self@383@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 15
; [then-branch: 91 | False | dead]
; [else-branch: 91 | True | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 91 | True]
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 89 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 14
; [eval] !$out_of_gas
(push) ; 14
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | !($out_of_gas@269@01) | live]
; [else-branch: 92 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 92 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 93 | False | dead]
; [else-branch: 93 | True | live]
(push) ; 15
; [else-branch: 93 | True]
(pop) ; 15
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | True | live]
; [else-branch: 94 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 94 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@385@01 $Struct)
(assert (=
  self@385@01
  ($struct_set<$Struct> l$i0$havoc$8@253@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 15
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 92 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 88 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 78 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 72 | l$i0$no_reentrant_call@245@01]
(assert l$i0$no_reentrant_call@245@01)
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 46 | l$i0$send_fail@239@01]
(assert l$i0$send_fail@239@01)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 34 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@302@01, 5)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))))
(pop) ; 4
; [eval] !(($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 95 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4))) | live]
; [else-branch: 95 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) | live]
(push) ; 5
; [then-branch: 95 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))))
(pop) ; 5
(push) ; 5
; [else-branch: 95 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 4)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@302@01, 5))) | live]
; [else-branch: 96 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@302@01, 5)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 96 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@302@01, 5)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | $struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 < 0 | dead]
; [else-branch: 97 | !($struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 < 0) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 97 | !($struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 < 0)]
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000) 0)))
(pop) ; 5
; [eval] !(($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 5
(set-option :timeout 10)
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | !($struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 < 0) | live]
; [else-branch: 98 | $struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 < 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 98 | !($struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 < 0)]
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000) 0)))
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | $struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 99 | !($struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 99 | $struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | True | live]
; [else-branch: 100 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 100 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@386@01 $Snap)
(assert (= $t@386@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@387@01 $Struct)
(assert (=
  self@387@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 7
; [then-branch: 101 | False | dead]
; [else-branch: 101 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 101 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 99 | !($struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 6
; [eval] !(($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | !($struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 102 | $struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 102 | !($struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; i3$$res := ($struct_get($struct_loc(block, 4)): Int) >
;   ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(block, 4)): Int) > ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(declare-const i3$$res@388@01 Bool)
(assert (=
  i3$$res@388@01
  (>
    ($struct_get<Int> ($struct_loc<Int> block@224@01 4))
    (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000))))
; [exec]
; label i3$return
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 7
; [then-branch: 103 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4))) | live]
; [else-branch: 103 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) | live]
(push) ; 8
; [then-branch: 103 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))))
(pop) ; 8
(push) ; 8
; [else-branch: 103 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 4)))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 9
; [then-branch: 104 | $struct_get[Bool]($struct_loc[Int](self@302@01, 5)) | live]
; [else-branch: 104 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) | live]
(push) ; 10
; [then-branch: 104 | $struct_get[Bool]($struct_loc[Int](self@302@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
(pop) ; 10
(push) ; 10
; [else-branch: 104 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    (or
      (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
      ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
      i3$$res@388@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))) i3$$res@388@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) && i3$$res@388@01 | live]
; [else-branch: 105 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) && i3$$res@388@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 105 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) && i3$$res@388@01]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))) i3$$res@388@01)))
; [exec]
; self := ($struct_set(self, 6, true): $Struct)
; [eval] ($struct_set(self, 6, true): $Struct)
(declare-const self@389@01 $Struct)
(assert (= self@389@01 ($struct_set<$Struct> self@302@01 6 true)))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 106 | False | dead]
; [else-branch: 106 | True | live]
(push) ; 8
; [else-branch: 106 | True]
(pop) ; 8
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 107 | True | live]
; [else-branch: 107 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 107 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@390@01 $Struct)
(assert (=
  self@390@01
  ($struct_set<$Struct> self@389@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 10)) ($struct_get<Int> ($struct_loc<Int> self@389@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@389@01 10)) ($struct_get<Int> ($struct_loc<Int> self@389@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@389@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@391@01 $Struct)
(assert (= self@391@01 ($struct_set<$Struct> self@390@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail@260@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail@260@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | l$send_fail@260@01 | live]
; [else-branch: 108 | !(l$send_fail@260@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 108 | l$send_fail@260@01]
(assert l$send_fail@260@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@392@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | True | live]
; [else-branch: 109 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 109 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@393@01 $Snap)
(assert (= $t@393@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@394@01 $Struct)
(assert (=
  self@394@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
; [then-branch: 110 | False | dead]
; [else-branch: 110 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 110 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 108 | !(l$send_fail@260@01)]
(assert (not l$send_fail@260@01))
(pop) ; 9
; [eval] !l$send_fail
(push) ; 9
(set-option :timeout 10)
(assert (not l$send_fail@260@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not l$send_fail@260@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | !(l$send_fail@260@01) | live]
; [else-branch: 111 | l$send_fail@260@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 111 | !(l$send_fail@260@01)]
(assert (not l$send_fail@260@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i4$$pre_self := self
; [exec]
; i4$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@395@01 $Snap)
(assert (= $t@395@01 ($Snap.combine ($Snap.first $t@395@01) ($Snap.second $t@395@01))))
(assert (= ($Snap.first $t@395@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 0))))
(assert (= ($Snap.second $t@395@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@396@01 $Snap)
(assert (= $t@396@01 ($Snap.combine ($Snap.first $t@396@01) ($Snap.second $t@396@01))))
(assert (= ($Snap.first $t@396@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 1))))
(assert (= ($Snap.second $t@396@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 ($Snap.combine ($Snap.first $t@397@01) ($Snap.second $t@397@01))))
(assert (= ($Snap.first $t@397@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 2))))
(assert (= ($Snap.second $t@397@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@398@01 $Snap)
(assert (= $t@398@01 ($Snap.combine ($Snap.first $t@398@01) ($Snap.second $t@398@01))))
(assert (= ($Snap.first $t@398@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 3))))
(assert (= ($Snap.second $t@398@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 ($Snap.combine ($Snap.first $t@399@01) ($Snap.second $t@399@01))))
(assert (= ($Snap.first $t@399@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 7))))
(assert (= ($Snap.second $t@399@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@400@01 $Snap)
(assert (= $t@400@01 ($Snap.combine ($Snap.first $t@400@01) ($Snap.second $t@400@01))))
(assert (= ($Snap.first $t@400@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 8))))
(assert (= ($Snap.second $t@400@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@401@01 $Snap)
(assert (= $t@401@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@402@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 11
; [then-branch: 112 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 10)), $q0@402@01)) | live]
; [else-branch: 112 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 10)), $q0@402@01) | live]
(push) ; 12
; [then-branch: 112 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 10)), $q0@402@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 112 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 10)), $q0@402@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01)))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@402@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1135@15@1135@352-aux|)))
(assert (forall (($q0@402@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@402@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1135@15@1135@352|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@403@01 $Snap)
(assert (= $t@403@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@404@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@404@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@404@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@404@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1136@15@1136@260|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@405@01 $Snap)
(assert (= $t@405@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@406@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 11
; [then-branch: 113 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 11)), $q1@406@01)) | live]
; [else-branch: 113 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 11)), $q1@406@01) | live]
(push) ; 12
; [then-branch: 113 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 11)), $q1@406@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 113 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 11)), $q1@406@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01)))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@406@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1137@15@1137@352-aux|)))
(assert (forall (($q1@406@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@406@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1137@15@1137@352|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@407@01 $Snap)
(assert (= $t@407@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@408@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@408@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@408@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@408@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1138@15@1138@260|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@409@01 $Snap)
(assert (= $t@409@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@411@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@411@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $a@411@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@391@01 10)) $a@411@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $a@411@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1141@15@1141@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@266@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not l$no_reentrant_call@266@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | l$no_reentrant_call@266@01 | live]
; [else-branch: 114 | !(l$no_reentrant_call@266@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 114 | l$no_reentrant_call@266@01]
(assert l$no_reentrant_call@266@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i4$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i4$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | $out_of_gas@269@01 | live]
; [else-branch: 115 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 115 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | True | live]
; [else-branch: 116 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 116 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@413@01 $Struct)
(assert (=
  self@413@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 12
; [then-branch: 117 | False | dead]
; [else-branch: 117 | True | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 117 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 115 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | !($out_of_gas@269@01) | live]
; [else-branch: 118 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 118 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 119 | False | dead]
; [else-branch: 119 | True | live]
(push) ; 12
; [else-branch: 119 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | True | live]
; [else-branch: 120 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 120 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@415@01 $Struct)
(assert (=
  self@415@01
  ($struct_set<$Struct> self@391@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@391@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 12
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 118 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 114 | !(l$no_reentrant_call@266@01)]
(assert (not l$no_reentrant_call@266@01))
(pop) ; 10
; [eval] !l$no_reentrant_call
(push) ; 10
(set-option :timeout 10)
(assert (not l$no_reentrant_call@266@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@266@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | !(l$no_reentrant_call@266@01) | live]
; [else-branch: 121 | l$no_reentrant_call@266@01 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 121 | !(l$no_reentrant_call@266@01)]
(assert (not l$no_reentrant_call@266@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i4$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i4$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | $out_of_gas@269@01 | live]
; [else-branch: 122 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 122 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | True | live]
; [else-branch: 123 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 123 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@416@01 $Snap)
(assert (= $t@416@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@417@01 $Struct)
(assert (=
  self@417@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 12
; [then-branch: 124 | False | dead]
; [else-branch: 124 | True | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 124 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 122 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 11
; [eval] !$out_of_gas
(push) ; 11
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | !($out_of_gas@269@01) | live]
; [else-branch: 125 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 125 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 126 | False | dead]
; [else-branch: 126 | True | live]
(push) ; 12
; [else-branch: 126 | True]
(pop) ; 12
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | True | live]
; [else-branch: 127 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 127 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@418@01 $Snap)
(assert (= $t@418@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@419@01 $Struct)
(assert (=
  self@419@01
  ($struct_set<$Struct> l$havoc$2@264@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 12
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 125 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 121 | l$no_reentrant_call@266@01]
(assert l$no_reentrant_call@266@01)
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 111 | l$send_fail@260@01]
(assert l$send_fail@260@01)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 105 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) && i3$$res@388@01)]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
      i3$$res@388@01))))
(pop) ; 7
; [eval] !(($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 7
; [then-branch: 128 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4))) | live]
; [else-branch: 128 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) | live]
(push) ; 8
; [then-branch: 128 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))))
(pop) ; 8
(push) ; 8
; [else-branch: 128 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 4)))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 9
; [then-branch: 129 | $struct_get[Bool]($struct_loc[Int](self@302@01, 5)) | live]
; [else-branch: 129 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) | live]
(push) ; 10
; [then-branch: 129 | $struct_get[Bool]($struct_loc[Int](self@302@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
(pop) ; 10
(push) ; 10
; [else-branch: 129 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))) i3$$res@388@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
      i3$$res@388@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) && i3$$res@388@01) | live]
; [else-branch: 130 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) && i3$$res@388@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 130 | !($struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) && i3$$res@388@01)]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5)))
      i3$$res@388@01))))
; [exec]
; label return
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 131 | $out_of_gas@269@01 | live]
; [else-branch: 131 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 131 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | True | live]
; [else-branch: 132 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 132 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@420@01 $Snap)
(assert (= $t@420@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@421@01 $Struct)
(assert (=
  self@421@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 9
; [then-branch: 133 | False | dead]
; [else-branch: 133 | True | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 133 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 131 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 8
; [eval] !$out_of_gas
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | !($out_of_gas@269@01) | live]
; [else-branch: 134 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 134 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 135 | False | dead]
; [else-branch: 135 | True | live]
(push) ; 9
; [else-branch: 135 | True]
(pop) ; 9
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | True | live]
; [else-branch: 136 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 136 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@422@01 $Snap)
(assert (= $t@422@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@423@01 $Struct)
(assert (=
  self@423@01
  ($struct_set<$Struct> self@302@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 9
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 134 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 130 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@302@01, 5))) && i3$$res@388@01]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))) i3$$res@388@01)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 102 | $struct_get[Int]($struct_loc[Int](self@302@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@302@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 96 | $struct_get[Bool]($struct_loc[Int](self@302@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@302@01, 5))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@302@01 5))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 32 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) != $struct_get[Int]($struct_loc[Int](self@227@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@227@01 0)))))
(pop) ; 3
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@227@01 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@227@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) != $struct_get[Int]($struct_loc[Int](self@227@01, 0)) | live]
; [else-branch: 137 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) == $struct_get[Int]($struct_loc[Int](self@227@01, 0)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 137 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) != $struct_get[Int]($struct_loc[Int](self@227@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@227@01 0)))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@227@01 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@227@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) == $struct_get[Int]($struct_loc[Int](self@227@01, 1)) | live]
; [else-branch: 138 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) != $struct_get[Int]($struct_loc[Int](self@227@01, 1)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 138 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) == $struct_get[Int]($struct_loc[Int](self@227@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@227@01 1))))
; [exec]
; self := ($struct_set(self, 5, true): $Struct)
; [eval] ($struct_set(self, 5, true): $Struct)
(declare-const self@424@01 $Struct)
(assert (= self@424@01 ($struct_set<$Struct> self@227@01 5 true)))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 139 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4))) | live]
; [else-branch: 139 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) | live]
(push) ; 6
; [then-branch: 139 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))))
(pop) ; 6
(push) ; 6
; [else-branch: 139 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@424@01 4)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
  (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 4)))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@424@01, 5)) | live]
; [else-branch: 140 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@424@01, 5))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 140 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@424@01, 5))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))
; [exec]
; self := ($struct_set(self, 6, true): $Struct)
; [eval] ($struct_set(self, 6, true): $Struct)
(declare-const self@425@01 $Struct)
(assert (= self@425@01 ($struct_set<$Struct> self@424@01 6 true)))
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [eval] 100 == 0
; [then-branch: 141 | False | dead]
; [else-branch: 141 | True | live]
(push) ; 6
; [else-branch: 141 | True]
(pop) ; 6
; [eval] !(100 == 0)
; [eval] 100 == 0
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | True | live]
; [else-branch: 142 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 142 | True]
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) < 0 | dead]
; [else-branch: 143 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 143 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))
    0)))
(pop) ; 7
; [eval] !($div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
    100))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) < 0) | live]
; [else-branch: 144 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) < 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 144 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))
    0)))
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 145 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 145 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !($div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
    100))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 146 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 146 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@425@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 147 | $struct_get[Int]($struct_loc[Int](self@425@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) | dead]
; [else-branch: 147 | !($struct_get[Int]($struct_loc[Int](self@425@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100)) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 147 | !($struct_get[Int]($struct_loc[Int](self@425@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@425@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100)))))
(pop) ; 9
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@425@01 7))
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
    100)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@425@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | !($struct_get[Int]($struct_loc[Int](self@425@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100)) | live]
; [else-branch: 148 | $struct_get[Int]($struct_loc[Int](self@425@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 148 | !($struct_get[Int]($struct_loc[Int](self@425@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@425@01, 7)))) / 100))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@425@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100)))))
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) +
;   $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self,
;   7)): Int))) \
;   100)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@426@01 $Struct)
(assert (=
  self@426@01
  ($struct_set<$Struct> self@425@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@425@01 10)) ($struct_get<Int> ($struct_loc<Int> self@425@01 2)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@425@01 10)) ($struct_get<Int> ($struct_loc<Int> self@425@01 2)))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@425@01 7))))
      100)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self,
;   7)): Int))) \
;   100)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@427@01 $Struct)
(assert (=
  self@427@01
  ($struct_set<$Struct> self@426@01 7 (-
    ($struct_get<Int> ($struct_loc<Int> self@426@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@426@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@426@01 7))))
      100))))))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$i0$send_fail@239@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not l$i0$send_fail@239@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 149 | l$i0$send_fail@239@01 | live]
; [else-branch: 149 | !(l$i0$send_fail@239@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 149 | l$i0$send_fail@239@01]
(assert l$i0$send_fail@239@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 2)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(declare-const $t@428@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | True | live]
; [else-branch: 150 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 150 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@429@01 $Snap)
(assert (= $t@429@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@430@01 $Struct)
(assert (=
  self@430@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 11
; [then-branch: 151 | False | dead]
; [else-branch: 151 | True | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 151 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 149 | !(l$i0$send_fail@239@01)]
(assert (not l$i0$send_fail@239@01))
(pop) ; 10
; [eval] !l$i0$send_fail
(push) ; 10
(set-option :timeout 10)
(assert (not l$i0$send_fail@239@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$i0$send_fail@239@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | !(l$i0$send_fail@239@01) | live]
; [else-branch: 152 | l$i0$send_fail@239@01 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 152 | !(l$i0$send_fail@239@01)]
(assert (not l$i0$send_fail@239@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i1$$pre_self := self
; [exec]
; i1$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$2
; [exec]
; $contracts := l$i0$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@431@01 $Snap)
(assert (= $t@431@01 ($Snap.combine ($Snap.first $t@431@01) ($Snap.second $t@431@01))))
(assert (= ($Snap.first $t@431@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 0))))
(assert (= ($Snap.second $t@431@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@432@01 $Snap)
(assert (= $t@432@01 ($Snap.combine ($Snap.first $t@432@01) ($Snap.second $t@432@01))))
(assert (= ($Snap.first $t@432@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1))))
(assert (= ($Snap.second $t@432@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@433@01 $Snap)
(assert (= $t@433@01 ($Snap.combine ($Snap.first $t@433@01) ($Snap.second $t@433@01))))
(assert (= ($Snap.first $t@433@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 2))))
(assert (= ($Snap.second $t@433@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@434@01 $Snap)
(assert (= $t@434@01 ($Snap.combine ($Snap.first $t@434@01) ($Snap.second $t@434@01))))
(assert (= ($Snap.first $t@434@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 3))))
(assert (= ($Snap.second $t@434@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@435@01 $Snap)
(assert (= $t@435@01 ($Snap.combine ($Snap.first $t@435@01) ($Snap.second $t@435@01))))
(assert (= ($Snap.first $t@435@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7))))
(assert (= ($Snap.second $t@435@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@436@01 $Snap)
(assert (= $t@436@01 ($Snap.combine ($Snap.first $t@436@01) ($Snap.second $t@436@01))))
(assert (= ($Snap.first $t@436@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 8))))
(assert (= ($Snap.second $t@436@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@437@01 $Snap)
(assert (= $t@437@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@438@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 12
; [then-branch: 153 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@438@01)) | live]
; [else-branch: 153 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@438@01) | live]
(push) ; 13
; [then-branch: 153 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@438@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 153 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@438@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01)))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@438@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@996@13@996@350-aux|)))
(assert (forall (($q0@438@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@996@13@996@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@439@01 $Snap)
(assert (= $t@439@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@440@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@440@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@440@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@997@13@997@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@441@01 $Snap)
(assert (= $t@441@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@442@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 12
; [then-branch: 154 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@442@01)) | live]
; [else-branch: 154 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@442@01) | live]
(push) ; 13
; [then-branch: 154 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@442@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 154 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@442@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01)))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@442@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@998@13@998@350-aux|)))
(assert (forall (($q1@442@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@442@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@998@13@998@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@443@01 $Snap)
(assert (= $t@443@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@444@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@444@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@444@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@999@13@999@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@445@01 $Snap)
(assert (= $t@445@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@446@01 $Snap)
(assert (= $t@446@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@447@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@447@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $a@447@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@427@01 10)) $a@447@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $a@447@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1002@13@1002@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call@245@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call@245@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | l$i0$no_reentrant_call@245@01 | live]
; [else-branch: 155 | !(l$i0$no_reentrant_call@245@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 155 | l$i0$no_reentrant_call@245@01]
(assert l$i0$no_reentrant_call@245@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$4
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$5
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 156 | False | dead]
; [else-branch: 156 | True | live]
(push) ; 12
; [else-branch: 156 | True]
(pop) ; 12
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 157 | True | live]
; [else-branch: 157 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 157 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@448@01 $Struct)
(assert (=
  self@448@01
  ($struct_set<$Struct> self@427@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@427@01 10)) ($struct_get<Int> ($struct_loc<Int> self@427@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@427@01 10)) ($struct_get<Int> ($struct_loc<Int> self@427@01 1)))
    ($struct_get<Int> ($struct_loc<Int> self@427@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@449@01 $Struct)
(assert (= self@449@01 ($struct_set<$Struct> self@448@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$6
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | l$i0$send_fail$1@249@01 | live]
; [else-branch: 158 | !(l$i0$send_fail$1@249@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 158 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 1)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const $t@450@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 159 | True | live]
; [else-branch: 159 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 159 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@451@01 $Snap)
(assert (= $t@451@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@452@01 $Struct)
(assert (=
  self@452@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 14
; [then-branch: 160 | False | dead]
; [else-branch: 160 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 160 | True]
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 158 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
(pop) ; 13
; [eval] !l$i0$send_fail$1
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 161 | !(l$i0$send_fail$1@249@01) | live]
; [else-branch: 161 | l$i0$send_fail$1@249@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 161 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$7
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$8
; [exec]
; $contracts := l$i0$havoc$9
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@453@01 $Snap)
(assert (= $t@453@01 ($Snap.combine ($Snap.first $t@453@01) ($Snap.second $t@453@01))))
(assert (= ($Snap.first $t@453@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))))
(assert (= ($Snap.second $t@453@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 ($Snap.combine ($Snap.first $t@454@01) ($Snap.second $t@454@01))))
(assert (= ($Snap.first $t@454@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))))
(assert (= ($Snap.second $t@454@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@455@01 $Snap)
(assert (= $t@455@01 ($Snap.combine ($Snap.first $t@455@01) ($Snap.second $t@455@01))))
(assert (= ($Snap.first $t@455@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))))
(assert (= ($Snap.second $t@455@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 ($Snap.combine ($Snap.first $t@456@01) ($Snap.second $t@456@01))))
(assert (= ($Snap.first $t@456@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))))
(assert (= ($Snap.second $t@456@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@457@01 $Snap)
(assert (= $t@457@01 ($Snap.combine ($Snap.first $t@457@01) ($Snap.second $t@457@01))))
(assert (= ($Snap.first $t@457@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))))
(assert (= ($Snap.second $t@457@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 ($Snap.combine ($Snap.first $t@458@01) ($Snap.second $t@458@01))))
(assert (= ($Snap.first $t@458@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))))
(assert (= ($Snap.second $t@458@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@459@01 $Snap)
(assert (= $t@459@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@460@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 15
; [then-branch: 162 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@460@01)) | live]
; [else-branch: 162 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@460@01) | live]
(push) ; 16
; [then-branch: 162 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@460@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 162 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@460@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@460@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350-aux|)))
(assert (forall (($q0@460@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@460@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@461@01 $Snap)
(assert (= $t@461@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@462@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@462@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@462@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1059@13@1059@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@463@01 $Snap)
(assert (= $t@463@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@464@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 15
; [then-branch: 163 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@464@01)) | live]
; [else-branch: 163 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@464@01) | live]
(push) ; 16
; [then-branch: 163 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@464@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 163 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@464@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@464@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350-aux|)))
(assert (forall (($q1@464@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@464@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@465@01 $Snap)
(assert (= $t@465@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@466@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@466@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@466@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@466@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1061@13@1061@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@468@01 $Snap)
(assert (= $t@468@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@469@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@469@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@469@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@449@01 10)) $a@469@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@469@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1064@13@1064@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | l$i0$no_reentrant_call$1@255@01 | live]
; [else-branch: 164 | !(l$i0$no_reentrant_call$1@255@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 164 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | $out_of_gas@269@01 | live]
; [else-branch: 165 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 165 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | True | live]
; [else-branch: 166 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 166 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@471@01 $Struct)
(assert (=
  self@471@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
; [then-branch: 167 | False | dead]
; [else-branch: 167 | True | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 167 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 165 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 15
; [eval] !$out_of_gas
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | !($out_of_gas@269@01) | live]
; [else-branch: 168 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 168 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 169 | False | dead]
; [else-branch: 169 | True | live]
(push) ; 16
; [else-branch: 169 | True]
(pop) ; 16
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | True | live]
; [else-branch: 170 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 170 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@472@01 $Snap)
(assert (= $t@472@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@473@01 $Struct)
(assert (=
  self@473@01
  ($struct_set<$Struct> self@449@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@449@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 168 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 164 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
(pop) ; 14
; [eval] !l$i0$no_reentrant_call$1
(push) ; 14
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | !(l$i0$no_reentrant_call$1@255@01) | live]
; [else-branch: 171 | l$i0$no_reentrant_call$1@255@01 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 171 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | $out_of_gas@269@01 | live]
; [else-branch: 172 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 172 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | True | live]
; [else-branch: 173 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 173 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@475@01 $Struct)
(assert (=
  self@475@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
; [then-branch: 174 | False | dead]
; [else-branch: 174 | True | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 174 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 172 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 15
; [eval] !$out_of_gas
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 175 | !($out_of_gas@269@01) | live]
; [else-branch: 175 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 175 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 176 | False | dead]
; [else-branch: 176 | True | live]
(push) ; 16
; [else-branch: 176 | True]
(pop) ; 16
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | True | live]
; [else-branch: 177 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 177 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@477@01 $Struct)
(assert (=
  self@477@01
  ($struct_set<$Struct> l$i0$havoc$8@253@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 175 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 171 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 161 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 155 | !(l$i0$no_reentrant_call@245@01)]
(assert (not l$i0$no_reentrant_call@245@01))
(pop) ; 11
; [eval] !l$i0$no_reentrant_call
(push) ; 11
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call@245@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call@245@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | !(l$i0$no_reentrant_call@245@01) | live]
; [else-branch: 178 | l$i0$no_reentrant_call@245@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 178 | !(l$i0$no_reentrant_call@245@01)]
(assert (not l$i0$no_reentrant_call@245@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$4
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$5
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 179 | False | dead]
; [else-branch: 179 | True | live]
(push) ; 12
; [else-branch: 179 | True]
(pop) ; 12
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | True | live]
; [else-branch: 180 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 180 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@478@01 $Struct)
(assert (=
  self@478@01
  ($struct_set<$Struct> l$i0$havoc$2@243@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1)))
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@479@01 $Struct)
(assert (= self@479@01 ($struct_set<$Struct> self@478@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$6
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | l$i0$send_fail$1@249@01 | live]
; [else-branch: 181 | !(l$i0$send_fail$1@249@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 181 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 1)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const $t@480@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | True | live]
; [else-branch: 182 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 182 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@481@01 $Snap)
(assert (= $t@481@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@482@01 $Struct)
(assert (=
  self@482@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 14
; [then-branch: 183 | False | dead]
; [else-branch: 183 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 183 | True]
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 181 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
(pop) ; 13
; [eval] !l$i0$send_fail$1
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | !(l$i0$send_fail$1@249@01) | live]
; [else-branch: 184 | l$i0$send_fail$1@249@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 184 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$7
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$8
; [exec]
; $contracts := l$i0$havoc$9
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@483@01 $Snap)
(assert (= $t@483@01 ($Snap.combine ($Snap.first $t@483@01) ($Snap.second $t@483@01))))
(assert (= ($Snap.first $t@483@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))))
(assert (= ($Snap.second $t@483@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@484@01 $Snap)
(assert (= $t@484@01 ($Snap.combine ($Snap.first $t@484@01) ($Snap.second $t@484@01))))
(assert (= ($Snap.first $t@484@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))))
(assert (= ($Snap.second $t@484@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@485@01 $Snap)
(assert (= $t@485@01 ($Snap.combine ($Snap.first $t@485@01) ($Snap.second $t@485@01))))
(assert (= ($Snap.first $t@485@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))))
(assert (= ($Snap.second $t@485@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@486@01 $Snap)
(assert (= $t@486@01 ($Snap.combine ($Snap.first $t@486@01) ($Snap.second $t@486@01))))
(assert (= ($Snap.first $t@486@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))))
(assert (= ($Snap.second $t@486@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@487@01 $Snap)
(assert (= $t@487@01 ($Snap.combine ($Snap.first $t@487@01) ($Snap.second $t@487@01))))
(assert (= ($Snap.first $t@487@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))))
(assert (= ($Snap.second $t@487@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@488@01 $Snap)
(assert (= $t@488@01 ($Snap.combine ($Snap.first $t@488@01) ($Snap.second $t@488@01))))
(assert (= ($Snap.first $t@488@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))))
(assert (= ($Snap.second $t@488@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@489@01 $Snap)
(assert (= $t@489@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@490@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 15
; [then-branch: 185 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@490@01)) | live]
; [else-branch: 185 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@490@01) | live]
(push) ; 16
; [then-branch: 185 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@490@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 185 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@490@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@490@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350-aux|)))
(assert (forall (($q0@490@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@490@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@491@01 $Snap)
(assert (= $t@491@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@492@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@492@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@492@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@492@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1059@13@1059@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@493@01 $Snap)
(assert (= $t@493@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@494@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 15
; [then-branch: 186 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@494@01)) | live]
; [else-branch: 186 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@494@01) | live]
(push) ; 16
; [then-branch: 186 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@494@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 186 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@494@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@494@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350-aux|)))
(assert (forall (($q1@494@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@494@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@495@01 $Snap)
(assert (= $t@495@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@496@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@496@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@496@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@496@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1061@13@1061@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@497@01 $Snap)
(assert (= $t@497@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@498@01 $Snap)
(assert (= $t@498@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@499@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@499@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@499@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@479@01 10)) $a@499@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@499@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1064@13@1064@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | l$i0$no_reentrant_call$1@255@01 | live]
; [else-branch: 187 | !(l$i0$no_reentrant_call$1@255@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 187 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | $out_of_gas@269@01 | live]
; [else-branch: 188 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 188 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | True | live]
; [else-branch: 189 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 189 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@500@01 $Snap)
(assert (= $t@500@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@501@01 $Struct)
(assert (=
  self@501@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
; [then-branch: 190 | False | dead]
; [else-branch: 190 | True | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 190 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 188 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 15
; [eval] !$out_of_gas
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | !($out_of_gas@269@01) | live]
; [else-branch: 191 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 191 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 192 | False | dead]
; [else-branch: 192 | True | live]
(push) ; 16
; [else-branch: 192 | True]
(pop) ; 16
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | True | live]
; [else-branch: 193 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 193 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@502@01 $Snap)
(assert (= $t@502@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@503@01 $Struct)
(assert (=
  self@503@01
  ($struct_set<$Struct> self@479@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@479@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 191 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 187 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
(pop) ; 14
; [eval] !l$i0$no_reentrant_call$1
(push) ; 14
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | !(l$i0$no_reentrant_call$1@255@01) | live]
; [else-branch: 194 | l$i0$no_reentrant_call$1@255@01 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 194 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | $out_of_gas@269@01 | live]
; [else-branch: 195 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 195 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | True | live]
; [else-branch: 196 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 196 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@504@01 $Snap)
(assert (= $t@504@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@505@01 $Struct)
(assert (=
  self@505@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
; [then-branch: 197 | False | dead]
; [else-branch: 197 | True | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 197 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 195 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 15
; [eval] !$out_of_gas
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | !($out_of_gas@269@01) | live]
; [else-branch: 198 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 198 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 199 | False | dead]
; [else-branch: 199 | True | live]
(push) ; 16
; [else-branch: 199 | True]
(pop) ; 16
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | True | live]
; [else-branch: 200 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 200 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@506@01 $Snap)
(assert (= $t@506@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@507@01 $Struct)
(assert (=
  self@507@01
  ($struct_set<$Struct> l$i0$havoc$8@253@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 198 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 194 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 184 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 178 | l$i0$no_reentrant_call@245@01]
(assert l$i0$no_reentrant_call@245@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 152 | l$i0$send_fail@239@01]
(assert l$i0$send_fail@239@01)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 140 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@424@01, 5)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))))
(pop) ; 5
; [eval] !(($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 201 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4))) | live]
; [else-branch: 201 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) | live]
(push) ; 6
; [then-branch: 201 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))))
(pop) ; 6
(push) ; 6
; [else-branch: 201 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@424@01 4)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@424@01, 5))) | live]
; [else-branch: 202 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@424@01, 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 202 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@424@01, 5)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 203 | $struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 < 0 | dead]
; [else-branch: 203 | !($struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 < 0) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 203 | !($struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 < 0)]
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000) 0)))
(pop) ; 6
; [eval] !(($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(set-option :timeout 10)
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000) 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | !($struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 < 0) | live]
; [else-branch: 204 | $struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 < 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 204 | !($struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 < 0)]
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000) 0)))
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | $struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 205 | !($struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 205 | $struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | True | live]
; [else-branch: 206 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 206 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@508@01 $Snap)
(assert (= $t@508@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@509@01 $Struct)
(assert (=
  self@509@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 8
; [then-branch: 207 | False | dead]
; [else-branch: 207 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 207 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 205 | !($struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 7
; [eval] !(($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 7
(set-option :timeout 10)
(assert (not (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | !($struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 208 | $struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 208 | !($struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; i3$$res := ($struct_get($struct_loc(block, 4)): Int) >
;   ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(block, 4)): Int) > ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(declare-const i3$$res@510@01 Bool)
(assert (=
  i3$$res@510@01
  (>
    ($struct_get<Int> ($struct_loc<Int> block@224@01 4))
    (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000))))
; [exec]
; label i3$return
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 8
; [then-branch: 209 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4))) | live]
; [else-branch: 209 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) | live]
(push) ; 9
; [then-branch: 209 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))))
(pop) ; 9
(push) ; 9
; [else-branch: 209 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@424@01 4)))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 210 | $struct_get[Bool]($struct_loc[Int](self@424@01, 5)) | live]
; [else-branch: 210 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 5))) | live]
(push) ; 11
; [then-branch: 210 | $struct_get[Bool]($struct_loc[Int](self@424@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 210 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    (or
      (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
      ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
      i3$$res@510@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@424@01, 5))) && i3$$res@510@01 | dead]
; [else-branch: 211 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@424@01, 5))) && i3$$res@510@01) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 211 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@424@01, 5))) && i3$$res@510@01)]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
      i3$$res@510@01))))
(pop) ; 8
; [eval] !(($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 8
; [then-branch: 212 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4))) | live]
; [else-branch: 212 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) | live]
(push) ; 9
; [then-branch: 212 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))))
(pop) ; 9
(push) ; 9
; [else-branch: 212 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@424@01 4)))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 213 | $struct_get[Bool]($struct_loc[Int](self@424@01, 5)) | live]
; [else-branch: 213 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 5))) | live]
(push) ; 11
; [then-branch: 213 | $struct_get[Bool]($struct_loc[Int](self@424@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 213 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))) i3$$res@510@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
      i3$$res@510@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@424@01, 5))) && i3$$res@510@01) | live]
; [else-branch: 214 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@424@01, 5))) && i3$$res@510@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 214 | !($struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@424@01, 5))) && i3$$res@510@01)]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@424@01 5)))
      i3$$res@510@01))))
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 215 | $out_of_gas@269@01 | live]
; [else-branch: 215 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 215 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | True | live]
; [else-branch: 216 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 216 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@511@01 $Snap)
(assert (= $t@511@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@512@01 $Struct)
(assert (=
  self@512@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
; [then-branch: 217 | False | dead]
; [else-branch: 217 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 217 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 215 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | !($out_of_gas@269@01) | live]
; [else-branch: 218 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 218 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 219 | False | dead]
; [else-branch: 219 | True | live]
(push) ; 10
; [else-branch: 219 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | True | live]
; [else-branch: 220 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 220 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@513@01 $Snap)
(assert (= $t@513@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@514@01 $Struct)
(assert (=
  self@514@01
  ($struct_set<$Struct> self@424@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@424@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 218 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 208 | $struct_get[Int]($struct_loc[Int](self@424@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@424@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 202 | $struct_get[Bool]($struct_loc[Int](self@424@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@424@01, 5))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@424@01 5))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 138 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) != $struct_get[Int]($struct_loc[Int](self@227@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@227@01 1)))))
(pop) ; 4
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@227@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@227@01 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) != $struct_get[Int]($struct_loc[Int](self@227@01, 1)) | live]
; [else-branch: 221 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) == $struct_get[Int]($struct_loc[Int](self@227@01, 1)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 221 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) != $struct_get[Int]($struct_loc[Int](self@227@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@227@01 1)))))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 222 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4))) | live]
; [else-branch: 222 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) | live]
(push) ; 6
; [then-branch: 222 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))))
(pop) ; 6
(push) ; 6
; [else-branch: 222 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@227@01 4)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 4)))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@227@01, 5)) | live]
; [else-branch: 223 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@227@01, 5))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 223 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@227@01, 5))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))
; [exec]
; self := ($struct_set(self, 6, true): $Struct)
; [eval] ($struct_set(self, 6, true): $Struct)
(declare-const self@515@01 $Struct)
(assert (= self@515@01 ($struct_set<$Struct> self@227@01 6 true)))
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [eval] 100 == 0
; [then-branch: 224 | False | dead]
; [else-branch: 224 | True | live]
(push) ; 6
; [else-branch: 224 | True]
(pop) ; 6
; [eval] !(100 == 0)
; [eval] 100 == 0
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | True | live]
; [else-branch: 225 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 225 | True]
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) < 0 | dead]
; [else-branch: 226 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 226 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))
    0)))
(pop) ; 7
; [eval] !($div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) < 0
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
    100))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) < 0) | live]
; [else-branch: 227 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) < 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 227 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))
    0)))
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 228 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 228 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !($div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
    100))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 229 | $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 229 | !($div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@515@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | $struct_get[Int]($struct_loc[Int](self@515@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) | dead]
; [else-branch: 230 | !($struct_get[Int]($struct_loc[Int](self@515@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100)) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 230 | !($struct_get[Int]($struct_loc[Int](self@515@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@515@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100)))))
(pop) ; 9
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@515@01 7))
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
    100)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@515@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | !($struct_get[Int]($struct_loc[Int](self@515@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100)) | live]
; [else-branch: 231 | $struct_get[Int]($struct_loc[Int](self@515@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 231 | !($struct_get[Int]($struct_loc[Int](self@515@01, 7)) < $div[Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))), 100, $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@515@01, 7)))) / 100))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@515@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100)))))
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) +
;   $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self,
;   7)): Int))) \
;   100)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int) + $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 2)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@516@01 $Struct)
(assert (=
  self@516@01
  ($struct_set<$Struct> self@515@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@515@01 10)) ($struct_get<Int> ($struct_loc<Int> self@515@01 2)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@515@01 10)) ($struct_get<Int> ($struct_loc<Int> self@515@01 2)))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@515@01 7))))
      100)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self,
;   7)): Int))) \
;   100)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $div($unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))), 100, $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int))) \ 100
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 7)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@517@01 $Struct)
(assert (=
  self@517@01
  ($struct_set<$Struct> self@516@01 7 (-
    ($struct_get<Int> ($struct_loc<Int> self@516@01 7))
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@516@01 7)))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@516@01 7))))
      100))))))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$i0$send_fail@239@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not l$i0$send_fail@239@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | l$i0$send_fail@239@01 | live]
; [else-branch: 232 | !(l$i0$send_fail@239@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 232 | l$i0$send_fail@239@01]
(assert l$i0$send_fail@239@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 2)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(declare-const $t@518@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | True | live]
; [else-branch: 233 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 233 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@519@01 $Snap)
(assert (= $t@519@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@520@01 $Struct)
(assert (=
  self@520@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 11
; [then-branch: 234 | False | dead]
; [else-branch: 234 | True | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 234 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 232 | !(l$i0$send_fail@239@01)]
(assert (not l$i0$send_fail@239@01))
(pop) ; 10
; [eval] !l$i0$send_fail
(push) ; 10
(set-option :timeout 10)
(assert (not l$i0$send_fail@239@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$i0$send_fail@239@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | !(l$i0$send_fail@239@01) | live]
; [else-branch: 235 | l$i0$send_fail@239@01 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 235 | !(l$i0$send_fail@239@01)]
(assert (not l$i0$send_fail@239@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i1$$pre_self := self
; [exec]
; i1$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$2
; [exec]
; $contracts := l$i0$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@521@01 $Snap)
(assert (= $t@521@01 ($Snap.combine ($Snap.first $t@521@01) ($Snap.second $t@521@01))))
(assert (= ($Snap.first $t@521@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 0))))
(assert (= ($Snap.second $t@521@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@522@01 $Snap)
(assert (= $t@522@01 ($Snap.combine ($Snap.first $t@522@01) ($Snap.second $t@522@01))))
(assert (= ($Snap.first $t@522@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1))))
(assert (= ($Snap.second $t@522@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@523@01 $Snap)
(assert (= $t@523@01 ($Snap.combine ($Snap.first $t@523@01) ($Snap.second $t@523@01))))
(assert (= ($Snap.first $t@523@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 2))))
(assert (= ($Snap.second $t@523@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@524@01 $Snap)
(assert (= $t@524@01 ($Snap.combine ($Snap.first $t@524@01) ($Snap.second $t@524@01))))
(assert (= ($Snap.first $t@524@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 3))))
(assert (= ($Snap.second $t@524@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@525@01 $Snap)
(assert (= $t@525@01 ($Snap.combine ($Snap.first $t@525@01) ($Snap.second $t@525@01))))
(assert (= ($Snap.first $t@525@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7))))
(assert (= ($Snap.second $t@525@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@526@01 $Snap)
(assert (= $t@526@01 ($Snap.combine ($Snap.first $t@526@01) ($Snap.second $t@526@01))))
(assert (= ($Snap.first $t@526@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 8))))
(assert (= ($Snap.second $t@526@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@527@01 $Snap)
(assert (= $t@527@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@528@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 12
; [then-branch: 236 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@528@01)) | live]
; [else-branch: 236 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@528@01) | live]
(push) ; 13
; [then-branch: 236 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@528@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 236 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 10)), $q0@528@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01)))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@528@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@996@13@996@350-aux|)))
(assert (forall (($q0@528@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@528@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@996@13@996@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@529@01 $Snap)
(assert (= $t@529@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@530@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@530@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@530@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $q0@530@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@997@13@997@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@531@01 $Snap)
(assert (= $t@531@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@532@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 12
; [then-branch: 237 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@532@01)) | live]
; [else-branch: 237 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@532@01) | live]
(push) ; 13
; [then-branch: 237 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@532@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 237 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$2@243@01, 11)), $q1@532@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01)))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@532@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@998@13@998@350-aux|)))
(assert (forall (($q1@532@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@532@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@998@13@998@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@533@01 $Snap)
(assert (= $t@533@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@534@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@534@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@534@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 11)) $q1@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@999@13@999@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@535@01 $Snap)
(assert (= $t@535@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@536@01 $Snap)
(assert (= $t@536@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@537@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@537@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $a@537@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@517@01 10)) $a@537@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) $a@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1002@13@1002@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call@245@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call@245@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | l$i0$no_reentrant_call@245@01 | live]
; [else-branch: 238 | !(l$i0$no_reentrant_call@245@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 238 | l$i0$no_reentrant_call@245@01]
(assert l$i0$no_reentrant_call@245@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$4
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$5
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 239 | False | dead]
; [else-branch: 239 | True | live]
(push) ; 12
; [else-branch: 239 | True]
(pop) ; 12
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | True | live]
; [else-branch: 240 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 240 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@538@01 $Struct)
(assert (=
  self@538@01
  ($struct_set<$Struct> self@517@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@517@01 10)) ($struct_get<Int> ($struct_loc<Int> self@517@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@517@01 10)) ($struct_get<Int> ($struct_loc<Int> self@517@01 1)))
    ($struct_get<Int> ($struct_loc<Int> self@517@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@539@01 $Struct)
(assert (= self@539@01 ($struct_set<$Struct> self@538@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$6
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | l$i0$send_fail$1@249@01 | live]
; [else-branch: 241 | !(l$i0$send_fail$1@249@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 241 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 1)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const $t@540@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | True | live]
; [else-branch: 242 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 242 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@541@01 $Snap)
(assert (= $t@541@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@542@01 $Struct)
(assert (=
  self@542@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 14
; [then-branch: 243 | False | dead]
; [else-branch: 243 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 243 | True]
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 241 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
(pop) ; 13
; [eval] !l$i0$send_fail$1
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | !(l$i0$send_fail$1@249@01) | live]
; [else-branch: 244 | l$i0$send_fail$1@249@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 244 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$7
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$8
; [exec]
; $contracts := l$i0$havoc$9
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@543@01 $Snap)
(assert (= $t@543@01 ($Snap.combine ($Snap.first $t@543@01) ($Snap.second $t@543@01))))
(assert (= ($Snap.first $t@543@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))))
(assert (= ($Snap.second $t@543@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@544@01 $Snap)
(assert (= $t@544@01 ($Snap.combine ($Snap.first $t@544@01) ($Snap.second $t@544@01))))
(assert (= ($Snap.first $t@544@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))))
(assert (= ($Snap.second $t@544@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@545@01 $Snap)
(assert (= $t@545@01 ($Snap.combine ($Snap.first $t@545@01) ($Snap.second $t@545@01))))
(assert (= ($Snap.first $t@545@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))))
(assert (= ($Snap.second $t@545@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@546@01 $Snap)
(assert (= $t@546@01 ($Snap.combine ($Snap.first $t@546@01) ($Snap.second $t@546@01))))
(assert (= ($Snap.first $t@546@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))))
(assert (= ($Snap.second $t@546@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@547@01 $Snap)
(assert (= $t@547@01 ($Snap.combine ($Snap.first $t@547@01) ($Snap.second $t@547@01))))
(assert (= ($Snap.first $t@547@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))))
(assert (= ($Snap.second $t@547@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@548@01 $Snap)
(assert (= $t@548@01 ($Snap.combine ($Snap.first $t@548@01) ($Snap.second $t@548@01))))
(assert (= ($Snap.first $t@548@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))))
(assert (= ($Snap.second $t@548@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@549@01 $Snap)
(assert (= $t@549@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@550@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 15
; [then-branch: 245 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@550@01)) | live]
; [else-branch: 245 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@550@01) | live]
(push) ; 16
; [then-branch: 245 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@550@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 245 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@550@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@550@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350-aux|)))
(assert (forall (($q0@550@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@550@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@551@01 $Snap)
(assert (= $t@551@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@552@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@552@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@552@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@552@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1059@13@1059@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@553@01 $Snap)
(assert (= $t@553@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@554@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 15
; [then-branch: 246 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@554@01)) | live]
; [else-branch: 246 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@554@01) | live]
(push) ; 16
; [then-branch: 246 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@554@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 246 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@554@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@554@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350-aux|)))
(assert (forall (($q1@554@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@554@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@555@01 $Snap)
(assert (= $t@555@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@556@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@556@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@556@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@556@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1061@13@1061@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@557@01 $Snap)
(assert (= $t@557@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@558@01 $Snap)
(assert (= $t@558@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@559@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@559@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@559@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@539@01 10)) $a@559@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@559@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1064@13@1064@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | l$i0$no_reentrant_call$1@255@01 | live]
; [else-branch: 247 | !(l$i0$no_reentrant_call$1@255@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 247 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 248 | $out_of_gas@269@01 | live]
; [else-branch: 248 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 248 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | True | live]
; [else-branch: 249 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 249 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@561@01 $Struct)
(assert (=
  self@561@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
; [then-branch: 250 | False | dead]
; [else-branch: 250 | True | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 250 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 248 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 15
; [eval] !$out_of_gas
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | !($out_of_gas@269@01) | live]
; [else-branch: 251 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 251 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 252 | False | dead]
; [else-branch: 252 | True | live]
(push) ; 16
; [else-branch: 252 | True]
(pop) ; 16
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | True | live]
; [else-branch: 253 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 253 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@562@01 $Snap)
(assert (= $t@562@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@563@01 $Struct)
(assert (=
  self@563@01
  ($struct_set<$Struct> self@539@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@539@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 251 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 247 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
(pop) ; 14
; [eval] !l$i0$no_reentrant_call$1
(push) ; 14
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | !(l$i0$no_reentrant_call$1@255@01) | live]
; [else-branch: 254 | l$i0$no_reentrant_call$1@255@01 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 254 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | $out_of_gas@269@01 | live]
; [else-branch: 255 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 255 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | True | live]
; [else-branch: 256 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 256 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@564@01 $Snap)
(assert (= $t@564@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@565@01 $Struct)
(assert (=
  self@565@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
; [then-branch: 257 | False | dead]
; [else-branch: 257 | True | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 257 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 255 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 15
; [eval] !$out_of_gas
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 258 | !($out_of_gas@269@01) | live]
; [else-branch: 258 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 258 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 259 | False | dead]
; [else-branch: 259 | True | live]
(push) ; 16
; [else-branch: 259 | True]
(pop) ; 16
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | True | live]
; [else-branch: 260 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 260 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@566@01 $Snap)
(assert (= $t@566@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@567@01 $Struct)
(assert (=
  self@567@01
  ($struct_set<$Struct> l$i0$havoc$8@253@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 258 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 254 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 244 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 238 | !(l$i0$no_reentrant_call@245@01)]
(assert (not l$i0$no_reentrant_call@245@01))
(pop) ; 11
; [eval] !l$i0$no_reentrant_call
(push) ; 11
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call@245@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call@245@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | !(l$i0$no_reentrant_call@245@01) | live]
; [else-branch: 261 | l$i0$no_reentrant_call@245@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 261 | !(l$i0$no_reentrant_call@245@01)]
(assert (not l$i0$no_reentrant_call@245@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$4
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$5
; [exec]
; $old_$contracts := i1$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 262 | False | dead]
; [else-branch: 262 | True | live]
(push) ; 12
; [else-branch: 262 | True]
(pop) ; 12
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | True | live]
; [else-branch: 263 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 263 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 1)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@568@01 $Struct)
(assert (=
  self@568@01
  ($struct_set<$Struct> l$i0$havoc$2@243@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$2@243@01 10)) ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 1)))
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$2@243@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@569@01 $Struct)
(assert (= self@569@01 ($struct_set<$Struct> self@568@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$6
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | l$i0$send_fail$1@249@01 | live]
; [else-branch: 264 | !(l$i0$send_fail$1@249@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 264 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 1)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const $t@570@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | True | live]
; [else-branch: 265 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 265 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@571@01 $Snap)
(assert (= $t@571@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@572@01 $Struct)
(assert (=
  self@572@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 14
; [then-branch: 266 | False | dead]
; [else-branch: 266 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 266 | True]
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 264 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
(pop) ; 13
; [eval] !l$i0$send_fail$1
(push) ; 13
(set-option :timeout 10)
(assert (not l$i0$send_fail$1@249@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not l$i0$send_fail$1@249@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | !(l$i0$send_fail$1@249@01) | live]
; [else-branch: 267 | l$i0$send_fail$1@249@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 267 | !(l$i0$send_fail$1@249@01)]
(assert (not l$i0$send_fail$1@249@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i2$$pre_self := self
; [exec]
; i2$$pre_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$7
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$i0$havoc$8
; [exec]
; $contracts := l$i0$havoc$9
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@573@01 $Snap)
(assert (= $t@573@01 ($Snap.combine ($Snap.first $t@573@01) ($Snap.second $t@573@01))))
(assert (= ($Snap.first $t@573@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))))
(assert (= ($Snap.second $t@573@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@574@01 $Snap)
(assert (= $t@574@01 ($Snap.combine ($Snap.first $t@574@01) ($Snap.second $t@574@01))))
(assert (= ($Snap.first $t@574@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))))
(assert (= ($Snap.second $t@574@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@575@01 $Snap)
(assert (= $t@575@01 ($Snap.combine ($Snap.first $t@575@01) ($Snap.second $t@575@01))))
(assert (= ($Snap.first $t@575@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))))
(assert (= ($Snap.second $t@575@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@576@01 $Snap)
(assert (= $t@576@01 ($Snap.combine ($Snap.first $t@576@01) ($Snap.second $t@576@01))))
(assert (= ($Snap.first $t@576@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))))
(assert (= ($Snap.second $t@576@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@577@01 $Snap)
(assert (= $t@577@01 ($Snap.combine ($Snap.first $t@577@01) ($Snap.second $t@577@01))))
(assert (= ($Snap.first $t@577@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))))
(assert (= ($Snap.second $t@577@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@578@01 $Snap)
(assert (= $t@578@01 ($Snap.combine ($Snap.first $t@578@01) ($Snap.second $t@578@01))))
(assert (= ($Snap.first $t@578@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))))
(assert (= ($Snap.second $t@578@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@579@01 $Snap)
(assert (= $t@579@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@580@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 15
; [then-branch: 268 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@580@01)) | live]
; [else-branch: 268 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@580@01) | live]
(push) ; 16
; [then-branch: 268 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@580@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 268 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 10)), $q0@580@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@580@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350-aux|)))
(assert (forall (($q0@580@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@580@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1058@13@1058@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@581@01 $Snap)
(assert (= $t@581@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@582@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@582@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@582@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $q0@582@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1059@13@1059@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@583@01 $Snap)
(assert (= $t@583@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@584@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 15
; [then-branch: 269 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@584@01)) | live]
; [else-branch: 269 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@584@01) | live]
(push) ; 16
; [then-branch: 269 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@584@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 269 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$i0$havoc$8@253@01, 11)), $q1@584@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01)))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@584@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350-aux|)))
(assert (forall (($q1@584@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@584@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1060@13@1060@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@585@01 $Snap)
(assert (= $t@585@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@586@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@586@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@586@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 11)) $q1@586@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1061@13@1061@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@587@01 $Snap)
(assert (= $t@587@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@588@01 $Snap)
(assert (= $t@588@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@589@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@589@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@589@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@569@01 10)) $a@589@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$i0$havoc$8@253@01 10)) $a@589@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1064@13@1064@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | l$i0$no_reentrant_call$1@255@01 | live]
; [else-branch: 270 | !(l$i0$no_reentrant_call$1@255@01) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 270 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 271 | $out_of_gas@269@01 | live]
; [else-branch: 271 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 271 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 272 | True | live]
; [else-branch: 272 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 272 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@590@01 $Snap)
(assert (= $t@590@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@591@01 $Struct)
(assert (=
  self@591@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
; [then-branch: 273 | False | dead]
; [else-branch: 273 | True | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 273 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 271 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 15
; [eval] !$out_of_gas
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | !($out_of_gas@269@01) | live]
; [else-branch: 274 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 274 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 275 | False | dead]
; [else-branch: 275 | True | live]
(push) ; 16
; [else-branch: 275 | True]
(pop) ; 16
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 276 | True | live]
; [else-branch: 276 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 276 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@592@01 $Snap)
(assert (= $t@592@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@593@01 $Struct)
(assert (=
  self@593@01
  ($struct_set<$Struct> self@569@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@569@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 274 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 270 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
(pop) ; 14
; [eval] !l$i0$no_reentrant_call$1
(push) ; 14
(set-option :timeout 10)
(assert (not l$i0$no_reentrant_call$1@255@01))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not l$i0$no_reentrant_call$1@255@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | !(l$i0$no_reentrant_call$1@255@01) | live]
; [else-branch: 277 | l$i0$no_reentrant_call$1@255@01 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 277 | !(l$i0$no_reentrant_call$1@255@01)]
(assert (not l$i0$no_reentrant_call$1@255@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$10
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$i0$havoc$11
; [exec]
; $old_$contracts := i2$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label i0$return
; [exec]
; label return
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | $out_of_gas@269@01 | live]
; [else-branch: 278 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 278 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | True | live]
; [else-branch: 279 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 279 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@594@01 $Snap)
(assert (= $t@594@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@595@01 $Struct)
(assert (=
  self@595@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
; [then-branch: 280 | False | dead]
; [else-branch: 280 | True | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 280 | True]
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 278 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 15
; [eval] !$out_of_gas
(push) ; 15
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | !($out_of_gas@269@01) | live]
; [else-branch: 281 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 281 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 282 | False | dead]
; [else-branch: 282 | True | live]
(push) ; 16
; [else-branch: 282 | True]
(pop) ; 16
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | True | live]
; [else-branch: 283 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 283 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@596@01 $Snap)
(assert (= $t@596@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@597@01 $Struct)
(assert (=
  self@597@01
  ($struct_set<$Struct> l$i0$havoc$8@253@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$i0$havoc$8@253@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 16
(pop) ; 15
(set-option :timeout 0)
(push) ; 15
; [else-branch: 281 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 277 | l$i0$no_reentrant_call$1@255@01]
(assert l$i0$no_reentrant_call$1@255@01)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 267 | l$i0$send_fail$1@249@01]
(assert l$i0$send_fail$1@249@01)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 261 | l$i0$no_reentrant_call@245@01]
(assert l$i0$no_reentrant_call@245@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 235 | l$i0$send_fail@239@01]
(assert l$i0$send_fail@239@01)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 223 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@227@01, 5)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))))
(pop) ; 5
; [eval] !(($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && ($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 284 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4))) | live]
; [else-branch: 284 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) | live]
(push) ; 6
; [then-branch: 284 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))))
(pop) ; 6
(push) ; 6
; [else-branch: 284 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@227@01 4)))
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@227@01, 5))) | live]
; [else-branch: 285 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@227@01, 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 285 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@227@01, 5)))]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))))
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | $struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 < 0 | dead]
; [else-branch: 286 | !($struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 < 0) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 286 | !($struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 < 0)]
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000) 0)))
(pop) ; 6
; [eval] !(($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 < 0
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 6
(set-option :timeout 10)
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000) 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 287 | !($struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 < 0) | live]
; [else-branch: 287 | $struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 < 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 287 | !($struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 < 0)]
(assert (not (< (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000) 0)))
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | $struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 288 | !($struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 288 | $struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | True | live]
; [else-branch: 289 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 289 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@598@01 $Snap)
(assert (= $t@598@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@599@01 $Struct)
(assert (=
  self@599@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 8
; [then-branch: 290 | False | dead]
; [else-branch: 290 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 290 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 288 | !($struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 7
; [eval] !(($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(push) ; 7
(set-option :timeout 10)
(assert (not (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 291 | !($struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 291 | $struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 291 | !($struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; i3$$res := ($struct_get($struct_loc(block, 4)): Int) >
;   ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(block, 4)): Int) > ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
; [eval] ($struct_get($struct_loc(self, 3)): Int) + 2592000
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(declare-const i3$$res@600@01 Bool)
(assert (=
  i3$$res@600@01
  (>
    ($struct_get<Int> ($struct_loc<Int> block@224@01 4))
    (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000))))
; [exec]
; label i3$return
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 8
; [then-branch: 292 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4))) | live]
; [else-branch: 292 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) | live]
(push) ; 9
; [then-branch: 292 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))))
(pop) ; 9
(push) ; 9
; [else-branch: 292 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@227@01 4)))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 293 | $struct_get[Bool]($struct_loc[Int](self@227@01, 5)) | live]
; [else-branch: 293 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) | live]
(push) ; 11
; [then-branch: 293 | $struct_get[Bool]($struct_loc[Int](self@227@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 293 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    (or
      (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
      ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
      i3$$res@600@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))) i3$$res@600@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) && i3$$res@600@01 | live]
; [else-branch: 294 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) && i3$$res@600@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 294 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) && i3$$res@600@01]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))) i3$$res@600@01)))
; [exec]
; self := ($struct_set(self, 6, true): $Struct)
; [eval] ($struct_set(self, 6, true): $Struct)
(declare-const self@601@01 $Struct)
(assert (= self@601@01 ($struct_set<$Struct> self@227@01 6 true)))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 295 | False | dead]
; [else-branch: 295 | True | live]
(push) ; 9
; [else-branch: 295 | True]
(pop) ; 9
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 296 | True | live]
; [else-branch: 296 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 296 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@602@01 $Struct)
(assert (=
  self@602@01
  ($struct_set<$Struct> self@601@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@601@01 10)) ($struct_get<Int> ($struct_loc<Int> self@601@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@601@01 10)) ($struct_get<Int> ($struct_loc<Int> self@601@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@601@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@603@01 $Struct)
(assert (= self@603@01 ($struct_set<$Struct> self@602@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$send_fail@260@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not l$send_fail@260@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | l$send_fail@260@01 | live]
; [else-branch: 297 | !(l$send_fail@260@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 297 | l$send_fail@260@01]
(assert l$send_fail@260@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@604@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | True | live]
; [else-branch: 298 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 298 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@605@01 $Snap)
(assert (= $t@605@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@606@01 $Struct)
(assert (=
  self@606@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 11
; [then-branch: 299 | False | dead]
; [else-branch: 299 | True | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 299 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 297 | !(l$send_fail@260@01)]
(assert (not l$send_fail@260@01))
(pop) ; 10
; [eval] !l$send_fail
(push) ; 10
(set-option :timeout 10)
(assert (not l$send_fail@260@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not l$send_fail@260@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | !(l$send_fail@260@01) | live]
; [else-branch: 300 | l$send_fail@260@01 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 300 | !(l$send_fail@260@01)]
(assert (not l$send_fail@260@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i4$$pre_self := self
; [exec]
; i4$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@607@01 $Snap)
(assert (= $t@607@01 ($Snap.combine ($Snap.first $t@607@01) ($Snap.second $t@607@01))))
(assert (= ($Snap.first $t@607@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 0))))
(assert (= ($Snap.second $t@607@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@608@01 $Snap)
(assert (= $t@608@01 ($Snap.combine ($Snap.first $t@608@01) ($Snap.second $t@608@01))))
(assert (= ($Snap.first $t@608@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 1))))
(assert (= ($Snap.second $t@608@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@609@01 $Snap)
(assert (= $t@609@01 ($Snap.combine ($Snap.first $t@609@01) ($Snap.second $t@609@01))))
(assert (= ($Snap.first $t@609@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 2))))
(assert (= ($Snap.second $t@609@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@610@01 $Snap)
(assert (= $t@610@01 ($Snap.combine ($Snap.first $t@610@01) ($Snap.second $t@610@01))))
(assert (= ($Snap.first $t@610@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 3))))
(assert (= ($Snap.second $t@610@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@611@01 $Snap)
(assert (= $t@611@01 ($Snap.combine ($Snap.first $t@611@01) ($Snap.second $t@611@01))))
(assert (= ($Snap.first $t@611@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 7))))
(assert (= ($Snap.second $t@611@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@612@01 $Snap)
(assert (= $t@612@01 ($Snap.combine ($Snap.first $t@612@01) ($Snap.second $t@612@01))))
(assert (= ($Snap.first $t@612@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 8))))
(assert (= ($Snap.second $t@612@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@613@01 $Snap)
(assert (= $t@613@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@614@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 12
; [then-branch: 301 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 10)), $q0@614@01)) | live]
; [else-branch: 301 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 10)), $q0@614@01) | live]
(push) ; 13
; [then-branch: 301 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 10)), $q0@614@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 301 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 10)), $q0@614@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01)))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@614@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1135@15@1135@352-aux|)))
(assert (forall (($q0@614@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@614@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1135@15@1135@352|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@615@01 $Snap)
(assert (= $t@615@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@616@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@616@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@616@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $q0@616@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1136@15@1136@260|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@617@01 $Snap)
(assert (= $t@617@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@618@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 12
; [then-branch: 302 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 11)), $q1@618@01)) | live]
; [else-branch: 302 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 11)), $q1@618@01) | live]
(push) ; 13
; [then-branch: 302 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 11)), $q1@618@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 302 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@264@01, 11)), $q1@618@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01)))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@618@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1137@15@1137@352-aux|)))
(assert (forall (($q1@618@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@618@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1137@15@1137@352|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@619@01 $Snap)
(assert (= $t@619@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@620@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@620@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@620@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 11)) $q1@620@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1138@15@1138@260|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@621@01 $Snap)
(assert (= $t@621@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@622@01 $Snap)
(assert (= $t@622@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@623@01 Int)
(set-option :timeout 0)
(push) ; 11
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@623@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $a@623@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@603@01 10)) $a@623@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@264@01 10)) $a@623@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1141@15@1141@266|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@266@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not l$no_reentrant_call@266@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | l$no_reentrant_call@266@01 | live]
; [else-branch: 303 | !(l$no_reentrant_call@266@01) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 303 | l$no_reentrant_call@266@01]
(assert l$no_reentrant_call@266@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i4$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i4$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 12
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | $out_of_gas@269@01 | live]
; [else-branch: 304 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 304 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | True | live]
; [else-branch: 305 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 305 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@624@01 $Snap)
(assert (= $t@624@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@625@01 $Struct)
(assert (=
  self@625@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 13
; [then-branch: 306 | False | dead]
; [else-branch: 306 | True | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 306 | True]
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 304 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 12
; [eval] !$out_of_gas
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | !($out_of_gas@269@01) | live]
; [else-branch: 307 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 307 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 308 | False | dead]
; [else-branch: 308 | True | live]
(push) ; 13
; [else-branch: 308 | True]
(pop) ; 13
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | True | live]
; [else-branch: 309 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 309 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@626@01 $Snap)
(assert (= $t@626@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@627@01 $Struct)
(assert (=
  self@627@01
  ($struct_set<$Struct> self@603@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@603@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 13
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 307 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 303 | !(l$no_reentrant_call@266@01)]
(assert (not l$no_reentrant_call@266@01))
(pop) ; 11
; [eval] !l$no_reentrant_call
(push) ; 11
(set-option :timeout 10)
(assert (not l$no_reentrant_call@266@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@266@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | !(l$no_reentrant_call@266@01) | live]
; [else-branch: 310 | l$no_reentrant_call@266@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 310 | !(l$no_reentrant_call@266@01)]
(assert (not l$no_reentrant_call@266@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i4$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i4$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 12
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 311 | $out_of_gas@269@01 | live]
; [else-branch: 311 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 311 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 312 | True | live]
; [else-branch: 312 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 312 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@628@01 $Snap)
(assert (= $t@628@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@629@01 $Struct)
(assert (=
  self@629@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 13
; [then-branch: 313 | False | dead]
; [else-branch: 313 | True | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 313 | True]
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 311 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 12
; [eval] !$out_of_gas
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | !($out_of_gas@269@01) | live]
; [else-branch: 314 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 314 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 315 | False | dead]
; [else-branch: 315 | True | live]
(push) ; 13
; [else-branch: 315 | True]
(pop) ; 13
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | True | live]
; [else-branch: 316 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 316 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@630@01 $Snap)
(assert (= $t@630@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@631@01 $Struct)
(assert (=
  self@631@01
  ($struct_set<$Struct> l$havoc$2@264@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@264@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 13
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 314 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 310 | l$no_reentrant_call@266@01]
(assert l$no_reentrant_call@266@01)
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 300 | l$send_fail@260@01]
(assert l$send_fail@260@01)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 294 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) && i3$$res@600@01)]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
      i3$$res@600@01))))
(pop) ; 8
; [eval] !(($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res))
; [eval] ($struct_get($struct_loc(self, 4)): Bool) && (!($struct_get($struct_loc(self, 5)): Bool) && i3$$res)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 8
; [then-branch: 317 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4))) | live]
; [else-branch: 317 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) | live]
(push) ; 9
; [then-branch: 317 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))))
(pop) ; 9
(push) ; 9
; [else-branch: 317 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@227@01 4)))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(push) ; 10
; [then-branch: 318 | $struct_get[Bool]($struct_loc[Int](self@227@01, 5)) | live]
; [else-branch: 318 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) | live]
(push) ; 11
; [then-branch: 318 | $struct_get[Bool]($struct_loc[Int](self@227@01, 5))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
(pop) ; 11
(push) ; 11
; [else-branch: 318 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 5)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))) i3$$res@600@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
      i3$$res@600@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 319 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) && i3$$res@600@01) | live]
; [else-branch: 319 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) && i3$$res@600@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 319 | !($struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) && i3$$res@600@01)]
(assert (not
  (and
    ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
    (and
      (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5)))
      i3$$res@600@01))))
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | $out_of_gas@269@01 | live]
; [else-branch: 320 | !($out_of_gas@269@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 320 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | True | live]
; [else-branch: 321 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 321 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@632@01 $Snap)
(assert (= $t@632@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@633@01 $Struct)
(assert (=
  self@633@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
; [then-branch: 322 | False | dead]
; [else-branch: 322 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 322 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 320 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@269@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@269@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | !($out_of_gas@269@01) | live]
; [else-branch: 323 | $out_of_gas@269@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 323 | !($out_of_gas@269@01)]
(assert (not $out_of_gas@269@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 324 | False | dead]
; [else-branch: 324 | True | live]
(push) ; 10
; [else-branch: 324 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | True | live]
; [else-branch: 325 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 325 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@634@01 $Snap)
(assert (= $t@634@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@270@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@635@01 $Struct)
(assert (=
  self@635@01
  ($struct_set<$Struct> self@227@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@227@01 7))
    l$havoc$6@270@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 323 | $out_of_gas@269@01]
(assert $out_of_gas@269@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 319 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && !($struct_get[Bool]($struct_loc[Int](self@227@01, 5))) && i3$$res@600@01]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  (and (not ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))) i3$$res@600@01)))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 291 | $struct_get[Int]($struct_loc[Int](self@227@01, 3)) + 2592000 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+ ($struct_get<Int> ($struct_loc<Int> self@227@01 3)) 2592000)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 285 | $struct_get[Bool]($struct_loc[Int](self@227@01, 4)) && $struct_get[Bool]($struct_loc[Int](self@227@01, 5))]
(assert (and
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 4))
  ($struct_get<Bool> ($struct_loc<Int> self@227@01 5))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 221 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) == $struct_get[Int]($struct_loc[Int](self@227@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@227@01 1))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 137 | $struct_get[Int]($struct_loc[Int](msg@223@01, 0)) == $struct_get[Int]($struct_loc[Int](self@227@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@223@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@227@01 0))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$deposit ----------
(declare-const $succ@636@01 Bool)
(declare-const $succ@637@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@638@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@639@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@640@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@641@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@642@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@643@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@644@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@645@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@646@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@647@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@648@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@649@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@650@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@651@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@652@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@653@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@654@01 $Snap)
(assert (= $t@654@01 ($Snap.combine ($Snap.first $t@654@01) ($Snap.second $t@654@01))))
(assert (= ($Snap.first $t@654@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@642@01 0))))
(assert (= ($Snap.second $t@654@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@642@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@655@01 $Snap)
(assert (= $t@655@01 ($Snap.combine ($Snap.first $t@655@01) ($Snap.second $t@655@01))))
(assert (= ($Snap.first $t@655@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@642@01 1))))
(assert (= ($Snap.second $t@655@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@642@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@656@01 $Snap)
(assert (= $t@656@01 ($Snap.combine ($Snap.first $t@656@01) ($Snap.second $t@656@01))))
(assert (= ($Snap.first $t@656@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@642@01 2))))
(assert (= ($Snap.second $t@656@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@642@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@657@01 $Snap)
(assert (= $t@657@01 ($Snap.combine ($Snap.first $t@657@01) ($Snap.second $t@657@01))))
(assert (= ($Snap.first $t@657@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@642@01 3))))
(assert (= ($Snap.second $t@657@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@642@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@658@01 $Snap)
(assert (= $t@658@01 ($Snap.combine ($Snap.first $t@658@01) ($Snap.second $t@658@01))))
(assert (= ($Snap.first $t@658@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@642@01 7))))
(assert (= ($Snap.second $t@658@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@642@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@659@01 $Snap)
(assert (= $t@659@01 ($Snap.combine ($Snap.first $t@659@01) ($Snap.second $t@659@01))))
(assert (= ($Snap.first $t@659@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@642@01 8))))
(assert (= ($Snap.second $t@659@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@642@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@660@01 $Snap)
(assert (= $t@660@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@661@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 326 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@642@01, 10)), $q0@661@01)) | live]
; [else-branch: 326 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@642@01, 10)), $q0@661@01) | live]
(push) ; 5
; [then-branch: 326 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@642@01, 10)), $q0@661@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 326 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@642@01, 10)), $q0@661@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@661@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1213@11@1213@348-aux|)))
(assert (forall (($q0@661@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@661@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1213@11@1213@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@662@01 $Snap)
(assert (= $t@662@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@663@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@663@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@663@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 10)) $q0@663@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1214@11@1214@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@664@01 $Snap)
(assert (= $t@664@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@665@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 327 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@642@01, 11)), $q1@665@01)) | live]
; [else-branch: 327 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@642@01, 11)), $q1@665@01) | live]
(push) ; 5
; [then-branch: 327 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@642@01, 11)), $q1@665@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 327 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@642@01, 11)), $q1@665@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@665@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1215@11@1215@348-aux|)))
(assert (forall (($q1@665@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@665@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1215@11@1215@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@666@01 $Snap)
(assert (= $t@666@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@667@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@667@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@667@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@642@01 11)) $q1@667@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1216@11@1216@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@668@01 $Snap)
(assert (= $t@668@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@642@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@669@01 $Snap)
(assert (= $t@669@01 ($Snap.combine ($Snap.first $t@669@01) ($Snap.second $t@669@01))))
(assert (= ($Snap.first $t@669@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@669@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@670@01 $Snap)
(assert (= $t@670@01 ($Snap.combine ($Snap.first $t@670@01) ($Snap.second $t@670@01))))
(assert (= ($Snap.first $t@670@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@639@01 0))))
(assert (= ($Snap.second $t@670@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@639@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@671@01 $Snap)
(assert (= $t@671@01 ($Snap.combine ($Snap.first $t@671@01) ($Snap.second $t@671@01))))
(assert (= ($Snap.first $t@671@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@639@01 1))))
(assert (= ($Snap.second $t@671@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@639@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@672@01 $Snap)
(assert (= $t@672@01 ($Snap.combine ($Snap.first $t@672@01) ($Snap.second $t@672@01))))
(assert (= ($Snap.first $t@672@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@639@01 2))))
(assert (= ($Snap.second $t@672@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@639@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@673@01 $Snap)
(assert (= $t@673@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@639@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@674@01 $Snap)
(assert (= $t@674@01 ($Snap.combine ($Snap.first $t@674@01) ($Snap.second $t@674@01))))
(assert (= ($Snap.first $t@674@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@639@01 4))))
(assert (= ($Snap.second $t@674@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@639@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@675@01 $Snap)
(assert (= $t@675@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@639@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@676@01 $Snap)
(assert (= $t@676@01 ($Snap.combine ($Snap.first $t@676@01) ($Snap.second $t@676@01))))
(assert (= ($Snap.first $t@676@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))))
(assert (= ($Snap.second $t@676@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@677@01 $Snap)
(assert (= $t@677@01 ($Snap.combine ($Snap.first $t@677@01) ($Snap.second $t@677@01))))
(assert (= ($Snap.first $t@677@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@638@01 1))))
(assert (= ($Snap.second $t@677@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@638@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@678@01 $Snap)
(assert (= $t@678@01 ($Snap.combine ($Snap.first $t@678@01) ($Snap.second $t@678@01))))
(assert (= ($Snap.first $t@678@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@638@01 2))))
(assert (= ($Snap.second $t@678@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@638@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@679@01 $Snap)
(assert (= $t@679@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@638@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@680@01 $Snap)
(assert (= $t@680@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@638@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@681@01 $Snap)
(assert (= $t@681@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@682@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@683@01 $Struct)
(assert (=
  self@683@01
  ($struct_set<$Struct> self@642@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@642@01 7))
    ($struct_get<Int> ($struct_loc<Int> msg@638@01 1))))))
; [exec]
; self := ($struct_set(self, 11, ($map_set(($struct_get($struct_loc(self, 11)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 11, ($map_set(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@684@01 $Struct)
(assert (=
  self@684@01
  ($struct_set<$Struct> self@683@01 11 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@683@01 11)) ($struct_get<Int> ($struct_loc<Int> msg@638@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@683@01 11)) ($struct_get<Int> ($struct_loc<Int> msg@638@01 0)))
    ($struct_get<Int> ($struct_loc<Int> msg@638@01 1)))))))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@684@01 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@684@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | $struct_get[Int]($struct_loc[Int](msg@638@01, 0)) != $struct_get[Int]($struct_loc[Int](self@684@01, 0)) | live]
; [else-branch: 328 | $struct_get[Int]($struct_loc[Int](msg@638@01, 0)) == $struct_get[Int]($struct_loc[Int](self@684@01, 0)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 328 | $struct_get[Int]($struct_loc[Int](msg@638@01, 0)) != $struct_get[Int]($struct_loc[Int](self@684@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@684@01 0)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | True | live]
; [else-branch: 329 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 329 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@685@01 $Snap)
(assert (= $t@685@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@652@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@686@01 $Struct)
(assert (=
  self@686@01
  ($struct_set<$Struct> self@642@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@642@01 7))
    l$havoc@652@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
; [then-branch: 330 | False | dead]
; [else-branch: 330 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 330 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 328 | $struct_get[Int]($struct_loc[Int](msg@638@01, 0)) == $struct_get[Int]($struct_loc[Int](self@684@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@684@01 0))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@684@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@684@01 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | $struct_get[Int]($struct_loc[Int](msg@638@01, 0)) == $struct_get[Int]($struct_loc[Int](self@684@01, 0)) | live]
; [else-branch: 331 | $struct_get[Int]($struct_loc[Int](msg@638@01, 0)) != $struct_get[Int]($struct_loc[Int](self@684@01, 0)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 331 | $struct_get[Int]($struct_loc[Int](msg@638@01, 0)) == $struct_get[Int]($struct_loc[Int](self@684@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@684@01 0))))
; [exec]
; label return
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@651@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@651@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | $out_of_gas@651@01 | live]
; [else-branch: 332 | !($out_of_gas@651@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 332 | $out_of_gas@651@01]
(assert $out_of_gas@651@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 333 | True | live]
; [else-branch: 333 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 333 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@687@01 $Snap)
(assert (= $t@687@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@652@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@688@01 $Struct)
(assert (=
  self@688@01
  ($struct_set<$Struct> self@642@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@642@01 7))
    l$havoc@652@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
; [then-branch: 334 | False | dead]
; [else-branch: 334 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 334 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 332 | !($out_of_gas@651@01)]
(assert (not $out_of_gas@651@01))
(pop) ; 4
; [eval] !$out_of_gas
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@651@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@651@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 335 | !($out_of_gas@651@01) | live]
; [else-branch: 335 | $out_of_gas@651@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 335 | !($out_of_gas@651@01)]
(assert (not $out_of_gas@651@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 336 | False | dead]
; [else-branch: 336 | True | live]
(push) ; 5
; [else-branch: 336 | True]
(pop) ; 5
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 337 | True | live]
; [else-branch: 337 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 337 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@689@01 $Snap)
(assert (= $t@689@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@652@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@690@01 $Struct)
(assert (=
  self@690@01
  ($struct_set<$Struct> self@684@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@684@01 7))
    l$havoc@652@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 335 | $out_of_gas@651@01]
(assert $out_of_gas@651@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 331 | $struct_get[Int]($struct_loc[Int](msg@638@01, 0)) != $struct_get[Int]($struct_loc[Int](self@684@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@638@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@684@01 0)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$cancel ----------
(declare-const $succ@691@01 Bool)
(declare-const $succ@692@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@693@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@694@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@695@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@696@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@697@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@698@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@699@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@700@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@701@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@702@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@703@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@704@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@705@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@706@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@707@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@708@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@709@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@710@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@711@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@712@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@713@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@714@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@715@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@716@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@717@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@718@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@719@01 $Snap)
(assert (= $t@719@01 ($Snap.combine ($Snap.first $t@719@01) ($Snap.second $t@719@01))))
(assert (= ($Snap.first $t@719@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@697@01 0))))
(assert (= ($Snap.second $t@719@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@720@01 $Snap)
(assert (= $t@720@01 ($Snap.combine ($Snap.first $t@720@01) ($Snap.second $t@720@01))))
(assert (= ($Snap.first $t@720@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@697@01 1))))
(assert (= ($Snap.second $t@720@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@721@01 $Snap)
(assert (= $t@721@01 ($Snap.combine ($Snap.first $t@721@01) ($Snap.second $t@721@01))))
(assert (= ($Snap.first $t@721@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@697@01 2))))
(assert (= ($Snap.second $t@721@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@722@01 $Snap)
(assert (= $t@722@01 ($Snap.combine ($Snap.first $t@722@01) ($Snap.second $t@722@01))))
(assert (= ($Snap.first $t@722@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@697@01 3))))
(assert (= ($Snap.second $t@722@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@723@01 $Snap)
(assert (= $t@723@01 ($Snap.combine ($Snap.first $t@723@01) ($Snap.second $t@723@01))))
(assert (= ($Snap.first $t@723@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@697@01 7))))
(assert (= ($Snap.second $t@723@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@724@01 $Snap)
(assert (= $t@724@01 ($Snap.combine ($Snap.first $t@724@01) ($Snap.second $t@724@01))))
(assert (= ($Snap.first $t@724@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@697@01 8))))
(assert (= ($Snap.second $t@724@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@725@01 $Snap)
(assert (= $t@725@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@726@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 338 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 10)), $q0@726@01)) | live]
; [else-branch: 338 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 10)), $q0@726@01) | live]
(push) ; 5
; [then-branch: 338 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 10)), $q0@726@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 338 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 10)), $q0@726@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@726@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1309@11@1309@348-aux|)))
(assert (forall (($q0@726@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@726@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1309@11@1309@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@727@01 $Snap)
(assert (= $t@727@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@728@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@728@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@728@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) $q0@728@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1310@11@1310@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@729@01 $Snap)
(assert (= $t@729@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@730@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 339 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 11)), $q1@730@01)) | live]
; [else-branch: 339 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 11)), $q1@730@01) | live]
(push) ; 5
; [then-branch: 339 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 11)), $q1@730@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 339 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 11)), $q1@730@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@730@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1311@11@1311@348-aux|)))
(assert (forall (($q1@730@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@730@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1311@11@1311@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@731@01 $Snap)
(assert (= $t@731@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@732@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@732@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@732@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 11)) $q1@732@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1312@11@1312@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@733@01 $Snap)
(assert (= $t@733@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@734@01 $Snap)
(assert (= $t@734@01 ($Snap.combine ($Snap.first $t@734@01) ($Snap.second $t@734@01))))
(assert (= ($Snap.first $t@734@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@734@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@735@01 $Snap)
(assert (= $t@735@01 ($Snap.combine ($Snap.first $t@735@01) ($Snap.second $t@735@01))))
(assert (= ($Snap.first $t@735@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@694@01 0))))
(assert (= ($Snap.second $t@735@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@736@01 $Snap)
(assert (= $t@736@01 ($Snap.combine ($Snap.first $t@736@01) ($Snap.second $t@736@01))))
(assert (= ($Snap.first $t@736@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@694@01 1))))
(assert (= ($Snap.second $t@736@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@737@01 $Snap)
(assert (= $t@737@01 ($Snap.combine ($Snap.first $t@737@01) ($Snap.second $t@737@01))))
(assert (= ($Snap.first $t@737@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@694@01 2))))
(assert (= ($Snap.second $t@737@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@738@01 $Snap)
(assert (= $t@738@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@694@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@739@01 $Snap)
(assert (= $t@739@01 ($Snap.combine ($Snap.first $t@739@01) ($Snap.second $t@739@01))))
(assert (= ($Snap.first $t@739@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@694@01 4))))
(assert (= ($Snap.second $t@739@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@740@01 $Snap)
(assert (= $t@740@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@741@01 $Snap)
(assert (= $t@741@01 ($Snap.combine ($Snap.first $t@741@01) ($Snap.second $t@741@01))))
(assert (= ($Snap.first $t@741@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))))
(assert (= ($Snap.second $t@741@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@742@01 $Snap)
(assert (= $t@742@01 ($Snap.combine ($Snap.first $t@742@01) ($Snap.second $t@742@01))))
(assert (= ($Snap.first $t@742@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@693@01 1))))
(assert (= ($Snap.second $t@742@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@743@01 $Snap)
(assert (= $t@743@01 ($Snap.combine ($Snap.first $t@743@01) ($Snap.second $t@743@01))))
(assert (= ($Snap.first $t@743@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@693@01 2))))
(assert (= ($Snap.second $t@743@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@744@01 $Snap)
(assert (= $t@744@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@745@01 $Snap)
(assert (= $t@745@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@693@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@746@01 $Snap)
(assert (= $t@746@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@747@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@748@01 $Snap)
(assert (= $t@748@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@693@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@697@01 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) == $struct_get[Int]($struct_loc[Int](self@697@01, 0)) | live]
; [else-branch: 340 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) != $struct_get[Int]($struct_loc[Int](self@697@01, 0)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 340 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) == $struct_get[Int]($struct_loc[Int](self@697@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@697@01 0))))
; [exec]
; self := ($struct_set(self, 4, false): $Struct)
; [eval] ($struct_set(self, 4, false): $Struct)
(declare-const self@749@01 $Struct)
(assert (= self@749@01 ($struct_set<$Struct> self@697@01 4 false)))
; [eval] !($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 4)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 341 | $struct_get[Bool]($struct_loc[Int](self@749@01, 4)) | live]
; [else-branch: 341 | !($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) | live]
(push) ; 5
; [then-branch: 341 | $struct_get[Bool]($struct_loc[Int](self@749@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
(pop) ; 5
(push) ; 5
; [else-branch: 341 | !($struct_get[Bool]($struct_loc[Int](self@749@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4))))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
  ($struct_get<Bool> ($struct_loc<Int> self@749@01 4))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 5)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 5))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 342 | !($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@749@01, 5))) | live]
; [else-branch: 342 | !(!($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@749@01, 5)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 342 | !($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@749@01, 5)))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 5)))))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 343 | False | dead]
; [else-branch: 343 | True | live]
(push) ; 5
; [else-branch: 343 | True]
(pop) ; 5
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 344 | True | live]
; [else-branch: 344 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 344 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@750@01 $Struct)
(assert (=
  self@750@01
  ($struct_set<$Struct> self@749@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@749@01 10)) ($struct_get<Int> ($struct_loc<Int> self@749@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@749@01 10)) ($struct_get<Int> ($struct_loc<Int> self@749@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@749@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@751@01 $Struct)
(assert (= self@751@01 ($struct_set<$Struct> self@750@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$send_fail@707@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not l$send_fail@707@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 345 | l$send_fail@707@01 | live]
; [else-branch: 345 | !(l$send_fail@707@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 345 | l$send_fail@707@01]
(assert l$send_fail@707@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@752@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | True | live]
; [else-branch: 346 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 346 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@753@01 $Snap)
(assert (= $t@753@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@754@01 $Struct)
(assert (=
  self@754@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 7
; [then-branch: 347 | False | dead]
; [else-branch: 347 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 347 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 345 | !(l$send_fail@707@01)]
(assert (not l$send_fail@707@01))
(pop) ; 6
; [eval] !l$send_fail
(push) ; 6
(set-option :timeout 10)
(assert (not l$send_fail@707@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$send_fail@707@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 348 | !(l$send_fail@707@01) | live]
; [else-branch: 348 | l$send_fail@707@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 348 | !(l$send_fail@707@01)]
(assert (not l$send_fail@707@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@755@01 $Snap)
(assert (= $t@755@01 ($Snap.combine ($Snap.first $t@755@01) ($Snap.second $t@755@01))))
(assert (= ($Snap.first $t@755@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 0))))
(assert (= ($Snap.second $t@755@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@756@01 $Snap)
(assert (= $t@756@01 ($Snap.combine ($Snap.first $t@756@01) ($Snap.second $t@756@01))))
(assert (= ($Snap.first $t@756@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 1))))
(assert (= ($Snap.second $t@756@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@757@01 $Snap)
(assert (= $t@757@01 ($Snap.combine ($Snap.first $t@757@01) ($Snap.second $t@757@01))))
(assert (= ($Snap.first $t@757@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 2))))
(assert (= ($Snap.second $t@757@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@758@01 $Snap)
(assert (= $t@758@01 ($Snap.combine ($Snap.first $t@758@01) ($Snap.second $t@758@01))))
(assert (= ($Snap.first $t@758@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 3))))
(assert (= ($Snap.second $t@758@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@759@01 $Snap)
(assert (= $t@759@01 ($Snap.combine ($Snap.first $t@759@01) ($Snap.second $t@759@01))))
(assert (= ($Snap.first $t@759@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))))
(assert (= ($Snap.second $t@759@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@760@01 $Snap)
(assert (= $t@760@01 ($Snap.combine ($Snap.first $t@760@01) ($Snap.second $t@760@01))))
(assert (= ($Snap.first $t@760@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 8))))
(assert (= ($Snap.second $t@760@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@761@01 $Snap)
(assert (= $t@761@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@762@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 8
; [then-branch: 349 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@762@01)) | live]
; [else-branch: 349 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@762@01) | live]
(push) ; 9
; [then-branch: 349 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@762@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 349 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@762@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@762@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1383@13@1383@350-aux|)))
(assert (forall (($q0@762@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@762@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1383@13@1383@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@763@01 $Snap)
(assert (= $t@763@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@764@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@764@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@764@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@764@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1384@13@1384@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@765@01 $Snap)
(assert (= $t@765@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@766@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 8
; [then-branch: 350 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@766@01)) | live]
; [else-branch: 350 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@766@01) | live]
(push) ; 9
; [then-branch: 350 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@766@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 350 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@766@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01)))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@766@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1385@13@1385@350-aux|)))
(assert (forall (($q1@766@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@766@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1385@13@1385@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@767@01 $Snap)
(assert (= $t@767@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@768@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@768@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@768@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@768@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1386@13@1386@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@769@01 $Snap)
(assert (= $t@769@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@770@01 $Snap)
(assert (= $t@770@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@771@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@771@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $a@771@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@751@01 10)) $a@771@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $a@771@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1389@13@1389@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@713@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$no_reentrant_call@713@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 351 | l$no_reentrant_call@713@01 | live]
; [else-branch: 351 | !(l$no_reentrant_call@713@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 351 | l$no_reentrant_call@713@01]
(assert l$no_reentrant_call@713@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | $out_of_gas@716@01 | live]
; [else-branch: 352 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 352 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 353 | True | live]
; [else-branch: 353 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 353 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@772@01 $Snap)
(assert (= $t@772@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@773@01 $Struct)
(assert (=
  self@773@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 9
; [then-branch: 354 | False | dead]
; [else-branch: 354 | True | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 354 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 352 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 8
; [eval] !$out_of_gas
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 355 | !($out_of_gas@716@01) | live]
; [else-branch: 355 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 355 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 356 | False | dead]
; [else-branch: 356 | True | live]
(push) ; 9
; [else-branch: 356 | True]
(pop) ; 9
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 357 | True | live]
; [else-branch: 357 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 357 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@774@01 $Snap)
(assert (= $t@774@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@775@01 $Struct)
(assert (=
  self@775@01
  ($struct_set<$Struct> self@751@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@751@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 9
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 355 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 351 | !(l$no_reentrant_call@713@01)]
(assert (not l$no_reentrant_call@713@01))
(pop) ; 7
; [eval] !l$no_reentrant_call
(push) ; 7
(set-option :timeout 10)
(assert (not l$no_reentrant_call@713@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@713@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 358 | !(l$no_reentrant_call@713@01) | live]
; [else-branch: 358 | l$no_reentrant_call@713@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 358 | !(l$no_reentrant_call@713@01)]
(assert (not l$no_reentrant_call@713@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | $out_of_gas@716@01 | live]
; [else-branch: 359 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 359 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | True | live]
; [else-branch: 360 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 360 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@776@01 $Snap)
(assert (= $t@776@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@777@01 $Struct)
(assert (=
  self@777@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 9
; [then-branch: 361 | False | dead]
; [else-branch: 361 | True | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 361 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 359 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 8
; [eval] !$out_of_gas
(push) ; 8
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | !($out_of_gas@716@01) | live]
; [else-branch: 362 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 362 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 363 | False | dead]
; [else-branch: 363 | True | live]
(push) ; 9
; [else-branch: 363 | True]
(pop) ; 9
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | True | live]
; [else-branch: 364 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 364 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@778@01 $Snap)
(assert (= $t@778@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@779@01 $Struct)
(assert (=
  self@779@01
  ($struct_set<$Struct> l$havoc$2@711@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 9
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 362 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 358 | l$no_reentrant_call@713@01]
(assert l$no_reentrant_call@713@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 348 | l$send_fail@707@01]
(assert l$send_fail@707@01)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 342 | !(!($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@749@01, 5))))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 5))))))
(pop) ; 4
; [eval] !(!($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool))
; [eval] !($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 4)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 365 | $struct_get[Bool]($struct_loc[Int](self@749@01, 4)) | live]
; [else-branch: 365 | !($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) | live]
(push) ; 5
; [then-branch: 365 | $struct_get[Bool]($struct_loc[Int](self@749@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
(pop) ; 5
(push) ; 5
; [else-branch: 365 | !($struct_get[Bool]($struct_loc[Int](self@749@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4))))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 5))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 5)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | !(!($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@749@01, 5)))) | live]
; [else-branch: 366 | !($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@749@01, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 366 | !(!($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@749@01, 5))))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 5))))))
; [exec]
; label return
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | $out_of_gas@716@01 | live]
; [else-branch: 367 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 367 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | True | live]
; [else-branch: 368 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 368 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@780@01 $Snap)
(assert (= $t@780@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@781@01 $Struct)
(assert (=
  self@781@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 6
; [then-branch: 369 | False | dead]
; [else-branch: 369 | True | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 369 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 367 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 5
; [eval] !$out_of_gas
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 370 | !($out_of_gas@716@01) | live]
; [else-branch: 370 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 370 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 371 | False | dead]
; [else-branch: 371 | True | live]
(push) ; 6
; [else-branch: 371 | True]
(pop) ; 6
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 372 | True | live]
; [else-branch: 372 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 372 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@782@01 $Snap)
(assert (= $t@782@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@783@01 $Struct)
(assert (=
  self@783@01
  ($struct_set<$Struct> self@749@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@749@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 6
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 370 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 366 | !($struct_get[Bool]($struct_loc[Int](self@749@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@749@01, 5)))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@749@01 5)))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 340 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) != $struct_get[Int]($struct_loc[Int](self@697@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 0)))))
(pop) ; 3
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@697@01 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 373 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) != $struct_get[Int]($struct_loc[Int](self@697@01, 0)) | live]
; [else-branch: 373 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) == $struct_get[Int]($struct_loc[Int](self@697@01, 0)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 373 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) != $struct_get[Int]($struct_loc[Int](self@697@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 0)))))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@697@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 374 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) == $struct_get[Int]($struct_loc[Int](self@697@01, 1)) | live]
; [else-branch: 374 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) != $struct_get[Int]($struct_loc[Int](self@697@01, 1)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 374 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) == $struct_get[Int]($struct_loc[Int](self@697@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@697@01 1))))
; [exec]
; self := ($struct_set(self, 5, false): $Struct)
; [eval] ($struct_set(self, 5, false): $Struct)
(declare-const self@784@01 $Struct)
(assert (= self@784@01 ($struct_set<$Struct> self@697@01 5 false)))
; [eval] !($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 4)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 375 | $struct_get[Bool]($struct_loc[Int](self@784@01, 4)) | live]
; [else-branch: 375 | !($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) | live]
(push) ; 6
; [then-branch: 375 | $struct_get[Bool]($struct_loc[Int](self@784@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
(pop) ; 6
(push) ; 6
; [else-branch: 375 | !($struct_get[Bool]($struct_loc[Int](self@784@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4))))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
  ($struct_get<Bool> ($struct_loc<Int> self@784@01 4))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 5)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 5))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 376 | !($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@784@01, 5))) | live]
; [else-branch: 376 | !(!($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@784@01, 5)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 376 | !($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@784@01, 5)))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 5)))))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 377 | False | dead]
; [else-branch: 377 | True | live]
(push) ; 6
; [else-branch: 377 | True]
(pop) ; 6
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 378 | True | live]
; [else-branch: 378 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 378 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@785@01 $Struct)
(assert (=
  self@785@01
  ($struct_set<$Struct> self@784@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@784@01 10)) ($struct_get<Int> ($struct_loc<Int> self@784@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@784@01 10)) ($struct_get<Int> ($struct_loc<Int> self@784@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@784@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@786@01 $Struct)
(assert (= self@786@01 ($struct_set<$Struct> self@785@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail@707@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail@707@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 379 | l$send_fail@707@01 | live]
; [else-branch: 379 | !(l$send_fail@707@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 379 | l$send_fail@707@01]
(assert l$send_fail@707@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@787@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 380 | True | live]
; [else-branch: 380 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 380 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@788@01 $Snap)
(assert (= $t@788@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@789@01 $Struct)
(assert (=
  self@789@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 8
; [then-branch: 381 | False | dead]
; [else-branch: 381 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 381 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 379 | !(l$send_fail@707@01)]
(assert (not l$send_fail@707@01))
(pop) ; 7
; [eval] !l$send_fail
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail@707@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail@707@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 382 | !(l$send_fail@707@01) | live]
; [else-branch: 382 | l$send_fail@707@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 382 | !(l$send_fail@707@01)]
(assert (not l$send_fail@707@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@790@01 $Snap)
(assert (= $t@790@01 ($Snap.combine ($Snap.first $t@790@01) ($Snap.second $t@790@01))))
(assert (= ($Snap.first $t@790@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 0))))
(assert (= ($Snap.second $t@790@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@791@01 $Snap)
(assert (= $t@791@01 ($Snap.combine ($Snap.first $t@791@01) ($Snap.second $t@791@01))))
(assert (= ($Snap.first $t@791@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 1))))
(assert (= ($Snap.second $t@791@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@792@01 $Snap)
(assert (= $t@792@01 ($Snap.combine ($Snap.first $t@792@01) ($Snap.second $t@792@01))))
(assert (= ($Snap.first $t@792@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 2))))
(assert (= ($Snap.second $t@792@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@793@01 $Snap)
(assert (= $t@793@01 ($Snap.combine ($Snap.first $t@793@01) ($Snap.second $t@793@01))))
(assert (= ($Snap.first $t@793@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 3))))
(assert (= ($Snap.second $t@793@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@794@01 $Snap)
(assert (= $t@794@01 ($Snap.combine ($Snap.first $t@794@01) ($Snap.second $t@794@01))))
(assert (= ($Snap.first $t@794@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))))
(assert (= ($Snap.second $t@794@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@795@01 $Snap)
(assert (= $t@795@01 ($Snap.combine ($Snap.first $t@795@01) ($Snap.second $t@795@01))))
(assert (= ($Snap.first $t@795@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 8))))
(assert (= ($Snap.second $t@795@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@796@01 $Snap)
(assert (= $t@796@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@797@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 383 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@797@01)) | live]
; [else-branch: 383 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@797@01) | live]
(push) ; 10
; [then-branch: 383 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@797@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 383 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@797@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@797@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1383@13@1383@350-aux|)))
(assert (forall (($q0@797@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@797@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1383@13@1383@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@798@01 $Snap)
(assert (= $t@798@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@799@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@799@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@799@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@799@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1384@13@1384@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@800@01 $Snap)
(assert (= $t@800@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@801@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 9
; [then-branch: 384 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@801@01)) | live]
; [else-branch: 384 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@801@01) | live]
(push) ; 10
; [then-branch: 384 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@801@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 384 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@801@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@801@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1385@13@1385@350-aux|)))
(assert (forall (($q1@801@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@801@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1385@13@1385@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@802@01 $Snap)
(assert (= $t@802@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@803@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@803@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@803@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@803@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1386@13@1386@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@804@01 $Snap)
(assert (= $t@804@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@805@01 $Snap)
(assert (= $t@805@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@806@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@806@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $a@806@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@786@01 10)) $a@806@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $a@806@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1389@13@1389@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@713@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call@713@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 385 | l$no_reentrant_call@713@01 | live]
; [else-branch: 385 | !(l$no_reentrant_call@713@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 385 | l$no_reentrant_call@713@01]
(assert l$no_reentrant_call@713@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 386 | $out_of_gas@716@01 | live]
; [else-branch: 386 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 386 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 387 | True | live]
; [else-branch: 387 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 387 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@807@01 $Snap)
(assert (= $t@807@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@808@01 $Struct)
(assert (=
  self@808@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
; [then-branch: 388 | False | dead]
; [else-branch: 388 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 388 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 386 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | !($out_of_gas@716@01) | live]
; [else-branch: 389 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 389 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 390 | False | dead]
; [else-branch: 390 | True | live]
(push) ; 10
; [else-branch: 390 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 391 | True | live]
; [else-branch: 391 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 391 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@809@01 $Snap)
(assert (= $t@809@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@810@01 $Struct)
(assert (=
  self@810@01
  ($struct_set<$Struct> self@786@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@786@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 389 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 385 | !(l$no_reentrant_call@713@01)]
(assert (not l$no_reentrant_call@713@01))
(pop) ; 8
; [eval] !l$no_reentrant_call
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call@713@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@713@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | !(l$no_reentrant_call@713@01) | live]
; [else-branch: 392 | l$no_reentrant_call@713@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 392 | !(l$no_reentrant_call@713@01)]
(assert (not l$no_reentrant_call@713@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 393 | $out_of_gas@716@01 | live]
; [else-branch: 393 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 393 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | True | live]
; [else-branch: 394 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 394 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@811@01 $Snap)
(assert (= $t@811@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@812@01 $Struct)
(assert (=
  self@812@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
; [then-branch: 395 | False | dead]
; [else-branch: 395 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 395 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 393 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | !($out_of_gas@716@01) | live]
; [else-branch: 396 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 396 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 397 | False | dead]
; [else-branch: 397 | True | live]
(push) ; 10
; [else-branch: 397 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | True | live]
; [else-branch: 398 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 398 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@813@01 $Snap)
(assert (= $t@813@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@814@01 $Struct)
(assert (=
  self@814@01
  ($struct_set<$Struct> l$havoc$2@711@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 396 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 392 | l$no_reentrant_call@713@01]
(assert l$no_reentrant_call@713@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 382 | l$send_fail@707@01]
(assert l$send_fail@707@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 376 | !(!($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@784@01, 5))))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 5))))))
(pop) ; 5
; [eval] !(!($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool))
; [eval] !($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 4)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 399 | $struct_get[Bool]($struct_loc[Int](self@784@01, 4)) | live]
; [else-branch: 399 | !($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) | live]
(push) ; 6
; [then-branch: 399 | $struct_get[Bool]($struct_loc[Int](self@784@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
(pop) ; 6
(push) ; 6
; [else-branch: 399 | !($struct_get[Bool]($struct_loc[Int](self@784@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4))))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 5))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 5)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 400 | !(!($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@784@01, 5)))) | live]
; [else-branch: 400 | !($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@784@01, 5))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 400 | !(!($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@784@01, 5))))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 5))))))
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 401 | $out_of_gas@716@01 | live]
; [else-branch: 401 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 401 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | True | live]
; [else-branch: 402 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 402 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@815@01 $Snap)
(assert (= $t@815@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@816@01 $Struct)
(assert (=
  self@816@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 7
; [then-branch: 403 | False | dead]
; [else-branch: 403 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 403 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 401 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 404 | !($out_of_gas@716@01) | live]
; [else-branch: 404 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 404 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 405 | False | dead]
; [else-branch: 405 | True | live]
(push) ; 7
; [else-branch: 405 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 406 | True | live]
; [else-branch: 406 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 406 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@817@01 $Snap)
(assert (= $t@817@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@818@01 $Struct)
(assert (=
  self@818@01
  ($struct_set<$Struct> self@784@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@784@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 404 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 400 | !($struct_get[Bool]($struct_loc[Int](self@784@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@784@01, 5)))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@784@01 5)))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 374 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) != $struct_get[Int]($struct_loc[Int](self@697@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 1)))))
(pop) ; 4
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@697@01 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 407 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) != $struct_get[Int]($struct_loc[Int](self@697@01, 1)) | live]
; [else-branch: 407 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) == $struct_get[Int]($struct_loc[Int](self@697@01, 1)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 407 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) != $struct_get[Int]($struct_loc[Int](self@697@01, 1))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 1)))))
; [eval] !($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 4)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 408 | $struct_get[Bool]($struct_loc[Int](self@697@01, 4)) | live]
; [else-branch: 408 | !($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) | live]
(push) ; 6
; [then-branch: 408 | $struct_get[Bool]($struct_loc[Int](self@697@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
(pop) ; 6
(push) ; 6
; [else-branch: 408 | !($struct_get[Bool]($struct_loc[Int](self@697@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4))))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
  ($struct_get<Bool> ($struct_loc<Int> self@697@01 4))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 5)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 5))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | !($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@697@01, 5))) | live]
; [else-branch: 409 | !(!($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@697@01, 5)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 409 | !($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@697@01, 5)))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 5)))))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 410 | False | dead]
; [else-branch: 410 | True | live]
(push) ; 6
; [else-branch: 410 | True]
(pop) ; 6
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 411 | True | live]
; [else-branch: 411 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 411 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@819@01 $Struct)
(assert (=
  self@819@01
  ($struct_set<$Struct> self@697@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) ($struct_get<Int> ($struct_loc<Int> self@697@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 10)) ($struct_get<Int> ($struct_loc<Int> self@697@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@820@01 $Struct)
(assert (= self@820@01 ($struct_set<$Struct> self@819@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail@707@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail@707@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 412 | l$send_fail@707@01 | live]
; [else-branch: 412 | !(l$send_fail@707@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 412 | l$send_fail@707@01]
(assert l$send_fail@707@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@821@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 413 | True | live]
; [else-branch: 413 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 413 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@822@01 $Snap)
(assert (= $t@822@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@823@01 $Struct)
(assert (=
  self@823@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 8
; [then-branch: 414 | False | dead]
; [else-branch: 414 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 414 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 412 | !(l$send_fail@707@01)]
(assert (not l$send_fail@707@01))
(pop) ; 7
; [eval] !l$send_fail
(push) ; 7
(set-option :timeout 10)
(assert (not l$send_fail@707@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not l$send_fail@707@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 415 | !(l$send_fail@707@01) | live]
; [else-branch: 415 | l$send_fail@707@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 415 | !(l$send_fail@707@01)]
(assert (not l$send_fail@707@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@824@01 $Snap)
(assert (= $t@824@01 ($Snap.combine ($Snap.first $t@824@01) ($Snap.second $t@824@01))))
(assert (= ($Snap.first $t@824@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 0))))
(assert (= ($Snap.second $t@824@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@825@01 $Snap)
(assert (= $t@825@01 ($Snap.combine ($Snap.first $t@825@01) ($Snap.second $t@825@01))))
(assert (= ($Snap.first $t@825@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 1))))
(assert (= ($Snap.second $t@825@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@826@01 $Snap)
(assert (= $t@826@01 ($Snap.combine ($Snap.first $t@826@01) ($Snap.second $t@826@01))))
(assert (= ($Snap.first $t@826@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 2))))
(assert (= ($Snap.second $t@826@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@827@01 $Snap)
(assert (= $t@827@01 ($Snap.combine ($Snap.first $t@827@01) ($Snap.second $t@827@01))))
(assert (= ($Snap.first $t@827@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 3))))
(assert (= ($Snap.second $t@827@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@828@01 $Snap)
(assert (= $t@828@01 ($Snap.combine ($Snap.first $t@828@01) ($Snap.second $t@828@01))))
(assert (= ($Snap.first $t@828@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))))
(assert (= ($Snap.second $t@828@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@829@01 $Snap)
(assert (= $t@829@01 ($Snap.combine ($Snap.first $t@829@01) ($Snap.second $t@829@01))))
(assert (= ($Snap.first $t@829@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 8))))
(assert (= ($Snap.second $t@829@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@830@01 $Snap)
(assert (= $t@830@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@831@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 9
; [then-branch: 416 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@831@01)) | live]
; [else-branch: 416 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@831@01) | live]
(push) ; 10
; [then-branch: 416 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@831@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 416 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 10)), $q0@831@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@831@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1383@13@1383@350-aux|)))
(assert (forall (($q0@831@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@831@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1383@13@1383@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@832@01 $Snap)
(assert (= $t@832@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@833@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@833@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@833@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $q0@833@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1384@13@1384@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@834@01 $Snap)
(assert (= $t@834@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@835@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 9
; [then-branch: 417 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@835@01)) | live]
; [else-branch: 417 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@835@01) | live]
(push) ; 10
; [then-branch: 417 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@835@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 417 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@711@01, 11)), $q1@835@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@835@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1385@13@1385@350-aux|)))
(assert (forall (($q1@835@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@835@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1385@13@1385@350|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@836@01 $Snap)
(assert (= $t@836@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@837@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@837@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@837@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 11)) $q1@837@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1386@13@1386@258|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@838@01 $Snap)
(assert (= $t@838@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@839@01 $Snap)
(assert (= $t@839@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@840@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@840@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $a@840@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@820@01 10)) $a@840@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@711@01 10)) $a@840@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1389@13@1389@264|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@713@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call@713@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 418 | l$no_reentrant_call@713@01 | live]
; [else-branch: 418 | !(l$no_reentrant_call@713@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 418 | l$no_reentrant_call@713@01]
(assert l$no_reentrant_call@713@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 419 | $out_of_gas@716@01 | live]
; [else-branch: 419 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 419 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | True | live]
; [else-branch: 420 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 420 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@841@01 $Snap)
(assert (= $t@841@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@842@01 $Struct)
(assert (=
  self@842@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
; [then-branch: 421 | False | dead]
; [else-branch: 421 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 421 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 419 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 422 | !($out_of_gas@716@01) | live]
; [else-branch: 422 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 422 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 423 | False | dead]
; [else-branch: 423 | True | live]
(push) ; 10
; [else-branch: 423 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | True | live]
; [else-branch: 424 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 424 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@843@01 $Snap)
(assert (= $t@843@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@844@01 $Struct)
(assert (=
  self@844@01
  ($struct_set<$Struct> self@820@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@820@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 422 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 418 | !(l$no_reentrant_call@713@01)]
(assert (not l$no_reentrant_call@713@01))
(pop) ; 8
; [eval] !l$no_reentrant_call
(push) ; 8
(set-option :timeout 10)
(assert (not l$no_reentrant_call@713@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@713@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | !(l$no_reentrant_call@713@01) | live]
; [else-branch: 425 | l$no_reentrant_call@713@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 425 | !(l$no_reentrant_call@713@01)]
(assert (not l$no_reentrant_call@713@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 426 | $out_of_gas@716@01 | live]
; [else-branch: 426 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 426 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | True | live]
; [else-branch: 427 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 427 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@845@01 $Snap)
(assert (= $t@845@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@846@01 $Struct)
(assert (=
  self@846@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
; [then-branch: 428 | False | dead]
; [else-branch: 428 | True | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 428 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 426 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 9
; [eval] !$out_of_gas
(push) ; 9
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | !($out_of_gas@716@01) | live]
; [else-branch: 429 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 429 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 430 | False | dead]
; [else-branch: 430 | True | live]
(push) ; 10
; [else-branch: 430 | True]
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 431 | True | live]
; [else-branch: 431 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 431 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@847@01 $Snap)
(assert (= $t@847@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@848@01 $Struct)
(assert (=
  self@848@01
  ($struct_set<$Struct> l$havoc$2@711@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@711@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 10
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 429 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 425 | l$no_reentrant_call@713@01]
(assert l$no_reentrant_call@713@01)
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 415 | l$send_fail@707@01]
(assert l$send_fail@707@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 409 | !(!($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@697@01, 5))))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 5))))))
(pop) ; 5
; [eval] !(!($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool))
; [eval] !($struct_get($struct_loc(self, 4)): Bool) && !($struct_get($struct_loc(self, 5)): Bool)
; [eval] !($struct_get($struct_loc(self, 4)): Bool)
; [eval] ($struct_get($struct_loc(self, 4)): Bool)
; [eval] $struct_loc(self, 4)
(push) ; 5
; [then-branch: 432 | $struct_get[Bool]($struct_loc[Int](self@697@01, 4)) | live]
; [else-branch: 432 | !($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) | live]
(push) ; 6
; [then-branch: 432 | $struct_get[Bool]($struct_loc[Int](self@697@01, 4))]
(assert ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
(pop) ; 6
(push) ; 6
; [else-branch: 432 | !($struct_get[Bool]($struct_loc[Int](self@697@01, 4)))]
(assert (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4))))
; [eval] !($struct_get($struct_loc(self, 5)): Bool)
; [eval] ($struct_get($struct_loc(self, 5)): Bool)
; [eval] $struct_loc(self, 5)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 5))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 5)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | !(!($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@697@01, 5)))) | live]
; [else-branch: 433 | !($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@697@01, 5))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 433 | !(!($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@697@01, 5))))]
(assert (not
  (and
    (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
    (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 5))))))
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 434 | $out_of_gas@716@01 | live]
; [else-branch: 434 | !($out_of_gas@716@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 434 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 435 | True | live]
; [else-branch: 435 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 435 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@849@01 $Snap)
(assert (= $t@849@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@850@01 $Struct)
(assert (=
  self@850@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 7
; [then-branch: 436 | False | dead]
; [else-branch: 436 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 436 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 434 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@716@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@716@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 437 | !($out_of_gas@716@01) | live]
; [else-branch: 437 | $out_of_gas@716@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 437 | !($out_of_gas@716@01)]
(assert (not $out_of_gas@716@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 438 | False | dead]
; [else-branch: 438 | True | live]
(push) ; 7
; [else-branch: 438 | True]
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 439 | True | live]
; [else-branch: 439 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 439 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@851@01 $Snap)
(assert (= $t@851@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@717@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@852@01 $Struct)
(assert (=
  self@852@01
  ($struct_set<$Struct> self@697@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@697@01 7))
    l$havoc$6@717@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 437 | $out_of_gas@716@01]
(assert $out_of_gas@716@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 433 | !($struct_get[Bool]($struct_loc[Int](self@697@01, 4))) && !($struct_get[Bool]($struct_loc[Int](self@697@01, 5)))]
(assert (and
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 4)))
  (not ($struct_get<Bool> ($struct_loc<Int> self@697@01 5)))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 407 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) == $struct_get[Int]($struct_loc[Int](self@697@01, 1))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@697@01 1))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 373 | $struct_get[Int]($struct_loc[Int](msg@693@01, 0)) == $struct_get[Int]($struct_loc[Int](self@697@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@697@01 0))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$kill ----------
(declare-const $succ@853@01 Bool)
(declare-const $succ@854@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@855@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@856@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@857@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@858@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@859@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@860@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@861@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@862@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@863@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@864@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@865@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@866@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@867@01 Bool)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@868@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@869@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@870@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@871@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@872@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@873@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@874@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@875@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@876@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@877@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@878@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@879@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@880@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@881@01 $Snap)
(assert (= $t@881@01 ($Snap.combine ($Snap.first $t@881@01) ($Snap.second $t@881@01))))
(assert (= ($Snap.first $t@881@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@859@01 0))))
(assert (= ($Snap.second $t@881@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@859@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@882@01 $Snap)
(assert (= $t@882@01 ($Snap.combine ($Snap.first $t@882@01) ($Snap.second $t@882@01))))
(assert (= ($Snap.first $t@882@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@859@01 1))))
(assert (= ($Snap.second $t@882@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@859@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@883@01 $Snap)
(assert (= $t@883@01 ($Snap.combine ($Snap.first $t@883@01) ($Snap.second $t@883@01))))
(assert (= ($Snap.first $t@883@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@859@01 2))))
(assert (= ($Snap.second $t@883@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@859@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@884@01 $Snap)
(assert (= $t@884@01 ($Snap.combine ($Snap.first $t@884@01) ($Snap.second $t@884@01))))
(assert (= ($Snap.first $t@884@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@859@01 3))))
(assert (= ($Snap.second $t@884@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@859@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@885@01 $Snap)
(assert (= $t@885@01 ($Snap.combine ($Snap.first $t@885@01) ($Snap.second $t@885@01))))
(assert (= ($Snap.first $t@885@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@859@01 7))))
(assert (= ($Snap.second $t@885@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@859@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@886@01 $Snap)
(assert (= $t@886@01 ($Snap.combine ($Snap.first $t@886@01) ($Snap.second $t@886@01))))
(assert (= ($Snap.first $t@886@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@859@01 8))))
(assert (= ($Snap.second $t@886@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@859@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@887@01 $Snap)
(assert (= $t@887@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@888@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 4
; [then-branch: 440 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@859@01, 10)), $q0@888@01)) | live]
; [else-branch: 440 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@859@01, 10)), $q0@888@01) | live]
(push) ; 5
; [then-branch: 440 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@859@01, 10)), $q0@888@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 440 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@859@01, 10)), $q0@888@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@888@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1470@11@1470@348-aux|)))
(assert (forall (($q0@888@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@888@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1470@11@1470@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@889@01 $Snap)
(assert (= $t@889@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@890@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@890@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@890@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 10)) $q0@890@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1471@11@1471@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@891@01 $Snap)
(assert (= $t@891@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@892@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 4
; [then-branch: 441 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@859@01, 11)), $q1@892@01)) | live]
; [else-branch: 441 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@859@01, 11)), $q1@892@01) | live]
(push) ; 5
; [then-branch: 441 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@859@01, 11)), $q1@892@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 441 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@859@01, 11)), $q1@892@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@892@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1472@11@1472@348-aux|)))
(assert (forall (($q1@892@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@892@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1472@11@1472@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@893@01 $Snap)
(assert (= $t@893@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@894@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@894@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@894@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@859@01 11)) $q1@894@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1473@11@1473@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@895@01 $Snap)
(assert (= $t@895@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@859@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@896@01 $Snap)
(assert (= $t@896@01 ($Snap.combine ($Snap.first $t@896@01) ($Snap.second $t@896@01))))
(assert (= ($Snap.first $t@896@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@896@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@897@01 $Snap)
(assert (= $t@897@01 ($Snap.combine ($Snap.first $t@897@01) ($Snap.second $t@897@01))))
(assert (= ($Snap.first $t@897@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@856@01 0))))
(assert (= ($Snap.second $t@897@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@856@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@898@01 $Snap)
(assert (= $t@898@01 ($Snap.combine ($Snap.first $t@898@01) ($Snap.second $t@898@01))))
(assert (= ($Snap.first $t@898@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@856@01 1))))
(assert (= ($Snap.second $t@898@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@856@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@899@01 $Snap)
(assert (= $t@899@01 ($Snap.combine ($Snap.first $t@899@01) ($Snap.second $t@899@01))))
(assert (= ($Snap.first $t@899@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@856@01 2))))
(assert (= ($Snap.second $t@899@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@856@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@900@01 $Snap)
(assert (= $t@900@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@856@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@901@01 $Snap)
(assert (= $t@901@01 ($Snap.combine ($Snap.first $t@901@01) ($Snap.second $t@901@01))))
(assert (= ($Snap.first $t@901@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@856@01 4))))
(assert (= ($Snap.second $t@901@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@856@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@902@01 $Snap)
(assert (= $t@902@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@856@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@903@01 $Snap)
(assert (= $t@903@01 ($Snap.combine ($Snap.first $t@903@01) ($Snap.second $t@903@01))))
(assert (= ($Snap.first $t@903@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))))
(assert (= ($Snap.second $t@903@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@904@01 $Snap)
(assert (= $t@904@01 ($Snap.combine ($Snap.first $t@904@01) ($Snap.second $t@904@01))))
(assert (= ($Snap.first $t@904@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@855@01 1))))
(assert (= ($Snap.second $t@904@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@855@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@905@01 $Snap)
(assert (= $t@905@01 ($Snap.combine ($Snap.first $t@905@01) ($Snap.second $t@905@01))))
(assert (= ($Snap.first $t@905@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@855@01 2))))
(assert (= ($Snap.second $t@905@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@855@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@906@01 $Snap)
(assert (= $t@906@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@855@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@907@01 $Snap)
(assert (= $t@907@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@855@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@908@01 $Snap)
(assert (= $t@908@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@909@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@910@01 $Snap)
(assert (= $t@910@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@855@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@859@01 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@859@01 2))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | $struct_get[Int]($struct_loc[Int](msg@855@01, 0)) != $struct_get[Int]($struct_loc[Int](self@859@01, 2)) | live]
; [else-branch: 442 | $struct_get[Int]($struct_loc[Int](msg@855@01, 0)) == $struct_get[Int]($struct_loc[Int](self@859@01, 2)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 442 | $struct_get[Int]($struct_loc[Int](msg@855@01, 0)) != $struct_get[Int]($struct_loc[Int](self@859@01, 2))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@859@01 2)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | True | live]
; [else-branch: 443 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 443 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@911@01 $Snap)
(assert (= $t@911@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@879@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@912@01 $Struct)
(assert (=
  self@912@01
  ($struct_set<$Struct> self@859@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@859@01 7))
    l$havoc$6@879@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 4
; [then-branch: 444 | False | dead]
; [else-branch: 444 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 444 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 442 | $struct_get[Int]($struct_loc[Int](msg@855@01, 0)) == $struct_get[Int]($struct_loc[Int](self@859@01, 2))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@859@01 2))))
(pop) ; 3
; [eval] !!(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int))
; [eval] !(($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) == ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@859@01 2))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@859@01 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 445 | $struct_get[Int]($struct_loc[Int](msg@855@01, 0)) == $struct_get[Int]($struct_loc[Int](self@859@01, 2)) | live]
; [else-branch: 445 | $struct_get[Int]($struct_loc[Int](msg@855@01, 0)) != $struct_get[Int]($struct_loc[Int](self@859@01, 2)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 445 | $struct_get[Int]($struct_loc[Int](msg@855@01, 0)) == $struct_get[Int]($struct_loc[Int](self@859@01, 2))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
  ($struct_get<Int> ($struct_loc<Int> self@859@01 2))))
; [exec]
; self := ($struct_set(self, 6, true): $Struct)
; [eval] ($struct_set(self, 6, true): $Struct)
(declare-const self@913@01 $Struct)
(assert (= self@913@01 ($struct_set<$Struct> self@859@01 6 true)))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [then-branch: 446 | False | dead]
; [else-branch: 446 | True | live]
(push) ; 4
; [else-branch: 446 | True]
(pop) ; 4
; [eval] !(($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int))
; [eval] ($struct_get($struct_loc(self, 7)): Int) < ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 447 | True | live]
; [else-branch: 447 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 447 | True]
; [exec]
; self := ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) +
;   ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 10, ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int) + ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@914@01 $Struct)
(assert (=
  self@914@01
  ($struct_set<$Struct> self@913@01 10 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@913@01 10)) ($struct_get<Int> ($struct_loc<Int> self@913@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@913@01 10)) ($struct_get<Int> ($struct_loc<Int> self@913@01 0)))
    ($struct_get<Int> ($struct_loc<Int> self@913@01 7)))))))
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) -
;   ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) - ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@915@01 $Struct)
(assert (= self@915@01 ($struct_set<$Struct> self@914@01 7 0)))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail@869@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail@869@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 448 | l$send_fail@869@01 | live]
; [else-branch: 448 | !(l$send_fail@869@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 448 | l$send_fail@869@01]
(assert l$send_fail@869@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(self, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const $t@916@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 449 | True | live]
; [else-branch: 449 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 449 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@917@01 $Snap)
(assert (= $t@917@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@879@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@918@01 $Struct)
(assert (=
  self@918@01
  ($struct_set<$Struct> self@859@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@859@01 7))
    l$havoc$6@879@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 6
; [then-branch: 450 | False | dead]
; [else-branch: 450 | True | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 450 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 448 | !(l$send_fail@869@01)]
(assert (not l$send_fail@869@01))
(pop) ; 5
; [eval] !l$send_fail
(push) ; 5
(set-option :timeout 10)
(assert (not l$send_fail@869@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$send_fail@869@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 451 | !(l$send_fail@869@01) | live]
; [else-branch: 451 | l$send_fail@869@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 451 | !(l$send_fail@869@01)]
(assert (not l$send_fail@869@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@919@01 $Snap)
(assert (= $t@919@01 ($Snap.combine ($Snap.first $t@919@01) ($Snap.second $t@919@01))))
(assert (= ($Snap.first $t@919@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 0))))
(assert (= ($Snap.second $t@919@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@920@01 $Snap)
(assert (= $t@920@01 ($Snap.combine ($Snap.first $t@920@01) ($Snap.second $t@920@01))))
(assert (= ($Snap.first $t@920@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 1))))
(assert (= ($Snap.second $t@920@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 1))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 2)): Int) &&
;   ($struct_get($struct_loc(self, 2)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@921@01 $Snap)
(assert (= $t@921@01 ($Snap.combine ($Snap.first $t@921@01) ($Snap.second $t@921@01))))
(assert (= ($Snap.first $t@921@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 2)): Int)
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 2))))
(assert (= ($Snap.second $t@921@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 2)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 2)): Int)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 2))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 3)): Int) &&
;   ($struct_get($struct_loc(self, 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@922@01 $Snap)
(assert (= $t@922@01 ($Snap.combine ($Snap.first $t@922@01) ($Snap.second $t@922@01))))
(assert (= ($Snap.first $t@922@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 3)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 3))))
(assert (= ($Snap.second $t@922@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 3)): Int)
; [eval] $struct_loc(self, 3)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 7)): Int) &&
;   ($struct_get($struct_loc(self, 7)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@923@01 $Snap)
(assert (= $t@923@01 ($Snap.combine ($Snap.first $t@923@01) ($Snap.second $t@923@01))))
(assert (= ($Snap.first $t@923@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 7)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 7))))
(assert (= ($Snap.second $t@923@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 7)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 7))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 8)): Int) &&
;   ($struct_get($struct_loc(self, 8)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@924@01 $Snap)
(assert (= $t@924@01 ($Snap.combine ($Snap.first $t@924@01) ($Snap.second $t@924@01))))
(assert (= ($Snap.first $t@924@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 8)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 8))))
(assert (= ($Snap.second $t@924@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 8)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 8)): Int)
; [eval] $struct_loc(self, 8)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 8))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@925@01 $Snap)
(assert (= $t@925@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@926@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(push) ; 7
; [then-branch: 452 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@873@01, 10)), $q0@926@01)) | live]
; [else-branch: 452 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@873@01, 10)), $q0@926@01) | live]
(push) ; 8
; [then-branch: 452 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@873@01, 10)), $q0@926@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 452 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@873@01, 10)), $q0@926@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@926@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1542@11@1542@348-aux|)))
(assert (forall (($q0@926@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@926@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1542@11@1542@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $t@927@01 $Snap)
(assert (= $t@927@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int))
(declare-const $q0@928@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_sum(($struct_get($struct_loc(self, 10)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@928@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@928@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $q0@928@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1543@11@1543@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@929@01 $Snap)
(assert (= $t@929@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@930@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(push) ; 7
; [then-branch: 453 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@873@01, 11)), $q1@930@01)) | live]
; [else-branch: 453 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@873@01, 11)), $q1@930@01) | live]
(push) ; 8
; [then-branch: 453 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@873@01, 11)), $q1@930@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 453 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@873@01, 11)), $q1@930@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01)))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@930@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1544@11@1544@348-aux|)))
(assert (forall (($q1@930@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@930@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1544@11@1544@348|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $t@931@01 $Snap)
(assert (= $t@931@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int))
(declare-const $q1@932@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 11)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
; [eval] ($map_sum(($struct_get($struct_loc(self, 11)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 11)): $Map[Int, Int])
; [eval] $struct_loc(self, 11)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@932@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@932@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 11)) $q1@932@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1545@11@1545@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@933@01 $Snap)
(assert (= $t@933@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $t@934@01 $Snap)
(assert (= $t@934@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int))
(declare-const $a@935@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 10)): $Map[Int, Int])
; [eval] $struct_loc(self, 10)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 10)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 10)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 10)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@935@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $a@935@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@915@01 10)) $a@935@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@873@01 10)) $a@935@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesescrow.vy.vpr@1548@11@1548@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@875@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not l$no_reentrant_call@875@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 454 | l$no_reentrant_call@875@01 | live]
; [else-branch: 454 | !(l$no_reentrant_call@875@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 454 | l$no_reentrant_call@875@01]
(assert l$no_reentrant_call@875@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@878@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@878@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 455 | $out_of_gas@878@01 | live]
; [else-branch: 455 | !($out_of_gas@878@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 455 | $out_of_gas@878@01]
(assert $out_of_gas@878@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 456 | True | live]
; [else-branch: 456 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 456 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@936@01 $Snap)
(assert (= $t@936@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@879@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@937@01 $Struct)
(assert (=
  self@937@01
  ($struct_set<$Struct> self@859@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@859@01 7))
    l$havoc$6@879@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 8
; [then-branch: 457 | False | dead]
; [else-branch: 457 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 457 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 455 | !($out_of_gas@878@01)]
(assert (not $out_of_gas@878@01))
(pop) ; 7
; [eval] !$out_of_gas
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@878@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@878@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 458 | !($out_of_gas@878@01) | live]
; [else-branch: 458 | $out_of_gas@878@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 458 | !($out_of_gas@878@01)]
(assert (not $out_of_gas@878@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 459 | False | dead]
; [else-branch: 459 | True | live]
(push) ; 8
; [else-branch: 459 | True]
(pop) ; 8
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 460 | True | live]
; [else-branch: 460 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 460 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@938@01 $Snap)
(assert (= $t@938@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@879@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@939@01 $Struct)
(assert (=
  self@939@01
  ($struct_set<$Struct> self@915@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@915@01 7))
    l$havoc$6@879@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 8
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 458 | $out_of_gas@878@01]
(assert $out_of_gas@878@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 454 | !(l$no_reentrant_call@875@01)]
(assert (not l$no_reentrant_call@875@01))
(pop) ; 6
; [eval] !l$no_reentrant_call
(push) ; 6
(set-option :timeout 10)
(assert (not l$no_reentrant_call@875@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@875@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 461 | !(l$no_reentrant_call@875@01) | live]
; [else-branch: 461 | l$no_reentrant_call@875@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 461 | !(l$no_reentrant_call@875@01)]
(assert (not l$no_reentrant_call@875@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@878@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@878@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 462 | $out_of_gas@878@01 | live]
; [else-branch: 462 | !($out_of_gas@878@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 462 | $out_of_gas@878@01]
(assert $out_of_gas@878@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 463 | True | live]
; [else-branch: 463 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 463 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@940@01 $Snap)
(assert (= $t@940@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@879@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@941@01 $Struct)
(assert (=
  self@941@01
  ($struct_set<$Struct> self@859@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> self@859@01 7))
    l$havoc$6@879@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 8
; [then-branch: 464 | False | dead]
; [else-branch: 464 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 464 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 462 | !($out_of_gas@878@01)]
(assert (not $out_of_gas@878@01))
(pop) ; 7
; [eval] !$out_of_gas
(push) ; 7
(set-option :timeout 10)
(assert (not $out_of_gas@878@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not $out_of_gas@878@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 465 | !($out_of_gas@878@01) | live]
; [else-branch: 465 | $out_of_gas@878@01 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 465 | !($out_of_gas@878@01)]
(assert (not $out_of_gas@878@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 466 | False | dead]
; [else-branch: 466 | True | live]
(push) ; 8
; [else-branch: 466 | True]
(pop) ; 8
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 467 | True | live]
; [else-branch: 467 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 467 | True]
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@942@01 $Snap)
(assert (= $t@942@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@879@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 7, ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 7)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 7)): Int)
; [eval] $struct_loc(self, 7)
(declare-const self@943@01 $Struct)
(assert (=
  self@943@01
  ($struct_set<$Struct> l$havoc$2@873@01 7 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@873@01 7))
    l$havoc$6@879@01))))
; [exec]
; $contracts := l$havoc$7
(pop) ; 8
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 465 | $out_of_gas@878@01]
(assert $out_of_gas@878@01)
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 461 | l$no_reentrant_call@875@01]
(assert l$no_reentrant_call@875@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 451 | l$send_fail@869@01]
(assert l$send_fail@869@01)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 445 | $struct_get[Int]($struct_loc[Int](msg@855@01, 0)) != $struct_get[Int]($struct_loc[Int](self@859@01, 2))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> msg@855@01 0))
    ($struct_get<Int> ($struct_loc<Int> self@859@01 2)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
