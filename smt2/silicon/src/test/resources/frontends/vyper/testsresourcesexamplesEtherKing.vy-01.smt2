(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-13 17:31:58
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Contract 0)
(declare-sort $Blockchain 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort s$struct$Monarch 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
(declare-sort $PSF<$accessible$withdraw> 0)
(declare-sort $PSF<e$ThroneClaimed> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.s$struct$MonarchTo$Snap (s$struct$Monarch) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$Monarch ($Snap) s$struct$Monarch)
(assert (forall ((x s$struct$Monarch)) (!
    (= x ($SortWrappers.$SnapTos$struct$Monarch($SortWrappers.s$struct$MonarchTo$Snap x)))
    :pattern (($SortWrappers.s$struct$MonarchTo$Snap x))
    :qid |$Snap.$SnapTos$struct$MonarchTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$MonarchTo$Snap($SortWrappers.$SnapTos$struct$Monarch x)))
    :pattern (($SortWrappers.$SnapTos$struct$Monarch x))
    :qid |$Snap.s$struct$MonarchTo$SnapTos$struct$Monarch|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<$accessible$withdraw>To$Snap ($PSF<$accessible$withdraw>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap) $PSF<$accessible$withdraw>)
(assert (forall ((x $PSF<$accessible$withdraw>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<$accessible$withdraw>($SortWrappers.$PSF<$accessible$withdraw>To$Snap x)))
    :pattern (($SortWrappers.$PSF<$accessible$withdraw>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<$accessible$withdraw>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<$accessible$withdraw>To$Snap($SortWrappers.$SnapTo$PSF<$accessible$withdraw> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<$accessible$withdraw> x))
    :qid |$Snap.$PSF<$accessible$withdraw>To$SnapTo$PSF<$accessible$withdraw>|
    )))
(declare-fun $SortWrappers.$PSF<e$ThroneClaimed>To$Snap ($PSF<e$ThroneClaimed>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<e$ThroneClaimed> ($Snap) $PSF<e$ThroneClaimed>)
(assert (forall ((x $PSF<e$ThroneClaimed>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<e$ThroneClaimed>($SortWrappers.$PSF<e$ThroneClaimed>To$Snap x)))
    :pattern (($SortWrappers.$PSF<e$ThroneClaimed>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<e$ThroneClaimed>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<e$ThroneClaimed>To$Snap($SortWrappers.$SnapTo$PSF<e$ThroneClaimed> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<e$ThroneClaimed> x))
    :qid |$Snap.$PSF<e$ThroneClaimed>To$SnapTo$PSF<e$ThroneClaimed>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun s$struct$self$init<$Struct> (Int Int $Struct $Map<Int~_Int> Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun s$struct$Monarch$init<$Struct> (Int Seq<Int> Int Int) $Struct)
(declare-fun s$struct$Monarch$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
; /predicate_snap_functions_declarations.smt2 [$accessible$withdraw: Snap]
(declare-fun $PSF.domain_$accessible$withdraw ($PSF<$accessible$withdraw>) Set<$Snap>)
(declare-fun $PSF.lookup_$accessible$withdraw ($PSF<$accessible$withdraw> $Snap) $Snap)
(declare-fun $PSF.after_$accessible$withdraw ($PSF<$accessible$withdraw> $PSF<$accessible$withdraw>) Bool)
(declare-fun $PSF.loc_$accessible$withdraw ($Snap $Snap) Bool)
(declare-fun $PSF.perm_$accessible$withdraw ($PPM $Snap) $Perm)
(declare-const $psfTOP_$accessible$withdraw $PSF<$accessible$withdraw>)
; /predicate_snap_functions_declarations.smt2 [e$ThroneClaimed: Snap]
(declare-fun $PSF.domain_e$ThroneClaimed ($PSF<e$ThroneClaimed>) Set<$Snap>)
(declare-fun $PSF.lookup_e$ThroneClaimed ($PSF<e$ThroneClaimed> $Snap) $Snap)
(declare-fun $PSF.after_e$ThroneClaimed ($PSF<e$ThroneClaimed> $PSF<e$ThroneClaimed>) Bool)
(declare-fun $PSF.loc_e$ThroneClaimed ($Snap $Snap) Bool)
(declare-fun $PSF.perm_e$ThroneClaimed ($PPM $Snap) $Perm)
(declare-const $psfTOP_e$ThroneClaimed $PSF<e$ThroneClaimed>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun e$ThroneClaimed%trigger ($Snap Int Seq<Int> Int) Bool)
(declare-fun e$ThroneClaimed_0%trigger ($Snap Int Seq<Int> Int) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$withdraw%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$withdraw_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$claim_throne%trigger ($Snap Int Int Int Seq<Int>) Bool)
(declare-fun $accessible$claim_throne_0%trigger ($Snap Int Int Int Seq<Int>) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 $Struct) ($arg_3 $Map<Int~_Int>) ($arg_4 Int) ($arg_5 Int) ($arg_6 Bool) ($arg_7 $Map<Int~_Int>) ($arg_8 $Map<Int~_Int>) ($arg_9 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 1))
          $arg_1)
        (and
          (=
            ($struct_get<$Struct> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 2))
            $arg_2)
          (and
            (=
              ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 3))
              $arg_3)
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 4))
                $arg_4)
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 8))
                        $arg_8)
                      (=
                        ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9) 9))
                        $arg_9)))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> $l 2)) ($struct_get<$Struct> ($struct_loc<Int> $r 2)))
              (and
                ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 3)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 3)))
                (and
                  (=
                    ($struct_get<Int> ($struct_loc<Int> $l 4))
                    ($struct_get<Int> ($struct_loc<Int> $r 4)))
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> $l 5))
                      ($struct_get<Int> ($struct_loc<Int> $r 5)))
                    (and
                      (=
                        ($struct_get<Bool> ($struct_loc<Int> $l 6))
                        ($struct_get<Bool> ($struct_loc<Int> $r 6)))
                      (and
                        ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 7)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 7)))
                        (and
                          ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 8)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 8)))
                          (=
                            ($struct_get<Bool> ($struct_loc<Int> $l 9))
                            ($struct_get<Bool> ($struct_loc<Int> $r 9)))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($arg_0 Int) ($arg_1 Seq<Int>) ($arg_2 Int) ($arg_3 Int)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$Monarch$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) (- 0 1)))
      153050483905167055872575060156781585256)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$Monarch$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) 0))
        $arg_0)
      (and
        (Seq_equal
          ($struct_get<Seq<Int>> ($struct_loc<Int> (s$struct$Monarch$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) 1))
          $arg_1)
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$Monarch$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) 2))
            $arg_2)
          (=
            ($struct_get<Int> ($struct_loc<Int> (s$struct$Monarch$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3) 3))
            $arg_3)))))
  :pattern ((s$struct$Monarch$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3))
  :qid |prog.s$struct$Monarch$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$Monarch$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$Monarch$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (Seq_equal
              ($struct_get<Seq<Int>> ($struct_loc<Int> $l 1))
              ($struct_get<Seq<Int>> ($struct_loc<Int> $r 1)))
            (and
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 2))
                ($struct_get<Int> ($struct_loc<Int> $r 2)))
              (=
                ($struct_get<Int> ($struct_loc<Int> $l 3))
                ($struct_get<Int> ($struct_loc<Int> $r 3)))))))))
  :pattern ((s$struct$Monarch$eq<Bool> $l $r))
  :qid |prog.s$struct$Monarch$eq$ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
; /predicate_snap_functions_axioms.smt2 [$accessible$withdraw: Snap]
(assert (forall ((vs $PSF<$accessible$withdraw>) (ws $PSF<$accessible$withdraw>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_$accessible$withdraw vs) ($PSF.domain_$accessible$withdraw ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_$accessible$withdraw vs))
            (= ($PSF.lookup_$accessible$withdraw vs x) ($PSF.lookup_$accessible$withdraw ws x)))
          :pattern (($PSF.lookup_$accessible$withdraw vs x) ($PSF.lookup_$accessible$withdraw ws x))
          :qid |qp.$PSF<$accessible$withdraw>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<$accessible$withdraw>To$Snap vs)
              ($SortWrappers.$PSF<$accessible$withdraw>To$Snap ws)
              )
    :qid |qp.$PSF<$accessible$withdraw>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_$accessible$withdraw pm s))
    :pattern (($PSF.perm_$accessible$withdraw pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_$accessible$withdraw f s) true)
    :pattern (($PSF.loc_$accessible$withdraw f s)))))
; /predicate_snap_functions_axioms.smt2 [e$ThroneClaimed: Snap]
(assert (forall ((vs $PSF<e$ThroneClaimed>) (ws $PSF<e$ThroneClaimed>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_e$ThroneClaimed vs) ($PSF.domain_e$ThroneClaimed ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_e$ThroneClaimed vs))
            (= ($PSF.lookup_e$ThroneClaimed vs x) ($PSF.lookup_e$ThroneClaimed ws x)))
          :pattern (($PSF.lookup_e$ThroneClaimed vs x) ($PSF.lookup_e$ThroneClaimed ws x))
          :qid |qp.$PSF<e$ThroneClaimed>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<e$ThroneClaimed>To$Snap vs)
              ($SortWrappers.$PSF<e$ThroneClaimed>To$Snap ws)
              )
    :qid |qp.$PSF<e$ThroneClaimed>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_e$ThroneClaimed pm s))
    :pattern (($PSF.perm_e$ThroneClaimed pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_e$ThroneClaimed f s) true)
    :pattern (($PSF.loc_e$ThroneClaimed f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1384|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-1385|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1390|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1391|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1386|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-1387|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1392|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1393|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1388|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1389|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1394|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1395|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@0@01 2)) 0))))
(assert (= ($Snap.second $t@10@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@0@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@0@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@0@01 2)) 2))))
(assert (= ($Snap.second $t@12@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@0@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 ($Snap.combine ($Snap.first $t@13@01) ($Snap.second $t@13@01))))
(assert (= ($Snap.first $t@13@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@0@01 2)) 3))))
(assert (= ($Snap.second $t@13@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@0@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@0@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@16@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 4
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q1@16@01)) | live]
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q1@16@01) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q1@16@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q1@16@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@16@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@632@11@632@354-aux|)))
(assert (forall (($q1@16@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@632@11@632@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $q1@18@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@18@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@18@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q1@18@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@633@11@633@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 ($Snap.combine ($Snap.first $t@19@01) ($Snap.second $t@19@01))))
(assert (= ($Snap.first $t@19@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))))
(assert (= ($Snap.second $t@19@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@20@01 $Snap)
(assert (= $t@20@01 ($Snap.combine ($Snap.first $t@20@01) ($Snap.second $t@20@01))))
(assert (= ($Snap.first $t@20@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))))
(assert (= ($Snap.second $t@20@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@22@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(push) ; 4
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q2@22@01)) | live]
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q2@22@01) | live]
(push) ; 5
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q2@22@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 7)), $q2@22@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@22@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@636@11@636@354-aux|)))
(assert (forall (($q2@22@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@22@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@636@11@636@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $q2@24@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@24@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@24@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $q2@24@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@637@11@637@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@26@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q3@26@01)) | live]
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q3@26@01) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q3@26@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q3@26@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@26@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@638@11@638@354-aux|)))
(assert (forall (($q3@26@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@26@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@638@11@638@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q3@28@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@28@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@28@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q3@28@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@639@11@639@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 ($Snap.combine ($Snap.first $t@30@01) ($Snap.second $t@30@01))))
(assert (= ($Snap.first $t@30@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@30@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 ($Snap.combine ($Snap.first $t@31@01) ($Snap.second $t@31@01))))
(assert (= ($Snap.first $t@31@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@31@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 ($Snap.combine ($Snap.first $t@32@01) ($Snap.second $t@32@01))))
(assert (= ($Snap.first $t@32@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@2@01 2)) 0))))
(assert (= ($Snap.second $t@32@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@2@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@2@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@34@01 $Snap)
(assert (= $t@34@01 ($Snap.combine ($Snap.first $t@34@01) ($Snap.second $t@34@01))))
(assert (= ($Snap.first $t@34@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@2@01 2)) 2))))
(assert (= ($Snap.second $t@34@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@2@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 ($Snap.combine ($Snap.first $t@35@01) ($Snap.second $t@35@01))))
(assert (= ($Snap.first $t@35@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@2@01 2)) 3))))
(assert (= ($Snap.second $t@35@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@2@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@2@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@38@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q1@38@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q1@38@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q1@38@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q1@38@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@38@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@648@11@648@354-aux|)))
(assert (forall (($q1@38@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@38@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@648@11@648@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $q1@40@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@40@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@40@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q1@40@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@649@11@649@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 ($Snap.combine ($Snap.first $t@41@01) ($Snap.second $t@41@01))))
(assert (= ($Snap.first $t@41@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))))
(assert (= ($Snap.second $t@41@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@42@01 $Snap)
(assert (= $t@42@01 ($Snap.combine ($Snap.first $t@42@01) ($Snap.second $t@42@01))))
(assert (= ($Snap.first $t@42@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))))
(assert (= ($Snap.second $t@42@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@44@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q2@44@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q2@44@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q2@44@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 7)), $q2@44@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@44@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@652@11@652@354-aux|)))
(assert (forall (($q2@44@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@652@11@652@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $q2@46@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@46@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@46@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $q2@46@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@653@11@653@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@48@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q3@48@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q3@48@01) | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q3@48@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q3@48@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@48@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@654@11@654@354-aux|)))
(assert (forall (($q3@48@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@654@11@654@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q3@50@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@50@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@50@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q3@50@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@655@11@655@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 ($Snap.combine ($Snap.first $t@52@01) ($Snap.second $t@52@01))))
(assert (= ($Snap.first $t@52@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@52@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 ($Snap.combine ($Snap.first $t@53@01) ($Snap.second $t@53@01))))
(assert (= ($Snap.first $t@53@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@53@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct),
;   0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct),
;   0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (= ($Snap.first $t@54@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Struct)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$2@4@01 2)) 0))))
(assert (= ($Snap.second $t@54@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Struct)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$2@4@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Struct)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$2@4@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct),
;   2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct),
;   2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 ($Snap.combine ($Snap.first $t@56@01) ($Snap.second $t@56@01))))
(assert (= ($Snap.first $t@56@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Struct)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$2@4@01 2)) 2))))
(assert (= ($Snap.second $t@56@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Struct)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$2@4@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct),
;   3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct),
;   3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 ($Snap.combine ($Snap.first $t@57@01) ($Snap.second $t@57@01))))
(assert (= ($Snap.first $t@57@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Struct)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$2@4@01 2)) 3))))
(assert (= ($Snap.second $t@57@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Struct)
; [eval] $struct_loc($self$2, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$2@4@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$2, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc($self$2, 2)): $Struct)
; [eval] $struct_loc($self$2, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$2@4@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@60@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(push) ; 4
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q1@60@01)) | live]
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q1@60@01) | live]
(push) ; 5
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q1@60@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q1@60@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@60@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@664@11@664@354-aux|)))
(assert (forall (($q1@60@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@60@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@664@11@664@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int))
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int))
(declare-const $q1@62@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@62@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@62@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q1@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@665@11@665@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 4)): Int) &&
;   ($struct_get($struct_loc($self$2, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 ($Snap.combine ($Snap.first $t@63@01) ($Snap.second $t@63@01))))
(assert (= ($Snap.first $t@63@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))))
(assert (= ($Snap.second $t@63@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 5)): Int) &&
;   ($struct_get($struct_loc($self$2, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@64@01 $Snap)
(assert (= $t@64@01 ($Snap.combine ($Snap.first $t@64@01) ($Snap.second $t@64@01))))
(assert (= ($Snap.first $t@64@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))))
(assert (= ($Snap.second $t@64@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@66@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(push) ; 4
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q2@66@01)) | live]
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q2@66@01) | live]
(push) ; 5
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q2@66@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 7)), $q2@66@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@66@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@668@11@668@354-aux|)))
(assert (forall (($q2@66@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@668@11@668@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int))
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int))
(declare-const $q2@68@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@68@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@68@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $q2@68@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@669@11@669@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@69@01 $Snap)
(assert (= $t@69@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@70@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(push) ; 4
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q3@70@01)) | live]
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q3@70@01) | live]
(push) ; 5
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q3@70@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q3@70@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@70@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@670@11@670@354-aux|)))
(assert (forall (($q3@70@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@70@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@670@11@670@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $q3@72@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@72@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@72@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q3@72@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@671@11@671@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 ($Snap.combine ($Snap.first $t@74@01) ($Snap.second $t@74@01))))
(assert (= ($Snap.first $t@74@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@74@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 ($Snap.combine ($Snap.first $t@75@01) ($Snap.second $t@75@01))))
(assert (= ($Snap.first $t@75@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@75@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 ($Snap.combine ($Snap.first $t@76@01) ($Snap.second $t@76@01))))
(assert (= ($Snap.first $t@76@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@76@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 ($Snap.combine ($Snap.first $t@78@01) ($Snap.second $t@78@01))))
(assert (= ($Snap.first $t@78@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@78@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@79@01 $Snap)
(assert (= $t@79@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@81@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) >= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(1, q$a, q$v), write))
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 ($Snap.combine ($Snap.first $t@83@01) ($Snap.second $t@83@01))))
(assert (= ($Snap.first $t@83@01) $Snap.unit))
(declare-const q$a@84@01 Int)
(declare-const q$v@85@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 9 | !(0 <= q$a@84@01) | live]
; [else-branch: 9 | 0 <= q$a@84@01 | live]
(push) ; 5
; [then-branch: 9 | !(0 <= q$a@84@01)]
(assert (not (<= 0 q$a@84@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 9 | 0 <= q$a@84@01]
(assert (<= 0 q$a@84@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 10 | !(q$a@84@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 10 | q$a@84@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 10 | !(q$a@84@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@84@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 10 | q$a@84@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@84@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 11 | !(0 <= q$v@85@01) | live]
; [else-branch: 11 | 0 <= q$v@85@01 | live]
(push) ; 9
; [then-branch: 11 | !(0 <= q$v@85@01)]
(assert (not (<= 0 q$v@85@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 11 | 0 <= q$v@85@01]
(assert (<= 0 q$v@85@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 12 | !(q$v@85@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 12 | q$v@85@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 12 | !(q$v@85@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@85@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 12 | q$v@85@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@85@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@85@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@85@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@85@01)
  (and
    (<= 0 q$v@85@01)
    (or
      (<=
        q$v@85@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@85@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@85@01) (not (<= 0 q$v@85@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@85@01)
      (and
        (<= 0 q$v@85@01)
        (or
          (<=
            q$v@85@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@85@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@85@01) (not (<= 0 q$v@85@01))))))
(assert (or
  (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@84@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@84@01)
  (and
    (<= 0 q$a@84@01)
    (=>
      (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@85@01)
          (and
            (<= 0 q$v@85@01)
            (or
              (<=
                q$v@85@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@85@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@85@01) (not (<= 0 q$v@85@01)))))
    (or
      (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@84@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@84@01) (not (<= 0 q$a@84@01))))
(assert (and
  (<= 0 q$a@84@01)
  (and
    (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@85@01)
      (and
        (<=
          q$v@85@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@85@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) q$a@84@01)))))))
(declare-const sm@86@01 $PSF<$accessible$withdraw>)
(declare-const s@87@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@88@01 (Int Int Int) Int)
(declare-fun img@89@01 (Int Int Int) Bool)
(declare-fun inv@90@01 (Int Int Int) Int)
(declare-fun img@91@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@84@01 Int) (q$v@85@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@84@01)
      (and
        (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@85@01)
          (and
            (<=
              q$v@85@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@85@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) q$a@84@01))))))
    (and
      (=>
        (<= 0 q$a@84@01)
        (and
          (<= 0 q$a@84@01)
          (=>
            (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@85@01)
                (and
                  (<= 0 q$v@85@01)
                  (or
                    (<=
                      q$v@85@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@85@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@85@01) (not (<= 0 q$v@85@01)))))
          (or
            (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@84@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@84@01) (not (<= 0 q$a@84@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@84@01))
    ($SortWrappers.IntTo$Snap q$v@85@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@84@01))
    ($SortWrappers.IntTo$Snap q$v@85@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@84@01 Int) (q$v1@85@01 Int) (q$a2@84@01 Int) (q$v2@85@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@84@01)
        (and
          (<= q$a1@84@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@85@01)
            (and
              (<=
                q$v1@85@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@85@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) q$a1@84@01))))))
      (and
        (<= 0 q$a2@84@01)
        (and
          (<= q$a2@84@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@85@01)
            (and
              (<=
                q$v2@85@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@85@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) q$a2@84@01))))))
      (and (= q$a1@84@01 q$a2@84@01) (= q$v1@85@01 q$v2@85@01)))
    (and (= q$a1@84@01 q$a2@84@01) (= q$v1@85@01 q$v2@85@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@84@01 Int) (q$v@85@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@84@01)
      (and
        (<= q$a@84@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@85@01)
          (and
            (<=
              q$v@85@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@85@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) q$a@84@01))))))
    (and
      (and
        (= (inv@88@01 1 q$a@84@01 q$v@85@01) q$a@84@01)
        (= (inv@90@01 1 q$a@84@01 q$v@85@01) q$v@85@01))
      (and (img@89@01 1 q$a@84@01 q$v@85@01) (img@91@01 1 q$a@84@01 q$v@85@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@84@01))
    ($SortWrappers.IntTo$Snap q$v@85@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@84@01))
    ($SortWrappers.IntTo$Snap q$v@85@01))))
  :qid |quant-u-1397|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@89@01 $tag $to $amount) (img@91@01 $tag $to $amount))
      (and
        (<= 0 (inv@88@01 $tag $to $amount))
        (and
          (<=
            (inv@88@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@90@01 $tag $to $amount))
            (and
              (<=
                (inv@90@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@90@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 $tag $to $amount))))))))
    (and
      (= 1 $tag)
      (= (inv@88@01 $tag $to $amount) $to)
      (= (inv@90@01 $tag $to $amount) $amount)))
  :pattern ((inv@88@01 $tag $to $amount))
  :pattern ((inv@90@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(declare-const sm@92@01 $PSF<$accessible$withdraw>)
(declare-const s@93@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@93@01 $Snap)) (!
  (=>
    (and
      (and
        (img@89@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second s@93@01)))
        (img@91@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second s@93@01))))
      (and
        (<=
          0
          (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second s@93@01))))
        (and
          (<=
            (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second s@93@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second s@93@01))))
            (and
              (<=
                (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second s@93@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second s@93@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@93@01))) ($SortWrappers.$SnapToInt ($Snap.second s@93@01))))))))))
    (and
      (not (= s@93@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@92@01  $PSF<$accessible$withdraw>) s@93@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@93@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@92@01  $PSF<$accessible$withdraw>) s@93@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@93@01))
  :qid |qp.psmValDef1|)))
(assert (forall ((s@93@01 $Snap)) (!
  ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@93@01) s@93@01)
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@92@01  $PSF<$accessible$withdraw>) s@93@01))
  :qid |qp.psmResTrgDef2|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@88@01 $tag $to $amount))
      (and
        (<=
          (inv@88@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@90@01 $tag $to $amount))
          (and
            (<=
              (inv@90@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@90@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@92@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@88@01 $tag $to $amount) (inv@90@01 $tag $to $amount))
  :qid |quant-u-1398|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@94@01 $Snap)
(assert (= $t@94@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@95@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@95@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@95@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 7)) $a@95@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@95@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@682@11@682@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) >= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(1, q$a, q$v), write))
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 ($Snap.combine ($Snap.first $t@97@01) ($Snap.second $t@97@01))))
(assert (= ($Snap.first $t@97@01) $Snap.unit))
(declare-const q$a@98@01 Int)
(declare-const q$v@99@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 13 | !(0 <= q$a@98@01) | live]
; [else-branch: 13 | 0 <= q$a@98@01 | live]
(push) ; 5
; [then-branch: 13 | !(0 <= q$a@98@01)]
(assert (not (<= 0 q$a@98@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 13 | 0 <= q$a@98@01]
(assert (<= 0 q$a@98@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 14 | !(q$a@98@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 14 | q$a@98@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 14 | !(q$a@98@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@98@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | q$a@98@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@98@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 15 | !(0 <= q$v@99@01) | live]
; [else-branch: 15 | 0 <= q$v@99@01 | live]
(push) ; 9
; [then-branch: 15 | !(0 <= q$v@99@01)]
(assert (not (<= 0 q$v@99@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 15 | 0 <= q$v@99@01]
(assert (<= 0 q$v@99@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 16 | !(q$v@99@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 16 | q$v@99@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 16 | !(q$v@99@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@99@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 16 | q$v@99@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@99@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@99@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@99@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@99@01)
  (and
    (<= 0 q$v@99@01)
    (or
      (<=
        q$v@99@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@99@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@99@01) (not (<= 0 q$v@99@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@99@01)
      (and
        (<= 0 q$v@99@01)
        (or
          (<=
            q$v@99@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@99@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@99@01) (not (<= 0 q$v@99@01))))))
(assert (or
  (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@98@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@98@01)
  (and
    (<= 0 q$a@98@01)
    (=>
      (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@99@01)
          (and
            (<= 0 q$v@99@01)
            (or
              (<=
                q$v@99@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@99@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@99@01) (not (<= 0 q$v@99@01)))))
    (or
      (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@98@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@98@01) (not (<= 0 q$a@98@01))))
(assert (and
  (<= 0 q$a@98@01)
  (and
    (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@99@01)
      (and
        (<=
          q$v@99@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@99@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) q$a@98@01)))))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@100@01 (Int Int Int) Int)
(declare-fun img@101@01 (Int Int Int) Bool)
(declare-fun inv@102@01 (Int Int Int) Int)
(declare-fun img@103@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@98@01 Int) (q$v@99@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@98@01)
      (and
        (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@99@01)
          (and
            (<=
              q$v@99@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@99@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) q$a@98@01))))))
    (and
      (=>
        (<= 0 q$a@98@01)
        (and
          (<= 0 q$a@98@01)
          (=>
            (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@99@01)
                (and
                  (<= 0 q$v@99@01)
                  (or
                    (<=
                      q$v@99@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@99@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@99@01) (not (<= 0 q$v@99@01)))))
          (or
            (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@98@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@98@01) (not (<= 0 q$a@98@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@98@01))
    ($SortWrappers.IntTo$Snap q$v@99@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@98@01))
    ($SortWrappers.IntTo$Snap q$v@99@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@98@01 Int) (q$v1@99@01 Int) (q$a2@98@01 Int) (q$v2@99@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@98@01)
        (and
          (<= q$a1@98@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@99@01)
            (and
              (<=
                q$v1@99@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@99@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) q$a1@98@01))))))
      (and
        (<= 0 q$a2@98@01)
        (and
          (<= q$a2@98@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@99@01)
            (and
              (<=
                q$v2@99@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@99@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) q$a2@98@01))))))
      (and (= q$a1@98@01 q$a2@98@01) (= q$v1@99@01 q$v2@99@01)))
    (and (= q$a1@98@01 q$a2@98@01) (= q$v1@99@01 q$v2@99@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@98@01 Int) (q$v@99@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@98@01)
      (and
        (<= q$a@98@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@99@01)
          (and
            (<=
              q$v@99@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@99@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) q$a@98@01))))))
    (and
      (and
        (= (inv@100@01 1 q$a@98@01 q$v@99@01) q$a@98@01)
        (= (inv@102@01 1 q$a@98@01 q$v@99@01) q$v@99@01))
      (and (img@101@01 1 q$a@98@01 q$v@99@01) (img@103@01 1 q$a@98@01 q$v@99@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@98@01))
    ($SortWrappers.IntTo$Snap q$v@99@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@98@01))
    ($SortWrappers.IntTo$Snap q$v@99@01))))
  :qid |quant-u-1400|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@101@01 $tag $to $amount) (img@103@01 $tag $to $amount))
      (and
        (<= 0 (inv@100@01 $tag $to $amount))
        (and
          (<=
            (inv@100@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@102@01 $tag $to $amount))
            (and
              (<=
                (inv@102@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@102@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) (inv@100@01 $tag $to $amount))))))))
    (and
      (= 1 $tag)
      (= (inv@100@01 $tag $to $amount) $to)
      (= (inv@102@01 $tag $to $amount) $amount)))
  :pattern ((inv@100@01 $tag $to $amount))
  :pattern ((inv@102@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (and
      (and (img@101@01 $tag $to $amount) (img@103@01 $tag $to $amount))
      (and
        (<= 0 (inv@100@01 $tag $to $amount))
        (and
          (<=
            (inv@100@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@102@01 $tag $to $amount))
            (and
              (<=
                (inv@102@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@102@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) (inv@100@01 $tag $to $amount))))))))
    (and
      (and (img@89@01 $tag $to $amount) (img@91@01 $tag $to $amount))
      (and
        (<= 0 (inv@88@01 $tag $to $amount))
        (and
          (<=
            (inv@88@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@90@01 $tag $to $amount))
            (and
              (<=
                (inv@90@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@90@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 $tag $to $amount)))))))))
  
  :qid |quant-u-1401|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@104@01 $PSF<$accessible$withdraw>)
(declare-const s@105@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@105@01 $Snap)) (!
  (=>
    (and
      (and
        (img@89@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01)))
        (img@91@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01))))
      (and
        (<=
          0
          (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01))))
        (and
          (<=
            (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01))))
            (and
              (<=
                (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01))))))))))
    (and
      (not (= s@105@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@104@01  $PSF<$accessible$withdraw>) s@105@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@105@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@104@01  $PSF<$accessible$withdraw>) s@105@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@105@01))
  :qid |qp.psmValDef3|)))
(assert (forall ((s@105@01 $Snap)) (!
  (=>
    (and
      (and
        (img@101@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01)))
        (img@103@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01))))
      (and
        (<=
          0
          (inv@100@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01))))
        (and
          (<=
            (inv@100@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01))))
            (and
              (<=
                (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) (inv@100@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@105@01))) ($SortWrappers.$SnapToInt ($Snap.second s@105@01))))))))))
    (and
      (not (= s@105@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@104@01  $PSF<$accessible$withdraw>) s@105@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@105@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@104@01  $PSF<$accessible$withdraw>) s@105@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@105@01))
  :qid |qp.psmValDef4|)))
(assert (forall ((s@105@01 $Snap)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@105@01) s@105@01)
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@105@01) s@105@01))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@104@01  $PSF<$accessible$withdraw>) s@105@01))
  :qid |qp.psmResTrgDef5|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@100@01 $tag $to $amount))
      (and
        (<=
          (inv@100@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@102@01 $tag $to $amount))
          (and
            (<=
              (inv@102@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@102@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) (inv@100@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@104@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@100@01 $tag $to $amount) (inv@102@01 $tag $to $amount))
  :qid |quant-u-1402|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@106@01 $Snap)
(assert (= $t@106@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@107@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@107@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $a@107@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 7)) $a@107@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 7)) $a@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@685@11@685@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) >= ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(1, q$a, q$v), write))
(declare-const $t@109@01 $Snap)
(assert (= $t@109@01 ($Snap.combine ($Snap.first $t@109@01) ($Snap.second $t@109@01))))
(assert (= ($Snap.first $t@109@01) $Snap.unit))
(declare-const q$a@110@01 Int)
(declare-const q$v@111@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 17 | !(0 <= q$a@110@01) | live]
; [else-branch: 17 | 0 <= q$a@110@01 | live]
(push) ; 5
; [then-branch: 17 | !(0 <= q$a@110@01)]
(assert (not (<= 0 q$a@110@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | 0 <= q$a@110@01]
(assert (<= 0 q$a@110@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 18 | !(q$a@110@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 18 | q$a@110@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 18 | !(q$a@110@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@110@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 18 | q$a@110@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@110@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 19 | !(0 <= q$v@111@01) | live]
; [else-branch: 19 | 0 <= q$v@111@01 | live]
(push) ; 9
; [then-branch: 19 | !(0 <= q$v@111@01)]
(assert (not (<= 0 q$v@111@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 19 | 0 <= q$v@111@01]
(assert (<= 0 q$v@111@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 20 | !(q$v@111@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 20 | q$v@111@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 20 | !(q$v@111@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@111@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 20 | q$v@111@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@111@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@111@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@111@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@111@01)
  (and
    (<= 0 q$v@111@01)
    (or
      (<=
        q$v@111@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@111@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@111@01) (not (<= 0 q$v@111@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@111@01)
      (and
        (<= 0 q$v@111@01)
        (or
          (<=
            q$v@111@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@111@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@111@01) (not (<= 0 q$v@111@01))))))
(assert (or
  (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@110@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@110@01)
  (and
    (<= 0 q$a@110@01)
    (=>
      (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@111@01)
          (and
            (<= 0 q$v@111@01)
            (or
              (<=
                q$v@111@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@111@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@111@01) (not (<= 0 q$v@111@01)))))
    (or
      (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@110@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@110@01) (not (<= 0 q$a@110@01))))
(assert (and
  (<= 0 q$a@110@01)
  (and
    (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@111@01)
      (and
        (<=
          q$v@111@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@111@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a@110@01)))))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@112@01 (Int Int Int) Int)
(declare-fun img@113@01 (Int Int Int) Bool)
(declare-fun inv@114@01 (Int Int Int) Int)
(declare-fun img@115@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@110@01 Int) (q$v@111@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@110@01)
      (and
        (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@111@01)
          (and
            (<=
              q$v@111@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@111@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a@110@01))))))
    (and
      (=>
        (<= 0 q$a@110@01)
        (and
          (<= 0 q$a@110@01)
          (=>
            (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@111@01)
                (and
                  (<= 0 q$v@111@01)
                  (or
                    (<=
                      q$v@111@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@111@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@111@01) (not (<= 0 q$v@111@01)))))
          (or
            (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@110@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@110@01) (not (<= 0 q$a@110@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@109@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@110@01))
    ($SortWrappers.IntTo$Snap q$v@111@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@110@01))
    ($SortWrappers.IntTo$Snap q$v@111@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@110@01 Int) (q$v1@111@01 Int) (q$a2@110@01 Int) (q$v2@111@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@110@01)
        (and
          (<= q$a1@110@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@111@01)
            (and
              (<=
                q$v1@111@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@111@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a1@110@01))))))
      (and
        (<= 0 q$a2@110@01)
        (and
          (<= q$a2@110@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@111@01)
            (and
              (<=
                q$v2@111@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@111@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a2@110@01))))))
      (and (= q$a1@110@01 q$a2@110@01) (= q$v1@111@01 q$v2@111@01)))
    (and (= q$a1@110@01 q$a2@110@01) (= q$v1@111@01 q$v2@111@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@110@01 Int) (q$v@111@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@110@01)
      (and
        (<= q$a@110@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@111@01)
          (and
            (<=
              q$v@111@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@111@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a@110@01))))))
    (and
      (and
        (= (inv@112@01 1 q$a@110@01 q$v@111@01) q$a@110@01)
        (= (inv@114@01 1 q$a@110@01 q$v@111@01) q$v@111@01))
      (and
        (img@113@01 1 q$a@110@01 q$v@111@01)
        (img@115@01 1 q$a@110@01 q$v@111@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@109@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@110@01))
    ($SortWrappers.IntTo$Snap q$v@111@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@110@01))
    ($SortWrappers.IntTo$Snap q$v@111@01))))
  :qid |quant-u-1404|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@113@01 $tag $to $amount) (img@115@01 $tag $to $amount))
      (and
        (<= 0 (inv@112@01 $tag $to $amount))
        (and
          (<=
            (inv@112@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@114@01 $tag $to $amount))
            (and
              (<=
                (inv@114@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@114@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@112@01 $tag $to $amount))))))))
    (and
      (= 1 $tag)
      (= (inv@112@01 $tag $to $amount) $to)
      (= (inv@114@01 $tag $to $amount) $amount)))
  :pattern ((inv@112@01 $tag $to $amount))
  :pattern ((inv@114@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (and
      (and (img@113@01 $tag $to $amount) (img@115@01 $tag $to $amount))
      (and
        (<= 0 (inv@112@01 $tag $to $amount))
        (and
          (<=
            (inv@112@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@114@01 $tag $to $amount))
            (and
              (<=
                (inv@114@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@114@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@112@01 $tag $to $amount))))))))
    (and
      (and (img@101@01 $tag $to $amount) (img@103@01 $tag $to $amount))
      (and
        (<= 0 (inv@100@01 $tag $to $amount))
        (and
          (<=
            (inv@100@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@102@01 $tag $to $amount))
            (and
              (<=
                (inv@102@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@102@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) (inv@100@01 $tag $to $amount)))))))))
  
  :qid |quant-u-1405|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (and
      (and (img@113@01 $tag $to $amount) (img@115@01 $tag $to $amount))
      (and
        (<= 0 (inv@112@01 $tag $to $amount))
        (and
          (<=
            (inv@112@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@114@01 $tag $to $amount))
            (and
              (<=
                (inv@114@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@114@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@112@01 $tag $to $amount))))))))
    (and
      (and (img@89@01 $tag $to $amount) (img@91@01 $tag $to $amount))
      (and
        (<= 0 (inv@88@01 $tag $to $amount))
        (and
          (<=
            (inv@88@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@90@01 $tag $to $amount))
            (and
              (<=
                (inv@90@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@90@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 $tag $to $amount)))))))))
  
  :qid |quant-u-1406|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@116@01 $PSF<$accessible$withdraw>)
(declare-const s@117@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@117@01 $Snap)) (!
  (=>
    (and
      (and
        (img@89@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
        (img@91@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
      (and
        (<=
          0
          (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
        (and
          (<=
            (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
            (and
              (<=
                (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@90@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))))))))
    (and
      (not (= s@117@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) s@117@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@117@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) s@117@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@117@01))
  :qid |qp.psmValDef6|)))
(assert (forall ((s@117@01 $Snap)) (!
  (=>
    (and
      (and
        (img@101@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
        (img@103@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
      (and
        (<=
          0
          (inv@100@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
        (and
          (<=
            (inv@100@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
            (and
              (<=
                (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@102@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) (inv@100@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))))))))
    (and
      (not (= s@117@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) s@117@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@117@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) s@117@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@117@01))
  :qid |qp.psmValDef7|)))
(assert (forall ((s@117@01 $Snap)) (!
  (=>
    (and
      (and
        (img@113@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
        (img@115@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
      (and
        (<=
          0
          (inv@112@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
        (and
          (<=
            (inv@112@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@114@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))
            (and
              (<=
                (inv@114@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@114@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@112@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@117@01))) ($SortWrappers.$SnapToInt ($Snap.second s@117@01))))))))))
    (and
      (not (= s@117@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) s@117@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@109@01)) s@117@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) s@117@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@109@01)) s@117@01))
  :qid |qp.psmValDef8|)))
(assert (forall ((s@117@01 $Snap)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@83@01)) s@117@01) s@117@01)
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@97@01)) s@117@01) s@117@01)
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@109@01)) s@117@01) s@117@01))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) s@117@01))
  :qid |qp.psmResTrgDef9|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@112@01 $tag $to $amount))
      (and
        (<=
          (inv@112@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@114@01 $tag $to $amount))
          (and
            (<=
              (inv@114@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@114@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@112@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@112@01 $tag $to $amount) (inv@114@01 $tag $to $amount))
  :qid |quant-u-1407|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int) >= ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): Int)
; [eval] $struct_loc($self$2, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
; [exec]
; assert true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(1, q$a, q$v), write))
(declare-const q$a@118@01 Int)
(declare-const q$v@119@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 21 | !(0 <= q$a@118@01) | live]
; [else-branch: 21 | 0 <= q$a@118@01 | live]
(push) ; 5
; [then-branch: 21 | !(0 <= q$a@118@01)]
(assert (not (<= 0 q$a@118@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | 0 <= q$a@118@01]
(assert (<= 0 q$a@118@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 22 | !(q$a@118@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 22 | q$a@118@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 22 | !(q$a@118@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@118@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 22 | q$a@118@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@118@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 23 | !(0 <= q$v@119@01) | live]
; [else-branch: 23 | 0 <= q$v@119@01 | live]
(push) ; 9
; [then-branch: 23 | !(0 <= q$v@119@01)]
(assert (not (<= 0 q$v@119@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 23 | 0 <= q$v@119@01]
(assert (<= 0 q$v@119@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 24 | !(q$v@119@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 24 | q$v@119@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 24 | !(q$v@119@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@119@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 24 | q$v@119@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@119@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@119@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@119@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@119@01)
  (and
    (<= 0 q$v@119@01)
    (or
      (<=
        q$v@119@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@119@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@119@01) (not (<= 0 q$v@119@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@119@01)
      (and
        (<= 0 q$v@119@01)
        (or
          (<=
            q$v@119@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@119@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@119@01) (not (<= 0 q$v@119@01))))))
(assert (or
  (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@118@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@118@01)
  (and
    (<= 0 q$a@118@01)
    (=>
      (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@119@01)
          (and
            (<= 0 q$v@119@01)
            (or
              (<=
                q$v@119@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@119@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@119@01) (not (<= 0 q$v@119@01)))))
    (or
      (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@118@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@118@01) (not (<= 0 q$a@118@01))))
(assert (and
  (<= 0 q$a@118@01)
  (and
    (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@119@01)
      (and
        (<=
          q$v@119@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@119@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a@118@01)))))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@120@01 (Int Int Int) Int)
(declare-fun img@121@01 (Int Int Int) Bool)
(declare-fun inv@122@01 (Int Int Int) Int)
(declare-fun img@123@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@118@01 Int) (q$v@119@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@118@01)
      (and
        (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@119@01)
          (and
            (<=
              q$v@119@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@119@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a@118@01))))))
    (and
      (=>
        (<= 0 q$a@118@01)
        (and
          (<= 0 q$a@118@01)
          (=>
            (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@119@01)
                (and
                  (<= 0 q$v@119@01)
                  (or
                    (<=
                      q$v@119@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@119@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@119@01) (not (<= 0 q$v@119@01)))))
          (or
            (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@118@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@118@01) (not (<= 0 q$a@118@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@118@01))
    ($SortWrappers.IntTo$Snap q$v@119@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@118@01))
    ($SortWrappers.IntTo$Snap q$v@119@01))))
  :qid |$accessible$withdraw-aux|)))
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@118@01 Int) (q$v1@119@01 Int) (q$a2@118@01 Int) (q$v2@119@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 q$a1@118@01)
          (and
            (<= q$a1@118@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v1@119@01)
              (and
                (<=
                  q$v1@119@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  q$v1@119@01
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a1@118@01))))))
        ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap q$a1@118@01))
          ($SortWrappers.IntTo$Snap q$v1@119@01))) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap q$a1@118@01))
          ($SortWrappers.IntTo$Snap q$v1@119@01))))
      (and
        (and
          (<= 0 q$a2@118@01)
          (and
            (<= q$a2@118@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v2@119@01)
              (and
                (<=
                  q$v2@119@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  q$v2@119@01
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a2@118@01))))))
        ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap q$a2@118@01))
          ($SortWrappers.IntTo$Snap q$v2@119@01))) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap q$a2@118@01))
          ($SortWrappers.IntTo$Snap q$v2@119@01))))
      (and (= q$a1@118@01 q$a2@118@01) (= q$v1@119@01 q$v2@119@01)))
    (and (= q$a1@118@01 q$a2@118@01) (= q$v1@119@01 q$v2@119@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@118@01 Int) (q$v@119@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@118@01)
      (and
        (<= q$a@118@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@119@01)
          (and
            (<=
              q$v@119@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@119@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) q$a@118@01))))))
    (and
      (and
        (= (inv@120@01 1 q$a@118@01 q$v@119@01) q$a@118@01)
        (= (inv@122@01 1 q$a@118@01 q$v@119@01) q$v@119@01))
      (and
        (img@121@01 1 q$a@118@01 q$v@119@01)
        (img@123@01 1 q$a@118@01 q$v@119@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@118@01))
    ($SortWrappers.IntTo$Snap q$v@119@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@118@01))
    ($SortWrappers.IntTo$Snap q$v@119@01))))
  :qid |$accessible$withdraw-invOfFct|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@121@01 $tag $to $amount) (img@123@01 $tag $to $amount))
      (and
        (<= 0 (inv@120@01 $tag $to $amount))
        (and
          (<=
            (inv@120@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@122@01 $tag $to $amount))
            (and
              (<=
                (inv@122@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@122@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@120@01 $tag $to $amount))))))))
    (and
      (= 1 $tag)
      (= (inv@120@01 $tag $to $amount) $to)
      (= (inv@122@01 $tag $to $amount) $amount)))
  :pattern ((inv@120@01 $tag $to $amount))
  :pattern ((inv@122@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@120@01 $tag $to $amount))
      (and
        (<=
          (inv@120@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@122@01 $tag $to $amount))
          (and
            (<=
              (inv@122@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@122@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@120@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@116@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@120@01 $tag $to $amount) (inv@122@01 $tag $to $amount))
  :qid |quant-u-1409|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@124@01 (($tag Int) ($to Int) ($amount Int)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@120@01 $tag $to $amount))
        (and
          (<=
            (inv@120@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@122@01 $tag $to $amount))
            (and
              (<=
                (inv@122@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@122@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@120@01 $tag $to $amount)))))))
      (and (img@121@01 $tag $to $amount) (img@123@01 $tag $to $amount))
      (and
        (= $tag 1)
        (= $to (inv@120@01 $tag $to $amount))
        (= $amount (inv@122@01 $tag $to $amount))))
    ($Perm.min
      (ite
        (and
          (and (img@89@01 $tag $to $amount) (img@91@01 $tag $to $amount))
          (and
            (<= 0 (inv@88@01 $tag $to $amount))
            (and
              (<=
                (inv@88@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@90@01 $tag $to $amount))
                (and
                  (<=
                    (inv@90@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@90@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@125@01 (($tag Int) ($to Int) ($amount Int)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@120@01 $tag $to $amount))
        (and
          (<=
            (inv@120@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@122@01 $tag $to $amount))
            (and
              (<=
                (inv@122@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@122@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@120@01 $tag $to $amount)))))))
      (and (img@121@01 $tag $to $amount) (img@123@01 $tag $to $amount))
      (and
        (= $tag 1)
        (= $to (inv@120@01 $tag $to $amount))
        (= $amount (inv@122@01 $tag $to $amount))))
    ($Perm.min
      (ite
        (and
          (and (img@101@01 $tag $to $amount) (img@103@01 $tag $to $amount))
          (and
            (<= 0 (inv@100@01 $tag $to $amount))
            (and
              (<=
                (inv@100@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@102@01 $tag $to $amount))
                (and
                  (<=
                    (inv@102@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@102@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) (inv@100@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@124@01 $tag $to $amount)))
    $Perm.No))
(define-fun pTaken@126@01 (($tag Int) ($to Int) ($amount Int)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@120@01 $tag $to $amount))
        (and
          (<=
            (inv@120@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@122@01 $tag $to $amount))
            (and
              (<=
                (inv@122@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@122@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@120@01 $tag $to $amount)))))))
      (and (img@121@01 $tag $to $amount) (img@123@01 $tag $to $amount))
      (and
        (= $tag 1)
        (= $to (inv@120@01 $tag $to $amount))
        (= $amount (inv@122@01 $tag $to $amount))))
    ($Perm.min
      (ite
        (and
          (and (img@113@01 $tag $to $amount) (img@115@01 $tag $to $amount))
          (and
            (<= 0 (inv@112@01 $tag $to $amount))
            (and
              (<=
                (inv@112@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@114@01 $tag $to $amount))
                (and
                  (<=
                    (inv@114@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@114@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@112@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (-
        (- $Perm.Write (pTaken@124@01 $tag $to $amount))
        (pTaken@125@01 $tag $to $amount)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (-
      (ite
        (and
          (and (img@89@01 $tag $to $amount) (img@91@01 $tag $to $amount))
          (and
            (<= 0 (inv@88@01 $tag $to $amount))
            (and
              (<=
                (inv@88@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@90@01 $tag $to $amount))
                (and
                  (<=
                    (inv@90@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@90@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) (inv@88@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@124@01 $tag $to $amount))
    $Perm.No)
  
  :qid |quant-u-1411|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (= (pTaken@124@01 $tag $to $amount) $Perm.No)
  
  :qid |quant-u-1412|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and
        (<= 0 (inv@120@01 $tag $to $amount))
        (and
          (<=
            (inv@120@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@122@01 $tag $to $amount))
            (and
              (<=
                (inv@122@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@122@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@120@01 $tag $to $amount)))))))
      (and (img@121@01 $tag $to $amount) (img@123@01 $tag $to $amount))
      (and
        (= $tag 1)
        (= $to (inv@120@01 $tag $to $amount))
        (= $amount (inv@122@01 $tag $to $amount))))
    (= (- $Perm.Write (pTaken@124@01 $tag $to $amount)) $Perm.No))
  
  :qid |quant-u-1413|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (-
      (ite
        (and
          (and (img@101@01 $tag $to $amount) (img@103@01 $tag $to $amount))
          (and
            (<= 0 (inv@100@01 $tag $to $amount))
            (and
              (<=
                (inv@100@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@102@01 $tag $to $amount))
                (and
                  (<=
                    (inv@102@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@102@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) (inv@100@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@125@01 $tag $to $amount))
    $Perm.No)
  
  :qid |quant-u-1414|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (= (pTaken@125@01 $tag $to $amount) $Perm.No)
  
  :qid |quant-u-1415|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and
        (<= 0 (inv@120@01 $tag $to $amount))
        (and
          (<=
            (inv@120@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@122@01 $tag $to $amount))
            (and
              (<=
                (inv@122@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@122@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@120@01 $tag $to $amount)))))))
      (and (img@121@01 $tag $to $amount) (img@123@01 $tag $to $amount))
      (and
        (= $tag 1)
        (= $to (inv@120@01 $tag $to $amount))
        (= $amount (inv@122@01 $tag $to $amount))))
    (=
      (-
        (- $Perm.Write (pTaken@124@01 $tag $to $amount))
        (pTaken@125@01 $tag $to $amount))
      $Perm.No))
  
  :qid |quant-u-1416|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (-
      (ite
        (and
          (and (img@113@01 $tag $to $amount) (img@115@01 $tag $to $amount))
          (and
            (<= 0 (inv@112@01 $tag $to $amount))
            (and
              (<=
                (inv@112@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@114@01 $tag $to $amount))
                (and
                  (<=
                    (inv@114@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@114@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@112@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@126@01 $tag $to $amount))
    $Perm.No)
  
  :qid |quant-u-1417|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (= (pTaken@126@01 $tag $to $amount) $Perm.No)
  
  :qid |quant-u-1418|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and
        (<= 0 (inv@120@01 $tag $to $amount))
        (and
          (<=
            (inv@120@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@122@01 $tag $to $amount))
            (and
              (<=
                (inv@122@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@122@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) (inv@120@01 $tag $to $amount)))))))
      (and (img@121@01 $tag $to $amount) (img@123@01 $tag $to $amount))
      (and
        (= $tag 1)
        (= $to (inv@120@01 $tag $to $amount))
        (= $amount (inv@122@01 $tag $to $amount))))
    (=
      (-
        (-
          (- $Perm.Write (pTaken@124@01 $tag $to $amount))
          (pTaken@125@01 $tag $to $amount))
        (pTaken@126@01 $tag $to $amount))
      $Perm.No))
  
  :qid |quant-u-1419|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@127@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@128@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@129@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@130@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@131@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@132@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 ($Snap.combine ($Snap.first $t@133@01) ($Snap.second $t@133@01))))
(assert (= ($Snap.first $t@133@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 0))))
(assert (= ($Snap.second $t@133@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@134@01 $Snap)
(assert (= $t@134@01 ($Snap.combine ($Snap.first $t@134@01) ($Snap.second $t@134@01))))
(assert (= ($Snap.first $t@134@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 1))))
(assert (= ($Snap.second $t@134@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(assert (= ($Snap.first $t@135@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@127@01 2)) 0))))
(assert (= ($Snap.second $t@135@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@127@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@136@01 $Snap)
(assert (= $t@136@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@127@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@137@01 $Snap)
(assert (= $t@137@01 ($Snap.combine ($Snap.first $t@137@01) ($Snap.second $t@137@01))))
(assert (= ($Snap.first $t@137@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@127@01 2)) 2))))
(assert (= ($Snap.second $t@137@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@127@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@138@01 $Snap)
(assert (= $t@138@01 ($Snap.combine ($Snap.first $t@138@01) ($Snap.second $t@138@01))))
(assert (= ($Snap.first $t@138@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@127@01 2)) 3))))
(assert (= ($Snap.second $t@138@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@127@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@139@01 $Snap)
(assert (= $t@139@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$0, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc($self$0, 2)): $Struct)
; [eval] $struct_loc($self$0, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$0@127@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@141@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 4
; [then-branch: 25 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 3)), $q1@141@01)) | live]
; [else-branch: 25 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 3)), $q1@141@01) | live]
(push) ; 5
; [then-branch: 25 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 3)), $q1@141@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 25 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 3)), $q1@141@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@141@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@707@11@707@354-aux|)))
(assert (forall (($q1@141@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@707@11@707@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $q1@143@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@143@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@143@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 3)) $q1@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@708@11@708@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 4)): Int) &&
;   ($struct_get($struct_loc($self$0, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@144@01 $Snap)
(assert (= $t@144@01 ($Snap.combine ($Snap.first $t@144@01) ($Snap.second $t@144@01))))
(assert (= ($Snap.first $t@144@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 4))))
(assert (= ($Snap.second $t@144@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 4)): Int)
; [eval] $struct_loc($self$0, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 ($Snap.combine ($Snap.first $t@145@01) ($Snap.second $t@145@01))))
(assert (= ($Snap.first $t@145@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 5))))
(assert (= ($Snap.second $t@145@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@147@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(push) ; 4
; [then-branch: 26 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 7)), $q2@147@01)) | live]
; [else-branch: 26 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 7)), $q2@147@01) | live]
(push) ; 5
; [then-branch: 26 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 7)), $q2@147@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 26 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 7)), $q2@147@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@147@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@711@11@711@354-aux|)))
(assert (forall (($q2@147@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@147@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@711@11@711@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int))
(declare-const $q2@149@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@149@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@149@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $q2@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@712@11@712@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@150@01 $Snap)
(assert (= $t@150@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@151@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 27 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 8)), $q3@151@01)) | live]
; [else-branch: 27 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 8)), $q3@151@01) | live]
(push) ; 5
; [then-branch: 27 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 8)), $q3@151@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 27 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@127@01, 8)), $q3@151@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@151@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@713@11@713@354-aux|)))
(assert (forall (($q3@151@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@151@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@713@11@713@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q3@153@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@153@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@153@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 8)) $q3@153@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@714@11@714@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@127@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 ($Snap.combine ($Snap.first $t@155@01) ($Snap.second $t@155@01))))
(assert (= ($Snap.first $t@155@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 0))))
(assert (= ($Snap.second $t@155@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@156@01 $Snap)
(assert (= $t@156@01 ($Snap.combine ($Snap.first $t@156@01) ($Snap.second $t@156@01))))
(assert (= ($Snap.first $t@156@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 1))))
(assert (= ($Snap.second $t@156@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@157@01 $Snap)
(assert (= $t@157@01 ($Snap.combine ($Snap.first $t@157@01) ($Snap.second $t@157@01))))
(assert (= ($Snap.first $t@157@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@129@01 2)) 0))))
(assert (= ($Snap.second $t@157@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@129@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@129@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 ($Snap.combine ($Snap.first $t@159@01) ($Snap.second $t@159@01))))
(assert (= ($Snap.first $t@159@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@129@01 2)) 2))))
(assert (= ($Snap.second $t@159@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@129@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@160@01 $Snap)
(assert (= $t@160@01 ($Snap.combine ($Snap.first $t@160@01) ($Snap.second $t@160@01))))
(assert (= ($Snap.first $t@160@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@129@01 2)) 3))))
(assert (= ($Snap.second $t@160@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@129@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($self$1, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc($self$1, 2)): $Struct)
; [eval] $struct_loc($self$1, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $self$1@129@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@162@01 $Snap)
(assert (= $t@162@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@163@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 4
; [then-branch: 28 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 3)), $q1@163@01)) | live]
; [else-branch: 28 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 3)), $q1@163@01) | live]
(push) ; 5
; [then-branch: 28 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 3)), $q1@163@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 28 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 3)), $q1@163@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@163@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@723@11@723@354-aux|)))
(assert (forall (($q1@163@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@163@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@723@11@723@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $t@164@01 $Snap)
(assert (= $t@164@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $q1@165@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@165@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@165@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) $q1@165@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@724@11@724@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 4)): Int) &&
;   ($struct_get($struct_loc($self$1, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 ($Snap.combine ($Snap.first $t@166@01) ($Snap.second $t@166@01))))
(assert (= ($Snap.first $t@166@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 4))))
(assert (= ($Snap.second $t@166@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 ($Snap.combine ($Snap.first $t@167@01) ($Snap.second $t@167@01))))
(assert (= ($Snap.first $t@167@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 5))))
(assert (= ($Snap.second $t@167@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@169@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(push) ; 4
; [then-branch: 29 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 7)), $q2@169@01)) | live]
; [else-branch: 29 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 7)), $q2@169@01) | live]
(push) ; 5
; [then-branch: 29 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 7)), $q2@169@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 7)), $q2@169@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@169@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@727@11@727@354-aux|)))
(assert (forall (($q2@169@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@169@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@727@11@727@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int))
(declare-const $q2@171@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@171@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@171@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $q2@171@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@728@11@728@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@173@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 30 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 8)), $q3@173@01)) | live]
; [else-branch: 30 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 8)), $q3@173@01) | live]
(push) ; 5
; [then-branch: 30 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 8)), $q3@173@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 30 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@129@01, 8)), $q3@173@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@173@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@729@11@729@354-aux|)))
(assert (forall (($q3@173@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@173@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@729@11@729@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@174@01 $Snap)
(assert (= $t@174@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q3@175@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@175@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@175@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 8)) $q3@175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@730@11@730@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@176@01 $Snap)
(assert (= $t@176@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@177@01 $Snap)
(assert (= $t@177@01 ($Snap.combine ($Snap.first $t@177@01) ($Snap.second $t@177@01))))
(assert (= ($Snap.first $t@177@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@131@01 0))))
(assert (= ($Snap.second $t@177@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@131@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 ($Snap.combine ($Snap.first $t@178@01) ($Snap.second $t@178@01))))
(assert (= ($Snap.first $t@178@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@131@01 1))))
(assert (= ($Snap.second $t@178@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@131@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@179@01 $Snap)
(assert (= $t@179@01 ($Snap.combine ($Snap.first $t@179@01) ($Snap.second $t@179@01))))
(assert (= ($Snap.first $t@179@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@131@01 2))))
(assert (= ($Snap.second $t@179@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@131@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@180@01 $Snap)
(assert (= $t@180@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@131@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@181@01 $Snap)
(assert (= $t@181@01 ($Snap.combine ($Snap.first $t@181@01) ($Snap.second $t@181@01))))
(assert (= ($Snap.first $t@181@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@131@01 4))))
(assert (= ($Snap.second $t@181@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@131@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@182@01 $Snap)
(assert (= $t@182@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@131@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@183@01 $Snap)
(assert (= $t@183@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@184@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 7)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 7)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@184@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $a@184@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@127@01 7)) $a@184@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 7)) $a@184@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@738@11@738@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) >= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> $self$1@129@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(1, q$a, q$v), write))
(declare-const $t@186@01 $Snap)
(assert (= $t@186@01 ($Snap.combine ($Snap.first $t@186@01) ($Snap.second $t@186@01))))
(assert (= ($Snap.first $t@186@01) $Snap.unit))
(declare-const q$a@187@01 Int)
(declare-const q$v@188@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 31 | !(0 <= q$a@187@01) | live]
; [else-branch: 31 | 0 <= q$a@187@01 | live]
(push) ; 5
; [then-branch: 31 | !(0 <= q$a@187@01)]
(assert (not (<= 0 q$a@187@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 31 | 0 <= q$a@187@01]
(assert (<= 0 q$a@187@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 32 | !(q$a@187@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 32 | q$a@187@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 32 | !(q$a@187@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@187@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | q$a@187@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@187@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 33 | !(0 <= q$v@188@01) | live]
; [else-branch: 33 | 0 <= q$v@188@01 | live]
(push) ; 9
; [then-branch: 33 | !(0 <= q$v@188@01)]
(assert (not (<= 0 q$v@188@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 33 | 0 <= q$v@188@01]
(assert (<= 0 q$v@188@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 34 | !(q$v@188@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 34 | q$v@188@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 34 | !(q$v@188@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@188@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 34 | q$v@188@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@188@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@188@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@188@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@188@01)
  (and
    (<= 0 q$v@188@01)
    (or
      (<=
        q$v@188@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@188@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@188@01) (not (<= 0 q$v@188@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@188@01)
      (and
        (<= 0 q$v@188@01)
        (or
          (<=
            q$v@188@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@188@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@188@01) (not (<= 0 q$v@188@01))))))
(assert (or
  (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@187@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@187@01)
  (and
    (<= 0 q$a@187@01)
    (=>
      (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@188@01)
          (and
            (<= 0 q$v@188@01)
            (or
              (<=
                q$v@188@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@188@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@188@01) (not (<= 0 q$v@188@01)))))
    (or
      (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@187@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@187@01) (not (<= 0 q$a@187@01))))
(assert (and
  (<= 0 q$a@187@01)
  (and
    (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@188@01)
      (and
        (<=
          q$v@188@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@188@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a@187@01)))))))
(declare-const sm@189@01 $PSF<$accessible$withdraw>)
(declare-const s@190@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@191@01 (Int Int Int) Int)
(declare-fun img@192@01 (Int Int Int) Bool)
(declare-fun inv@193@01 (Int Int Int) Int)
(declare-fun img@194@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@187@01 Int) (q$v@188@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@187@01)
      (and
        (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@188@01)
          (and
            (<=
              q$v@188@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@188@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a@187@01))))))
    (and
      (=>
        (<= 0 q$a@187@01)
        (and
          (<= 0 q$a@187@01)
          (=>
            (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@188@01)
                (and
                  (<= 0 q$v@188@01)
                  (or
                    (<=
                      q$v@188@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@188@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@188@01) (not (<= 0 q$v@188@01)))))
          (or
            (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@187@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@187@01) (not (<= 0 q$a@187@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@186@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@187@01))
    ($SortWrappers.IntTo$Snap q$v@188@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@187@01))
    ($SortWrappers.IntTo$Snap q$v@188@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@187@01 Int) (q$v1@188@01 Int) (q$a2@187@01 Int) (q$v2@188@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@187@01)
        (and
          (<= q$a1@187@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@188@01)
            (and
              (<=
                q$v1@188@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@188@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a1@187@01))))))
      (and
        (<= 0 q$a2@187@01)
        (and
          (<= q$a2@187@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@188@01)
            (and
              (<=
                q$v2@188@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@188@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a2@187@01))))))
      (and (= q$a1@187@01 q$a2@187@01) (= q$v1@188@01 q$v2@188@01)))
    (and (= q$a1@187@01 q$a2@187@01) (= q$v1@188@01 q$v2@188@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@187@01 Int) (q$v@188@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@187@01)
      (and
        (<= q$a@187@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@188@01)
          (and
            (<=
              q$v@188@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@188@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a@187@01))))))
    (and
      (and
        (= (inv@191@01 1 q$a@187@01 q$v@188@01) q$a@187@01)
        (= (inv@193@01 1 q$a@187@01 q$v@188@01) q$v@188@01))
      (and
        (img@192@01 1 q$a@187@01 q$v@188@01)
        (img@194@01 1 q$a@187@01 q$v@188@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@186@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@187@01))
    ($SortWrappers.IntTo$Snap q$v@188@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@187@01))
    ($SortWrappers.IntTo$Snap q$v@188@01))))
  :qid |quant-u-1421|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@192@01 $tag $to $amount) (img@194@01 $tag $to $amount))
      (and
        (<= 0 (inv@191@01 $tag $to $amount))
        (and
          (<=
            (inv@191@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@193@01 $tag $to $amount))
            (and
              (<=
                (inv@193@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@193@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@191@01 $tag $to $amount))))))))
    (and
      (= 1 $tag)
      (= (inv@191@01 $tag $to $amount) $to)
      (= (inv@193@01 $tag $to $amount) $amount)))
  :pattern ((inv@191@01 $tag $to $amount))
  :pattern ((inv@193@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(declare-const sm@195@01 $PSF<$accessible$withdraw>)
(declare-const s@196@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@196@01 $Snap)) (!
  (=>
    (and
      (and
        (img@192@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second s@196@01)))
        (img@194@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second s@196@01))))
      (and
        (<=
          0
          (inv@191@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second s@196@01))))
        (and
          (<=
            (inv@191@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second s@196@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@193@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second s@196@01))))
            (and
              (<=
                (inv@193@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second s@196@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@193@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second s@196@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@191@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@196@01))) ($SortWrappers.$SnapToInt ($Snap.second s@196@01))))))))))
    (and
      (not (= s@196@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) s@196@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@186@01)) s@196@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) s@196@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@186@01)) s@196@01))
  :qid |qp.psmValDef11|)))
(assert (forall ((s@196@01 $Snap)) (!
  ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@186@01)) s@196@01) s@196@01)
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) s@196@01))
  :qid |qp.psmResTrgDef12|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@191@01 $tag $to $amount))
      (and
        (<=
          (inv@191@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@193@01 $tag $to $amount))
          (and
            (<=
              (inv@193@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@193@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@191@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@191@01 $tag $to $amount) (inv@193@01 $tag $to $amount))
  :qid |quant-u-1422|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$1, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int) >= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): Int)
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [exec]
; assert true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(1, q$a, q$v), write))
(declare-const q$a@197@01 Int)
(declare-const q$v@198@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 35 | !(0 <= q$a@197@01) | live]
; [else-branch: 35 | 0 <= q$a@197@01 | live]
(push) ; 5
; [then-branch: 35 | !(0 <= q$a@197@01)]
(assert (not (<= 0 q$a@197@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 35 | 0 <= q$a@197@01]
(assert (<= 0 q$a@197@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 36 | !(q$a@197@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 36 | q$a@197@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 36 | !(q$a@197@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@197@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 36 | q$a@197@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@197@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 37 | !(0 <= q$v@198@01) | live]
; [else-branch: 37 | 0 <= q$v@198@01 | live]
(push) ; 9
; [then-branch: 37 | !(0 <= q$v@198@01)]
(assert (not (<= 0 q$v@198@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 37 | 0 <= q$v@198@01]
(assert (<= 0 q$v@198@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 38 | !(q$v@198@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 38 | q$v@198@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 38 | !(q$v@198@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@198@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 38 | q$v@198@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@198@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@198@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@198@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@198@01)
  (and
    (<= 0 q$v@198@01)
    (or
      (<=
        q$v@198@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@198@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@198@01) (not (<= 0 q$v@198@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@198@01)
      (and
        (<= 0 q$v@198@01)
        (or
          (<=
            q$v@198@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@198@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@198@01) (not (<= 0 q$v@198@01))))))
(assert (or
  (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@197@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@197@01)
  (and
    (<= 0 q$a@197@01)
    (=>
      (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@198@01)
          (and
            (<= 0 q$v@198@01)
            (or
              (<=
                q$v@198@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@198@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@198@01) (not (<= 0 q$v@198@01)))))
    (or
      (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@197@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@197@01) (not (<= 0 q$a@197@01))))
(assert (and
  (<= 0 q$a@197@01)
  (and
    (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@198@01)
      (and
        (<=
          q$v@198@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@198@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a@197@01)))))))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@199@01 (Int Int Int) Int)
(declare-fun img@200@01 (Int Int Int) Bool)
(declare-fun inv@201@01 (Int Int Int) Int)
(declare-fun img@202@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@197@01 Int) (q$v@198@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@197@01)
      (and
        (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@198@01)
          (and
            (<=
              q$v@198@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@198@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a@197@01))))))
    (and
      (=>
        (<= 0 q$a@197@01)
        (and
          (<= 0 q$a@197@01)
          (=>
            (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@198@01)
                (and
                  (<= 0 q$v@198@01)
                  (or
                    (<=
                      q$v@198@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@198@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@198@01) (not (<= 0 q$v@198@01)))))
          (or
            (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@197@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@197@01) (not (<= 0 q$a@197@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@197@01))
    ($SortWrappers.IntTo$Snap q$v@198@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@197@01))
    ($SortWrappers.IntTo$Snap q$v@198@01))))
  :qid |$accessible$withdraw-aux|)))
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@197@01 Int) (q$v1@198@01 Int) (q$a2@197@01 Int) (q$v2@198@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 q$a1@197@01)
          (and
            (<= q$a1@197@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v1@198@01)
              (and
                (<=
                  q$v1@198@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  q$v1@198@01
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a1@197@01))))))
        ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap q$a1@197@01))
          ($SortWrappers.IntTo$Snap q$v1@198@01))) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap q$a1@197@01))
          ($SortWrappers.IntTo$Snap q$v1@198@01))))
      (and
        (and
          (<= 0 q$a2@197@01)
          (and
            (<= q$a2@197@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v2@198@01)
              (and
                (<=
                  q$v2@198@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  q$v2@198@01
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a2@197@01))))))
        ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap q$a2@197@01))
          ($SortWrappers.IntTo$Snap q$v2@198@01))) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap q$a2@197@01))
          ($SortWrappers.IntTo$Snap q$v2@198@01))))
      (and (= q$a1@197@01 q$a2@197@01) (= q$v1@198@01 q$v2@198@01)))
    (and (= q$a1@197@01 q$a2@197@01) (= q$v1@198@01 q$v2@198@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@197@01 Int) (q$v@198@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@197@01)
      (and
        (<= q$a@197@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@198@01)
          (and
            (<=
              q$v@198@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@198@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) q$a@197@01))))))
    (and
      (and
        (= (inv@199@01 1 q$a@197@01 q$v@198@01) q$a@197@01)
        (= (inv@201@01 1 q$a@197@01 q$v@198@01) q$v@198@01))
      (and
        (img@200@01 1 q$a@197@01 q$v@198@01)
        (img@202@01 1 q$a@197@01 q$v@198@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@197@01))
    ($SortWrappers.IntTo$Snap q$v@198@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@197@01))
    ($SortWrappers.IntTo$Snap q$v@198@01))))
  :qid |$accessible$withdraw-invOfFct|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@200@01 $tag $to $amount) (img@202@01 $tag $to $amount))
      (and
        (<= 0 (inv@199@01 $tag $to $amount))
        (and
          (<=
            (inv@199@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@201@01 $tag $to $amount))
            (and
              (<=
                (inv@201@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@201@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@199@01 $tag $to $amount))))))))
    (and
      (= 1 $tag)
      (= (inv@199@01 $tag $to $amount) $to)
      (= (inv@201@01 $tag $to $amount) $amount)))
  :pattern ((inv@199@01 $tag $to $amount))
  :pattern ((inv@201@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@199@01 $tag $to $amount))
      (and
        (<=
          (inv@199@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@201@01 $tag $to $amount))
          (and
            (<=
              (inv@201@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@201@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@199@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@195@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@199@01 $tag $to $amount) (inv@201@01 $tag $to $amount))
  :qid |quant-u-1424|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@203@01 (($tag Int) ($to Int) ($amount Int)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@199@01 $tag $to $amount))
        (and
          (<=
            (inv@199@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@201@01 $tag $to $amount))
            (and
              (<=
                (inv@201@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@201@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@199@01 $tag $to $amount)))))))
      (and (img@200@01 $tag $to $amount) (img@202@01 $tag $to $amount))
      (and
        (= $tag 1)
        (= $to (inv@199@01 $tag $to $amount))
        (= $amount (inv@201@01 $tag $to $amount))))
    ($Perm.min
      (ite
        (and
          (and (img@192@01 $tag $to $amount) (img@194@01 $tag $to $amount))
          (and
            (<= 0 (inv@191@01 $tag $to $amount))
            (and
              (<=
                (inv@191@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@193@01 $tag $to $amount))
                (and
                  (<=
                    (inv@193@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@193@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@191@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    (-
      (ite
        (and
          (and (img@192@01 $tag $to $amount) (img@194@01 $tag $to $amount))
          (and
            (<= 0 (inv@191@01 $tag $to $amount))
            (and
              (<=
                (inv@191@01 $tag $to $amount)
                1461501637330902918203684832716283019655932542975)
              (and
                (<= 0 (inv@193@01 $tag $to $amount))
                (and
                  (<=
                    (inv@193@01 $tag $to $amount)
                    115792089237316195423570985008687907853269984665640564039457584007913129639935)
                  (=
                    (inv@193@01 $tag $to $amount)
                    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@191@01 $tag $to $amount))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@203@01 $tag $to $amount))
    $Perm.No)
  
  :qid |quant-u-1426|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and
        (<= 0 (inv@199@01 $tag $to $amount))
        (and
          (<=
            (inv@199@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@201@01 $tag $to $amount))
            (and
              (<=
                (inv@201@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@201@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@129@01 3)) (inv@199@01 $tag $to $amount)))))))
      (and (img@200@01 $tag $to $amount) (img@202@01 $tag $to $amount))
      (and
        (= $tag 1)
        (= $to (inv@199@01 $tag $to $amount))
        (= $amount (inv@201@01 $tag $to $amount))))
    (= (- $Perm.Write (pTaken@203@01 $tag $to $amount)) $Perm.No))
  
  :qid |quant-u-1427|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@204@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@205@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@206@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@207@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@208@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@209@01 Int)
; [exec]
; var block: $Struct
(declare-const block@210@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 ($Snap.combine ($Snap.first $t@211@01) ($Snap.second $t@211@01))))
(assert (= ($Snap.first $t@211@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@204@01 0))))
(assert (= ($Snap.second $t@211@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 ($Snap.combine ($Snap.first $t@212@01) ($Snap.second $t@212@01))))
(assert (= ($Snap.first $t@212@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@204@01 1))))
(assert (= ($Snap.second $t@212@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@213@01 $Snap)
(assert (= $t@213@01 ($Snap.combine ($Snap.first $t@213@01) ($Snap.second $t@213@01))))
(assert (= ($Snap.first $t@213@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@204@01 2)) 0))))
(assert (= ($Snap.second $t@213@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@204@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@204@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@215@01 $Snap)
(assert (= $t@215@01 ($Snap.combine ($Snap.first $t@215@01) ($Snap.second $t@215@01))))
(assert (= ($Snap.first $t@215@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@204@01 2)) 2))))
(assert (= ($Snap.second $t@215@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@204@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@216@01 $Snap)
(assert (= $t@216@01 ($Snap.combine ($Snap.first $t@216@01) ($Snap.second $t@216@01))))
(assert (= ($Snap.first $t@216@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@204@01 2)) 3))))
(assert (= ($Snap.second $t@216@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@204@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@217@01 $Snap)
(assert (= $t@217@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@204@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@219@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 39 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 3)), $q1@219@01)) | live]
; [else-branch: 39 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 3)), $q1@219@01) | live]
(push) ; 5
; [then-branch: 39 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 3)), $q1@219@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 39 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 3)), $q1@219@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@219@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@761@11@761@345-aux|)))
(assert (forall (($q1@219@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@219@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@761@11@761@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q1@221@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@221@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@221@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) $q1@221@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@762@11@762@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 ($Snap.combine ($Snap.first $t@222@01) ($Snap.second $t@222@01))))
(assert (= ($Snap.first $t@222@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@204@01 4))))
(assert (= ($Snap.second $t@222@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 ($Snap.combine ($Snap.first $t@223@01) ($Snap.second $t@223@01))))
(assert (= ($Snap.first $t@223@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@204@01 5))))
(assert (= ($Snap.second $t@223@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@225@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 40 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 7)), $q2@225@01)) | live]
; [else-branch: 40 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 7)), $q2@225@01) | live]
(push) ; 5
; [then-branch: 40 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 7)), $q2@225@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 40 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 7)), $q2@225@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@225@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@765@11@765@345-aux|)))
(assert (forall (($q2@225@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@225@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@765@11@765@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@226@01 $Snap)
(assert (= $t@226@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q2@227@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@227@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@227@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 7)) $q2@227@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@766@11@766@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@228@01 $Snap)
(assert (= $t@228@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@229@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 41 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 8)), $q3@229@01)) | live]
; [else-branch: 41 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 8)), $q3@229@01) | live]
(push) ; 5
; [then-branch: 41 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 8)), $q3@229@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 41 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@204@01, 8)), $q3@229@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@229@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@767@11@767@345-aux|)))
(assert (forall (($q3@229@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@229@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@767@11@767@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@230@01 $Snap)
(assert (= $t@230@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@231@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@231@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@231@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 8)) $q3@231@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@768@11@768@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@232@01 $Snap)
(assert (= $t@232@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@233@01 $Snap)
(assert (= $t@233@01 ($Snap.combine ($Snap.first $t@233@01) ($Snap.second $t@233@01))))
(assert (= ($Snap.first $t@233@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 0))))
(assert (= ($Snap.second $t@233@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@234@01 $Snap)
(assert (= $t@234@01 ($Snap.combine ($Snap.first $t@234@01) ($Snap.second $t@234@01))))
(assert (= ($Snap.first $t@234@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 1))))
(assert (= ($Snap.second $t@234@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct),
;   0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct),
;   0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@235@01 $Snap)
(assert (= $t@235@01 ($Snap.combine ($Snap.first $t@235@01) ($Snap.second $t@235@01))))
(assert (= ($Snap.first $t@235@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Struct)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $pre_self@206@01 2)) 0))))
(assert (= ($Snap.second $t@235@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Struct)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $pre_self@206@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@236@01 $Snap)
(assert (= $t@236@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Struct)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $pre_self@206@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct),
;   2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct),
;   2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 ($Snap.combine ($Snap.first $t@237@01) ($Snap.second $t@237@01))))
(assert (= ($Snap.first $t@237@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Struct)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $pre_self@206@01 2)) 2))))
(assert (= ($Snap.second $t@237@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Struct)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $pre_self@206@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct),
;   3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct),
;   3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@238@01 $Snap)
(assert (= $t@238@01 ($Snap.combine ($Snap.first $t@238@01) ($Snap.second $t@238@01))))
(assert (= ($Snap.first $t@238@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Struct)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $pre_self@206@01 2)) 3))))
(assert (= ($Snap.second $t@238@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Struct)
; [eval] $struct_loc($pre_self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $pre_self@206@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc($pre_self, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc($pre_self, 2)): $Struct)
; [eval] $struct_loc($pre_self, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> $pre_self@206@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@240@01 $Snap)
(assert (= $t@240@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@241@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(push) ; 4
; [then-branch: 42 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 3)), $q1@241@01)) | live]
; [else-branch: 42 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 3)), $q1@241@01) | live]
(push) ; 5
; [then-branch: 42 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 3)), $q1@241@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 42 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 3)), $q1@241@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@241@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@777@11@777@360-aux|)))
(assert (forall (($q1@241@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@241@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@777@11@777@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int))
(declare-const $t@242@01 $Snap)
(assert (= $t@242@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int))
(declare-const $q1@243@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@243@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@243@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 3)) $q1@243@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@778@11@778@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 4)): Int) &&
;   ($struct_get($struct_loc($pre_self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 ($Snap.combine ($Snap.first $t@244@01) ($Snap.second $t@244@01))))
(assert (= ($Snap.first $t@244@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 4))))
(assert (= ($Snap.second $t@244@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 4)): Int)
; [eval] $struct_loc($pre_self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 5)): Int) &&
;   ($struct_get($struct_loc($pre_self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@245@01 $Snap)
(assert (= $t@245@01 ($Snap.combine ($Snap.first $t@245@01) ($Snap.second $t@245@01))))
(assert (= ($Snap.first $t@245@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 5))))
(assert (= ($Snap.second $t@245@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@246@01 $Snap)
(assert (= $t@246@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@247@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(push) ; 4
; [then-branch: 43 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 7)), $q2@247@01)) | live]
; [else-branch: 43 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 7)), $q2@247@01) | live]
(push) ; 5
; [then-branch: 43 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 7)), $q2@247@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 43 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 7)), $q2@247@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@247@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@781@11@781@360-aux|)))
(assert (forall (($q2@247@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@781@11@781@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int))
(declare-const $t@248@01 $Snap)
(assert (= $t@248@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int))
(declare-const $q2@249@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@249@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@249@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 7)) $q2@249@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@782@11@782@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@250@01 $Snap)
(assert (= $t@250@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@251@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(push) ; 4
; [then-branch: 44 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 8)), $q3@251@01)) | live]
; [else-branch: 44 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 8)), $q3@251@01) | live]
(push) ; 5
; [then-branch: 44 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 8)), $q3@251@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 44 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@206@01, 8)), $q3@251@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@251@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@783@11@783@360-aux|)))
(assert (forall (($q3@251@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@251@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@783@11@783@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $t@252@01 $Snap)
(assert (= $t@252@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@253@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@253@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@253@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@206@01 8)) $q3@253@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@784@11@784@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@206@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@255@01 $Snap)
(assert (= $t@255@01 ($Snap.combine ($Snap.first $t@255@01) ($Snap.second $t@255@01))))
(assert (= ($Snap.first $t@255@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@210@01 0))))
(assert (= ($Snap.second $t@255@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@210@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@256@01 $Snap)
(assert (= $t@256@01 ($Snap.combine ($Snap.first $t@256@01) ($Snap.second $t@256@01))))
(assert (= ($Snap.first $t@256@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@210@01 1))))
(assert (= ($Snap.second $t@256@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@210@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@257@01 $Snap)
(assert (= $t@257@01 ($Snap.combine ($Snap.first $t@257@01) ($Snap.second $t@257@01))))
(assert (= ($Snap.first $t@257@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@210@01 2))))
(assert (= ($Snap.second $t@257@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@210@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@258@01 $Snap)
(assert (= $t@258@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@210@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@259@01 $Snap)
(assert (= $t@259@01 ($Snap.combine ($Snap.first $t@259@01) ($Snap.second $t@259@01))))
(assert (= ($Snap.first $t@259@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@210@01 4))))
(assert (= ($Snap.second $t@259@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@210@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@260@01 $Snap)
(assert (= $t@260@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@210@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@261@01 $Snap)
(assert (= $t@261@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@209@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@262@01 $Snap)
(assert (= $t@262@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@263@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@264@01 $Snap)
(assert (= $t@264@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@204@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(1, q$a, q$v), write))
(declare-const $t@265@01 $Snap)
(assert (= $t@265@01 ($Snap.combine ($Snap.first $t@265@01) ($Snap.second $t@265@01))))
(assert (= ($Snap.first $t@265@01) $Snap.unit))
(declare-const q$a@266@01 Int)
(declare-const q$v@267@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 45 | !(0 <= q$a@266@01) | live]
; [else-branch: 45 | 0 <= q$a@266@01 | live]
(push) ; 5
; [then-branch: 45 | !(0 <= q$a@266@01)]
(assert (not (<= 0 q$a@266@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 45 | 0 <= q$a@266@01]
(assert (<= 0 q$a@266@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 46 | !(q$a@266@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 46 | q$a@266@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 46 | !(q$a@266@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@266@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 46 | q$a@266@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@266@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 47 | !(0 <= q$v@267@01) | live]
; [else-branch: 47 | 0 <= q$v@267@01 | live]
(push) ; 9
; [then-branch: 47 | !(0 <= q$v@267@01)]
(assert (not (<= 0 q$v@267@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 47 | 0 <= q$v@267@01]
(assert (<= 0 q$v@267@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 48 | !(q$v@267@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 48 | q$v@267@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 48 | !(q$v@267@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@267@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 48 | q$v@267@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@267@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@267@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@267@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@267@01)
  (and
    (<= 0 q$v@267@01)
    (or
      (<=
        q$v@267@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@267@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@267@01) (not (<= 0 q$v@267@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@267@01)
      (and
        (<= 0 q$v@267@01)
        (or
          (<=
            q$v@267@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@267@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@267@01) (not (<= 0 q$v@267@01))))))
(assert (or
  (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@266@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@266@01)
  (and
    (<= 0 q$a@266@01)
    (=>
      (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@267@01)
          (and
            (<= 0 q$v@267@01)
            (or
              (<=
                q$v@267@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@267@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@267@01) (not (<= 0 q$v@267@01)))))
    (or
      (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@266@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@266@01) (not (<= 0 q$a@266@01))))
(assert (and
  (<= 0 q$a@266@01)
  (and
    (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@267@01)
      (and
        (<=
          q$v@267@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@267@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) q$a@266@01)))))))
(declare-const sm@268@01 $PSF<$accessible$withdraw>)
(declare-const s@269@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@270@01 (Int Int Int) Int)
(declare-fun img@271@01 (Int Int Int) Bool)
(declare-fun inv@272@01 (Int Int Int) Int)
(declare-fun img@273@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@266@01 Int) (q$v@267@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@266@01)
      (and
        (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@267@01)
          (and
            (<=
              q$v@267@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@267@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) q$a@266@01))))))
    (and
      (=>
        (<= 0 q$a@266@01)
        (and
          (<= 0 q$a@266@01)
          (=>
            (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@267@01)
                (and
                  (<= 0 q$v@267@01)
                  (or
                    (<=
                      q$v@267@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@267@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@267@01) (not (<= 0 q$v@267@01)))))
          (or
            (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@266@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@266@01) (not (<= 0 q$a@266@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@265@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@266@01))
    ($SortWrappers.IntTo$Snap q$v@267@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@266@01))
    ($SortWrappers.IntTo$Snap q$v@267@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@266@01 Int) (q$v1@267@01 Int) (q$a2@266@01 Int) (q$v2@267@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@266@01)
        (and
          (<= q$a1@266@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@267@01)
            (and
              (<=
                q$v1@267@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@267@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) q$a1@266@01))))))
      (and
        (<= 0 q$a2@266@01)
        (and
          (<= q$a2@266@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@267@01)
            (and
              (<=
                q$v2@267@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@267@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) q$a2@266@01))))))
      (and (= q$a1@266@01 q$a2@266@01) (= q$v1@267@01 q$v2@267@01)))
    (and (= q$a1@266@01 q$a2@266@01) (= q$v1@267@01 q$v2@267@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@266@01 Int) (q$v@267@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@266@01)
      (and
        (<= q$a@266@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@267@01)
          (and
            (<=
              q$v@267@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@267@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) q$a@266@01))))))
    (and
      (and
        (= (inv@270@01 1 q$a@266@01 q$v@267@01) q$a@266@01)
        (= (inv@272@01 1 q$a@266@01 q$v@267@01) q$v@267@01))
      (and
        (img@271@01 1 q$a@266@01 q$v@267@01)
        (img@273@01 1 q$a@266@01 q$v@267@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@265@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@266@01))
    ($SortWrappers.IntTo$Snap q$v@267@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@266@01))
    ($SortWrappers.IntTo$Snap q$v@267@01))))
  :qid |quant-u-1429|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@271@01 $tag $to $amount) (img@273@01 $tag $to $amount))
      (and
        (<= 0 (inv@270@01 $tag $to $amount))
        (and
          (<=
            (inv@270@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@272@01 $tag $to $amount))
            (and
              (<=
                (inv@272@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@272@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) (inv@270@01 $tag $to $amount))))))))
    (and
      (= 1 $tag)
      (= (inv@270@01 $tag $to $amount) $to)
      (= (inv@272@01 $tag $to $amount) $amount)))
  :pattern ((inv@270@01 $tag $to $amount))
  :pattern ((inv@272@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(declare-const sm@274@01 $PSF<$accessible$withdraw>)
(declare-const s@275@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@275@01 $Snap)) (!
  (=>
    (and
      (and
        (img@271@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second s@275@01)))
        (img@273@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second s@275@01))))
      (and
        (<=
          0
          (inv@270@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second s@275@01))))
        (and
          (<=
            (inv@270@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second s@275@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@272@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second s@275@01))))
            (and
              (<=
                (inv@272@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second s@275@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@272@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second s@275@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) (inv@270@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@275@01))) ($SortWrappers.$SnapToInt ($Snap.second s@275@01))))))))))
    (and
      (not (= s@275@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@274@01  $PSF<$accessible$withdraw>) s@275@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@265@01)) s@275@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@274@01  $PSF<$accessible$withdraw>) s@275@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@265@01)) s@275@01))
  :qid |qp.psmValDef14|)))
(assert (forall ((s@275@01 $Snap)) (!
  ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@265@01)) s@275@01) s@275@01)
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@274@01  $PSF<$accessible$withdraw>) s@275@01))
  :qid |qp.psmResTrgDef15|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@270@01 $tag $to $amount))
      (and
        (<=
          (inv@270@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@272@01 $tag $to $amount))
          (and
            (<=
              (inv@272@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@272@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@204@01 3)) (inv@270@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@274@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@270@01 $tag $to $amount) (inv@272@01 $tag $to $amount))
  :qid |quant-u-1430|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@276@01 $Struct)
(assert (=
  self@276@01
  ($struct_set<$Struct> self@204@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@204@01 4))
    $havoc@209@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const l$starting_claim_price@277@01 $Int)
(declare-const $succ@278@01 Bool)
(declare-const l$starting_claim_price@279@01 $Int)
(declare-const $succ@280@01 Bool)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@281@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@282@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@283@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@284@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@285@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@286@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@287@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@288@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@289@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@290@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@291@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@292@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@293@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@294@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@295@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@296@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@297@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@298@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@299@01 $Snap)
(assert (= $t@299@01 ($Snap.combine ($Snap.first $t@299@01) ($Snap.second $t@299@01))))
(assert (= ($Snap.first $t@299@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@285@01 0))))
(assert (= ($Snap.second $t@299@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@285@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@300@01 $Snap)
(assert (= $t@300@01 ($Snap.combine ($Snap.first $t@300@01) ($Snap.second $t@300@01))))
(assert (= ($Snap.first $t@300@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@285@01 1))))
(assert (= ($Snap.second $t@300@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@285@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@301@01 $Snap)
(assert (= $t@301@01 ($Snap.combine ($Snap.first $t@301@01) ($Snap.second $t@301@01))))
(assert (= ($Snap.first $t@301@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@285@01 2)) 0))))
(assert (= ($Snap.second $t@301@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@285@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@285@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@303@01 $Snap)
(assert (= $t@303@01 ($Snap.combine ($Snap.first $t@303@01) ($Snap.second $t@303@01))))
(assert (= ($Snap.first $t@303@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@285@01 2)) 2))))
(assert (= ($Snap.second $t@303@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@285@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 ($Snap.combine ($Snap.first $t@304@01) ($Snap.second $t@304@01))))
(assert (= ($Snap.first $t@304@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@285@01 2)) 3))))
(assert (= ($Snap.second $t@304@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@285@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@305@01 $Snap)
(assert (= $t@305@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@285@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@307@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 49 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 3)), $q1@307@01)) | live]
; [else-branch: 49 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 3)), $q1@307@01) | live]
(push) ; 5
; [then-branch: 49 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 3)), $q1@307@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 49 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 3)), $q1@307@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@307@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@830@11@830@345-aux|)))
(assert (forall (($q1@307@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@307@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@830@11@830@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@308@01 $Snap)
(assert (= $t@308@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q1@309@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@309@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@309@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 3)) $q1@309@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@831@11@831@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@310@01 $Snap)
(assert (= $t@310@01 ($Snap.combine ($Snap.first $t@310@01) ($Snap.second $t@310@01))))
(assert (= ($Snap.first $t@310@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@285@01 4))))
(assert (= ($Snap.second $t@310@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@285@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 ($Snap.combine ($Snap.first $t@311@01) ($Snap.second $t@311@01))))
(assert (= ($Snap.first $t@311@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@285@01 5))))
(assert (= ($Snap.second $t@311@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@285@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@313@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 50 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 7)), $q2@313@01)) | live]
; [else-branch: 50 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 7)), $q2@313@01) | live]
(push) ; 5
; [then-branch: 50 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 7)), $q2@313@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 50 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 7)), $q2@313@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@313@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@834@11@834@345-aux|)))
(assert (forall (($q2@313@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@313@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@834@11@834@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@314@01 $Snap)
(assert (= $t@314@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q2@315@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@315@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@315@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 7)) $q2@315@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@835@11@835@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@317@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 51 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 8)), $q3@317@01)) | live]
; [else-branch: 51 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 8)), $q3@317@01) | live]
(push) ; 5
; [then-branch: 51 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 8)), $q3@317@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 51 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@285@01, 8)), $q3@317@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@317@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@836@11@836@345-aux|)))
(assert (forall (($q3@317@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@317@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@836@11@836@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@318@01 $Snap)
(assert (= $t@318@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@319@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@319@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@319@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@285@01 8)) $q3@319@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@837@11@837@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@320@01 $Snap)
(assert (= $t@320@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@285@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@321@01 $Snap)
(assert (= $t@321@01 ($Snap.combine ($Snap.first $t@321@01) ($Snap.second $t@321@01))))
(assert (= ($Snap.first $t@321@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@321@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $unwrap(l$starting_claim_price) &&
;   $unwrap(l$starting_claim_price) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 ($Snap.combine ($Snap.first $t@322@01) ($Snap.second $t@322@01))))
(assert (= ($Snap.first $t@322@01) $Snap.unit))
; [eval] 0 <= $unwrap(l$starting_claim_price)
; [eval] $unwrap(l$starting_claim_price)
(assert (<= 0 ($unwrap<Int> l$starting_claim_price@279@01)))
(assert (= ($Snap.second $t@322@01) $Snap.unit))
; [eval] $unwrap(l$starting_claim_price) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$starting_claim_price)
(assert (<=
  ($unwrap<Int> l$starting_claim_price@279@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@323@01 $Snap)
(assert (= $t@323@01 ($Snap.combine ($Snap.first $t@323@01) ($Snap.second $t@323@01))))
(assert (= ($Snap.first $t@323@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@282@01 0))))
(assert (= ($Snap.second $t@323@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@282@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@324@01 $Snap)
(assert (= $t@324@01 ($Snap.combine ($Snap.first $t@324@01) ($Snap.second $t@324@01))))
(assert (= ($Snap.first $t@324@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@282@01 1))))
(assert (= ($Snap.second $t@324@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@282@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@325@01 $Snap)
(assert (= $t@325@01 ($Snap.combine ($Snap.first $t@325@01) ($Snap.second $t@325@01))))
(assert (= ($Snap.first $t@325@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@282@01 2))))
(assert (= ($Snap.second $t@325@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@282@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@326@01 $Snap)
(assert (= $t@326@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@282@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@327@01 $Snap)
(assert (= $t@327@01 ($Snap.combine ($Snap.first $t@327@01) ($Snap.second $t@327@01))))
(assert (= ($Snap.first $t@327@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@282@01 4))))
(assert (= ($Snap.second $t@327@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@282@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@328@01 $Snap)
(assert (= $t@328@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@282@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 ($Snap.combine ($Snap.first $t@329@01) ($Snap.second $t@329@01))))
(assert (= ($Snap.first $t@329@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@281@01 0))))
(assert (= ($Snap.second $t@329@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@281@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@330@01 $Snap)
(assert (= $t@330@01 ($Snap.combine ($Snap.first $t@330@01) ($Snap.second $t@330@01))))
(assert (= ($Snap.first $t@330@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))))
(assert (= ($Snap.second $t@330@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 ($Snap.combine ($Snap.first $t@331@01) ($Snap.second $t@331@01))))
(assert (= ($Snap.first $t@331@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@281@01 2))))
(assert (= ($Snap.second $t@331@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@281@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@281@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@281@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, s$struct$Monarch$init(0, Seq[Int](), 0, 0),
;   ($map_init(0): $Map[Int, Int]), 0, 0, false, ($map_init(0): $Map[Int, Int]),
;   ($map_init(0): $Map[Int, Int]), false)
; [eval] s$struct$self$init(0, 0, s$struct$Monarch$init(0, Seq[Int](), 0, 0), ($map_init(0): $Map[Int, Int]), 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] s$struct$Monarch$init(0, Seq[Int](), 0, 0)
; [eval] Seq[Int]()
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@334@01 $Struct)
(assert (=
  self@334@01
  (s$struct$self$init<$Struct> 0 0 (s$struct$Monarch$init<$Struct> 0 (as Seq_empty  Seq<Int>) 0 0) ($map_init<$Map<Int~_Int>> 0) 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@335@01 $Snap)
(assert (= $t@335@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@295@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@336@01 $Struct)
(assert (=
  self@336@01
  ($struct_set<$Struct> self@334@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@334@01 4))
    l$havoc@295@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@337@01 $Snap)
(assert (= $t@337@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@281@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(msg, 0)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@338@01 $Struct)
(assert (=
  self@338@01
  ($struct_set<$Struct> self@336@01 0 ($struct_get<Int> ($struct_loc<Int> msg@281@01 0)))))
; [exec]
; self := ($struct_set(self, 1, $unwrap(l$starting_claim_price)): $Struct)
; [eval] ($struct_set(self, 1, $unwrap(l$starting_claim_price)): $Struct)
; [eval] $unwrap(l$starting_claim_price)
(declare-const self@339@01 $Struct)
(assert (=
  self@339@01
  ($struct_set<$Struct> self@338@01 1 ($unwrap<Int> l$starting_claim_price@279@01))))
; [exec]
; self := ($struct_set(self, 2, s$struct$Monarch$init(($struct_get($struct_loc(msg,
;   0)): Int), Seq(60, 86, 97, 99, 97, 110, 116, 62), 0, ($struct_get($struct_loc(block,
;   4)): Int))): $Struct)
; [eval] ($struct_set(self, 2, s$struct$Monarch$init(($struct_get($struct_loc(msg, 0)): Int), Seq(60, 86, 97, 99, 97, 110, 116, 62), 0, ($struct_get($struct_loc(block, 4)): Int))): $Struct)
; [eval] s$struct$Monarch$init(($struct_get($struct_loc(msg, 0)): Int), Seq(60, 86, 97, 99, 97, 110, 116, 62), 0, ($struct_get($struct_loc(block, 4)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] Seq(60, 86, 97, 99, 97, 110, 116, 62)
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_append
            (Seq_append
              (Seq_append
                (Seq_append (Seq_singleton 60) (Seq_singleton 86))
                (Seq_singleton 97))
              (Seq_singleton 99))
            (Seq_singleton 97))
          (Seq_singleton 110))
        (Seq_singleton 116))
      (Seq_singleton 62)))
  8))
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(declare-const self@340@01 $Struct)
(assert (=
  self@340@01
  ($struct_set<$Struct> self@339@01 2 (s$struct$Monarch$init<$Struct> ($struct_get<Int> ($struct_loc<Int> msg@281@01 0)) (Seq_append
    (Seq_append
      (Seq_append
        (Seq_append
          (Seq_append
            (Seq_append
              (Seq_append (Seq_singleton 60) (Seq_singleton 86))
              (Seq_singleton 97))
            (Seq_singleton 99))
          (Seq_singleton 97))
        (Seq_singleton 110))
      (Seq_singleton 116))
    (Seq_singleton 62)) 0 ($struct_get<Int> ($struct_loc<Int> block@282@01 4))))))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@296@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@296@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | $out_of_gas@296@01 | live]
; [else-branch: 52 | !($out_of_gas@296@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 52 | $out_of_gas@296@01]
(assert $out_of_gas@296@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | True | live]
; [else-branch: 53 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 53 | True]
; [exec]
; $old_self := self
; [then-branch: 54 | False | dead]
; [else-branch: 54 | True | live]
(push) ; 5
; [else-branch: 54 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | True | live]
; [else-branch: 55 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 55 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@297@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@342@01 $Struct)
(assert (=
  self@342@01
  ($struct_set<$Struct> self@285@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@285@01 4))
    l$havoc$1@297@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | True | live]
; [else-branch: 56 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 56 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(push) ; 7
; [then-branch: 57 | False | dead]
; [else-branch: 57 | True | live]
(push) ; 8
; [else-branch: 57 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [exec]
; assert $succ ==>
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] $succ ==> (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(push) ; 7
; [then-branch: 58 | False | dead]
; [else-branch: 58 | True | live]
(push) ; 8
; [else-branch: 58 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 59 | False | dead]
; [else-branch: 59 | True | live]
(push) ; 6
; [else-branch: 59 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 60 | False | dead]
; [else-branch: 60 | True | live]
(push) ; 4
; [else-branch: 60 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 52 | !($out_of_gas@296@01)]
(assert (not $out_of_gas@296@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@296@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@296@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | !($out_of_gas@296@01) | live]
; [else-branch: 61 | $out_of_gas@296@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 61 | !($out_of_gas@296@01)]
(assert (not $out_of_gas@296@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | True | live]
; [else-branch: 62 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 62 | True]
; [exec]
; $old_self := self
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | True | live]
; [else-branch: 63 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 63 | True]
; [exec]
; assert !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@340@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@340@01, 2)))) | dead]
; [else-branch: 64 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@340@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@340@01, 2))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 64 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@340@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@340@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2))))
; [exec]
; assert ($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@340@01 1))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@340@01 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | $struct_get[Int]($struct_loc[Int](msg@281@01, 1)) < $struct_get[Int]($struct_loc[Int](self@340@01, 1)) | live]
; [else-branch: 65 | !($struct_get[Int]($struct_loc[Int](msg@281@01, 1)) < $struct_get[Int]($struct_loc[Int](self@340@01, 1))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 65 | $struct_get[Int]($struct_loc[Int](msg@281@01, 1)) < $struct_get[Int]($struct_loc[Int](self@340@01, 1))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@340@01 1))))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 65 | !($struct_get[Int]($struct_loc[Int](msg@281@01, 1)) < $struct_get[Int]($struct_loc[Int](self@340@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@340@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@340@01 1))))
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@340@01 1)))))
(push) ; 6
(assert (not (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@340@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@281@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@340@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@340@01 2)))))
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@343@01 $Snap)
(assert (= $t@343@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@297@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@344@01 $Struct)
(assert (=
  self@344@01
  ($struct_set<$Struct> self@340@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@340@01 4))
    l$havoc$1@297@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | True | live]
; [else-branch: 66 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 66 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] $succ ==> ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | True | live]
; [else-branch: 67 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 67 | True]
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@344@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@344@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)))))
; [exec]
; assert $succ ==>
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] $succ ==> (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | True | live]
; [else-branch: 68 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 68 | True]
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@345@01 Int)
(declare-const q$v@346@01 Int)
(push) ; 9
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 10
; [then-branch: 69 | !(0 <= q$a@345@01) | live]
; [else-branch: 69 | 0 <= q$a@345@01 | live]
(push) ; 11
; [then-branch: 69 | !(0 <= q$a@345@01)]
(assert (not (<= 0 q$a@345@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 69 | 0 <= q$a@345@01]
(assert (<= 0 q$a@345@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 12
; [then-branch: 70 | !(q$a@345@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 70 | q$a@345@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 13
; [then-branch: 70 | !(q$a@345@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@345@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 13
(push) ; 13
; [else-branch: 70 | q$a@345@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@345@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 14
; [then-branch: 71 | !(0 <= q$v@346@01) | live]
; [else-branch: 71 | 0 <= q$v@346@01 | live]
(push) ; 15
; [then-branch: 71 | !(0 <= q$v@346@01)]
(assert (not (<= 0 q$v@346@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 71 | 0 <= q$v@346@01]
(assert (<= 0 q$v@346@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@346@01) (not (<= 0 q$v@346@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@346@01) (not (<= 0 q$v@346@01))))))
(assert (or
  (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@345@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@345@01)
  (and
    (<= 0 q$a@345@01)
    (=>
      (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@346@01) (not (<= 0 q$v@346@01)))))
    (or
      (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@345@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@345@01) (not (<= 0 q$a@345@01))))
(push) ; 10
; [then-branch: 72 | 0 <= q$a@345@01 && q$a@345@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@346@01 && q$v@346@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 72 | !(0 <= q$a@345@01 && q$a@345@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@346@01 && q$v@346@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 11
; [then-branch: 72 | 0 <= q$a@345@01 && q$a@345@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@346@01 && q$v@346@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@345@01)
  (and
    (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@346@01)
      (<=
        q$v@346@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 12
; [then-branch: 73 | q$v@346@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@344@01, 3)), q$a@345@01) | live]
; [else-branch: 73 | q$v@346@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@344@01, 3)), q$a@345@01) | live]
(push) ; 13
; [then-branch: 73 | q$v@346@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@344@01, 3)), q$a@345@01)]
(assert (=
  q$v@346@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 73 | q$v@346@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@344@01, 3)), q$a@345@01)]
(assert (not
  (=
    q$v@346@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@346@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01)))
  (=
    q$v@346@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 72 | !(0 <= q$a@345@01 && q$a@345@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@346@01 && q$v@346@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@345@01)
    (and
      (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@346@01)
        (<=
          q$v@346@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@345@01)
    (and
      (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@346@01)
        (<=
          q$v@346@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@345@01)
    (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@346@01)
    (<=
      q$v@346@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@346@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01)))
      (=
        q$v@346@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@345@01)
      (and
        (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@346@01)
          (<=
            q$v@346@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@345@01)
    (and
      (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@346@01)
        (<=
          q$v@346@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@347@01 $PSF<$accessible$withdraw>)
(declare-const s@348@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@345@01 Int) (q$v@346@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@345@01)
      (and
        (<= 0 q$a@345@01)
        (=>
          (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@346@01) (not (<= 0 q$v@346@01)))))
        (or
          (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@345@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@345@01) (not (<= 0 q$a@345@01)))
    (=>
      (and
        (<= 0 q$a@345@01)
        (and
          (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@346@01)
            (<=
              q$v@346@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@345@01)
        (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@346@01)
        (<=
          q$v@346@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@346@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01)))
          (=
            q$v@346@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01)))))
    (or
      (not
        (and
          (<= 0 q$a@345@01)
          (and
            (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@346@01)
              (<=
                q$v@346@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@345@01)
        (and
          (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@346@01)
            (<=
              q$v@346@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@347@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@345@01))
    ($SortWrappers.IntTo$Snap q$v@346@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@345@01))
    ($SortWrappers.IntTo$Snap q$v@346@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@905@21@905@353-aux|)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((q$a@345@01 Int) (q$v@346@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@345@01)
      (and
        (<= 0 q$a@345@01)
        (=>
          (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@346@01) (not (<= 0 q$v@346@01)))))
        (or
          (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@345@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@345@01) (not (<= 0 q$a@345@01)))
    (=>
      (and
        (<= 0 q$a@345@01)
        (and
          (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@346@01)
            (<=
              q$v@346@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@345@01)
        (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@346@01)
        (<=
          q$v@346@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@346@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01)))
          (=
            q$v@346@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@344@01 3)) q$a@345@01)))))
    (or
      (not
        (and
          (<= 0 q$a@345@01)
          (and
            (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@346@01)
              (<=
                q$v@346@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@345@01)
        (and
          (<= q$a@345@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@346@01)
            (<=
              q$v@346@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@347@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@345@01))
    ($SortWrappers.IntTo$Snap q$v@346@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@345@01))
    ($SortWrappers.IntTo$Snap q$v@346@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@905@21@905@353-aux|)))
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 74 | False | dead]
; [else-branch: 74 | True | live]
(push) ; 6
; [else-branch: 74 | True]
(pop) ; 6
(pop) ; 5
; [eval] !$succ
; [then-branch: 75 | False | dead]
; [else-branch: 75 | True | live]
(push) ; 5
; [else-branch: 75 | True]
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 76 | False | dead]
; [else-branch: 76 | True | live]
(push) ; 4
; [else-branch: 76 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 61 | $out_of_gas@296@01]
(assert $out_of_gas@296@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$withdraw ----------
(declare-const $succ@349@01 Bool)
(declare-const $succ@350@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@351@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@352@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@353@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@354@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@355@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@356@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@357@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@358@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@359@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@360@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@361@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@362@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@363@01 Bool)
; [exec]
; var l$amount: $Int
(declare-const l$amount@364@01 $Int)
; [exec]
; var l$havoc: $Map[Int, $Struct]
(declare-const l$havoc@365@01 $Map<Int~_$Struct>)
; [exec]
; var l$send_fail: Bool
(declare-const l$send_fail@366@01 Bool)
; [exec]
; var i0$$pre_self: $Struct
(declare-const i0$$pre_self@367@01 $Struct)
; [exec]
; var i0$$pre_$contracts: $Map[Int, $Struct]
(declare-const i0$$pre_$contracts@368@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@369@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$2: $Struct
(declare-const l$havoc$2@370@01 $Struct)
; [exec]
; var l$havoc$3: $Map[Int, $Struct]
(declare-const l$havoc$3@371@01 $Map<Int~_$Struct>)
; [exec]
; var l$no_reentrant_call: Bool
(declare-const l$no_reentrant_call@372@01 Bool)
; [exec]
; var l$havoc$4: $Map[Int, $Struct]
(declare-const l$havoc$4@373@01 $Map<Int~_$Struct>)
; [exec]
; var l$havoc$5: $Map[Int, $Struct]
(declare-const l$havoc$5@374@01 $Map<Int~_$Struct>)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@375@01 Bool)
; [exec]
; var l$havoc$6: Int
(declare-const l$havoc$6@376@01 Int)
; [exec]
; var l$havoc$7: $Map[Int, $Struct]
(declare-const l$havoc$7@377@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@378@01 $Snap)
(assert (= $t@378@01 ($Snap.combine ($Snap.first $t@378@01) ($Snap.second $t@378@01))))
(assert (= ($Snap.first $t@378@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@355@01 0))))
(assert (= ($Snap.second $t@378@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@355@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 ($Snap.combine ($Snap.first $t@379@01) ($Snap.second $t@379@01))))
(assert (= ($Snap.first $t@379@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))
(assert (= ($Snap.second $t@379@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@380@01 $Snap)
(assert (= $t@380@01 ($Snap.combine ($Snap.first $t@380@01) ($Snap.second $t@380@01))))
(assert (= ($Snap.first $t@380@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) 0))))
(assert (= ($Snap.second $t@380@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@381@01 $Snap)
(assert (= $t@381@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 ($Snap.combine ($Snap.first $t@382@01) ($Snap.second $t@382@01))))
(assert (= ($Snap.first $t@382@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) 2))))
(assert (= ($Snap.second $t@382@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 ($Snap.combine ($Snap.first $t@383@01) ($Snap.second $t@383@01))))
(assert (= ($Snap.first $t@383@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) 3))))
(assert (= ($Snap.second $t@383@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@386@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 77 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 3)), $q1@386@01)) | live]
; [else-branch: 77 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 3)), $q1@386@01) | live]
(push) ; 5
; [then-branch: 77 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 3)), $q1@386@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 77 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 3)), $q1@386@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@386@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@945@11@945@345-aux|)))
(assert (forall (($q1@386@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@386@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@945@11@945@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@387@01 $Snap)
(assert (= $t@387@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q1@388@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@388@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@388@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) $q1@388@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@946@11@946@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@389@01 $Snap)
(assert (= $t@389@01 ($Snap.combine ($Snap.first $t@389@01) ($Snap.second $t@389@01))))
(assert (= ($Snap.first $t@389@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@355@01 4))))
(assert (= ($Snap.second $t@389@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@355@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@390@01 $Snap)
(assert (= $t@390@01 ($Snap.combine ($Snap.first $t@390@01) ($Snap.second $t@390@01))))
(assert (= ($Snap.first $t@390@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@355@01 5))))
(assert (= ($Snap.second $t@390@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@355@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@391@01 $Snap)
(assert (= $t@391@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@392@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 78 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 7)), $q2@392@01)) | live]
; [else-branch: 78 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 7)), $q2@392@01) | live]
(push) ; 5
; [then-branch: 78 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 7)), $q2@392@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 78 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 7)), $q2@392@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@392@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@949@11@949@345-aux|)))
(assert (forall (($q2@392@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@392@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@949@11@949@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@393@01 $Snap)
(assert (= $t@393@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q2@394@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@394@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@394@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) $q2@394@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@950@11@950@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@395@01 $Snap)
(assert (= $t@395@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@396@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 79 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 8)), $q3@396@01)) | live]
; [else-branch: 79 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 8)), $q3@396@01) | live]
(push) ; 5
; [then-branch: 79 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 8)), $q3@396@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 79 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@355@01, 8)), $q3@396@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@396@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@951@11@951@345-aux|)))
(assert (forall (($q3@396@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@396@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@951@11@951@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@398@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@398@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@398@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 8)) $q3@398@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@952@11@952@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@355@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@400@01 $Snap)
(assert (= $t@400@01 ($Snap.combine ($Snap.first $t@400@01) ($Snap.second $t@400@01))))
(assert (= ($Snap.first $t@400@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@400@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@401@01 $Snap)
(assert (= $t@401@01 ($Snap.combine ($Snap.first $t@401@01) ($Snap.second $t@401@01))))
(assert (= ($Snap.first $t@401@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@352@01 0))))
(assert (= ($Snap.second $t@401@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@352@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 ($Snap.combine ($Snap.first $t@402@01) ($Snap.second $t@402@01))))
(assert (= ($Snap.first $t@402@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@352@01 1))))
(assert (= ($Snap.second $t@402@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@352@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@403@01 $Snap)
(assert (= $t@403@01 ($Snap.combine ($Snap.first $t@403@01) ($Snap.second $t@403@01))))
(assert (= ($Snap.first $t@403@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@352@01 2))))
(assert (= ($Snap.second $t@403@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@352@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@404@01 $Snap)
(assert (= $t@404@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@352@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@405@01 $Snap)
(assert (= $t@405@01 ($Snap.combine ($Snap.first $t@405@01) ($Snap.second $t@405@01))))
(assert (= ($Snap.first $t@405@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@352@01 4))))
(assert (= ($Snap.second $t@405@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@352@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@406@01 $Snap)
(assert (= $t@406@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@352@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@407@01 $Snap)
(assert (= $t@407@01 ($Snap.combine ($Snap.first $t@407@01) ($Snap.second $t@407@01))))
(assert (= ($Snap.first $t@407@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
(assert (= ($Snap.second $t@407@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@408@01 $Snap)
(assert (= $t@408@01 ($Snap.combine ($Snap.first $t@408@01) ($Snap.second $t@408@01))))
(assert (= ($Snap.first $t@408@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))))
(assert (= ($Snap.second $t@408@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@409@01 $Snap)
(assert (= $t@409@01 ($Snap.combine ($Snap.first $t@409@01) ($Snap.second $t@409@01))))
(assert (= ($Snap.first $t@409@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@351@01 2))))
(assert (= ($Snap.second $t@409@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@411@01 $Snap)
(assert (= $t@411@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@351@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@413@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@355@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true &&
;   (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935 &&
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int))) ==>
;     acc($accessible$withdraw(1, q$a, q$v), write))
(declare-const $t@415@01 $Snap)
(assert (= $t@415@01 ($Snap.combine ($Snap.first $t@415@01) ($Snap.second $t@415@01))))
(assert (= ($Snap.first $t@415@01) $Snap.unit))
(declare-const q$a@416@01 Int)
(declare-const q$v@417@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 && q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 80 | !(0 <= q$a@416@01) | live]
; [else-branch: 80 | 0 <= q$a@416@01 | live]
(push) ; 5
; [then-branch: 80 | !(0 <= q$a@416@01)]
(assert (not (<= 0 q$a@416@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 80 | 0 <= q$a@416@01]
(assert (<= 0 q$a@416@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 81 | !(q$a@416@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 81 | q$a@416@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 81 | !(q$a@416@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@416@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 81 | q$a@416@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@416@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 82 | !(0 <= q$v@417@01) | live]
; [else-branch: 82 | 0 <= q$v@417@01 | live]
(push) ; 9
; [then-branch: 82 | !(0 <= q$v@417@01)]
(assert (not (<= 0 q$v@417@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 82 | 0 <= q$v@417@01]
(assert (<= 0 q$v@417@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(push) ; 10
; [then-branch: 83 | !(q$v@417@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 83 | q$v@417@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(push) ; 11
; [then-branch: 83 | !(q$v@417@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (<=
    q$v@417@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 11
(push) ; 11
; [else-branch: 83 | q$v@417@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (<=
  q$v@417@01
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    q$v@417@01
    115792089237316195423570985008687907853269984665640564039457584007913129639935)
  (not
    (<=
      q$v@417@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$v@417@01)
  (and
    (<= 0 q$v@417@01)
    (or
      (<=
        q$v@417@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)
      (not
        (<=
          q$v@417@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(assert (or (<= 0 q$v@417@01) (not (<= 0 q$v@417@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
    (=>
      (<= 0 q$v@417@01)
      (and
        (<= 0 q$v@417@01)
        (or
          (<=
            q$v@417@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)
          (not
            (<=
              q$v@417@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
    (or (<= 0 q$v@417@01) (not (<= 0 q$v@417@01))))))
(assert (or
  (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@416@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@416@01)
  (and
    (<= 0 q$a@416@01)
    (=>
      (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
        (=>
          (<= 0 q$v@417@01)
          (and
            (<= 0 q$v@417@01)
            (or
              (<=
                q$v@417@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (not
                (<=
                  q$v@417@01
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
        (or (<= 0 q$v@417@01) (not (<= 0 q$v@417@01)))))
    (or
      (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@416@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@416@01) (not (<= 0 q$a@416@01))))
(assert (and
  (<= 0 q$a@416@01)
  (and
    (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@417@01)
      (and
        (<=
          q$v@417@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (=
          q$v@417@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) q$a@416@01)))))))
(declare-const sm@418@01 $PSF<$accessible$withdraw>)
(declare-const s@419@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@420@01 (Int Int Int) Int)
(declare-fun img@421@01 (Int Int Int) Bool)
(declare-fun inv@422@01 (Int Int Int) Int)
(declare-fun img@423@01 (Int Int Int) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((q$a@416@01 Int) (q$v@417@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@416@01)
      (and
        (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@417@01)
          (and
            (<=
              q$v@417@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@417@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) q$a@416@01))))))
    (and
      (=>
        (<= 0 q$a@416@01)
        (and
          (<= 0 q$a@416@01)
          (=>
            (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
              (=>
                (<= 0 q$v@417@01)
                (and
                  (<= 0 q$v@417@01)
                  (or
                    (<=
                      q$v@417@01
                      115792089237316195423570985008687907853269984665640564039457584007913129639935)
                    (not
                      (<=
                        q$v@417@01
                        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
              (or (<= 0 q$v@417@01) (not (<= 0 q$v@417@01)))))
          (or
            (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
            (not
              (<= q$a@416@01 1461501637330902918203684832716283019655932542975)))))
      (or (<= 0 q$a@416@01) (not (<= 0 q$a@416@01)))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@416@01))
    ($SortWrappers.IntTo$Snap q$v@417@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@416@01))
    ($SortWrappers.IntTo$Snap q$v@417@01))))
  :qid |$accessible$withdraw-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((q$a1@416@01 Int) (q$v1@417@01 Int) (q$a2@416@01 Int) (q$v2@417@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 q$a1@416@01)
        (and
          (<= q$a1@416@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v1@417@01)
            (and
              (<=
                q$v1@417@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v1@417@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) q$a1@416@01))))))
      (and
        (<= 0 q$a2@416@01)
        (and
          (<= q$a2@416@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v2@417@01)
            (and
              (<=
                q$v2@417@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                q$v2@417@01
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) q$a2@416@01))))))
      (and (= q$a1@416@01 q$a2@416@01) (= q$v1@417@01 q$v2@417@01)))
    (and (= q$a1@416@01 q$a2@416@01) (= q$v1@417@01 q$v2@417@01)))
  
  :qid |$accessible$withdraw-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((q$a@416@01 Int) (q$v@417@01 Int)) (!
  (=>
    (and
      (<= 0 q$a@416@01)
      (and
        (<= q$a@416@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@417@01)
          (and
            (<=
              q$v@417@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              q$v@417@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) q$a@416@01))))))
    (and
      (and
        (= (inv@420@01 1 q$a@416@01 q$v@417@01) q$a@416@01)
        (= (inv@422@01 1 q$a@416@01 q$v@417@01) q$v@417@01))
      (and
        (img@421@01 1 q$a@416@01 q$v@417@01)
        (img@423@01 1 q$a@416@01 q$v@417@01))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@416@01))
    ($SortWrappers.IntTo$Snap q$v@417@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@416@01))
    ($SortWrappers.IntTo$Snap q$v@417@01))))
  :qid |quant-u-1432|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
      (and
        (<= 0 (inv@420@01 $tag $to $amount))
        (and
          (<=
            (inv@420@01 $tag $to $amount)
            1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 (inv@422@01 $tag $to $amount))
            (and
              (<=
                (inv@422@01 $tag $to $amount)
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@422@01 $tag $to $amount)
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
    (and
      (= 1 $tag)
      (= (inv@420@01 $tag $to $amount) $to)
      (= (inv@422@01 $tag $to $amount) $amount)))
  :pattern ((inv@420@01 $tag $to $amount))
  :pattern ((inv@422@01 $tag $to $amount))
  :qid |$accessible$withdraw-fctOfInv|)))
; Permissions are non-negative
(declare-const sm@424@01 $PSF<$accessible$withdraw>)
(declare-const s@425@01 $Snap)
; Definitional axioms for snapshot map values
(assert (forall ((s@425@01 $Snap)) (!
  (=>
    (and
      (and
        (img@421@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second s@425@01)))
        (img@423@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second s@425@01))))
      (and
        (<=
          0
          (inv@420@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second s@425@01))))
        (and
          (<=
            (inv@420@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second s@425@01)))
            1461501637330902918203684832716283019655932542975)
          (and
            (<=
              0
              (inv@422@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second s@425@01))))
            (and
              (<=
                (inv@422@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second s@425@01)))
                115792089237316195423570985008687907853269984665640564039457584007913129639935)
              (=
                (inv@422@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second s@425@01)))
                ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first s@425@01))) ($SortWrappers.$SnapToInt ($Snap.second s@425@01))))))))))
    (and
      (not (= s@425@01 $Snap.unit))
      (=
        ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) s@425@01)
        ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) s@425@01))))
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) s@425@01))
  :pattern (($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) s@425@01))
  :qid |qp.psmValDef18|)))
(assert (forall ((s@425@01 $Snap)) (!
  ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) s@425@01) s@425@01)
  :pattern (($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) s@425@01))
  :qid |qp.psmResTrgDef19|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=>
    (and
      (<= 0 (inv@420@01 $tag $to $amount))
      (and
        (<=
          (inv@420@01 $tag $to $amount)
          1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 (inv@422@01 $tag $to $amount))
          (and
            (<=
              (inv@422@01 $tag $to $amount)
              115792089237316195423570985008687907853269984665640564039457584007913129639935)
            (=
              (inv@422@01 $tag $to $amount)
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount)))))))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern ((inv@420@01 $tag $to $amount) (inv@422@01 $tag $to $amount))
  :qid |quant-u-1433|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@426@01 $Snap)
(assert (= $t@426@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@351@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$amount := $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const l$amount@427@01 $Int)
(assert (=
  l$amount@427@01
  ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), 0): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), 0): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), 0): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const self@428@01 $Struct)
(assert (=
  self@428@01
  ($struct_set<$Struct> self@355@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0)) 0))))
; [eval] ($struct_get($struct_loc(self, 4)): Int) < $unwrap(l$amount)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap(l$amount)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@428@01 4))
    ($unwrap<Int> l$amount@427@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | $struct_get[Int]($struct_loc[Int](self@428@01, 4)) < $unwrap[Int](l$amount@427@01) | dead]
; [else-branch: 84 | !($struct_get[Int]($struct_loc[Int](self@428@01, 4)) < $unwrap[Int](l$amount@427@01)) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 84 | !($struct_get[Int]($struct_loc[Int](self@428@01, 4)) < $unwrap[Int](l$amount@427@01))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@428@01 4))
    ($unwrap<Int> l$amount@427@01))))
(pop) ; 3
; [eval] !(($struct_get($struct_loc(self, 4)): Int) < $unwrap(l$amount))
; [eval] ($struct_get($struct_loc(self, 4)): Int) < $unwrap(l$amount)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap(l$amount)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> self@428@01 4))
  ($unwrap<Int> l$amount@427@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@428@01 4))
    ($unwrap<Int> l$amount@427@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | !($struct_get[Int]($struct_loc[Int](self@428@01, 4)) < $unwrap[Int](l$amount@427@01)) | live]
; [else-branch: 85 | $struct_get[Int]($struct_loc[Int](self@428@01, 4)) < $unwrap[Int](l$amount@427@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 85 | !($struct_get[Int]($struct_loc[Int](self@428@01, 4)) < $unwrap[Int](l$amount@427@01))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> self@428@01 4))
    ($unwrap<Int> l$amount@427@01))))
; [exec]
; self := ($struct_set(self, 7, ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   $unwrap(l$amount)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 7, ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap(l$amount)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap(l$amount)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + $unwrap(l$amount)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$amount)
(declare-const self@429@01 $Struct)
(assert (=
  self@429@01
  ($struct_set<$Struct> self@428@01 7 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@428@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0)))
    ($unwrap<Int> l$amount@427@01))))))
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) -
;   $unwrap(l$amount)): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) - $unwrap(l$amount)): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) - $unwrap(l$amount)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] $unwrap(l$amount)
(declare-const self@430@01 $Struct)
(assert (=
  self@430@01
  ($struct_set<$Struct> self@429@01 4 (-
    ($struct_get<Int> ($struct_loc<Int> self@429@01 4))
    ($unwrap<Int> l$amount@427@01)))))
; [exec]
; assert !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@430@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2)))) | dead]
; [else-branch: 86 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@430@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 86 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@430@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))
; [exec]
; assert ($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1)) | live]
; [else-branch: 87 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 87 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(pop) ; 5
(push) ; 5
; [else-branch: 87 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(push) ; 4
(assert (not (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)))))
; [exec]
; exhale true &&
;   (forall $arg0: Int, $arg1: Seq[Int], $arg2: Int ::
;     { e$ThroneClaimed($arg0, $arg1, $arg2) }
;     perm(e$ThroneClaimed($arg0, $arg1, $arg2)) > none ==>
;     acc(e$ThroneClaimed($arg0, $arg1, $arg2), perm(e$ThroneClaimed($arg0, $arg1,
;     $arg2))))
(declare-const $arg0@431@01 Int)
(declare-const $arg1@432@01 Seq<Int>)
(declare-const $arg2@433@01 Int)
(push) ; 4
; [eval] perm(e$ThroneClaimed($arg0, $arg1, $arg2)) > none
; [eval] perm(e$ThroneClaimed($arg0, $arg1, $arg2))
(declare-const sm@434@01 $PSF<e$ThroneClaimed>)
(declare-const s@435@01 $Snap)
; Definitional axioms for snapshot map values
(declare-const pm@436@01 $PPM)
(assert (forall (($arg0 Int) ($arg1 Seq<Int>) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.Seq<Int>To$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.Seq<Int>To$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef21|)))
(assert (forall (($arg0 Int) ($arg1 Seq<Int>) ($arg2 Int)) (!
  ($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.Seq<Int>To$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.Seq<Int>To$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.Seq<Int>To$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef22|)))
(assert ($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@431@01)
    ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
  ($SortWrappers.IntTo$Snap $arg2@433@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $arg0@431@01)
    ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
  ($SortWrappers.IntTo$Snap $arg2@433@01))))
(assert (>
  ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@431@01)
      ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
    ($SortWrappers.IntTo$Snap $arg2@433@01)))
  $Perm.No))
; [eval] perm(e$ThroneClaimed($arg0, $arg1, $arg2))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
(declare-fun inv@437@01 (Int Seq<Int> Int) Int)
(declare-fun img@438@01 (Int Seq<Int> Int) Bool)
(declare-fun inv@439@01 (Int Seq<Int> Int) Seq<Int>)
(declare-fun img@440@01 (Int Seq<Int> Int) Bool)
(declare-fun inv@441@01 (Int Seq<Int> Int) Int)
(declare-fun img@442@01 (Int Seq<Int> Int) Bool)
; Nested auxiliary terms: globals
(assert (forall (($arg0 Int) ($arg1 Seq<Int>) ($arg2 Int)) (!
  (=
    ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.Seq<Int>To$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2)))
    $Perm.No)
  :pattern (($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.Seq<Int>To$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resPrmSumDef21|)))
(assert (forall (($arg0 Int) ($arg1 Seq<Int>) ($arg2 Int)) (!
  ($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.Seq<Int>To$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.Seq<Int>To$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2)))
  :pattern (($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0)
      ($SortWrappers.Seq<Int>To$Snap $arg1))
    ($SortWrappers.IntTo$Snap $arg2))))
  :qid |qp.resTrgDef22|)))
; Nested auxiliary terms: non-globals
(assert (forall (($arg0@431@01 Int) ($arg1@432@01 Seq<Int>) ($arg2@433@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@431@01)
          ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
        ($SortWrappers.IntTo$Snap $arg2@433@01)))
      $Perm.No)
    ($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@431@01)
        ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
      ($SortWrappers.IntTo$Snap $arg2@433@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0@431@01)
        ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
      ($SortWrappers.IntTo$Snap $arg2@433@01))))
  :pattern (($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@431@01)
      ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
    ($SortWrappers.IntTo$Snap $arg2@433@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@431@01)
      ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
    ($SortWrappers.IntTo$Snap $arg2@433@01))))
  :qid |e$ThroneClaimed-aux|)))
(push) ; 4
(assert (not (forall (($arg0@431@01 Int) ($arg1@432@01 Seq<Int>) ($arg2@433@01 Int)) (!
  (=>
    (>
      ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap $arg0@431@01)
          ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
        ($SortWrappers.IntTo$Snap $arg2@433@01)))
      $Perm.No)
    (or
      (=
        ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@431@01)
            ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
          ($SortWrappers.IntTo$Snap $arg2@433@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@431@01)
            ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
          ($SortWrappers.IntTo$Snap $arg2@433@01))))))
  
  :qid |quant-u-1434|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall (($arg01@431@01 Int) ($arg11@432@01 Seq<Int>) ($arg21@433@01 Int) ($arg02@431@01 Int) ($arg12@432@01 Seq<Int>) ($arg22@433@01 Int)) (!
  (=>
    (and
      (and
        (and
          (>
            ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg01@431@01)
                ($SortWrappers.Seq<Int>To$Snap $arg11@432@01))
              ($SortWrappers.IntTo$Snap $arg21@433@01)))
            $Perm.No)
          ($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@431@01)
              ($SortWrappers.Seq<Int>To$Snap $arg11@432@01))
            ($SortWrappers.IntTo$Snap $arg21@433@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@431@01)
              ($SortWrappers.Seq<Int>To$Snap $arg11@432@01))
            ($SortWrappers.IntTo$Snap $arg21@433@01))))
        (<
          $Perm.No
          ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg01@431@01)
              ($SortWrappers.Seq<Int>To$Snap $arg11@432@01))
            ($SortWrappers.IntTo$Snap $arg21@433@01)))))
      (and
        (and
          (>
            ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
              ($Snap.combine
                ($SortWrappers.IntTo$Snap $arg02@431@01)
                ($SortWrappers.Seq<Int>To$Snap $arg12@432@01))
              ($SortWrappers.IntTo$Snap $arg22@433@01)))
            $Perm.No)
          ($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@431@01)
              ($SortWrappers.Seq<Int>To$Snap $arg12@432@01))
            ($SortWrappers.IntTo$Snap $arg22@433@01))) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@431@01)
              ($SortWrappers.Seq<Int>To$Snap $arg12@432@01))
            ($SortWrappers.IntTo$Snap $arg22@433@01))))
        (<
          $Perm.No
          ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap $arg02@431@01)
              ($SortWrappers.Seq<Int>To$Snap $arg12@432@01))
            ($SortWrappers.IntTo$Snap $arg22@433@01)))))
      (and
        (and
          (= $arg01@431@01 $arg02@431@01)
          (Seq_equal $arg11@432@01 $arg12@432@01))
        (= $arg21@433@01 $arg22@433@01)))
    (and
      (and
        (= $arg01@431@01 $arg02@431@01)
        (Seq_equal $arg11@432@01 $arg12@432@01))
      (= $arg21@433@01 $arg22@433@01)))
  
  :qid |e$ThroneClaimed-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall (($arg0@431@01 Int) ($arg1@432@01 Seq<Int>) ($arg2@433@01 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@431@01)
            ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
          ($SortWrappers.IntTo$Snap $arg2@433@01)))
        $Perm.No)
      (<
        $Perm.No
        ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap $arg0@431@01)
            ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
          ($SortWrappers.IntTo$Snap $arg2@433@01)))))
    (and
      (and
        (= (inv@437@01 $arg0@431@01 $arg1@432@01 $arg2@433@01) $arg0@431@01)
        (Seq_equal
          (inv@439@01 $arg0@431@01 $arg1@432@01 $arg2@433@01)
          $arg1@432@01)
        (= (inv@441@01 $arg0@431@01 $arg1@432@01 $arg2@433@01) $arg2@433@01))
      (and
        (img@438@01 $arg0@431@01 $arg1@432@01 $arg2@433@01)
        (img@440@01 $arg0@431@01 $arg1@432@01 $arg2@433@01)
        (img@442@01 $arg0@431@01 $arg1@432@01 $arg2@433@01))))
  :pattern (($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@431@01)
      ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
    ($SortWrappers.IntTo$Snap $arg2@433@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $arg0@431@01)
      ($SortWrappers.Seq<Int>To$Snap $arg1@432@01))
    ($SortWrappers.IntTo$Snap $arg2@433@01))))
  :qid |e$ThroneClaimed-invOfFct|)))
(assert (forall (($arg0 Int) ($arg1 Seq<Int>) ($arg2 Int)) (!
  (=>
    (and
      (and
        (img@438@01 $arg0 $arg1 $arg2)
        (img@440@01 $arg0 $arg1 $arg2)
        (img@442@01 $arg0 $arg1 $arg2))
      (and
        (>
          ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@437@01 $arg0 $arg1 $arg2))
              ($SortWrappers.Seq<Int>To$Snap (inv@439@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@441@01 $arg0 $arg1 $arg2))))
          $Perm.No)
        (<
          $Perm.No
          ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap (inv@437@01 $arg0 $arg1 $arg2))
              ($SortWrappers.Seq<Int>To$Snap (inv@439@01 $arg0 $arg1 $arg2)))
            ($SortWrappers.IntTo$Snap (inv@441@01 $arg0 $arg1 $arg2)))))))
    (and
      (= (inv@437@01 $arg0 $arg1 $arg2) $arg0)
      (Seq_equal (inv@439@01 $arg0 $arg1 $arg2) $arg1)
      (= (inv@441@01 $arg0 $arg1 $arg2) $arg2)))
  :pattern ((inv@437@01 $arg0 $arg1 $arg2))
  :pattern ((inv@439@01 $arg0 $arg1 $arg2))
  :pattern ((inv@441@01 $arg0 $arg1 $arg2))
  :qid |e$ThroneClaimed-fctOfInv|)))
(assert (forall (($arg0 Int) ($arg1 Seq<Int>) ($arg2 Int)) (!
  (=>
    (>
      ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@437@01 $arg0 $arg1 $arg2))
          ($SortWrappers.Seq<Int>To$Snap (inv@439@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@441@01 $arg0 $arg1 $arg2))))
      $Perm.No)
    ($PSF.loc_e$ThroneClaimed ($PSF.lookup_e$ThroneClaimed (as sm@434@01  $PSF<e$ThroneClaimed>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.Seq<Int>To$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $arg0)
        ($SortWrappers.Seq<Int>To$Snap $arg1))
      ($SortWrappers.IntTo$Snap $arg2))))
  :pattern ((inv@437@01 $arg0 $arg1 $arg2) (inv@439@01 $arg0 $arg1 $arg2) (inv@441@01 $arg0 $arg1 $arg2))
  :qid |quant-u-1435|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall (($arg0 Int) ($arg1 Seq<Int>) ($arg2 Int)) (!
  (=>
    (and
      (>
        ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap (inv@437@01 $arg0 $arg1 $arg2))
            ($SortWrappers.Seq<Int>To$Snap (inv@439@01 $arg0 $arg1 $arg2)))
          ($SortWrappers.IntTo$Snap (inv@441@01 $arg0 $arg1 $arg2))))
        $Perm.No)
      (and
        (img@438@01 $arg0 $arg1 $arg2)
        (img@440@01 $arg0 $arg1 $arg2)
        (img@442@01 $arg0 $arg1 $arg2))
      (and
        (= $arg0 (inv@437@01 $arg0 $arg1 $arg2))
        (Seq_equal $arg1 (inv@439@01 $arg0 $arg1 $arg2))
        (= $arg2 (inv@441@01 $arg0 $arg1 $arg2))))
    (=
      ($PSF.perm_e$ThroneClaimed (as pm@436@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap (inv@437@01 $arg0 $arg1 $arg2))
          ($SortWrappers.Seq<Int>To$Snap (inv@439@01 $arg0 $arg1 $arg2)))
        ($SortWrappers.IntTo$Snap (inv@441@01 $arg0 $arg1 $arg2))))
      $Perm.No))
  
  :qid |quant-u-1436|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@430@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@430@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@443@01 Int)
(declare-const q$v@444@01 Int)
(push) ; 4
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 5
; [then-branch: 88 | !(0 <= q$a@443@01) | live]
; [else-branch: 88 | 0 <= q$a@443@01 | live]
(push) ; 6
; [then-branch: 88 | !(0 <= q$a@443@01)]
(assert (not (<= 0 q$a@443@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 88 | 0 <= q$a@443@01]
(assert (<= 0 q$a@443@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 7
; [then-branch: 89 | !(q$a@443@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 89 | q$a@443@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 8
; [then-branch: 89 | !(q$a@443@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@443@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 8
(push) ; 8
; [else-branch: 89 | q$a@443@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@443@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 9
; [then-branch: 90 | !(0 <= q$v@444@01) | live]
; [else-branch: 90 | 0 <= q$v@444@01 | live]
(push) ; 10
; [then-branch: 90 | !(0 <= q$v@444@01)]
(assert (not (<= 0 q$v@444@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 90 | 0 <= q$v@444@01]
(assert (<= 0 q$v@444@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@444@01) (not (<= 0 q$v@444@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@444@01) (not (<= 0 q$v@444@01))))))
(assert (or
  (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@443@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@443@01)
  (and
    (<= 0 q$a@443@01)
    (=>
      (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@444@01) (not (<= 0 q$v@444@01)))))
    (or
      (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@443@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@443@01) (not (<= 0 q$a@443@01))))
(push) ; 5
; [then-branch: 91 | 0 <= q$a@443@01 && q$a@443@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@444@01 && q$v@444@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 91 | !(0 <= q$a@443@01 && q$a@443@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@444@01 && q$v@444@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 6
; [then-branch: 91 | 0 <= q$a@443@01 && q$a@443@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@444@01 && q$v@444@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@443@01)
  (and
    (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@444@01)
      (<=
        q$v@444@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 7
; [then-branch: 92 | q$v@444@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@430@01, 3)), q$a@443@01) | live]
; [else-branch: 92 | q$v@444@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@430@01, 3)), q$a@443@01) | live]
(push) ; 8
; [then-branch: 92 | q$v@444@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@430@01, 3)), q$a@443@01)]
(assert (=
  q$v@444@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)) q$a@443@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 92 | q$v@444@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@430@01, 3)), q$a@443@01)]
(assert (not
  (=
    q$v@444@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)) q$a@443@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@444@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)) q$a@443@01)))
  (=
    q$v@444@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)) q$a@443@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 91 | !(0 <= q$a@443@01 && q$a@443@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@444@01 && q$v@444@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@443@01)
    (and
      (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@444@01)
        (<=
          q$v@444@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@443@01)
    (and
      (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@444@01)
        (<=
          q$v@444@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@443@01)
    (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@444@01)
    (<=
      q$v@444@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@444@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)) q$a@443@01)))
      (=
        q$v@444@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)) q$a@443@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@443@01)
      (and
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@444@01)
          (<=
            q$v@444@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@443@01)
    (and
      (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@444@01)
        (<=
          q$v@444@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@443@01 Int) (q$v@444@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@443@01)
      (and
        (<= 0 q$a@443@01)
        (=>
          (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@444@01) (not (<= 0 q$v@444@01)))))
        (or
          (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@443@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@443@01) (not (<= 0 q$a@443@01)))
    (=>
      (and
        (<= 0 q$a@443@01)
        (and
          (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@444@01)
            (<=
              q$v@444@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@443@01)
        (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@444@01)
        (<=
          q$v@444@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@444@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)) q$a@443@01)))
          (=
            q$v@444@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 3)) q$a@443@01)))))
    (or
      (not
        (and
          (<= 0 q$a@443@01)
          (and
            (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@444@01)
              (<=
                q$v@444@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@443@01)
        (and
          (<= q$a@443@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@444@01)
            (<=
              q$v@444@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@443@01))
    ($SortWrappers.IntTo$Snap q$v@444@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@443@01))
    ($SortWrappers.IntTo$Snap q$v@444@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1000@11@1000@343-aux|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$send_fail@366@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not l$send_fail@366@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | l$send_fail@366@01 | live]
; [else-branch: 93 | !(l$send_fail@366@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 93 | l$send_fail@366@01]
(assert l$send_fail@366@01)
; [exec]
; inhale acc($failed(($struct_get($struct_loc(msg, 0)): Int)), write)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(declare-const $t@445@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 94 | False | dead]
; [else-branch: 94 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 94 | True]
(pop) ; 5
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | True | live]
; [else-branch: 95 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 95 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2)))) | dead]
; [else-branch: 96 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 96 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1)) | live]
; [else-branch: 97 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 97 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(pop) ; 7
(push) ; 7
; [else-branch: 97 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(assert (not (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)))))
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@446@01 $Snap)
(assert (= $t@446@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@376@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@447@01 $Struct)
(assert (=
  self@447@01
  ($struct_set<$Struct> self@355@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@355@01 4))
    l$havoc$6@376@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 6
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@447@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@447@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@448@01 Int)
(declare-const q$v@449@01 Int)
(push) ; 6
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 7
; [then-branch: 98 | !(0 <= q$a@448@01) | live]
; [else-branch: 98 | 0 <= q$a@448@01 | live]
(push) ; 8
; [then-branch: 98 | !(0 <= q$a@448@01)]
(assert (not (<= 0 q$a@448@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 98 | 0 <= q$a@448@01]
(assert (<= 0 q$a@448@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 9
; [then-branch: 99 | !(q$a@448@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 99 | q$a@448@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 10
; [then-branch: 99 | !(q$a@448@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@448@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 10
(push) ; 10
; [else-branch: 99 | q$a@448@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@448@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 11
; [then-branch: 100 | !(0 <= q$v@449@01) | live]
; [else-branch: 100 | 0 <= q$v@449@01 | live]
(push) ; 12
; [then-branch: 100 | !(0 <= q$v@449@01)]
(assert (not (<= 0 q$v@449@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 100 | 0 <= q$v@449@01]
(assert (<= 0 q$v@449@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@449@01) (not (<= 0 q$v@449@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@449@01) (not (<= 0 q$v@449@01))))))
(assert (or
  (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@448@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@448@01)
  (and
    (<= 0 q$a@448@01)
    (=>
      (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@449@01) (not (<= 0 q$v@449@01)))))
    (or
      (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@448@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@448@01) (not (<= 0 q$a@448@01))))
(push) ; 7
; [then-branch: 101 | 0 <= q$a@448@01 && q$a@448@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@449@01 && q$v@449@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 101 | !(0 <= q$a@448@01 && q$a@448@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@449@01 && q$v@449@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 8
; [then-branch: 101 | 0 <= q$a@448@01 && q$a@448@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@449@01 && q$v@449@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@448@01)
  (and
    (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@449@01)
      (<=
        q$v@449@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 9
; [then-branch: 102 | q$v@449@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@447@01, 3)), q$a@448@01) | live]
; [else-branch: 102 | q$v@449@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@447@01, 3)), q$a@448@01) | live]
(push) ; 10
; [then-branch: 102 | q$v@449@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@447@01, 3)), q$a@448@01)]
(assert (=
  q$v@449@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)) q$a@448@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 102 | q$v@449@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@447@01, 3)), q$a@448@01)]
(assert (not
  (=
    q$v@449@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)) q$a@448@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@449@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)) q$a@448@01)))
  (=
    q$v@449@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)) q$a@448@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 101 | !(0 <= q$a@448@01 && q$a@448@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@449@01 && q$v@449@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@448@01)
    (and
      (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@449@01)
        (<=
          q$v@449@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@448@01)
    (and
      (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@449@01)
        (<=
          q$v@449@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@448@01)
    (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@449@01)
    (<=
      q$v@449@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@449@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)) q$a@448@01)))
      (=
        q$v@449@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)) q$a@448@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@448@01)
      (and
        (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@449@01)
          (<=
            q$v@449@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@448@01)
    (and
      (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@449@01)
        (<=
          q$v@449@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@448@01 Int) (q$v@449@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@448@01)
      (and
        (<= 0 q$a@448@01)
        (=>
          (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@449@01) (not (<= 0 q$v@449@01)))))
        (or
          (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@448@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@448@01) (not (<= 0 q$a@448@01)))
    (=>
      (and
        (<= 0 q$a@448@01)
        (and
          (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@449@01)
            (<=
              q$v@449@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@448@01)
        (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@449@01)
        (<=
          q$v@449@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@449@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)) q$a@448@01)))
          (=
            q$v@449@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@447@01 3)) q$a@448@01)))))
    (or
      (not
        (and
          (<= 0 q$a@448@01)
          (and
            (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@449@01)
              (<=
                q$v@449@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@448@01)
        (and
          (<= q$a@448@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@449@01)
            (<=
              q$v@449@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@448@01))
    ($SortWrappers.IntTo$Snap q$v@449@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@448@01))
    ($SortWrappers.IntTo$Snap q$v@449@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1089@11@1089@343-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@450@01 Int)
(push) ; 6
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@451@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef23|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef24|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@450@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@450@01))))
(push) ; 7
; [then-branch: 103 | PredicatePermLookup($accessible$withdraw, pm@451@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@450@01)) > Z | live]
; [else-branch: 103 | !(PredicatePermLookup($accessible$withdraw, pm@451@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@450@01)) > Z) | live]
(push) ; 8
; [then-branch: 103 | PredicatePermLookup($accessible$withdraw, pm@451@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@450@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@450@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 9
; [then-branch: 104 | False | dead]
; [else-branch: 104 | True | live]
(push) ; 10
; [else-branch: 104 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 105 | False | live]
; [else-branch: 105 | True | live]
(push) ; 10
; [then-branch: 105 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 105 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 11
; [then-branch: 106 | False | dead]
; [else-branch: 106 | True | live]
(push) ; 12
; [else-branch: 106 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 103 | !(PredicatePermLookup($accessible$withdraw, pm@451@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@450@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@450@01)))
    $Perm.No)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@450@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@450@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef23|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@450@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@450@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@450@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 1)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
            ($SortWrappers.IntTo$Snap $a@450@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@451@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
          ($SortWrappers.IntTo$Snap $a@450@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@450@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@450@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527-aux|)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 93 | !(l$send_fail@366@01)]
(assert (not l$send_fail@366@01))
(pop) ; 4
; [eval] !l$send_fail
(push) ; 4
(set-option :timeout 10)
(assert (not l$send_fail@366@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not l$send_fail@366@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 107 | !(l$send_fail@366@01) | live]
; [else-branch: 107 | l$send_fail@366@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 107 | !(l$send_fail@366@01)]
(assert (not l$send_fail@366@01))
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; i0$$pre_self := self
; [exec]
; i0$$pre_$contracts := $contracts
; [exec]
; $contracts := l$havoc$1
; [exec]
; $old_$contracts := $contracts
; [exec]
; self := l$havoc$2
; [exec]
; $contracts := l$havoc$3
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@452@01 $Snap)
(assert (= $t@452@01 ($Snap.combine ($Snap.first $t@452@01) ($Snap.second $t@452@01))))
(assert (= ($Snap.first $t@452@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 0))))
(assert (= ($Snap.second $t@452@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@453@01 $Snap)
(assert (= $t@453@01 ($Snap.combine ($Snap.first $t@453@01) ($Snap.second $t@453@01))))
(assert (= ($Snap.first $t@453@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1))))
(assert (= ($Snap.second $t@453@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 ($Snap.combine ($Snap.first $t@454@01) ($Snap.second $t@454@01))))
(assert (= ($Snap.first $t@454@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) 0))))
(assert (= ($Snap.second $t@454@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@455@01 $Snap)
(assert (= $t@455@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 ($Snap.combine ($Snap.first $t@456@01) ($Snap.second $t@456@01))))
(assert (= ($Snap.first $t@456@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) 2))))
(assert (= ($Snap.second $t@456@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@457@01 $Snap)
(assert (= $t@457@01 ($Snap.combine ($Snap.first $t@457@01) ($Snap.second $t@457@01))))
(assert (= ($Snap.first $t@457@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) 3))))
(assert (= ($Snap.second $t@457@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@459@01 $Snap)
(assert (= $t@459@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@460@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 108 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 3)), $q1@460@01)) | live]
; [else-branch: 108 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 3)), $q1@460@01) | live]
(push) ; 7
; [then-branch: 108 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 3)), $q1@460@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 108 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 3)), $q1@460@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@460@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1028@11@1028@345-aux|)))
(assert (forall (($q1@460@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@460@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1028@11@1028@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@461@01 $Snap)
(assert (= $t@461@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q1@462@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@462@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@462@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) $q1@462@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1029@11@1029@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@463@01 $Snap)
(assert (= $t@463@01 ($Snap.combine ($Snap.first $t@463@01) ($Snap.second $t@463@01))))
(assert (= ($Snap.first $t@463@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 4))))
(assert (= ($Snap.second $t@463@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@464@01 $Snap)
(assert (= $t@464@01 ($Snap.combine ($Snap.first $t@464@01) ($Snap.second $t@464@01))))
(assert (= ($Snap.first $t@464@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 5))))
(assert (= ($Snap.second $t@464@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@465@01 $Snap)
(assert (= $t@465@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@466@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 6
; [then-branch: 109 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 7)), $q2@466@01)) | live]
; [else-branch: 109 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 7)), $q2@466@01) | live]
(push) ; 7
; [then-branch: 109 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 7)), $q2@466@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 109 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 7)), $q2@466@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@466@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1032@11@1032@345-aux|)))
(assert (forall (($q2@466@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@466@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1032@11@1032@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q2@468@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@468@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@468@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $q2@468@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1033@11@1033@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@470@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 6
; [then-branch: 110 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 8)), $q3@470@01)) | live]
; [else-branch: 110 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 8)), $q3@470@01) | live]
(push) ; 7
; [then-branch: 110 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 8)), $q3@470@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 110 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 8)), $q3@470@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@470@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1034@11@1034@345-aux|)))
(assert (forall (($q3@470@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@470@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1034@11@1034@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@472@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@472@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@472@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 8)) $q3@472@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1035@11@1035@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@473@01 $Snap)
(assert (= $t@473@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@475@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc($old_self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($old_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($old_self, 7)
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@475@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $a@475@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@430@01 7)) $a@475@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 7)) $a@475@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1038@11@1038@259|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 $Snap.unit))
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@478@01 Int)
(declare-const q$v@479@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 111 | !(0 <= q$a@478@01) | live]
; [else-branch: 111 | 0 <= q$a@478@01 | live]
(push) ; 7
; [then-branch: 111 | !(0 <= q$a@478@01)]
(assert (not (<= 0 q$a@478@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 111 | 0 <= q$a@478@01]
(assert (<= 0 q$a@478@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 8
; [then-branch: 112 | !(q$a@478@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 112 | q$a@478@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 9
; [then-branch: 112 | !(q$a@478@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@478@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 9
(push) ; 9
; [else-branch: 112 | q$a@478@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@478@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 10
; [then-branch: 113 | !(0 <= q$v@479@01) | live]
; [else-branch: 113 | 0 <= q$v@479@01 | live]
(push) ; 11
; [then-branch: 113 | !(0 <= q$v@479@01)]
(assert (not (<= 0 q$v@479@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 113 | 0 <= q$v@479@01]
(assert (<= 0 q$v@479@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@479@01) (not (<= 0 q$v@479@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@479@01) (not (<= 0 q$v@479@01))))))
(assert (or
  (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@478@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@478@01)
  (and
    (<= 0 q$a@478@01)
    (=>
      (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@479@01) (not (<= 0 q$v@479@01)))))
    (or
      (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@478@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@478@01) (not (<= 0 q$a@478@01))))
(push) ; 6
; [then-branch: 114 | 0 <= q$a@478@01 && q$a@478@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@479@01 && q$v@479@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 114 | !(0 <= q$a@478@01 && q$a@478@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@479@01 && q$v@479@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 114 | 0 <= q$a@478@01 && q$a@478@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@479@01 && q$v@479@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@478@01)
  (and
    (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@479@01)
      (<=
        q$v@479@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
; [then-branch: 115 | q$v@479@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 3)), q$a@478@01) | live]
; [else-branch: 115 | q$v@479@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 3)), q$a@478@01) | live]
(push) ; 9
; [then-branch: 115 | q$v@479@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 3)), q$a@478@01)]
(assert (=
  q$v@479@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) q$a@478@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 115 | q$v@479@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](l$havoc$2@370@01, 3)), q$a@478@01)]
(assert (not
  (=
    q$v@479@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) q$a@478@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@479@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) q$a@478@01)))
  (=
    q$v@479@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) q$a@478@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 114 | !(0 <= q$a@478@01 && q$a@478@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@479@01 && q$v@479@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@478@01)
    (and
      (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@479@01)
        (<=
          q$v@479@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@478@01)
    (and
      (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@479@01)
        (<=
          q$v@479@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@478@01)
    (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@479@01)
    (<=
      q$v@479@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@479@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) q$a@478@01)))
      (=
        q$v@479@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) q$a@478@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@478@01)
      (and
        (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@479@01)
          (<=
            q$v@479@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@478@01)
    (and
      (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@479@01)
        (<=
          q$v@479@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@478@01 Int) (q$v@479@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@478@01)
      (and
        (<= 0 q$a@478@01)
        (=>
          (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@479@01) (not (<= 0 q$v@479@01)))))
        (or
          (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@478@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@478@01) (not (<= 0 q$a@478@01)))
    (=>
      (and
        (<= 0 q$a@478@01)
        (and
          (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@479@01)
            (<=
              q$v@479@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@478@01)
        (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@479@01)
        (<=
          q$v@479@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@479@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) q$a@478@01)))
          (=
            q$v@479@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> l$havoc$2@370@01 3)) q$a@478@01)))))
    (or
      (not
        (and
          (<= 0 q$a@478@01)
          (and
            (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@479@01)
              (<=
                q$v@479@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@478@01)
        (and
          (<= q$a@478@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@479@01)
            (<=
              q$v@479@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@478@01))
    ($SortWrappers.IntTo$Snap q$v@479@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@478@01))
    ($SortWrappers.IntTo$Snap q$v@479@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1040@11@1040@343-aux|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@372@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not l$no_reentrant_call@372@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | l$no_reentrant_call@372@01 | live]
; [else-branch: 116 | !(l$no_reentrant_call@372@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 116 | l$no_reentrant_call@372@01]
(assert l$no_reentrant_call@372@01)
; [exec]
; self := $old_self
; [exec]
; $contracts := $old_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@375@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@375@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | $out_of_gas@375@01 | live]
; [else-branch: 117 | !($out_of_gas@375@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 117 | $out_of_gas@375@01]
(assert $out_of_gas@375@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 118 | False | dead]
; [else-branch: 118 | True | live]
(push) ; 7
; [else-branch: 118 | True]
(pop) ; 7
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | True | live]
; [else-branch: 119 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 119 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2)))) | dead]
; [else-branch: 120 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 120 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1)) | live]
; [else-branch: 121 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 121 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(pop) ; 9
(push) ; 9
; [else-branch: 121 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)))))
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@480@01 $Snap)
(assert (= $t@480@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@376@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@481@01 $Struct)
(assert (=
  self@481@01
  ($struct_set<$Struct> self@355@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@355@01 4))
    l$havoc$6@376@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@481@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@481@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@482@01 Int)
(declare-const q$v@483@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 122 | !(0 <= q$a@482@01) | live]
; [else-branch: 122 | 0 <= q$a@482@01 | live]
(push) ; 10
; [then-branch: 122 | !(0 <= q$a@482@01)]
(assert (not (<= 0 q$a@482@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 122 | 0 <= q$a@482@01]
(assert (<= 0 q$a@482@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 123 | !(q$a@482@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 123 | q$a@482@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 123 | !(q$a@482@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@482@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 123 | q$a@482@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@482@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 124 | !(0 <= q$v@483@01) | live]
; [else-branch: 124 | 0 <= q$v@483@01 | live]
(push) ; 14
; [then-branch: 124 | !(0 <= q$v@483@01)]
(assert (not (<= 0 q$v@483@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 124 | 0 <= q$v@483@01]
(assert (<= 0 q$v@483@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@483@01) (not (<= 0 q$v@483@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@483@01) (not (<= 0 q$v@483@01))))))
(assert (or
  (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@482@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@482@01)
  (and
    (<= 0 q$a@482@01)
    (=>
      (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@483@01) (not (<= 0 q$v@483@01)))))
    (or
      (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@482@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@482@01) (not (<= 0 q$a@482@01))))
(push) ; 9
; [then-branch: 125 | 0 <= q$a@482@01 && q$a@482@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@483@01 && q$v@483@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 125 | !(0 <= q$a@482@01 && q$a@482@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@483@01 && q$v@483@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 125 | 0 <= q$a@482@01 && q$a@482@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@483@01 && q$v@483@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@482@01)
  (and
    (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@483@01)
      (<=
        q$v@483@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 126 | q$v@483@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@481@01, 3)), q$a@482@01) | live]
; [else-branch: 126 | q$v@483@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@481@01, 3)), q$a@482@01) | live]
(push) ; 12
; [then-branch: 126 | q$v@483@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@481@01, 3)), q$a@482@01)]
(assert (=
  q$v@483@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)) q$a@482@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 126 | q$v@483@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@481@01, 3)), q$a@482@01)]
(assert (not
  (=
    q$v@483@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)) q$a@482@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@483@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)) q$a@482@01)))
  (=
    q$v@483@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)) q$a@482@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 125 | !(0 <= q$a@482@01 && q$a@482@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@483@01 && q$v@483@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@482@01)
    (and
      (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@483@01)
        (<=
          q$v@483@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@482@01)
    (and
      (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@483@01)
        (<=
          q$v@483@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@482@01)
    (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@483@01)
    (<=
      q$v@483@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@483@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)) q$a@482@01)))
      (=
        q$v@483@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)) q$a@482@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@482@01)
      (and
        (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@483@01)
          (<=
            q$v@483@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@482@01)
    (and
      (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@483@01)
        (<=
          q$v@483@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@482@01 Int) (q$v@483@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@482@01)
      (and
        (<= 0 q$a@482@01)
        (=>
          (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@483@01) (not (<= 0 q$v@483@01)))))
        (or
          (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@482@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@482@01) (not (<= 0 q$a@482@01)))
    (=>
      (and
        (<= 0 q$a@482@01)
        (and
          (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@483@01)
            (<=
              q$v@483@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@482@01)
        (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@483@01)
        (<=
          q$v@483@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@483@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)) q$a@482@01)))
          (=
            q$v@483@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@481@01 3)) q$a@482@01)))))
    (or
      (not
        (and
          (<= 0 q$a@482@01)
          (and
            (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@483@01)
              (<=
                q$v@483@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@482@01)
        (and
          (<= q$a@482@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@483@01)
            (<=
              q$v@483@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@482@01))
    ($SortWrappers.IntTo$Snap q$v@483@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@482@01))
    ($SortWrappers.IntTo$Snap q$v@483@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1089@11@1089@343-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@484@01 Int)
(push) ; 8
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@485@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef25|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef26|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@484@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@484@01))))
(push) ; 9
; [then-branch: 127 | PredicatePermLookup($accessible$withdraw, pm@485@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@484@01)) > Z | live]
; [else-branch: 127 | !(PredicatePermLookup($accessible$withdraw, pm@485@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@484@01)) > Z) | live]
(push) ; 10
; [then-branch: 127 | PredicatePermLookup($accessible$withdraw, pm@485@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@484@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@484@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 128 | False | live]
; [else-branch: 128 | True | live]
(push) ; 12
; [then-branch: 128 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 128 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 129 | !($out_of_gas@375@01) | dead]
; [else-branch: 129 | $out_of_gas@375@01 | live]
(push) ; 12
; [else-branch: 129 | $out_of_gas@375@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 130 | False | live]
; [else-branch: 130 | True | live]
(push) ; 12
; [then-branch: 130 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 130 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
; [then-branch: 131 | False | dead]
; [else-branch: 131 | True | live]
(push) ; 14
; [else-branch: 131 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 127 | !(PredicatePermLookup($accessible$withdraw, pm@485@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@484@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@484@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@484@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@484@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef25|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@484@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@484@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@484@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 1)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
            ($SortWrappers.IntTo$Snap $a@484@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@485@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
          ($SortWrappers.IntTo$Snap $a@484@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@484@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@484@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527-aux|)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 117 | !($out_of_gas@375@01)]
(assert (not $out_of_gas@375@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@375@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@375@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | !($out_of_gas@375@01) | live]
; [else-branch: 132 | $out_of_gas@375@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 132 | !($out_of_gas@375@01)]
(assert (not $out_of_gas@375@01))
; [exec]
; label end
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | True | live]
; [else-branch: 133 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 133 | True]
; [exec]
; assert !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@430@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@430@01, 2)))) | dead]
; [else-branch: 134 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@430@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@430@01, 2))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 134 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@430@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@430@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2))))
; [exec]
; assert ($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@430@01 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@430@01 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@430@01, 1)) | live]
; [else-branch: 135 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@430@01, 1))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 135 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@430@01, 1))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@430@01 1))))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(pop) ; 9
(push) ; 9
; [else-branch: 135 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@430@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@430@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@430@01 1))))
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@430@01 1)))))
(push) ; 8
(assert (not (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@430@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@430@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@430@01 2)))))
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@486@01 $Snap)
(assert (= $t@486@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@376@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@487@01 $Struct)
(assert (=
  self@487@01
  ($struct_set<$Struct> self@430@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@430@01 4))
    l$havoc$6@376@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@487@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@487@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@488@01 Int)
(declare-const q$v@489@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 136 | !(0 <= q$a@488@01) | live]
; [else-branch: 136 | 0 <= q$a@488@01 | live]
(push) ; 10
; [then-branch: 136 | !(0 <= q$a@488@01)]
(assert (not (<= 0 q$a@488@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 136 | 0 <= q$a@488@01]
(assert (<= 0 q$a@488@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 137 | !(q$a@488@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 137 | q$a@488@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 137 | !(q$a@488@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@488@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 137 | q$a@488@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@488@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 138 | !(0 <= q$v@489@01) | live]
; [else-branch: 138 | 0 <= q$v@489@01 | live]
(push) ; 14
; [then-branch: 138 | !(0 <= q$v@489@01)]
(assert (not (<= 0 q$v@489@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 138 | 0 <= q$v@489@01]
(assert (<= 0 q$v@489@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@489@01) (not (<= 0 q$v@489@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@489@01) (not (<= 0 q$v@489@01))))))
(assert (or
  (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@488@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@488@01)
  (and
    (<= 0 q$a@488@01)
    (=>
      (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@489@01) (not (<= 0 q$v@489@01)))))
    (or
      (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@488@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@488@01) (not (<= 0 q$a@488@01))))
(push) ; 9
; [then-branch: 139 | 0 <= q$a@488@01 && q$a@488@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@489@01 && q$v@489@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 139 | !(0 <= q$a@488@01 && q$a@488@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@489@01 && q$v@489@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 139 | 0 <= q$a@488@01 && q$a@488@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@489@01 && q$v@489@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@488@01)
  (and
    (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@489@01)
      (<=
        q$v@489@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 140 | q$v@489@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@487@01, 3)), q$a@488@01) | live]
; [else-branch: 140 | q$v@489@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@487@01, 3)), q$a@488@01) | live]
(push) ; 12
; [then-branch: 140 | q$v@489@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@487@01, 3)), q$a@488@01)]
(assert (=
  q$v@489@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)) q$a@488@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 140 | q$v@489@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@487@01, 3)), q$a@488@01)]
(assert (not
  (=
    q$v@489@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)) q$a@488@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@489@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)) q$a@488@01)))
  (=
    q$v@489@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)) q$a@488@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 139 | !(0 <= q$a@488@01 && q$a@488@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@489@01 && q$v@489@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@488@01)
    (and
      (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@489@01)
        (<=
          q$v@489@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@488@01)
    (and
      (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@489@01)
        (<=
          q$v@489@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@488@01)
    (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@489@01)
    (<=
      q$v@489@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@489@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)) q$a@488@01)))
      (=
        q$v@489@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)) q$a@488@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@488@01)
      (and
        (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@489@01)
          (<=
            q$v@489@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@488@01)
    (and
      (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@489@01)
        (<=
          q$v@489@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@488@01 Int) (q$v@489@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@488@01)
      (and
        (<= 0 q$a@488@01)
        (=>
          (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@489@01) (not (<= 0 q$v@489@01)))))
        (or
          (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@488@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@488@01) (not (<= 0 q$a@488@01)))
    (=>
      (and
        (<= 0 q$a@488@01)
        (and
          (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@489@01)
            (<=
              q$v@489@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@488@01)
        (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@489@01)
        (<=
          q$v@489@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@489@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)) q$a@488@01)))
          (=
            q$v@489@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 3)) q$a@488@01)))))
    (or
      (not
        (and
          (<= 0 q$a@488@01)
          (and
            (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@489@01)
              (<=
                q$v@489@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@488@01)
        (and
          (<= q$a@488@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@489@01)
            (<=
              q$v@489@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@488@01))
    ($SortWrappers.IntTo$Snap q$v@489@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@488@01))
    ($SortWrappers.IntTo$Snap q$v@489@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1089@11@1089@343-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@490@01 Int)
(push) ; 8
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@491@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef27|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef28|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@490@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@490@01))))
(push) ; 9
; [then-branch: 141 | PredicatePermLookup($accessible$withdraw, pm@491@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@490@01)) > Z | live]
; [else-branch: 141 | !(PredicatePermLookup($accessible$withdraw, pm@491@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@490@01)) > Z) | live]
(push) ; 10
; [then-branch: 141 | PredicatePermLookup($accessible$withdraw, pm@491@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@490@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@490@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 142 | False | live]
; [else-branch: 142 | True | live]
(push) ; 12
; [then-branch: 142 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 142 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@375@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | !($out_of_gas@375@01) | live]
; [else-branch: 143 | $out_of_gas@375@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 143 | !($out_of_gas@375@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 144 | False | live]
; [else-branch: 144 | True | live]
(push) ; 12
; [then-branch: 144 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 144 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | True | live]
; [else-branch: 145 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 145 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 141 | !(PredicatePermLookup($accessible$withdraw, pm@491@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@490@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@490@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@490@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@490@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef27|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef28|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@490@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@490@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@490@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 1)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
            ($SortWrappers.IntTo$Snap $a@490@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
          ($SortWrappers.IntTo$Snap $a@490@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@490@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@490@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527-aux|)))
(push) ; 8
(assert (not (forall (($a@490@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@490@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      $a@490@01))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@490@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@490@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall (($a@490@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$withdraw (as pm@491@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@490@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@487@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      $a@490@01))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@490@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@490@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527|)))
(pop) ; 7
; [eval] !$succ
; [then-branch: 146 | False | dead]
; [else-branch: 146 | True | live]
(push) ; 7
; [else-branch: 146 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 132 | $out_of_gas@375@01]
(assert $out_of_gas@375@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 116 | !(l$no_reentrant_call@372@01)]
(assert (not l$no_reentrant_call@372@01))
(pop) ; 5
; [eval] !l$no_reentrant_call
(push) ; 5
(set-option :timeout 10)
(assert (not l$no_reentrant_call@372@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not l$no_reentrant_call@372@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 147 | !(l$no_reentrant_call@372@01) | live]
; [else-branch: 147 | l$no_reentrant_call@372@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 147 | !(l$no_reentrant_call@372@01)]
(assert (not l$no_reentrant_call@372@01))
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$4
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_$contracts := $contracts
; [exec]
; $contracts := l$havoc$5
; [exec]
; $old_$contracts := i0$$pre_$contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; label return
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@375@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@375@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | $out_of_gas@375@01 | live]
; [else-branch: 148 | !($out_of_gas@375@01) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 148 | $out_of_gas@375@01]
(assert $out_of_gas@375@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 149 | False | dead]
; [else-branch: 149 | True | live]
(push) ; 7
; [else-branch: 149 | True]
(pop) ; 7
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | True | live]
; [else-branch: 150 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 150 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2)))) | dead]
; [else-branch: 151 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 151 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@355@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@355@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1)) | live]
; [else-branch: 152 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 152 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@355@01 1))))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(pop) ; 9
(push) ; 9
; [else-branch: 152 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](self@355@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(assert (not (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@355@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@355@01 2)))))
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@492@01 $Snap)
(assert (= $t@492@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@376@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@493@01 $Struct)
(assert (=
  self@493@01
  ($struct_set<$Struct> self@355@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@355@01 4))
    l$havoc$6@376@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@493@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@493@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@494@01 Int)
(declare-const q$v@495@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 153 | !(0 <= q$a@494@01) | live]
; [else-branch: 153 | 0 <= q$a@494@01 | live]
(push) ; 10
; [then-branch: 153 | !(0 <= q$a@494@01)]
(assert (not (<= 0 q$a@494@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 153 | 0 <= q$a@494@01]
(assert (<= 0 q$a@494@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 154 | !(q$a@494@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 154 | q$a@494@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 154 | !(q$a@494@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@494@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 154 | q$a@494@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@494@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 155 | !(0 <= q$v@495@01) | live]
; [else-branch: 155 | 0 <= q$v@495@01 | live]
(push) ; 14
; [then-branch: 155 | !(0 <= q$v@495@01)]
(assert (not (<= 0 q$v@495@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 155 | 0 <= q$v@495@01]
(assert (<= 0 q$v@495@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@495@01) (not (<= 0 q$v@495@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@495@01) (not (<= 0 q$v@495@01))))))
(assert (or
  (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@494@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@494@01)
  (and
    (<= 0 q$a@494@01)
    (=>
      (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@495@01) (not (<= 0 q$v@495@01)))))
    (or
      (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@494@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@494@01) (not (<= 0 q$a@494@01))))
(push) ; 9
; [then-branch: 156 | 0 <= q$a@494@01 && q$a@494@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@495@01 && q$v@495@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 156 | !(0 <= q$a@494@01 && q$a@494@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@495@01 && q$v@495@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 156 | 0 <= q$a@494@01 && q$a@494@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@495@01 && q$v@495@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@494@01)
  (and
    (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@495@01)
      (<=
        q$v@495@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 157 | q$v@495@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@493@01, 3)), q$a@494@01) | live]
; [else-branch: 157 | q$v@495@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@493@01, 3)), q$a@494@01) | live]
(push) ; 12
; [then-branch: 157 | q$v@495@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@493@01, 3)), q$a@494@01)]
(assert (=
  q$v@495@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)) q$a@494@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 157 | q$v@495@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@493@01, 3)), q$a@494@01)]
(assert (not
  (=
    q$v@495@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)) q$a@494@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@495@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)) q$a@494@01)))
  (=
    q$v@495@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)) q$a@494@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 156 | !(0 <= q$a@494@01 && q$a@494@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@495@01 && q$v@495@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@494@01)
    (and
      (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@495@01)
        (<=
          q$v@495@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@494@01)
    (and
      (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@495@01)
        (<=
          q$v@495@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@494@01)
    (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@495@01)
    (<=
      q$v@495@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@495@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)) q$a@494@01)))
      (=
        q$v@495@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)) q$a@494@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@494@01)
      (and
        (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@495@01)
          (<=
            q$v@495@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@494@01)
    (and
      (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@495@01)
        (<=
          q$v@495@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@494@01 Int) (q$v@495@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@494@01)
      (and
        (<= 0 q$a@494@01)
        (=>
          (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@495@01) (not (<= 0 q$v@495@01)))))
        (or
          (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@494@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@494@01) (not (<= 0 q$a@494@01)))
    (=>
      (and
        (<= 0 q$a@494@01)
        (and
          (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@495@01)
            (<=
              q$v@495@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@494@01)
        (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@495@01)
        (<=
          q$v@495@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@495@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)) q$a@494@01)))
          (=
            q$v@495@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@493@01 3)) q$a@494@01)))))
    (or
      (not
        (and
          (<= 0 q$a@494@01)
          (and
            (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@495@01)
              (<=
                q$v@495@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@494@01)
        (and
          (<= q$a@494@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@495@01)
            (<=
              q$v@495@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@494@01))
    ($SortWrappers.IntTo$Snap q$v@495@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@494@01))
    ($SortWrappers.IntTo$Snap q$v@495@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1089@11@1089@343-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@496@01 Int)
(push) ; 8
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@497@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef29|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef30|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@496@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@496@01))))
(push) ; 9
; [then-branch: 158 | PredicatePermLookup($accessible$withdraw, pm@497@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@496@01)) > Z | live]
; [else-branch: 158 | !(PredicatePermLookup($accessible$withdraw, pm@497@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@496@01)) > Z) | live]
(push) ; 10
; [then-branch: 158 | PredicatePermLookup($accessible$withdraw, pm@497@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@496@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@496@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 159 | False | live]
; [else-branch: 159 | True | live]
(push) ; 12
; [then-branch: 159 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 159 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 160 | !($out_of_gas@375@01) | dead]
; [else-branch: 160 | $out_of_gas@375@01 | live]
(push) ; 12
; [else-branch: 160 | $out_of_gas@375@01]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 161 | False | live]
; [else-branch: 161 | True | live]
(push) ; 12
; [then-branch: 161 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 161 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
; [then-branch: 162 | False | dead]
; [else-branch: 162 | True | live]
(push) ; 14
; [else-branch: 162 | True]
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 158 | !(PredicatePermLookup($accessible$withdraw, pm@497@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@496@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@496@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@496@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@496@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef29|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef30|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@496@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@496@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@496@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 1)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
            ($SortWrappers.IntTo$Snap $a@496@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@497@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
          ($SortWrappers.IntTo$Snap $a@496@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@496@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@496@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527-aux|)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 148 | !($out_of_gas@375@01)]
(assert (not $out_of_gas@375@01))
(pop) ; 6
; [eval] !$out_of_gas
(push) ; 6
(set-option :timeout 10)
(assert (not $out_of_gas@375@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $out_of_gas@375@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | !($out_of_gas@375@01) | live]
; [else-branch: 163 | $out_of_gas@375@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 163 | !($out_of_gas@375@01)]
(assert (not $out_of_gas@375@01))
; [exec]
; label end
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | True | live]
; [else-branch: 164 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 164 | True]
; [exec]
; assert !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](l$havoc$2@370@01, 2)), $struct_get[$Struct]($struct_loc[Int](l$havoc$2@370@01, 2)))) | dead]
; [else-branch: 165 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](l$havoc$2@370@01, 2)), $struct_get[$Struct]($struct_loc[Int](l$havoc$2@370@01, 2))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 165 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](l$havoc$2@370@01, 2)), $struct_get[$Struct]($struct_loc[Int](l$havoc$2@370@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2))))
; [exec]
; assert ($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](l$havoc$2@370@01, 1)) | live]
; [else-branch: 166 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](l$havoc$2@370@01, 1))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 166 | $struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](l$havoc$2@370@01, 1))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
  ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1))))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(pop) ; 9
(push) ; 9
; [else-branch: 166 | !($struct_get[Int]($struct_loc[Int](msg@351@01, 1)) < $struct_get[Int]($struct_loc[Int](l$havoc$2@370@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
      ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1))))
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1)))))
(push) ; 8
(assert (not (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@351@01 1))
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)) ($struct_get<$Struct> ($struct_loc<Int> l$havoc$2@370@01 2)))))
; [exec]
; inhale l$havoc$6 >= 0
(declare-const $t@498@01 $Snap)
(assert (= $t@498@01 $Snap.unit))
; [eval] l$havoc$6 >= 0
(assert (>= l$havoc$6@376@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc$6): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc$6
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@499@01 $Struct)
(assert (=
  self@499@01
  ($struct_set<$Struct> l$havoc$2@370@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> l$havoc$2@370@01 4))
    l$havoc$6@376@01))))
; [exec]
; $contracts := l$havoc$7
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 8
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@499@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@499@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@500@01 Int)
(declare-const q$v@501@01 Int)
(push) ; 8
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 9
; [then-branch: 167 | !(0 <= q$a@500@01) | live]
; [else-branch: 167 | 0 <= q$a@500@01 | live]
(push) ; 10
; [then-branch: 167 | !(0 <= q$a@500@01)]
(assert (not (<= 0 q$a@500@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 167 | 0 <= q$a@500@01]
(assert (<= 0 q$a@500@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 11
; [then-branch: 168 | !(q$a@500@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 168 | q$a@500@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 12
; [then-branch: 168 | !(q$a@500@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@500@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 12
(push) ; 12
; [else-branch: 168 | q$a@500@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@500@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 13
; [then-branch: 169 | !(0 <= q$v@501@01) | live]
; [else-branch: 169 | 0 <= q$v@501@01 | live]
(push) ; 14
; [then-branch: 169 | !(0 <= q$v@501@01)]
(assert (not (<= 0 q$v@501@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 169 | 0 <= q$v@501@01]
(assert (<= 0 q$v@501@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@501@01) (not (<= 0 q$v@501@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@501@01) (not (<= 0 q$v@501@01))))))
(assert (or
  (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@500@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@500@01)
  (and
    (<= 0 q$a@500@01)
    (=>
      (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@501@01) (not (<= 0 q$v@501@01)))))
    (or
      (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@500@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@500@01) (not (<= 0 q$a@500@01))))
(push) ; 9
; [then-branch: 170 | 0 <= q$a@500@01 && q$a@500@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@501@01 && q$v@501@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 170 | !(0 <= q$a@500@01 && q$a@500@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@501@01 && q$v@501@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 10
; [then-branch: 170 | 0 <= q$a@500@01 && q$a@500@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@501@01 && q$v@501@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@500@01)
  (and
    (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@501@01)
      (<=
        q$v@501@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 11
; [then-branch: 171 | q$v@501@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@499@01, 3)), q$a@500@01) | live]
; [else-branch: 171 | q$v@501@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@499@01, 3)), q$a@500@01) | live]
(push) ; 12
; [then-branch: 171 | q$v@501@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@499@01, 3)), q$a@500@01)]
(assert (=
  q$v@501@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)) q$a@500@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 171 | q$v@501@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@499@01, 3)), q$a@500@01)]
(assert (not
  (=
    q$v@501@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)) q$a@500@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@501@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)) q$a@500@01)))
  (=
    q$v@501@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)) q$a@500@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 170 | !(0 <= q$a@500@01 && q$a@500@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@501@01 && q$v@501@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@500@01)
    (and
      (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@501@01)
        (<=
          q$v@501@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@500@01)
    (and
      (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@501@01)
        (<=
          q$v@501@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@500@01)
    (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@501@01)
    (<=
      q$v@501@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@501@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)) q$a@500@01)))
      (=
        q$v@501@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)) q$a@500@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@500@01)
      (and
        (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@501@01)
          (<=
            q$v@501@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@500@01)
    (and
      (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@501@01)
        (<=
          q$v@501@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
; Definitional axioms for snapshot map values
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@500@01 Int) (q$v@501@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@500@01)
      (and
        (<= 0 q$a@500@01)
        (=>
          (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@501@01) (not (<= 0 q$v@501@01)))))
        (or
          (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@500@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@500@01) (not (<= 0 q$a@500@01)))
    (=>
      (and
        (<= 0 q$a@500@01)
        (and
          (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@501@01)
            (<=
              q$v@501@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@500@01)
        (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@501@01)
        (<=
          q$v@501@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@501@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)) q$a@500@01)))
          (=
            q$v@501@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 3)) q$a@500@01)))))
    (or
      (not
        (and
          (<= 0 q$a@500@01)
          (and
            (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@501@01)
              (<=
                q$v@501@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@500@01)
        (and
          (<= q$a@500@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@501@01)
            (<=
              q$v@501@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@500@01))
    ($SortWrappers.IntTo$Snap q$v@501@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@500@01))
    ($SortWrappers.IntTo$Snap q$v@501@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1089@11@1089@343-aux|)))
; [exec]
; assert (forall $a: Int ::
;     { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) }
;     perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) >
;     none ==>
;     (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none ||
;     $out_of_gas) ==>
;     $succ) &&
;     ($succ ==>
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) -
;     ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg,
;     0)): Int)): Int) >=
;     $a))
; [eval] (forall $a: Int :: { $accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a) } perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a))
(declare-const $a@502@01 Int)
(push) ; 8
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none ==> (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a)) > none
; [eval] perm($accessible$withdraw(1, ($struct_get($struct_loc(msg, 0)): Int), $a))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; Definitional axioms for snapshot map values
(declare-const pm@503@01 $PPM)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef31|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef32|)))
(assert ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@502@01))) ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap 1)
    ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
  ($SortWrappers.IntTo$Snap $a@502@01))))
(push) ; 9
; [then-branch: 172 | PredicatePermLookup($accessible$withdraw, pm@503@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@502@01)) > Z | live]
; [else-branch: 172 | !(PredicatePermLookup($accessible$withdraw, pm@503@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@502@01)) > Z) | live]
(push) ; 10
; [then-branch: 172 | PredicatePermLookup($accessible$withdraw, pm@503@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@502@01)) > Z]
(assert (>
  ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@502@01)))
  $Perm.No))
; [eval] (!(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ) && ($succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a)
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas) ==> $succ
; [eval] !(perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas)
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none || $out_of_gas
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int))) > none
; [eval] perm($failed(($struct_get($struct_loc(msg, 0)): Int)))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(push) ; 11
; [then-branch: 173 | False | live]
; [else-branch: 173 | True | live]
(push) ; 12
; [then-branch: 173 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 173 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not $out_of_gas@375@01))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | !($out_of_gas@375@01) | live]
; [else-branch: 174 | $out_of_gas@375@01 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 174 | !($out_of_gas@375@01)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 175 | False | live]
; [else-branch: 175 | True | live]
(push) ; 12
; [then-branch: 175 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 175 | True]
; [eval] $succ ==> ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | True | live]
; [else-branch: 176 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 176 | True]
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) >= $a
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) - ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 7)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 7)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 172 | !(PredicatePermLookup($accessible$withdraw, pm@503@01, List(1, $struct_get[Int]($struct_loc[Int](msg@351@01, 0)), $a@502@01)) > Z)]
(assert (not
  (>
    ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@502@01)))
    $Perm.No)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@502@01)))
      $Perm.No))
  (>
    ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@502@01)))
    $Perm.No)))
; Definitional axioms for snapshot map values
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (=
    ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    (ite
      (and
        (and (img@421@01 $tag $to $amount) (img@423@01 $tag $to $amount))
        (and
          (<= 0 (inv@420@01 $tag $to $amount))
          (and
            (<=
              (inv@420@01 $tag $to $amount)
              1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 (inv@422@01 $tag $to $amount))
              (and
                (<=
                  (inv@422@01 $tag $to $amount)
                  115792089237316195423570985008687907853269984665640564039457584007913129639935)
                (=
                  (inv@422@01 $tag $to $amount)
                  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 3)) (inv@420@01 $tag $to $amount))))))))
      $Perm.Write
      $Perm.No))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resPrmSumDef31|)))
(assert (forall (($tag Int) ($to Int) ($amount Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount)))
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw ($SortWrappers.$SnapTo$PSF<$accessible$withdraw> ($Snap.second $t@415@01)) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $tag)
        ($SortWrappers.IntTo$Snap $to))
      ($SortWrappers.IntTo$Snap $amount))))
  :pattern (($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap $tag)
      ($SortWrappers.IntTo$Snap $to))
    ($SortWrappers.IntTo$Snap $amount))))
  :qid |qp.resTrgDef32|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@502@01 Int)) (!
  (and
    ($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@502@01))) ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap 1)
        ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      ($SortWrappers.IntTo$Snap $a@502@01)))
    (or
      (not
        (>
          ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
            ($Snap.combine
              ($SortWrappers.IntTo$Snap 1)
              ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
            ($SortWrappers.IntTo$Snap $a@502@01)))
          $Perm.No))
      (>
        ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
          ($Snap.combine
            ($SortWrappers.IntTo$Snap 1)
            ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
          ($SortWrappers.IntTo$Snap $a@502@01)))
        $Perm.No)))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@502@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@502@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527-aux|)))
(push) ; 8
(assert (not (forall (($a@502@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@502@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      $a@502@01))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@502@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@502@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall (($a@502@01 Int)) (!
  (=>
    (>
      ($PSF.perm_$accessible$withdraw (as pm@503@01  $PPM) ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap 1)
          ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
        ($SortWrappers.IntTo$Snap $a@502@01)))
      $Perm.No)
    (>=
      (-
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@499@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0)))
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@355@01 7)) ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
      $a@502@01))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@424@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@502@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap ($struct_get<Int> ($struct_loc<Int> msg@351@01 0))))
    ($SortWrappers.IntTo$Snap $a@502@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1091@11@1091@527|)))
(pop) ; 7
; [eval] !$succ
; [then-branch: 177 | False | dead]
; [else-branch: 177 | True | live]
(push) ; 7
; [else-branch: 177 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 163 | $out_of_gas@375@01]
(assert $out_of_gas@375@01)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 147 | l$no_reentrant_call@372@01]
(assert l$no_reentrant_call@372@01)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 107 | l$send_fail@366@01]
(assert l$send_fail@366@01)
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$claim_throne ----------
(declare-const l$name@504@01 Seq<Int>)
(declare-const $succ@505@01 Bool)
(declare-const l$name@506@01 Seq<Int>)
(declare-const $succ@507@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@508@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@509@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@510@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@511@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@512@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@513@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@514@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@515@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@516@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@517@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@518@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@519@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@520@01 Bool)
; [exec]
; var l$value_paid: $Int
(declare-const l$value_paid@521@01 $Int)
; [exec]
; var l$wizard_commission: $Int
(declare-const l$wizard_commission@522@01 $Int)
; [exec]
; var l$compensation: $Int
(declare-const l$compensation@523@01 $Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@524@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@525@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@526@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@527@01 $Snap)
(assert (= $t@527@01 ($Snap.combine ($Snap.first $t@527@01) ($Snap.second $t@527@01))))
(assert (= ($Snap.first $t@527@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@512@01 0))))
(assert (= ($Snap.second $t@527@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@512@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@528@01 $Snap)
(assert (= $t@528@01 ($Snap.combine ($Snap.first $t@528@01) ($Snap.second $t@528@01))))
(assert (= ($Snap.first $t@528@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))
(assert (= ($Snap.second $t@528@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@512@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@529@01 $Snap)
(assert (= $t@529@01 ($Snap.combine ($Snap.first $t@529@01) ($Snap.second $t@529@01))))
(assert (= ($Snap.first $t@529@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) 0))))
(assert (= ($Snap.second $t@529@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   1)): Seq[Int])| <=
;   256
(declare-const $t@530@01 $Snap)
(assert (= $t@530@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])| <= 256
; [eval] |($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])|
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  (Seq_length
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) 1)))
  256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@531@01 $Snap)
(assert (= $t@531@01 ($Snap.combine ($Snap.first $t@531@01) ($Snap.second $t@531@01))))
(assert (= ($Snap.first $t@531@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) 2))))
(assert (= ($Snap.second $t@531@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 2)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <=
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) &&
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@532@01 $Snap)
(assert (= $t@532@01 ($Snap.combine ($Snap.first $t@532@01) ($Snap.second $t@532@01))))
(assert (= ($Snap.first $t@532@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  0
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) 3))))
(assert (= ($Snap.second $t@532@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 3)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) 3))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct),
;   -1)): Int) ==
;   153050483905167055872575060156781585256
(declare-const $t@533@01 $Snap)
(assert (= $t@533@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int) == 153050483905167055872575060156781585256
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), -1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) (- 0 1)))
  153050483905167055872575060156781585256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@534@01 $Snap)
(assert (= $t@534@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@535@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 178 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 3)), $q1@535@01)) | live]
; [else-branch: 178 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 3)), $q1@535@01) | live]
(push) ; 5
; [then-branch: 178 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 3)), $q1@535@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 178 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 3)), $q1@535@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@535@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1123@11@1123@345-aux|)))
(assert (forall (($q1@535@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@535@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1123@11@1123@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@536@01 $Snap)
(assert (= $t@536@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q1@537@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@537@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@537@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) $q1@537@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1124@11@1124@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 4)): Int) &&
;   ($struct_get($struct_loc(self, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@538@01 $Snap)
(assert (= $t@538@01 ($Snap.combine ($Snap.first $t@538@01) ($Snap.second $t@538@01))))
(assert (= ($Snap.first $t@538@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 4)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@512@01 4))))
(assert (= ($Snap.second $t@538@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@539@01 $Snap)
(assert (= $t@539@01 ($Snap.combine ($Snap.first $t@539@01) ($Snap.second $t@539@01))))
(assert (= ($Snap.first $t@539@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@512@01 5))))
(assert (= ($Snap.second $t@539@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@512@01 5))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@540@01 $Snap)
(assert (= $t@540@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q2@541@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) && ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(push) ; 4
; [then-branch: 179 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 7)), $q2@541@01)) | live]
; [else-branch: 179 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 7)), $q2@541@01) | live]
(push) ; 5
; [then-branch: 179 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 7)), $q2@541@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 179 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 7)), $q2@541@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@541@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1127@11@1127@345-aux|)))
(assert (forall (($q2@541@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@541@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1127@11@1127@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q2: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $t@542@01 $Snap)
(assert (= $t@542@01 $Snap.unit))
; [eval] (forall $q2: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int))
(declare-const $q2@543@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int) <= ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $q2): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_sum(($struct_get($struct_loc(self, 7)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@543@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@543@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 7)) $q2@543@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1128@11@1128@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@544@01 $Snap)
(assert (= $t@544@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q3@545@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 180 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 8)), $q3@545@01)) | live]
; [else-branch: 180 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 8)), $q3@545@01) | live]
(push) ; 5
; [then-branch: 180 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 8)), $q3@545@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 180 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 8)), $q3@545@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@545@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1129@11@1129@345-aux|)))
(assert (forall (($q3@545@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@545@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1129@11@1129@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@546@01 $Snap)
(assert (= $t@546@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q3@547@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q3): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@547@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@547@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 8)) $q3@547@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1130@11@1130@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@548@01 $Snap)
(assert (= $t@548@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@512@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@549@01 $Snap)
(assert (= $t@549@01 ($Snap.combine ($Snap.first $t@549@01) ($Snap.second $t@549@01))))
(assert (= ($Snap.first $t@549@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@549@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |l$name| <= 256
(declare-const $t@550@01 $Snap)
(assert (= $t@550@01 $Snap.unit))
; [eval] |l$name| <= 256
; [eval] |l$name|
(assert (<= (Seq_length l$name@506@01) 256))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@551@01 $Snap)
(assert (= $t@551@01 ($Snap.combine ($Snap.first $t@551@01) ($Snap.second $t@551@01))))
(assert (= ($Snap.first $t@551@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@509@01 0))))
(assert (= ($Snap.second $t@551@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@509@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@552@01 $Snap)
(assert (= $t@552@01 ($Snap.combine ($Snap.first $t@552@01) ($Snap.second $t@552@01))))
(assert (= ($Snap.first $t@552@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@509@01 1))))
(assert (= ($Snap.second $t@552@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@509@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@553@01 $Snap)
(assert (= $t@553@01 ($Snap.combine ($Snap.first $t@553@01) ($Snap.second $t@553@01))))
(assert (= ($Snap.first $t@553@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@509@01 2))))
(assert (= ($Snap.second $t@553@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@509@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@554@01 $Snap)
(assert (= $t@554@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@509@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@555@01 $Snap)
(assert (= $t@555@01 ($Snap.combine ($Snap.first $t@555@01) ($Snap.second $t@555@01))))
(assert (= ($Snap.first $t@555@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@509@01 4))))
(assert (= ($Snap.second $t@555@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@509@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@556@01 $Snap)
(assert (= $t@556@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@509@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@557@01 $Snap)
(assert (= $t@557@01 ($Snap.combine ($Snap.first $t@557@01) ($Snap.second $t@557@01))))
(assert (= ($Snap.first $t@557@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@508@01 0))))
(assert (= ($Snap.second $t@557@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@508@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@558@01 $Snap)
(assert (= $t@558@01 ($Snap.combine ($Snap.first $t@558@01) ($Snap.second $t@558@01))))
(assert (= ($Snap.first $t@558@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))))
(assert (= ($Snap.second $t@558@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@559@01 $Snap)
(assert (= $t@559@01 ($Snap.combine ($Snap.first $t@559@01) ($Snap.second $t@559@01))))
(assert (= ($Snap.first $t@559@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@508@01 2))))
(assert (= ($Snap.second $t@559@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@508@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@508@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@561@01 $Snap)
(assert (= $t@561@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@508@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $t@562@01 $Snap)
(assert (= $t@562@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int))
(declare-const $a@563@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
; [eval] ($map_get(($struct_get($struct_loc(self, 7)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 7)): $Map[Int, Int])
; [eval] $struct_loc(self, 7)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
(declare-const $t@564@01 $Snap)
(assert (= $t@564@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
(declare-const $t@565@01 $Snap)
(assert (= $t@565@01 $Snap.unit))
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@566@01 Int)
(declare-const q$v@567@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 4
; [then-branch: 181 | !(0 <= q$a@566@01) | live]
; [else-branch: 181 | 0 <= q$a@566@01 | live]
(push) ; 5
; [then-branch: 181 | !(0 <= q$a@566@01)]
(assert (not (<= 0 q$a@566@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 181 | 0 <= q$a@566@01]
(assert (<= 0 q$a@566@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 6
; [then-branch: 182 | !(q$a@566@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 182 | q$a@566@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 7
; [then-branch: 182 | !(q$a@566@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@566@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 7
(push) ; 7
; [else-branch: 182 | q$a@566@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@566@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 8
; [then-branch: 183 | !(0 <= q$v@567@01) | live]
; [else-branch: 183 | 0 <= q$v@567@01 | live]
(push) ; 9
; [then-branch: 183 | !(0 <= q$v@567@01)]
(assert (not (<= 0 q$v@567@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 183 | 0 <= q$v@567@01]
(assert (<= 0 q$v@567@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@567@01) (not (<= 0 q$v@567@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@567@01) (not (<= 0 q$v@567@01))))))
(assert (or
  (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@566@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@566@01)
  (and
    (<= 0 q$a@566@01)
    (=>
      (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@567@01) (not (<= 0 q$v@567@01)))))
    (or
      (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@566@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@566@01) (not (<= 0 q$a@566@01))))
(push) ; 4
; [then-branch: 184 | 0 <= q$a@566@01 && q$a@566@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@567@01 && q$v@567@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 184 | !(0 <= q$a@566@01 && q$a@566@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@567@01 && q$v@567@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 5
; [then-branch: 184 | 0 <= q$a@566@01 && q$a@566@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@567@01 && q$v@567@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@566@01)
  (and
    (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@567@01)
      (<=
        q$v@567@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
; [then-branch: 185 | q$v@567@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 3)), q$a@566@01) | live]
; [else-branch: 185 | q$v@567@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 3)), q$a@566@01) | live]
(push) ; 7
; [then-branch: 185 | q$v@567@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 3)), q$a@566@01)]
(assert (=
  q$v@567@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) q$a@566@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 185 | q$v@567@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@512@01, 3)), q$a@566@01)]
(assert (not
  (=
    q$v@567@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) q$a@566@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@567@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) q$a@566@01)))
  (=
    q$v@567@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) q$a@566@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 184 | !(0 <= q$a@566@01 && q$a@566@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@567@01 && q$v@567@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@566@01)
    (and
      (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@567@01)
        (<=
          q$v@567@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@566@01)
    (and
      (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@567@01)
        (<=
          q$v@567@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@566@01)
    (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@567@01)
    (<=
      q$v@567@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@567@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) q$a@566@01)))
      (=
        q$v@567@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) q$a@566@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@566@01)
      (and
        (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@567@01)
          (<=
            q$v@567@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@566@01)
    (and
      (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@567@01)
        (<=
          q$v@567@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@568@01 $PSF<$accessible$withdraw>)
(declare-const s@569@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@566@01 Int) (q$v@567@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@566@01)
      (and
        (<= 0 q$a@566@01)
        (=>
          (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@567@01) (not (<= 0 q$v@567@01)))))
        (or
          (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@566@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@566@01) (not (<= 0 q$a@566@01)))
    (=>
      (and
        (<= 0 q$a@566@01)
        (and
          (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@567@01)
            (<=
              q$v@567@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@566@01)
        (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@567@01)
        (<=
          q$v@567@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@567@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) q$a@566@01)))
          (=
            q$v@567@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@512@01 3)) q$a@566@01)))))
    (or
      (not
        (and
          (<= 0 q$a@566@01)
          (and
            (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@567@01)
              (<=
                q$v@567@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@566@01)
        (and
          (<= q$a@566@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@567@01)
            (<=
              q$v@567@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@568@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@566@01))
    ($SortWrappers.IntTo$Snap q$v@567@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@566@01))
    ($SortWrappers.IntTo$Snap q$v@567@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1152@11@1152@343-aux|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@570@01 $Struct)
(assert (=
  self@570@01
  ($struct_set<$Struct> self@512@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))))))
; [exec]
; self := ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]),
;   ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self,
;   8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) +
;   ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 8, ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int), ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int) + ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), ($struct_get($struct_loc(msg, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const self@571@01 $Struct)
(assert (=
  self@571@01
  ($struct_set<$Struct> self@570@01 8 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@508@01 0)) (+
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@570@01 8)) ($struct_get<Int> ($struct_loc<Int> msg@508@01 0)))
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1)))))))
; [exec]
; l$value_paid := $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] $wrap(($struct_get($struct_loc(msg, 1)): Int))
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(declare-const l$value_paid@572@01 $Int)
(assert (=
  l$value_paid@572@01
  ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> msg@508@01 1)))))
; [eval] !($unwrap(l$value_paid) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] $unwrap(l$value_paid) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] $unwrap(l$value_paid)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($unwrap<Int> l$value_paid@572@01)
  ($struct_get<Int> ($struct_loc<Int> self@571@01 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($unwrap<Int> l$value_paid@572@01)
    ($struct_get<Int> ($struct_loc<Int> self@571@01 1))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | $unwrap[Int](l$value_paid@572@01) != $struct_get[Int]($struct_loc[Int](self@571@01, 1)) | live]
; [else-branch: 186 | $unwrap[Int](l$value_paid@572@01) == $struct_get[Int]($struct_loc[Int](self@571@01, 1)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 186 | $unwrap[Int](l$value_paid@572@01) != $struct_get[Int]($struct_loc[Int](self@571@01, 1))]
(assert (not
  (=
    ($unwrap<Int> l$value_paid@572@01)
    ($struct_get<Int> ($struct_loc<Int> self@571@01 1)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 187 | False | dead]
; [else-branch: 187 | True | live]
(push) ; 4
; [else-branch: 187 | True]
(pop) ; 4
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | True | live]
; [else-branch: 188 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 188 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | dead]
; [else-branch: 189 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 189 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | live]
; [else-branch: 190 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 190 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))]
(assert (<
  ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
  ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(pop) ; 6
(push) ; 6
; [else-branch: 190 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
      ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(push) ; 5
(assert (not (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@573@01 $Snap)
(assert (= $t@573@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@574@01 $Struct)
(assert (=
  self@574@01
  ($struct_set<$Struct> self@512@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@574@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@574@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@575@01 Int)
(declare-const q$v@576@01 Int)
(push) ; 5
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 6
; [then-branch: 191 | !(0 <= q$a@575@01) | live]
; [else-branch: 191 | 0 <= q$a@575@01 | live]
(push) ; 7
; [then-branch: 191 | !(0 <= q$a@575@01)]
(assert (not (<= 0 q$a@575@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 191 | 0 <= q$a@575@01]
(assert (<= 0 q$a@575@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 8
; [then-branch: 192 | !(q$a@575@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 192 | q$a@575@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 9
; [then-branch: 192 | !(q$a@575@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@575@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 9
(push) ; 9
; [else-branch: 192 | q$a@575@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@575@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 10
; [then-branch: 193 | !(0 <= q$v@576@01) | live]
; [else-branch: 193 | 0 <= q$v@576@01 | live]
(push) ; 11
; [then-branch: 193 | !(0 <= q$v@576@01)]
(assert (not (<= 0 q$v@576@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 193 | 0 <= q$v@576@01]
(assert (<= 0 q$v@576@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@576@01) (not (<= 0 q$v@576@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@576@01) (not (<= 0 q$v@576@01))))))
(assert (or
  (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@575@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@575@01)
  (and
    (<= 0 q$a@575@01)
    (=>
      (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@576@01) (not (<= 0 q$v@576@01)))))
    (or
      (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@575@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@575@01) (not (<= 0 q$a@575@01))))
(push) ; 6
; [then-branch: 194 | 0 <= q$a@575@01 && q$a@575@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@576@01 && q$v@576@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 194 | !(0 <= q$a@575@01 && q$a@575@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@576@01 && q$v@576@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 7
; [then-branch: 194 | 0 <= q$a@575@01 && q$a@575@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@576@01 && q$v@576@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@575@01)
  (and
    (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@576@01)
      (<=
        q$v@576@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
; [then-branch: 195 | q$v@576@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@574@01, 3)), q$a@575@01) | live]
; [else-branch: 195 | q$v@576@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@574@01, 3)), q$a@575@01) | live]
(push) ; 9
; [then-branch: 195 | q$v@576@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@574@01, 3)), q$a@575@01)]
(assert (=
  q$v@576@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)) q$a@575@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 195 | q$v@576@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@574@01, 3)), q$a@575@01)]
(assert (not
  (=
    q$v@576@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)) q$a@575@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@576@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)) q$a@575@01)))
  (=
    q$v@576@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)) q$a@575@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 194 | !(0 <= q$a@575@01 && q$a@575@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@576@01 && q$v@576@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@575@01)
    (and
      (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@576@01)
        (<=
          q$v@576@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@575@01)
    (and
      (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@576@01)
        (<=
          q$v@576@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@575@01)
    (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@576@01)
    (<=
      q$v@576@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@576@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)) q$a@575@01)))
      (=
        q$v@576@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)) q$a@575@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@575@01)
      (and
        (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@576@01)
          (<=
            q$v@576@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@575@01)
    (and
      (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@576@01)
        (<=
          q$v@576@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@577@01 $PSF<$accessible$withdraw>)
(declare-const s@578@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@575@01 Int) (q$v@576@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@575@01)
      (and
        (<= 0 q$a@575@01)
        (=>
          (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@576@01) (not (<= 0 q$v@576@01)))))
        (or
          (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@575@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@575@01) (not (<= 0 q$a@575@01)))
    (=>
      (and
        (<= 0 q$a@575@01)
        (and
          (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@576@01)
            (<=
              q$v@576@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@575@01)
        (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@576@01)
        (<=
          q$v@576@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@576@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)) q$a@575@01)))
          (=
            q$v@576@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@574@01 3)) q$a@575@01)))))
    (or
      (not
        (and
          (<= 0 q$a@575@01)
          (and
            (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@576@01)
              (<=
                q$v@576@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@575@01)
        (and
          (<= q$a@575@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@576@01)
            (<=
              q$v@576@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@577@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@575@01))
    ($SortWrappers.IntTo$Snap q$v@576@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@575@01))
    ($SortWrappers.IntTo$Snap q$v@576@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 186 | $unwrap[Int](l$value_paid@572@01) == $struct_get[Int]($struct_loc[Int](self@571@01, 1))]
(assert (=
  ($unwrap<Int> l$value_paid@572@01)
  ($struct_get<Int> ($struct_loc<Int> self@571@01 1))))
(pop) ; 3
; [eval] !!($unwrap(l$value_paid) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] !($unwrap(l$value_paid) == ($struct_get($struct_loc(self, 1)): Int))
; [eval] $unwrap(l$value_paid) == ($struct_get($struct_loc(self, 1)): Int)
; [eval] $unwrap(l$value_paid)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($unwrap<Int> l$value_paid@572@01)
    ($struct_get<Int> ($struct_loc<Int> self@571@01 1))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($unwrap<Int> l$value_paid@572@01)
  ($struct_get<Int> ($struct_loc<Int> self@571@01 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | $unwrap[Int](l$value_paid@572@01) == $struct_get[Int]($struct_loc[Int](self@571@01, 1)) | live]
; [else-branch: 196 | $unwrap[Int](l$value_paid@572@01) != $struct_get[Int]($struct_loc[Int](self@571@01, 1)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 196 | $unwrap[Int](l$value_paid@572@01) == $struct_get[Int]($struct_loc[Int](self@571@01, 1))]
(assert (=
  ($unwrap<Int> l$value_paid@572@01)
  ($struct_get<Int> ($struct_loc<Int> self@571@01 1))))
; [eval] $unwrap(l$value_paid) * 1 < 0
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< ($unwrap<Int> l$value_paid@572@01) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | $unwrap[Int](l$value_paid@572@01) < 0 | dead]
; [else-branch: 197 | !($unwrap[Int](l$value_paid@572@01) < 0) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 197 | !($unwrap[Int](l$value_paid@572@01) < 0)]
(assert (not (< ($unwrap<Int> l$value_paid@572@01) 0)))
(pop) ; 4
; [eval] !($unwrap(l$value_paid) * 1 < 0)
; [eval] $unwrap(l$value_paid) * 1 < 0
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(push) ; 4
(set-option :timeout 10)
(assert (not (< ($unwrap<Int> l$value_paid@572@01) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< ($unwrap<Int> l$value_paid@572@01) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | !($unwrap[Int](l$value_paid@572@01) < 0) | live]
; [else-branch: 198 | $unwrap[Int](l$value_paid@572@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 198 | !($unwrap[Int](l$value_paid@572@01) < 0)]
(assert (not (< ($unwrap<Int> l$value_paid@572@01) 0)))
; [eval] $unwrap(l$value_paid) * 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> l$value_paid@572@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | $unwrap[Int](l$value_paid@572@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 199 | !($unwrap[Int](l$value_paid@572@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 199 | !($unwrap[Int](l$value_paid@572@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> l$value_paid@572@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 5
; [eval] !($unwrap(l$value_paid) * 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap(l$value_paid) * 1 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  ($unwrap<Int> l$value_paid@572@01)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    ($unwrap<Int> l$value_paid@572@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | !($unwrap[Int](l$value_paid@572@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 200 | $unwrap[Int](l$value_paid@572@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 200 | !($unwrap[Int](l$value_paid@572@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($unwrap<Int> l$value_paid@572@01)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] 100 == 0
; [then-branch: 201 | False | dead]
; [else-branch: 201 | True | live]
(push) ; 6
; [else-branch: 201 | True]
(pop) ; 6
; [eval] !(100 == 0)
; [eval] 100 == 0
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | True | live]
; [else-branch: 202 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 202 | True]
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100) < 0
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
      100))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 203 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) < 0 | dead]
; [else-branch: 203 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) < 0) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 203 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
      100))
    0)))
(pop) ; 7
; [eval] !($div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100) < 0)
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100) < 0
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
    100))
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
      100))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) < 0) | live]
; [else-branch: 204 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) < 0 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 204 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
      100))
    0)))
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 205 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 205 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 8
; [eval] !($div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(push) ; 8
(set-option :timeout 10)
(assert (not (>
  ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
    100))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 206 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 206 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))), 100, $unwrap[Int]($wrap[$Int]($unwrap[Int](l$value_paid@572@01))) / 100) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
      ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
      100))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; l$wizard_commission := $wrap($div($unwrap($wrap($unwrap(l$value_paid) * 1)),
;   100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100))
; [eval] $wrap($div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100))
; [eval] $div($unwrap($wrap($unwrap(l$value_paid) * 1)), 100, $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1)) \ 100
; [eval] $unwrap($wrap($unwrap(l$value_paid) * 1))
; [eval] $wrap($unwrap(l$value_paid) * 1)
; [eval] $unwrap(l$value_paid) * 1
; [eval] $unwrap(l$value_paid)
(declare-const l$wizard_commission@579@01 $Int)
(assert (=
  l$wizard_commission@579@01
  ($wrap<$Int> ($div<Int> ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01))) 100 (div
    ($unwrap<Int> ($wrap<$Int> ($unwrap<Int> l$value_paid@572@01)))
    100)))))
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission) < 0
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission)
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap(l$wizard_commission)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> l$value_paid@572@01)
      ($unwrap<Int> l$wizard_commission@579@01))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 207 | $unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) < 0 | dead]
; [else-branch: 207 | !($unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) < 0) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 207 | !($unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> l$value_paid@572@01)
      ($unwrap<Int> l$wizard_commission@579@01))
    0)))
(pop) ; 9
; [eval] !($unwrap(l$value_paid) - $unwrap(l$wizard_commission) < 0)
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission) < 0
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission)
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap(l$wizard_commission)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  (-
    ($unwrap<Int> l$value_paid@572@01)
    ($unwrap<Int> l$wizard_commission@579@01))
  0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    (-
      ($unwrap<Int> l$value_paid@572@01)
      ($unwrap<Int> l$wizard_commission@579@01))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | !($unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) < 0) | live]
; [else-branch: 208 | $unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 208 | !($unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) < 0)]
(assert (not
  (<
    (-
      ($unwrap<Int> l$value_paid@572@01)
      ($unwrap<Int> l$wizard_commission@579@01))
    0)))
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission)
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap(l$wizard_commission)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> l$value_paid@572@01)
      ($unwrap<Int> l$wizard_commission@579@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 209 | $unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 209 | !($unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 209 | !($unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> l$value_paid@572@01)
      ($unwrap<Int> l$wizard_commission@579@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 10
; [eval] !($unwrap(l$value_paid) - $unwrap(l$wizard_commission) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission)
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap(l$wizard_commission)
(push) ; 10
(set-option :timeout 10)
(assert (not (>
  (-
    ($unwrap<Int> l$value_paid@572@01)
    ($unwrap<Int> l$wizard_commission@579@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (>
    (-
      ($unwrap<Int> l$value_paid@572@01)
      ($unwrap<Int> l$wizard_commission@579@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 210 | !($unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 210 | $unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 210 | !($unwrap[Int](l$value_paid@572@01) - $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (-
      ($unwrap<Int> l$value_paid@572@01)
      ($unwrap<Int> l$wizard_commission@579@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; l$compensation := $wrap($unwrap(l$value_paid) -
;   $unwrap(l$wizard_commission))
; [eval] $wrap($unwrap(l$value_paid) - $unwrap(l$wizard_commission))
; [eval] $unwrap(l$value_paid) - $unwrap(l$wizard_commission)
; [eval] $unwrap(l$value_paid)
; [eval] $unwrap(l$wizard_commission)
(declare-const l$compensation@580@01 $Int)
(assert (=
  l$compensation@580@01
  ($wrap<$Int> (-
    ($unwrap<Int> l$value_paid@572@01)
    ($unwrap<Int> l$wizard_commission@579@01)))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$wizard_commission)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
      ($unwrap<Int> l$wizard_commission@579@01))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) < 0 | dead]
; [else-branch: 211 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) < 0) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 211 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
      ($unwrap<Int> l$wizard_commission@579@01))
    0)))
(pop) ; 11
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$wizard_commission)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
    ($unwrap<Int> l$wizard_commission@579@01))
  0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
      ($unwrap<Int> l$wizard_commission@579@01))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 212 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) < 0) | live]
; [else-branch: 212 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 212 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
      ($unwrap<Int> l$wizard_commission@579@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$wizard_commission)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
      ($unwrap<Int> l$wizard_commission@579@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
    ($unwrap<Int> l$wizard_commission@579@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 213 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 213 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
    ($unwrap<Int> l$wizard_commission@579@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 214 | False | dead]
; [else-branch: 214 | True | live]
(push) ; 13
; [else-branch: 214 | True]
(pop) ; 13
; [eval] !$succ
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 215 | True | live]
; [else-branch: 215 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 215 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | dead]
; [else-branch: 216 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 216 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | dead]
; [else-branch: 217 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 217 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@581@01 $Snap)
(assert (= $t@581@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@582@01 $Struct)
(assert (=
  self@582@01
  ($struct_set<$Struct> self@512@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 14
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@582@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@582@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@583@01 Int)
(declare-const q$v@584@01 Int)
(push) ; 14
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 15
; [then-branch: 218 | !(0 <= q$a@583@01) | live]
; [else-branch: 218 | 0 <= q$a@583@01 | live]
(push) ; 16
; [then-branch: 218 | !(0 <= q$a@583@01)]
(assert (not (<= 0 q$a@583@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 218 | 0 <= q$a@583@01]
(assert (<= 0 q$a@583@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 17
; [then-branch: 219 | !(q$a@583@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 219 | q$a@583@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 18
; [then-branch: 219 | !(q$a@583@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@583@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 18
(push) ; 18
; [else-branch: 219 | q$a@583@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@583@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 19
; [then-branch: 220 | !(0 <= q$v@584@01) | live]
; [else-branch: 220 | 0 <= q$v@584@01 | live]
(push) ; 20
; [then-branch: 220 | !(0 <= q$v@584@01)]
(assert (not (<= 0 q$v@584@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 220 | 0 <= q$v@584@01]
(assert (<= 0 q$v@584@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@584@01) (not (<= 0 q$v@584@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@584@01) (not (<= 0 q$v@584@01))))))
(assert (or
  (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@583@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@583@01)
  (and
    (<= 0 q$a@583@01)
    (=>
      (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@584@01) (not (<= 0 q$v@584@01)))))
    (or
      (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@583@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@583@01) (not (<= 0 q$a@583@01))))
(push) ; 15
; [then-branch: 221 | 0 <= q$a@583@01 && q$a@583@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@584@01 && q$v@584@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 221 | !(0 <= q$a@583@01 && q$a@583@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@584@01 && q$v@584@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 16
; [then-branch: 221 | 0 <= q$a@583@01 && q$a@583@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@584@01 && q$v@584@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@583@01)
  (and
    (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@584@01)
      (<=
        q$v@584@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 17
; [then-branch: 222 | q$v@584@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@582@01, 3)), q$a@583@01) | live]
; [else-branch: 222 | q$v@584@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@582@01, 3)), q$a@583@01) | live]
(push) ; 18
; [then-branch: 222 | q$v@584@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@582@01, 3)), q$a@583@01)]
(assert (=
  q$v@584@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)) q$a@583@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 222 | q$v@584@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@582@01, 3)), q$a@583@01)]
(assert (not
  (=
    q$v@584@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)) q$a@583@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@584@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)) q$a@583@01)))
  (=
    q$v@584@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)) q$a@583@01))))
(pop) ; 16
(push) ; 16
; [else-branch: 221 | !(0 <= q$a@583@01 && q$a@583@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@584@01 && q$v@584@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@583@01)
    (and
      (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@584@01)
        (<=
          q$v@584@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@583@01)
    (and
      (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@584@01)
        (<=
          q$v@584@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@583@01)
    (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@584@01)
    (<=
      q$v@584@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@584@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)) q$a@583@01)))
      (=
        q$v@584@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)) q$a@583@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@583@01)
      (and
        (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@584@01)
          (<=
            q$v@584@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@583@01)
    (and
      (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@584@01)
        (<=
          q$v@584@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@585@01 $PSF<$accessible$withdraw>)
(declare-const s@586@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@583@01 Int) (q$v@584@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@583@01)
      (and
        (<= 0 q$a@583@01)
        (=>
          (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@584@01) (not (<= 0 q$v@584@01)))))
        (or
          (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@583@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@583@01) (not (<= 0 q$a@583@01)))
    (=>
      (and
        (<= 0 q$a@583@01)
        (and
          (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@584@01)
            (<=
              q$v@584@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@583@01)
        (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@584@01)
        (<=
          q$v@584@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@584@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)) q$a@583@01)))
          (=
            q$v@584@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@582@01 3)) q$a@583@01)))))
    (or
      (not
        (and
          (<= 0 q$a@583@01)
          (and
            (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@584@01)
              (<=
                q$v@584@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@583@01)
        (and
          (<= q$a@583@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@584@01)
            (<=
              q$v@584@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@585@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@583@01))
    ($SortWrappers.IntTo$Snap q$v@584@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@583@01))
    ($SortWrappers.IntTo$Snap q$v@584@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 213 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
      ($unwrap<Int> l$wizard_commission@579@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 12
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$wizard_commission)
(push) ; 12
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
    ($unwrap<Int> l$wizard_commission@579@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
      ($unwrap<Int> l$wizard_commission@579@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 223 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 223 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
      ($unwrap<Int> l$wizard_commission@579@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self,
;   3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) +
;   $unwrap(l$wizard_commission)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))) + $unwrap(l$wizard_commission)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(self, 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$wizard_commission)
(declare-const self@587@01 $Struct)
(assert (=
  self@587@01
  ($struct_set<$Struct> self@571@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)) (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
    ($unwrap<Int> l$wizard_commission@579@01))))))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0))
  ($struct_get<Int> ($struct_loc<Int> self@587@01 0)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0))
    ($struct_get<Int> ($struct_loc<Int> self@587@01 0))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0)) != $struct_get[Int]($struct_loc[Int](self@587@01, 0)) | live]
; [else-branch: 224 | $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0)) == $struct_get[Int]($struct_loc[Int](self@587@01, 0)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 224 | $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0)) != $struct_get[Int]($struct_loc[Int](self@587@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0))
    ($struct_get<Int> ($struct_loc<Int> self@587@01 0)))))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] $unwrap(l$compensation)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
      ($unwrap<Int> l$compensation@580@01))
    0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) < 0 | dead]
; [else-branch: 225 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) < 0) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 225 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
      ($unwrap<Int> l$compensation@580@01))
    0)))
(pop) ; 14
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation) < 0)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation) < 0
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] $unwrap(l$compensation)
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
    ($unwrap<Int> l$compensation@580@01))
  0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
      ($unwrap<Int> l$compensation@580@01))
    0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) < 0) | live]
; [else-branch: 226 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) < 0 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 226 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) < 0)]
(assert (not
  (<
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
      ($unwrap<Int> l$compensation@580@01))
    0)))
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] $unwrap(l$compensation)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
      ($unwrap<Int> l$compensation@580@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
    ($unwrap<Int> l$compensation@580@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 227 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 227 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
    ($unwrap<Int> l$compensation@580@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 228 | False | dead]
; [else-branch: 228 | True | live]
(push) ; 16
; [else-branch: 228 | True]
(pop) ; 16
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | True | live]
; [else-branch: 229 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 229 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | dead]
; [else-branch: 230 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 230 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | dead]
; [else-branch: 231 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 231 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@588@01 $Snap)
(assert (= $t@588@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@589@01 $Struct)
(assert (=
  self@589@01
  ($struct_set<$Struct> self@512@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 17
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@589@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@589@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@590@01 Int)
(declare-const q$v@591@01 Int)
(push) ; 17
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 18
; [then-branch: 232 | !(0 <= q$a@590@01) | live]
; [else-branch: 232 | 0 <= q$a@590@01 | live]
(push) ; 19
; [then-branch: 232 | !(0 <= q$a@590@01)]
(assert (not (<= 0 q$a@590@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 232 | 0 <= q$a@590@01]
(assert (<= 0 q$a@590@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 20
; [then-branch: 233 | !(q$a@590@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 233 | q$a@590@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 21
; [then-branch: 233 | !(q$a@590@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@590@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 21
(push) ; 21
; [else-branch: 233 | q$a@590@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@590@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 22
; [then-branch: 234 | !(0 <= q$v@591@01) | live]
; [else-branch: 234 | 0 <= q$v@591@01 | live]
(push) ; 23
; [then-branch: 234 | !(0 <= q$v@591@01)]
(assert (not (<= 0 q$v@591@01)))
(pop) ; 23
(push) ; 23
; [else-branch: 234 | 0 <= q$v@591@01]
(assert (<= 0 q$v@591@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@591@01) (not (<= 0 q$v@591@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@591@01) (not (<= 0 q$v@591@01))))))
(assert (or
  (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@590@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@590@01)
  (and
    (<= 0 q$a@590@01)
    (=>
      (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@591@01) (not (<= 0 q$v@591@01)))))
    (or
      (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@590@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@590@01) (not (<= 0 q$a@590@01))))
(push) ; 18
; [then-branch: 235 | 0 <= q$a@590@01 && q$a@590@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@591@01 && q$v@591@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 235 | !(0 <= q$a@590@01 && q$a@590@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@591@01 && q$v@591@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 19
; [then-branch: 235 | 0 <= q$a@590@01 && q$a@590@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@591@01 && q$v@591@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@590@01)
  (and
    (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@591@01)
      (<=
        q$v@591@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 20
; [then-branch: 236 | q$v@591@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@589@01, 3)), q$a@590@01) | live]
; [else-branch: 236 | q$v@591@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@589@01, 3)), q$a@590@01) | live]
(push) ; 21
; [then-branch: 236 | q$v@591@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@589@01, 3)), q$a@590@01)]
(assert (=
  q$v@591@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)) q$a@590@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 236 | q$v@591@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@589@01, 3)), q$a@590@01)]
(assert (not
  (=
    q$v@591@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)) q$a@590@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@591@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)) q$a@590@01)))
  (=
    q$v@591@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)) q$a@590@01))))
(pop) ; 19
(push) ; 19
; [else-branch: 235 | !(0 <= q$a@590@01 && q$a@590@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@591@01 && q$v@591@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@590@01)
    (and
      (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@591@01)
        (<=
          q$v@591@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@590@01)
    (and
      (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@591@01)
        (<=
          q$v@591@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@590@01)
    (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@591@01)
    (<=
      q$v@591@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@591@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)) q$a@590@01)))
      (=
        q$v@591@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)) q$a@590@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@590@01)
      (and
        (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@591@01)
          (<=
            q$v@591@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@590@01)
    (and
      (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@591@01)
        (<=
          q$v@591@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@592@01 $PSF<$accessible$withdraw>)
(declare-const s@593@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@590@01 Int) (q$v@591@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@590@01)
      (and
        (<= 0 q$a@590@01)
        (=>
          (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@591@01) (not (<= 0 q$v@591@01)))))
        (or
          (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@590@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@590@01) (not (<= 0 q$a@590@01)))
    (=>
      (and
        (<= 0 q$a@590@01)
        (and
          (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@591@01)
            (<=
              q$v@591@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@590@01)
        (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@591@01)
        (<=
          q$v@591@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@591@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)) q$a@590@01)))
          (=
            q$v@591@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@589@01 3)) q$a@590@01)))))
    (or
      (not
        (and
          (<= 0 q$a@590@01)
          (and
            (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@591@01)
              (<=
                q$v@591@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@590@01)
        (and
          (<= q$a@590@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@591@01)
            (<=
              q$v@591@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@592@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@590@01))
    ($SortWrappers.IntTo$Snap q$v@591@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@590@01))
    ($SortWrappers.IntTo$Snap q$v@591@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 227 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
      ($unwrap<Int> l$compensation@580@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 15
; [eval] !($unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] $unwrap(l$compensation)
(push) ; 15
(set-option :timeout 10)
(assert (not (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
    ($unwrap<Int> l$compensation@580@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
      ($unwrap<Int> l$compensation@580@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 237 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 237 | !($unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (+
      ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
      ($unwrap<Int> l$compensation@580@01))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int),
;   $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]),
;   ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) +
;   $unwrap(l$compensation)): $Map[Int, Int])): $Struct)
; [eval] ($struct_set(self, 3, ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation)): $Map[Int, Int])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation)): $Map[Int, Int])
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))) + $unwrap(l$compensation)
; [eval] $unwrap($wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)))
; [eval] $wrap(($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] $unwrap(l$compensation)
(declare-const self@594@01 $Struct)
(assert (=
  self@594@01
  ($struct_set<$Struct> self@587@01 3 ($map_set<$Map<Int~_Int>> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)) (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
    ($unwrap<Int> l$compensation@580@01))))))
; [exec]
; self := ($struct_set(self, 2, s$struct$Monarch$init(($struct_get($struct_loc(msg,
;   0)): Int), l$name, $unwrap(l$value_paid), ($struct_get($struct_loc(block,
;   4)): Int))): $Struct)
; [eval] ($struct_set(self, 2, s$struct$Monarch$init(($struct_get($struct_loc(msg, 0)): Int), l$name, $unwrap(l$value_paid), ($struct_get($struct_loc(block, 4)): Int))): $Struct)
; [eval] s$struct$Monarch$init(($struct_get($struct_loc(msg, 0)): Int), l$name, $unwrap(l$value_paid), ($struct_get($struct_loc(block, 4)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$value_paid)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(declare-const self@595@01 $Struct)
(assert (=
  self@595@01
  ($struct_set<$Struct> self@594@01 2 (s$struct$Monarch$init<$Struct> ($struct_get<Int> ($struct_loc<Int> msg@508@01 0)) l$name@506@01 ($unwrap<Int> l$value_paid@572@01) ($struct_get<Int> ($struct_loc<Int> block@509@01 4))))))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (<
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)
    0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 < 0 | dead]
; [else-branch: 238 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 < 0) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 238 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 < 0)]
(assert (not
  (<
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)
    0)))
(pop) ; 16
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 < 0)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 16
(set-option :timeout 10)
(assert (not (<
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
    3)
  0)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (<
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)
    0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 < 0) | live]
; [else-branch: 239 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 < 0 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 239 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 < 0)]
(assert (not
  (<
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)
    0)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (>
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (>
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
    3)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 240 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 240 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
    3)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 241 | False | dead]
; [else-branch: 241 | True | live]
(push) ; 18
; [else-branch: 241 | True]
(pop) ; 18
; [eval] !$succ
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | True | live]
; [else-branch: 242 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 242 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | dead]
; [else-branch: 243 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 243 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | dead]
; [else-branch: 244 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 244 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@596@01 $Snap)
(assert (= $t@596@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@597@01 $Struct)
(assert (=
  self@597@01
  ($struct_set<$Struct> self@512@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 19
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@597@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@597@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@598@01 Int)
(declare-const q$v@599@01 Int)
(push) ; 19
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 20
; [then-branch: 245 | !(0 <= q$a@598@01) | live]
; [else-branch: 245 | 0 <= q$a@598@01 | live]
(push) ; 21
; [then-branch: 245 | !(0 <= q$a@598@01)]
(assert (not (<= 0 q$a@598@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 245 | 0 <= q$a@598@01]
(assert (<= 0 q$a@598@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 22
; [then-branch: 246 | !(q$a@598@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 246 | q$a@598@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 23
; [then-branch: 246 | !(q$a@598@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@598@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 23
(push) ; 23
; [else-branch: 246 | q$a@598@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@598@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 24
; [then-branch: 247 | !(0 <= q$v@599@01) | live]
; [else-branch: 247 | 0 <= q$v@599@01 | live]
(push) ; 25
; [then-branch: 247 | !(0 <= q$v@599@01)]
(assert (not (<= 0 q$v@599@01)))
(pop) ; 25
(push) ; 25
; [else-branch: 247 | 0 <= q$v@599@01]
(assert (<= 0 q$v@599@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@599@01) (not (<= 0 q$v@599@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@599@01) (not (<= 0 q$v@599@01))))))
(assert (or
  (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@598@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@598@01)
  (and
    (<= 0 q$a@598@01)
    (=>
      (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@599@01) (not (<= 0 q$v@599@01)))))
    (or
      (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@598@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@598@01) (not (<= 0 q$a@598@01))))
(push) ; 20
; [then-branch: 248 | 0 <= q$a@598@01 && q$a@598@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@599@01 && q$v@599@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 248 | !(0 <= q$a@598@01 && q$a@598@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@599@01 && q$v@599@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 21
; [then-branch: 248 | 0 <= q$a@598@01 && q$a@598@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@599@01 && q$v@599@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@598@01)
  (and
    (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@599@01)
      (<=
        q$v@599@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 22
; [then-branch: 249 | q$v@599@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@597@01, 3)), q$a@598@01) | live]
; [else-branch: 249 | q$v@599@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@597@01, 3)), q$a@598@01) | live]
(push) ; 23
; [then-branch: 249 | q$v@599@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@597@01, 3)), q$a@598@01)]
(assert (=
  q$v@599@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)) q$a@598@01)))
(pop) ; 23
(push) ; 23
; [else-branch: 249 | q$v@599@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@597@01, 3)), q$a@598@01)]
(assert (not
  (=
    q$v@599@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)) q$a@598@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@599@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)) q$a@598@01)))
  (=
    q$v@599@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)) q$a@598@01))))
(pop) ; 21
(push) ; 21
; [else-branch: 248 | !(0 <= q$a@598@01 && q$a@598@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@599@01 && q$v@599@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@598@01)
    (and
      (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@599@01)
        (<=
          q$v@599@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@598@01)
    (and
      (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@599@01)
        (<=
          q$v@599@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@598@01)
    (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@599@01)
    (<=
      q$v@599@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@599@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)) q$a@598@01)))
      (=
        q$v@599@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)) q$a@598@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@598@01)
      (and
        (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@599@01)
          (<=
            q$v@599@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@598@01)
    (and
      (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@599@01)
        (<=
          q$v@599@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@600@01 $PSF<$accessible$withdraw>)
(declare-const s@601@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 19
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@598@01 Int) (q$v@599@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@598@01)
      (and
        (<= 0 q$a@598@01)
        (=>
          (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@599@01) (not (<= 0 q$v@599@01)))))
        (or
          (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@598@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@598@01) (not (<= 0 q$a@598@01)))
    (=>
      (and
        (<= 0 q$a@598@01)
        (and
          (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@599@01)
            (<=
              q$v@599@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@598@01)
        (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@599@01)
        (<=
          q$v@599@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@599@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)) q$a@598@01)))
          (=
            q$v@599@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@597@01 3)) q$a@598@01)))))
    (or
      (not
        (and
          (<= 0 q$a@598@01)
          (and
            (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@599@01)
              (<=
                q$v@599@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@598@01)
        (and
          (<= q$a@598@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@599@01)
            (<=
              q$v@599@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@600@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@598@01))
    ($SortWrappers.IntTo$Snap q$v@599@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@598@01))
    ($SortWrappers.IntTo$Snap q$v@599@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 240 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 17
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 17
(set-option :timeout 10)
(assert (not (>
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
    3)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (>
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 250 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 250 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] 2 == 0
; [then-branch: 251 | False | dead]
; [else-branch: 251 | True | live]
(push) ; 18
; [else-branch: 251 | True]
(pop) ; 18
; [eval] !(2 == 0)
; [eval] 2 == 0
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | True | live]
; [else-branch: 252 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 252 | True]
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) < 0
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 19
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
        3)))
      2))
    0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) < 0 | dead]
; [else-branch: 253 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) < 0) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 253 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
        3)))
      2))
    0)))
(pop) ; 19
; [eval] !($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) < 0)
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) < 0
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 19
(set-option :timeout 10)
(assert (not (<
  ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
    3))) 2 (div
    ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)))
    2))
  0)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
        3)))
      2))
    0))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) < 0) | live]
; [else-branch: 254 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) < 0 | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 254 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
        3)))
      2))
    0)))
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
        3)))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 255 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 255 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
        3)))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 20
; [eval] !($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 20
(set-option :timeout 10)
(assert (not (>
  ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
    3))) 2 (div
    ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)))
    2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
        3)))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 256 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 256 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
        3)))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 1, $unwrap($wrap($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self,
;   1)): Int))) *
;   3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) *
;   3)) \
;   2)))): $Struct)
; [eval] ($struct_set(self, 1, $unwrap($wrap($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)))): $Struct)
; [eval] $unwrap($wrap($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)))
; [eval] $wrap($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2))
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const self@602@01 $Struct)
(assert (=
  self@602@01
  ($struct_set<$Struct> self@595@01 1 ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
    3))) 2 (div
    ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
      3)))
    2)))))))
; [exec]
; inhale acc(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int)), write)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const $t@603@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not $out_of_gas@524@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not $out_of_gas@524@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | $out_of_gas@524@01 | live]
; [else-branch: 257 | !($out_of_gas@524@01) | live]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 257 | $out_of_gas@524@01]
(assert $out_of_gas@524@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 258 | False | dead]
; [else-branch: 258 | True | live]
(push) ; 22
; [else-branch: 258 | True]
(pop) ; 22
; [eval] !$succ
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | True | live]
; [else-branch: 259 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 259 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | dead]
; [else-branch: 260 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 260 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | dead]
; [else-branch: 261 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 261 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@604@01 $Snap)
(assert (= $t@604@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@605@01 $Struct)
(assert (=
  self@605@01
  ($struct_set<$Struct> self@512@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 23
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@605@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@605@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@606@01 Int)
(declare-const q$v@607@01 Int)
(push) ; 23
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 24
; [then-branch: 262 | !(0 <= q$a@606@01) | live]
; [else-branch: 262 | 0 <= q$a@606@01 | live]
(push) ; 25
; [then-branch: 262 | !(0 <= q$a@606@01)]
(assert (not (<= 0 q$a@606@01)))
(pop) ; 25
(push) ; 25
; [else-branch: 262 | 0 <= q$a@606@01]
(assert (<= 0 q$a@606@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 26
; [then-branch: 263 | !(q$a@606@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 263 | q$a@606@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 27
; [then-branch: 263 | !(q$a@606@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@606@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 27
(push) ; 27
; [else-branch: 263 | q$a@606@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@606@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 28
; [then-branch: 264 | !(0 <= q$v@607@01) | live]
; [else-branch: 264 | 0 <= q$v@607@01 | live]
(push) ; 29
; [then-branch: 264 | !(0 <= q$v@607@01)]
(assert (not (<= 0 q$v@607@01)))
(pop) ; 29
(push) ; 29
; [else-branch: 264 | 0 <= q$v@607@01]
(assert (<= 0 q$v@607@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@607@01) (not (<= 0 q$v@607@01))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@607@01) (not (<= 0 q$v@607@01))))))
(assert (or
  (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@606@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@606@01)
  (and
    (<= 0 q$a@606@01)
    (=>
      (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@607@01) (not (<= 0 q$v@607@01)))))
    (or
      (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@606@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@606@01) (not (<= 0 q$a@606@01))))
(push) ; 24
; [then-branch: 265 | 0 <= q$a@606@01 && q$a@606@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@607@01 && q$v@607@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 265 | !(0 <= q$a@606@01 && q$a@606@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@607@01 && q$v@607@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 25
; [then-branch: 265 | 0 <= q$a@606@01 && q$a@606@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@607@01 && q$v@607@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@606@01)
  (and
    (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@607@01)
      (<=
        q$v@607@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 26
; [then-branch: 266 | q$v@607@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@605@01, 3)), q$a@606@01) | live]
; [else-branch: 266 | q$v@607@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@605@01, 3)), q$a@606@01) | live]
(push) ; 27
; [then-branch: 266 | q$v@607@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@605@01, 3)), q$a@606@01)]
(assert (=
  q$v@607@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)) q$a@606@01)))
(pop) ; 27
(push) ; 27
; [else-branch: 266 | q$v@607@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@605@01, 3)), q$a@606@01)]
(assert (not
  (=
    q$v@607@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)) q$a@606@01))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@607@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)) q$a@606@01)))
  (=
    q$v@607@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)) q$a@606@01))))
(pop) ; 25
(push) ; 25
; [else-branch: 265 | !(0 <= q$a@606@01 && q$a@606@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@607@01 && q$v@607@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@606@01)
    (and
      (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@607@01)
        (<=
          q$v@607@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@606@01)
    (and
      (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@607@01)
        (<=
          q$v@607@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@606@01)
    (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@607@01)
    (<=
      q$v@607@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@607@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)) q$a@606@01)))
      (=
        q$v@607@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)) q$a@606@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@606@01)
      (and
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@607@01)
          (<=
            q$v@607@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@606@01)
    (and
      (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@607@01)
        (<=
          q$v@607@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@608@01 $PSF<$accessible$withdraw>)
(declare-const s@609@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 23
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@606@01 Int) (q$v@607@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@606@01)
      (and
        (<= 0 q$a@606@01)
        (=>
          (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@607@01) (not (<= 0 q$v@607@01)))))
        (or
          (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@606@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@606@01) (not (<= 0 q$a@606@01)))
    (=>
      (and
        (<= 0 q$a@606@01)
        (and
          (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@607@01)
            (<=
              q$v@607@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@606@01)
        (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@607@01)
        (<=
          q$v@607@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@607@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)) q$a@606@01)))
          (=
            q$v@607@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@605@01 3)) q$a@606@01)))))
    (or
      (not
        (and
          (<= 0 q$a@606@01)
          (and
            (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@607@01)
              (<=
                q$v@607@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@606@01)
        (and
          (<= q$a@606@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@607@01)
            (<=
              q$v@607@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@608@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@606@01))
    ($SortWrappers.IntTo$Snap q$v@607@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@606@01))
    ($SortWrappers.IntTo$Snap q$v@607@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 22
(pop) ; 21
(push) ; 21
; [else-branch: 257 | !($out_of_gas@524@01)]
(assert (not $out_of_gas@524@01))
(pop) ; 21
; [eval] !$out_of_gas
(push) ; 21
(set-option :timeout 10)
(assert (not $out_of_gas@524@01))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not $out_of_gas@524@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | !($out_of_gas@524@01) | live]
; [else-branch: 267 | $out_of_gas@524@01 | live]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 267 | !($out_of_gas@524@01)]
(assert (not $out_of_gas@524@01))
; [exec]
; label end
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 268 | True | live]
; [else-branch: 268 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 268 | True]
; [exec]
; assert !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@602@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@602@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@602@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | live]
; [else-branch: 269 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@602@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 269 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@602@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))))]
(assert (not
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@602@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
; [eval] perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int)))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 1 * write
(pop) ; 24
(push) ; 24
; [else-branch: 269 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@602@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@602@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@602@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))
  (not
    (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@602@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))))
; [exec]
; assert ($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | dead]
; [else-branch: 270 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 270 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@610@01 $Snap)
(assert (= $t@610@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@611@01 $Struct)
(assert (=
  self@611@01
  ($struct_set<$Struct> self@602@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@602@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 23
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@611@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@611@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@612@01 Int)
(declare-const q$v@613@01 Int)
(push) ; 23
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 24
; [then-branch: 271 | !(0 <= q$a@612@01) | live]
; [else-branch: 271 | 0 <= q$a@612@01 | live]
(push) ; 25
; [then-branch: 271 | !(0 <= q$a@612@01)]
(assert (not (<= 0 q$a@612@01)))
(pop) ; 25
(push) ; 25
; [else-branch: 271 | 0 <= q$a@612@01]
(assert (<= 0 q$a@612@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 26
; [then-branch: 272 | !(q$a@612@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 272 | q$a@612@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 27
; [then-branch: 272 | !(q$a@612@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@612@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 27
(push) ; 27
; [else-branch: 272 | q$a@612@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@612@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 28
; [then-branch: 273 | !(0 <= q$v@613@01) | live]
; [else-branch: 273 | 0 <= q$v@613@01 | live]
(push) ; 29
; [then-branch: 273 | !(0 <= q$v@613@01)]
(assert (not (<= 0 q$v@613@01)))
(pop) ; 29
(push) ; 29
; [else-branch: 273 | 0 <= q$v@613@01]
(assert (<= 0 q$v@613@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@613@01) (not (<= 0 q$v@613@01))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@613@01) (not (<= 0 q$v@613@01))))))
(assert (or
  (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@612@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@612@01)
  (and
    (<= 0 q$a@612@01)
    (=>
      (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@613@01) (not (<= 0 q$v@613@01)))))
    (or
      (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@612@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@612@01) (not (<= 0 q$a@612@01))))
(push) ; 24
; [then-branch: 274 | 0 <= q$a@612@01 && q$a@612@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@613@01 && q$v@613@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 274 | !(0 <= q$a@612@01 && q$a@612@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@613@01 && q$v@613@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 25
; [then-branch: 274 | 0 <= q$a@612@01 && q$a@612@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@613@01 && q$v@613@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@612@01)
  (and
    (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@613@01)
      (<=
        q$v@613@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 26
; [then-branch: 275 | q$v@613@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@611@01, 3)), q$a@612@01) | live]
; [else-branch: 275 | q$v@613@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@611@01, 3)), q$a@612@01) | live]
(push) ; 27
; [then-branch: 275 | q$v@613@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@611@01, 3)), q$a@612@01)]
(assert (=
  q$v@613@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)) q$a@612@01)))
(pop) ; 27
(push) ; 27
; [else-branch: 275 | q$v@613@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@611@01, 3)), q$a@612@01)]
(assert (not
  (=
    q$v@613@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)) q$a@612@01))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@613@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)) q$a@612@01)))
  (=
    q$v@613@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)) q$a@612@01))))
(pop) ; 25
(push) ; 25
; [else-branch: 274 | !(0 <= q$a@612@01 && q$a@612@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@613@01 && q$v@613@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@612@01)
    (and
      (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@613@01)
        (<=
          q$v@613@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@612@01)
    (and
      (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@613@01)
        (<=
          q$v@613@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@612@01)
    (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@613@01)
    (<=
      q$v@613@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@613@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)) q$a@612@01)))
      (=
        q$v@613@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)) q$a@612@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@612@01)
      (and
        (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@613@01)
          (<=
            q$v@613@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@612@01)
    (and
      (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@613@01)
        (<=
          q$v@613@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@614@01 $PSF<$accessible$withdraw>)
(declare-const s@615@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 23
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@612@01 Int) (q$v@613@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@612@01)
      (and
        (<= 0 q$a@612@01)
        (=>
          (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@613@01) (not (<= 0 q$v@613@01)))))
        (or
          (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@612@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@612@01) (not (<= 0 q$a@612@01)))
    (=>
      (and
        (<= 0 q$a@612@01)
        (and
          (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@613@01)
            (<=
              q$v@613@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@612@01)
        (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@613@01)
        (<=
          q$v@613@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@613@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)) q$a@612@01)))
          (=
            q$v@613@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@611@01 3)) q$a@612@01)))))
    (or
      (not
        (and
          (<= 0 q$a@612@01)
          (and
            (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@613@01)
              (<=
                q$v@613@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@612@01)
        (and
          (<= q$a@612@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@613@01)
            (<=
              q$v@613@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@614@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@612@01))
    ($SortWrappers.IntTo$Snap q$v@613@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@612@01))
    ($SortWrappers.IntTo$Snap q$v@613@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 22
; [eval] !$succ
; [then-branch: 276 | False | dead]
; [else-branch: 276 | True | live]
(push) ; 22
; [else-branch: 276 | True]
(pop) ; 22
(pop) ; 21
(push) ; 21
; [else-branch: 267 | $out_of_gas@524@01]
(assert $out_of_gas@524@01)
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 250 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@595@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@595@01 1))))
    3)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 237 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@587@01, 3)), $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0))))) + $unwrap[Int](l$compensation@580@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@587@01 3)) ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0)))))
    ($unwrap<Int> l$compensation@580@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 224 | $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0)) == $struct_get[Int]($struct_loc[Int](self@587@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0))
  ($struct_get<Int> ($struct_loc<Int> self@587@01 0))))
(pop) ; 13
; [eval] !(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) != ($struct_get($struct_loc(self, 0)): Int))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int) != ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0))
    ($struct_get<Int> ($struct_loc<Int> self@587@01 0))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0))
  ($struct_get<Int> ($struct_loc<Int> self@587@01 0)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0)) == $struct_get[Int]($struct_loc[Int](self@587@01, 0)) | live]
; [else-branch: 277 | $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0)) != $struct_get[Int]($struct_loc[Int](self@587@01, 0)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 277 | $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0)) == $struct_get[Int]($struct_loc[Int](self@587@01, 0))]
(assert (=
  ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0))
  ($struct_get<Int> ($struct_loc<Int> self@587@01 0))))
; [exec]
; self := ($struct_set(self, 2, s$struct$Monarch$init(($struct_get($struct_loc(msg,
;   0)): Int), l$name, $unwrap(l$value_paid), ($struct_get($struct_loc(block,
;   4)): Int))): $Struct)
; [eval] ($struct_set(self, 2, s$struct$Monarch$init(($struct_get($struct_loc(msg, 0)): Int), l$name, $unwrap(l$value_paid), ($struct_get($struct_loc(block, 4)): Int))): $Struct)
; [eval] s$struct$Monarch$init(($struct_get($struct_loc(msg, 0)): Int), l$name, $unwrap(l$value_paid), ($struct_get($struct_loc(block, 4)): Int))
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
; [eval] $unwrap(l$value_paid)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(declare-const self@616@01 $Struct)
(assert (=
  self@616@01
  ($struct_set<$Struct> self@587@01 2 (s$struct$Monarch$init<$Struct> ($struct_get<Int> ($struct_loc<Int> msg@508@01 0)) l$name@506@01 ($unwrap<Int> l$value_paid@572@01) ($struct_get<Int> ($struct_loc<Int> block@509@01 4))))))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)
    0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 < 0 | dead]
; [else-branch: 278 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 < 0) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 278 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 < 0)]
(assert (not
  (<
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)
    0)))
(pop) ; 14
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 < 0)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 < 0
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
    3)
  0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)
    0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 < 0) | live]
; [else-branch: 279 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 < 0 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 279 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 < 0)]
(assert (not
  (<
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)
    0)))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (>
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (>
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
    3)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 280 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 280 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
    3)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 281 | False | dead]
; [else-branch: 281 | True | live]
(push) ; 16
; [else-branch: 281 | True]
(pop) ; 16
; [eval] !$succ
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 282 | True | live]
; [else-branch: 282 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 282 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | dead]
; [else-branch: 283 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 283 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | dead]
; [else-branch: 284 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 284 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@617@01 $Snap)
(assert (= $t@617@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@618@01 $Struct)
(assert (=
  self@618@01
  ($struct_set<$Struct> self@512@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 17
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@618@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@618@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@619@01 Int)
(declare-const q$v@620@01 Int)
(push) ; 17
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 18
; [then-branch: 285 | !(0 <= q$a@619@01) | live]
; [else-branch: 285 | 0 <= q$a@619@01 | live]
(push) ; 19
; [then-branch: 285 | !(0 <= q$a@619@01)]
(assert (not (<= 0 q$a@619@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 285 | 0 <= q$a@619@01]
(assert (<= 0 q$a@619@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 20
; [then-branch: 286 | !(q$a@619@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 286 | q$a@619@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 21
; [then-branch: 286 | !(q$a@619@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@619@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 21
(push) ; 21
; [else-branch: 286 | q$a@619@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@619@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 22
; [then-branch: 287 | !(0 <= q$v@620@01) | live]
; [else-branch: 287 | 0 <= q$v@620@01 | live]
(push) ; 23
; [then-branch: 287 | !(0 <= q$v@620@01)]
(assert (not (<= 0 q$v@620@01)))
(pop) ; 23
(push) ; 23
; [else-branch: 287 | 0 <= q$v@620@01]
(assert (<= 0 q$v@620@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@620@01) (not (<= 0 q$v@620@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@620@01) (not (<= 0 q$v@620@01))))))
(assert (or
  (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@619@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@619@01)
  (and
    (<= 0 q$a@619@01)
    (=>
      (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@620@01) (not (<= 0 q$v@620@01)))))
    (or
      (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@619@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@619@01) (not (<= 0 q$a@619@01))))
(push) ; 18
; [then-branch: 288 | 0 <= q$a@619@01 && q$a@619@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@620@01 && q$v@620@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 288 | !(0 <= q$a@619@01 && q$a@619@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@620@01 && q$v@620@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 19
; [then-branch: 288 | 0 <= q$a@619@01 && q$a@619@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@620@01 && q$v@620@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@619@01)
  (and
    (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@620@01)
      (<=
        q$v@620@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 20
; [then-branch: 289 | q$v@620@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@618@01, 3)), q$a@619@01) | live]
; [else-branch: 289 | q$v@620@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@618@01, 3)), q$a@619@01) | live]
(push) ; 21
; [then-branch: 289 | q$v@620@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@618@01, 3)), q$a@619@01)]
(assert (=
  q$v@620@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)) q$a@619@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 289 | q$v@620@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@618@01, 3)), q$a@619@01)]
(assert (not
  (=
    q$v@620@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)) q$a@619@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@620@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)) q$a@619@01)))
  (=
    q$v@620@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)) q$a@619@01))))
(pop) ; 19
(push) ; 19
; [else-branch: 288 | !(0 <= q$a@619@01 && q$a@619@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@620@01 && q$v@620@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@619@01)
    (and
      (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@620@01)
        (<=
          q$v@620@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@619@01)
    (and
      (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@620@01)
        (<=
          q$v@620@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@619@01)
    (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@620@01)
    (<=
      q$v@620@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@620@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)) q$a@619@01)))
      (=
        q$v@620@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)) q$a@619@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@619@01)
      (and
        (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@620@01)
          (<=
            q$v@620@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@619@01)
    (and
      (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@620@01)
        (<=
          q$v@620@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@621@01 $PSF<$accessible$withdraw>)
(declare-const s@622@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@619@01 Int) (q$v@620@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@619@01)
      (and
        (<= 0 q$a@619@01)
        (=>
          (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@620@01) (not (<= 0 q$v@620@01)))))
        (or
          (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@619@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@619@01) (not (<= 0 q$a@619@01)))
    (=>
      (and
        (<= 0 q$a@619@01)
        (and
          (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@620@01)
            (<=
              q$v@620@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@619@01)
        (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@620@01)
        (<=
          q$v@620@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@620@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)) q$a@619@01)))
          (=
            q$v@620@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@618@01 3)) q$a@619@01)))))
    (or
      (not
        (and
          (<= 0 q$a@619@01)
          (and
            (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@620@01)
              (<=
                q$v@620@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@619@01)
        (and
          (<= q$a@619@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@620@01)
            (<=
              q$v@620@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@621@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@619@01))
    ($SortWrappers.IntTo$Snap q$v@620@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@619@01))
    ($SortWrappers.IntTo$Snap q$v@620@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 280 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 15
; [eval] !($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 15
(set-option :timeout 10)
(assert (not (>
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
    3)
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (>
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 290 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 290 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 290 | !($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [eval] 2 == 0
; [then-branch: 291 | False | dead]
; [else-branch: 291 | True | live]
(push) ; 16
; [else-branch: 291 | True]
(pop) ; 16
; [eval] !(2 == 0)
; [eval] 2 == 0
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 292 | True | live]
; [else-branch: 292 | False | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 292 | True]
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) < 0
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
        3)))
      2))
    0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) < 0 | dead]
; [else-branch: 293 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) < 0) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 293 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
        3)))
      2))
    0)))
(pop) ; 17
; [eval] !($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) < 0)
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) < 0
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 17
(set-option :timeout 10)
(assert (not (<
  ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
    3))) 2 (div
    ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)))
    2))
  0)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
        3)))
      2))
    0))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) < 0) | live]
; [else-branch: 294 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) < 0 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 294 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) < 0)]
(assert (not
  (<
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
        3)))
      2))
    0)))
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
        3)))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
; [else-branch: 295 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 295 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
        3)))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(pop) ; 18
; [eval] !($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(push) ; 18
(set-option :timeout 10)
(assert (not (>
  ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
    3))) 2 (div
    ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)))
    2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
        3)))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 296 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
; [else-branch: 296 | $div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 296 | !($div[Int]($unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)), 2, $unwrap[Int]($wrap[$Int]($unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3)) / 2) > 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (>
    ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3))) 2 (div
      ($unwrap<Int> ($wrap<$Int> (*
        ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
        3)))
      2))
    115792089237316195423570985008687907853269984665640564039457584007913129639935)))
; [exec]
; self := ($struct_set(self, 1, $unwrap($wrap($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self,
;   1)): Int))) *
;   3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) *
;   3)) \
;   2)))): $Struct)
; [eval] ($struct_set(self, 1, $unwrap($wrap($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)))): $Struct)
; [eval] $unwrap($wrap($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)))
; [eval] $wrap($div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2))
; [eval] $div($unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)), 2, $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)) \ 2
; [eval] $unwrap($wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3))
; [eval] $wrap($unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3)
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int))) * 3
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Int)))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Int))
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const self@623@01 $Struct)
(assert (=
  self@623@01
  ($struct_set<$Struct> self@616@01 1 ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($wrap<$Int> (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
    3))) 2 (div
    ($unwrap<Int> ($wrap<$Int> (*
      ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
      3)))
    2)))))))
; [exec]
; inhale acc(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int)), write)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(declare-const $t@624@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not $out_of_gas@524@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not $out_of_gas@524@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | $out_of_gas@524@01 | live]
; [else-branch: 297 | !($out_of_gas@524@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 297 | $out_of_gas@524@01]
(assert $out_of_gas@524@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [then-branch: 298 | False | dead]
; [else-branch: 298 | True | live]
(push) ; 20
; [else-branch: 298 | True]
(pop) ; 20
; [eval] !$succ
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | True | live]
; [else-branch: 299 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 299 | True]
; [exec]
; assert old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct),
;   ($struct_get($struct_loc($old_self, 2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write)
; [eval] old(!s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write)
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | dead]
; [else-branch: 300 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 300 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@512@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
; [exec]
; assert old(($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)))
; [eval] old(($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | dead]
; [else-branch: 301 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 301 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@625@01 $Snap)
(assert (= $t@625@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@626@01 $Struct)
(assert (=
  self@626@01
  ($struct_set<$Struct> self@512@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@512@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 21
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@626@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@626@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@627@01 Int)
(declare-const q$v@628@01 Int)
(push) ; 21
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 22
; [then-branch: 302 | !(0 <= q$a@627@01) | live]
; [else-branch: 302 | 0 <= q$a@627@01 | live]
(push) ; 23
; [then-branch: 302 | !(0 <= q$a@627@01)]
(assert (not (<= 0 q$a@627@01)))
(pop) ; 23
(push) ; 23
; [else-branch: 302 | 0 <= q$a@627@01]
(assert (<= 0 q$a@627@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 24
; [then-branch: 303 | !(q$a@627@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 303 | q$a@627@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 25
; [then-branch: 303 | !(q$a@627@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@627@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 25
(push) ; 25
; [else-branch: 303 | q$a@627@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@627@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 26
; [then-branch: 304 | !(0 <= q$v@628@01) | live]
; [else-branch: 304 | 0 <= q$v@628@01 | live]
(push) ; 27
; [then-branch: 304 | !(0 <= q$v@628@01)]
(assert (not (<= 0 q$v@628@01)))
(pop) ; 27
(push) ; 27
; [else-branch: 304 | 0 <= q$v@628@01]
(assert (<= 0 q$v@628@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@628@01) (not (<= 0 q$v@628@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@628@01) (not (<= 0 q$v@628@01))))))
(assert (or
  (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@627@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@627@01)
  (and
    (<= 0 q$a@627@01)
    (=>
      (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@628@01) (not (<= 0 q$v@628@01)))))
    (or
      (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@627@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@627@01) (not (<= 0 q$a@627@01))))
(push) ; 22
; [then-branch: 305 | 0 <= q$a@627@01 && q$a@627@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@628@01 && q$v@628@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 305 | !(0 <= q$a@627@01 && q$a@627@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@628@01 && q$v@628@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 23
; [then-branch: 305 | 0 <= q$a@627@01 && q$a@627@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@628@01 && q$v@628@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@627@01)
  (and
    (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@628@01)
      (<=
        q$v@628@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 24
; [then-branch: 306 | q$v@628@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@626@01, 3)), q$a@627@01) | live]
; [else-branch: 306 | q$v@628@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@626@01, 3)), q$a@627@01) | live]
(push) ; 25
; [then-branch: 306 | q$v@628@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@626@01, 3)), q$a@627@01)]
(assert (=
  q$v@628@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)) q$a@627@01)))
(pop) ; 25
(push) ; 25
; [else-branch: 306 | q$v@628@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@626@01, 3)), q$a@627@01)]
(assert (not
  (=
    q$v@628@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)) q$a@627@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@628@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)) q$a@627@01)))
  (=
    q$v@628@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)) q$a@627@01))))
(pop) ; 23
(push) ; 23
; [else-branch: 305 | !(0 <= q$a@627@01 && q$a@627@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@628@01 && q$v@628@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@627@01)
    (and
      (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@628@01)
        (<=
          q$v@628@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@627@01)
    (and
      (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@628@01)
        (<=
          q$v@628@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@627@01)
    (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@628@01)
    (<=
      q$v@628@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@628@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)) q$a@627@01)))
      (=
        q$v@628@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)) q$a@627@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@627@01)
      (and
        (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@628@01)
          (<=
            q$v@628@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@627@01)
    (and
      (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@628@01)
        (<=
          q$v@628@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@629@01 $PSF<$accessible$withdraw>)
(declare-const s@630@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 21
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@627@01 Int) (q$v@628@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@627@01)
      (and
        (<= 0 q$a@627@01)
        (=>
          (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@628@01) (not (<= 0 q$v@628@01)))))
        (or
          (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@627@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@627@01) (not (<= 0 q$a@627@01)))
    (=>
      (and
        (<= 0 q$a@627@01)
        (and
          (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@628@01)
            (<=
              q$v@628@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@627@01)
        (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@628@01)
        (<=
          q$v@628@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@628@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)) q$a@627@01)))
          (=
            q$v@628@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@626@01 3)) q$a@627@01)))))
    (or
      (not
        (and
          (<= 0 q$a@627@01)
          (and
            (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@628@01)
              (<=
                q$v@628@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@627@01)
        (and
          (<= q$a@627@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@628@01)
            (<=
              q$v@628@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@629@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@627@01))
    ($SortWrappers.IntTo$Snap q$v@628@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@627@01))
    ($SortWrappers.IntTo$Snap q$v@628@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 297 | !($out_of_gas@524@01)]
(assert (not $out_of_gas@524@01))
(pop) ; 19
; [eval] !$out_of_gas
(push) ; 19
(set-option :timeout 10)
(assert (not $out_of_gas@524@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not $out_of_gas@524@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | !($out_of_gas@524@01) | live]
; [else-branch: 307 | $out_of_gas@524@01 | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 307 | !($out_of_gas@524@01)]
(assert (not $out_of_gas@524@01))
; [exec]
; label end
(push) ; 20
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | True | live]
; [else-branch: 308 | False | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 308 | True]
; [exec]
; assert !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct)) ==>
;   perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self,
;   2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) ==
;   1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct)) ==> perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] !s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc($old_self, 2)): $Struct)
; [eval] $struct_loc($old_self, 2)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@623@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@623@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@623@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))) | live]
; [else-branch: 309 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@623@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))) | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 309 | !(s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@623@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2))))]
(assert (not
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@623@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))))
; [eval] perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int))) == 1 * write
; [eval] perm(e$ThroneClaimed(($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int), ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int]), ($struct_get($struct_loc(self, 1)): Int)))
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)): Int)
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 0)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)): Seq[Int])
; [eval] $struct_loc(($struct_get($struct_loc(self, 2)): $Struct), 1)
; [eval] ($struct_get($struct_loc(self, 2)): $Struct)
; [eval] $struct_loc(self, 2)
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
; [eval] 1 * write
(pop) ; 22
(push) ; 22
; [else-branch: 309 | s$struct$Monarch$eq[Bool]($struct_get[$Struct]($struct_loc[Int](self@623@01, 2)), $struct_get[$Struct]($struct_loc[Int](self@512@01, 2)))]
(assert (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@623@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or
  (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@623@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2)))
  (not
    (s$struct$Monarch$eq<Bool> ($struct_get<$Struct> ($struct_loc<Int> self@623@01 2)) ($struct_get<$Struct> ($struct_loc<Int> self@512@01 2))))))
; [exec]
; assert ($struct_get($struct_loc(msg, 1)): Int) <
;   ($struct_get($struct_loc($old_self, 1)): Int) ==>
;   s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self,
;   2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int) ==> s$struct$Monarch$eq(($struct_get($struct_loc(self, 2)): $Struct), ($struct_get($struct_loc($old_self, 2)): $Struct))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) < ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
; [eval] ($struct_get($struct_loc($old_self, 1)): Int)
; [eval] $struct_loc($old_self, 1)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | $struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)) | dead]
; [else-branch: 310 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1))) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 310 | !($struct_get[Int]($struct_loc[Int](msg@508@01, 1)) < $struct_get[Int]($struct_loc[Int](self@512@01, 1)))]
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (not
  (<
    ($struct_get<Int> ($struct_loc<Int> msg@508@01 1))
    ($struct_get<Int> ($struct_loc<Int> self@512@01 1)))))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@631@01 $Snap)
(assert (= $t@631@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@525@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 4, ($struct_get($struct_loc(self, 4)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 4)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
(declare-const self@632@01 $Struct)
(assert (=
  self@632@01
  ($struct_set<$Struct> self@623@01 4 (+
    ($struct_get<Int> ($struct_loc<Int> self@623@01 4))
    l$havoc@525@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 4)): Int) >=
;   ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int) >= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): Int)
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(set-option :timeout 0)
(push) ; 21
(assert (not (>=
  ($struct_get<Int> ($struct_loc<Int> self@632@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($struct_get<Int> ($struct_loc<Int> self@632@01 4))
  ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)))))
; [exec]
; assert (forall q$a: Int, q$v: Int ::
;     { $accessible$withdraw(1, q$a, q$v) }
;     0 <= q$a &&
;     (q$a <= 1461501637330902918203684832716283019655932542975 &&
;     (0 <= q$v &&
;     q$v <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==>
;     q$v ==
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==>
;     true)
; [eval] (forall q$a: Int, q$v: Int :: { $accessible$withdraw(1, q$a, q$v) } 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true)
(declare-const q$a@633@01 Int)
(declare-const q$v@634@01 Int)
(push) ; 21
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)) ==> q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] 0 <= q$a && (q$a <= 1461501637330902918203684832716283019655932542975 && (0 <= q$v && q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935))
; [eval] 0 <= q$a
(push) ; 22
; [then-branch: 311 | !(0 <= q$a@633@01) | live]
; [else-branch: 311 | 0 <= q$a@633@01 | live]
(push) ; 23
; [then-branch: 311 | !(0 <= q$a@633@01)]
(assert (not (<= 0 q$a@633@01)))
(pop) ; 23
(push) ; 23
; [else-branch: 311 | 0 <= q$a@633@01]
(assert (<= 0 q$a@633@01))
; [eval] q$a <= 1461501637330902918203684832716283019655932542975
(push) ; 24
; [then-branch: 312 | !(q$a@633@01 <= 1461501637330902918203684832716283019655932542975) | live]
; [else-branch: 312 | q$a@633@01 <= 1461501637330902918203684832716283019655932542975 | live]
(push) ; 25
; [then-branch: 312 | !(q$a@633@01 <= 1461501637330902918203684832716283019655932542975)]
(assert (not (<= q$a@633@01 1461501637330902918203684832716283019655932542975)))
(pop) ; 25
(push) ; 25
; [else-branch: 312 | q$a@633@01 <= 1461501637330902918203684832716283019655932542975]
(assert (<= q$a@633@01 1461501637330902918203684832716283019655932542975))
; [eval] 0 <= q$v
(push) ; 26
; [then-branch: 313 | !(0 <= q$v@634@01) | live]
; [else-branch: 313 | 0 <= q$v@634@01 | live]
(push) ; 27
; [then-branch: 313 | !(0 <= q$v@634@01)]
(assert (not (<= 0 q$v@634@01)))
(pop) ; 27
(push) ; 27
; [else-branch: 313 | 0 <= q$v@634@01]
(assert (<= 0 q$v@634@01))
; [eval] q$v <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$v@634@01) (not (<= 0 q$v@634@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
  (and
    (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
    (or (<= 0 q$v@634@01) (not (<= 0 q$v@634@01))))))
(assert (or
  (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
  (not (<= q$a@633@01 1461501637330902918203684832716283019655932542975))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 q$a@633@01)
  (and
    (<= 0 q$a@633@01)
    (=>
      (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
        (or (<= 0 q$v@634@01) (not (<= 0 q$v@634@01)))))
    (or
      (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
      (not (<= q$a@633@01 1461501637330902918203684832716283019655932542975))))))
(assert (or (<= 0 q$a@633@01) (not (<= 0 q$a@633@01))))
(push) ; 22
; [then-branch: 314 | 0 <= q$a@633@01 && q$a@633@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@634@01 && q$v@634@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935 | live]
; [else-branch: 314 | !(0 <= q$a@633@01 && q$a@633@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@634@01 && q$v@634@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935) | live]
(push) ; 23
; [then-branch: 314 | 0 <= q$a@633@01 && q$a@633@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@634@01 && q$v@634@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (and
  (<= 0 q$a@633@01)
  (and
    (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
    (and
      (<= 0 q$v@634@01)
      (<=
        q$v@634@01
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int) ==> true
; [eval] q$v == ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), q$a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 24
; [then-branch: 315 | q$v@634@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@632@01, 3)), q$a@633@01) | live]
; [else-branch: 315 | q$v@634@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@632@01, 3)), q$a@633@01) | live]
(push) ; 25
; [then-branch: 315 | q$v@634@01 == $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@632@01, 3)), q$a@633@01)]
(assert (=
  q$v@634@01
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)) q$a@633@01)))
(pop) ; 25
(push) ; 25
; [else-branch: 315 | q$v@634@01 != $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@632@01, 3)), q$a@633@01)]
(assert (not
  (=
    q$v@634@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)) q$a@633@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      q$v@634@01
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)) q$a@633@01)))
  (=
    q$v@634@01
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)) q$a@633@01))))
(pop) ; 23
(push) ; 23
; [else-branch: 314 | !(0 <= q$a@633@01 && q$a@633@01 <= 1461501637330902918203684832716283019655932542975 && 0 <= q$v@634@01 && q$v@634@01 <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)]
(assert (not
  (and
    (<= 0 q$a@633@01)
    (and
      (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@634@01)
        (<=
          q$v@634@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (=>
  (and
    (<= 0 q$a@633@01)
    (and
      (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@634@01)
        (<=
          q$v@634@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))
  (and
    (<= 0 q$a@633@01)
    (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
    (<= 0 q$v@634@01)
    (<=
      q$v@634@01
      115792089237316195423570985008687907853269984665640564039457584007913129639935)
    (or
      (not
        (=
          q$v@634@01
          ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)) q$a@633@01)))
      (=
        q$v@634@01
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)) q$a@633@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 q$a@633@01)
      (and
        (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
        (and
          (<= 0 q$v@634@01)
          (<=
            q$v@634@01
            115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
  (and
    (<= 0 q$a@633@01)
    (and
      (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
      (and
        (<= 0 q$v@634@01)
        (<=
          q$v@634@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
(declare-const sm@635@01 $PSF<$accessible$withdraw>)
(declare-const s@636@01 $Snap)
; Definitional axioms for snapshot map values
(pop) ; 21
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$a@633@01 Int) (q$v@634@01 Int)) (!
  (and
    (=>
      (<= 0 q$a@633@01)
      (and
        (<= 0 q$a@633@01)
        (=>
          (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
            (or (<= 0 q$v@634@01) (not (<= 0 q$v@634@01)))))
        (or
          (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
          (not (<= q$a@633@01 1461501637330902918203684832716283019655932542975)))))
    (or (<= 0 q$a@633@01) (not (<= 0 q$a@633@01)))
    (=>
      (and
        (<= 0 q$a@633@01)
        (and
          (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@634@01)
            (<=
              q$v@634@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))
      (and
        (<= 0 q$a@633@01)
        (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
        (<= 0 q$v@634@01)
        (<=
          q$v@634@01
          115792089237316195423570985008687907853269984665640564039457584007913129639935)
        (or
          (not
            (=
              q$v@634@01
              ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)) q$a@633@01)))
          (=
            q$v@634@01
            ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@632@01 3)) q$a@633@01)))))
    (or
      (not
        (and
          (<= 0 q$a@633@01)
          (and
            (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
            (and
              (<= 0 q$v@634@01)
              (<=
                q$v@634@01
                115792089237316195423570985008687907853269984665640564039457584007913129639935)))))
      (and
        (<= 0 q$a@633@01)
        (and
          (<= q$a@633@01 1461501637330902918203684832716283019655932542975)
          (and
            (<= 0 q$v@634@01)
            (<=
              q$v@634@01
              115792089237316195423570985008687907853269984665640564039457584007913129639935))))))
  :pattern (($PSF.loc_$accessible$withdraw ($PSF.lookup_$accessible$withdraw (as sm@635@01  $PSF<$accessible$withdraw>) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@633@01))
    ($SortWrappers.IntTo$Snap q$v@634@01))) ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap 1)
      ($SortWrappers.IntTo$Snap q$a@633@01))
    ($SortWrappers.IntTo$Snap q$v@634@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourcesexamplesEtherKing.vy.vpr@1262@11@1262@343-aux|)))
(pop) ; 20
; [eval] !$succ
; [then-branch: 316 | False | dead]
; [else-branch: 316 | True | live]
(push) ; 20
; [else-branch: 316 | True]
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 307 | $out_of_gas@524@01]
(assert $out_of_gas@524@01)
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(push) ; 15
; [else-branch: 290 | $unwrap[Int]($wrap[$Int]($struct_get[Int]($struct_loc[Int](self@616@01, 1)))) * 3 > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (*
    ($unwrap<Int> ($wrap<$Int> ($struct_get<Int> ($struct_loc<Int> self@616@01 1))))
    3)
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 277 | $struct_get[Int]($struct_loc[Int]($struct_get[$Struct]($struct_loc[Int](self@587@01, 2)), 0)) != $struct_get[Int]($struct_loc[Int](self@587@01, 0))]
(assert (not
  (=
    ($struct_get<Int> ($struct_loc<Int> ($struct_get<$Struct> ($struct_loc<Int> self@587@01 2)) 0))
    ($struct_get<Int> ($struct_loc<Int> self@587@01 0)))))
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 223 | $unwrap[Int]($wrap[$Int]($map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@571@01, 3)), $struct_get[Int]($struct_loc[Int](self@571@01, 0))))) + $unwrap[Int](l$wizard_commission@579@01) > 115792089237316195423570985008687907853269984665640564039457584007913129639935]
(assert (>
  (+
    ($unwrap<Int> ($wrap<$Int> ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@571@01 3)) ($struct_get<Int> ($struct_loc<Int> self@571@01 0)))))
    ($unwrap<Int> l$wizard_commission@579@01))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 196 | $unwrap[Int](l$value_paid@572@01) != $struct_get[Int]($struct_loc[Int](self@571@01, 1))]
(assert (not
  (=
    ($unwrap<Int> l$value_paid@572@01)
    ($struct_get<Int> ($struct_loc<Int> self@571@01 1)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
