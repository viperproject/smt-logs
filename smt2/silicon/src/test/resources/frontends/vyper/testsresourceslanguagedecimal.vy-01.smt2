(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-27 02:51:22
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort s$struct$self 0)
(declare-sort $Struct 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Contract 0)
(declare-sort $Blockchain 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
; ////////// Symbols
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun s$struct$self$init<$Struct> (Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun $accessible$times%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$times_0%trigger ($Snap Int Int Int Int Int) Bool)
(declare-fun $accessible$gaps_fail%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$gaps_fail_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$invert_fail%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$invert_fail_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$check%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$check_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$check_fail_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$check_fail_0_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$check_fail_1%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$check_fail_1_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$div3%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$div3_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($arg_0 Int) ($arg_1 Int) ($arg_2 Bool) ($arg_3 $Map<Int~_Int>) ($arg_4 $Map<Int~_Int>) ($arg_5 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (=
        ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5) 0))
        $arg_0)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5) 1))
          $arg_1)
        (and
          (=
            ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5) 2))
            $arg_2)
          (and
            (=
              ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5) 3))
              $arg_3)
            (and
              (=
                ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5) 4))
                $arg_4)
              (=
                ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5) 5))
                $arg_5)))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (=
            ($struct_get<Int> ($struct_loc<Int> $l 0))
            ($struct_get<Int> ($struct_loc<Int> $r 0)))
          (and
            (=
              ($struct_get<Int> ($struct_loc<Int> $l 1))
              ($struct_get<Int> ($struct_loc<Int> $r 1)))
            (and
              (=
                ($struct_get<Bool> ($struct_loc<Int> $l 2))
                ($struct_get<Bool> ($struct_loc<Int> $r 2)))
              (and
                ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 3)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 3)))
                (and
                  ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 4)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 4)))
                  (=
                    ($struct_get<Bool> ($struct_loc<Int> $l 5))
                    ($struct_get<Bool> ($struct_loc<Int> $r 5)))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-2068|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-2069|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-2074|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-2075|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-2070|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-2071|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-2076|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-2077|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-2072|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-2073|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-2078|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-2079|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))))
(assert (= ($Snap.second $t@8@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))))
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@11@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 4
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q0@11@01)) | live]
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q0@11@01) | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q0@11@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 3)), $q0@11@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@11@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@628@11@628@354-aux|)))
(assert (forall (($q0@11@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@11@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@628@11@628@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $q0@13@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@13@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@13@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $q0@13@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@629@11@629@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@15@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 4)
(push) ; 4
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 4)), $q1@15@01)) | live]
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 4)), $q1@15@01) | live]
(push) ; 5
; [then-branch: 1 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 4)), $q1@15@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 4)), $q1@15@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@15@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@630@11@630@354-aux|)))
(assert (forall (($q1@15@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@630@11@630@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])): Int))
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])): Int))
(declare-const $q1@17@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@17@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@17@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 4)) $q1@17@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@631@11@631@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@18@01 $Snap)
(assert (= $t@18@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 ($Snap.combine ($Snap.first $t@19@01) ($Snap.second $t@19@01))))
(assert (= ($Snap.first $t@19@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))))
(assert (= ($Snap.second $t@19@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@20@01 $Snap)
(assert (= $t@20@01 ($Snap.combine ($Snap.first $t@20@01) ($Snap.second $t@20@01))))
(assert (= ($Snap.first $t@20@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))))
(assert (= ($Snap.second $t@20@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@22@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 4
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q0@22@01)) | live]
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q0@22@01) | live]
(push) ; 5
; [then-branch: 2 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q0@22@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 3)), $q0@22@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@22@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@635@11@635@354-aux|)))
(assert (forall (($q0@22@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@22@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@635@11@635@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $q0@24@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@24@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@24@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $q0@24@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@636@11@636@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@26@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 4)
(push) ; 4
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 4)), $q1@26@01)) | live]
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 4)), $q1@26@01) | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 4)), $q1@26@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 4)), $q1@26@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@26@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@637@11@637@354-aux|)))
(assert (forall (($q1@26@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@26@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@637@11@637@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])): Int))
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])): Int))
(declare-const $q1@28@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@28@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@28@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 4)) $q1@28@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@638@11@638@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 0)): Int) &&
;   ($struct_get($struct_loc($self$2, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 ($Snap.combine ($Snap.first $t@30@01) ($Snap.second $t@30@01))))
(assert (= ($Snap.first $t@30@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))))
(assert (= ($Snap.second $t@30@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 0)): Int)
; [eval] $struct_loc($self$2, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 1)): Int) &&
;   ($struct_get($struct_loc($self$2, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@31@01 $Snap)
(assert (= $t@31@01 ($Snap.combine ($Snap.first $t@31@01) ($Snap.second $t@31@01))))
(assert (= ($Snap.first $t@31@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))))
(assert (= ($Snap.second $t@31@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 1)): Int)
; [eval] $struct_loc($self$2, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@33@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(push) ; 4
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q0@33@01)) | live]
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q0@33@01) | live]
(push) ; 5
; [then-branch: 4 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q0@33@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 3)), $q0@33@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@33@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@642@11@642@354-aux|)))
(assert (forall (($q0@33@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@642@11@642@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int))
(declare-const $t@34@01 $Snap)
(assert (= $t@34@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int))
(declare-const $q0@35@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@35@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@35@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $q0@35@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@643@11@643@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@37@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 4)
(push) ; 4
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 4)), $q1@37@01)) | live]
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 4)), $q1@37@01) | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 4)), $q1@37@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 4)), $q1@37@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@37@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@644@11@644@354-aux|)))
(assert (forall (($q1@37@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@37@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@644@11@644@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int])): Int))
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int])): Int))
(declare-const $q1@39@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@39@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@39@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 4)) $q1@39@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@645@11@645@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@40@01 $Snap)
(assert (= $t@40@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 ($Snap.combine ($Snap.first $t@41@01) ($Snap.second $t@41@01))))
(assert (= ($Snap.first $t@41@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@41@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@42@01 $Snap)
(assert (= $t@42@01 ($Snap.combine ($Snap.first $t@42@01) ($Snap.second $t@42@01))))
(assert (= ($Snap.first $t@42@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@42@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 ($Snap.combine ($Snap.first $t@43@01) ($Snap.second $t@43@01))))
(assert (= ($Snap.first $t@43@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@43@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@44@01 $Snap)
(assert (= $t@44@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 ($Snap.combine ($Snap.first $t@45@01) ($Snap.second $t@45@01))))
(assert (= ($Snap.first $t@45@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@45@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@48@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@50@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@50@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $a@50@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 3)) $a@50@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $a@50@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@654@11@654@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@52@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@52@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $a@52@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 3)) $a@52@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 3)) $a@52@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@655@11@655@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@53@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@54@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@55@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@56@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@57@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@58@01 Bool)
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 0)): Int) &&
;   ($struct_get($struct_loc($self$0, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 ($Snap.combine ($Snap.first $t@59@01) ($Snap.second $t@59@01))))
(assert (= ($Snap.first $t@59@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@53@01 0))))
(assert (= ($Snap.second $t@59@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 0)): Int)
; [eval] $struct_loc($self$0, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@53@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 1)): Int) &&
;   ($struct_get($struct_loc($self$0, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@60@01 $Snap)
(assert (= $t@60@01 ($Snap.combine ($Snap.first $t@60@01) ($Snap.second $t@60@01))))
(assert (= ($Snap.first $t@60@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@53@01 1))))
(assert (= ($Snap.second $t@60@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 1)): Int)
; [eval] $struct_loc($self$0, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@53@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@62@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 4
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@53@01, 3)), $q0@62@01)) | live]
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@53@01, 3)), $q0@62@01) | live]
(push) ; 5
; [then-branch: 6 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@53@01, 3)), $q0@62@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@53@01, 3)), $q0@62@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@62@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@668@11@668@354-aux|)))
(assert (forall (($q0@62@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@668@11@668@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int))
(declare-const $q0@64@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@64@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@64@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $q0@64@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@669@11@669@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@66@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 4)
(push) ; 4
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@53@01, 4)), $q1@66@01)) | live]
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@53@01, 4)), $q1@66@01) | live]
(push) ; 5
; [then-branch: 7 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@53@01, 4)), $q1@66@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 7 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@53@01, 4)), $q1@66@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@66@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@670@11@670@354-aux|)))
(assert (forall (($q1@66@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@670@11@670@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])): Int))
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])): Int))
(declare-const $q1@68@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@68@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@68@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 4)) $q1@68@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@671@11@671@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@69@01 $Snap)
(assert (= $t@69@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@53@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 0)): Int) &&
;   ($struct_get($struct_loc($self$1, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 ($Snap.combine ($Snap.first $t@70@01) ($Snap.second $t@70@01))))
(assert (= ($Snap.first $t@70@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@55@01 0))))
(assert (= ($Snap.second $t@70@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 0)): Int)
; [eval] $struct_loc($self$1, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@55@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 1)): Int) &&
;   ($struct_get($struct_loc($self$1, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 ($Snap.combine ($Snap.first $t@71@01) ($Snap.second $t@71@01))))
(assert (= ($Snap.first $t@71@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@55@01 1))))
(assert (= ($Snap.second $t@71@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 1)): Int)
; [eval] $struct_loc($self$1, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@55@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@73@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 4
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@55@01, 3)), $q0@73@01)) | live]
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@55@01, 3)), $q0@73@01) | live]
(push) ; 5
; [then-branch: 8 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@55@01, 3)), $q0@73@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@55@01, 3)), $q0@73@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@73@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@675@11@675@354-aux|)))
(assert (forall (($q0@73@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@73@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@675@11@675@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int))
(declare-const $q0@75@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@75@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@75@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $q0@75@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@676@11@676@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@77@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 4)
(push) ; 4
; [then-branch: 9 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@55@01, 4)), $q1@77@01)) | live]
; [else-branch: 9 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@55@01, 4)), $q1@77@01) | live]
(push) ; 5
; [then-branch: 9 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@55@01, 4)), $q1@77@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 9 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@55@01, 4)), $q1@77@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@77@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@677@11@677@354-aux|)))
(assert (forall (($q1@77@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@677@11@677@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])): Int))
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])): Int))
(declare-const $q1@79@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 4)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@79@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@79@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 4)) $q1@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@678@11@678@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@55@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@81@01 $Snap)
(assert (= $t@81@01 ($Snap.combine ($Snap.first $t@81@01) ($Snap.second $t@81@01))))
(assert (= ($Snap.first $t@81@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@57@01 0))))
(assert (= ($Snap.second $t@81@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@57@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 ($Snap.combine ($Snap.first $t@82@01) ($Snap.second $t@82@01))))
(assert (= ($Snap.first $t@82@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@57@01 1))))
(assert (= ($Snap.second $t@82@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@57@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 ($Snap.combine ($Snap.first $t@83@01) ($Snap.second $t@83@01))))
(assert (= ($Snap.first $t@83@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@57@01 2))))
(assert (= ($Snap.second $t@83@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@57@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@57@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 ($Snap.combine ($Snap.first $t@85@01) ($Snap.second $t@85@01))))
(assert (= ($Snap.first $t@85@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@57@01 4))))
(assert (= ($Snap.second $t@85@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@57@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@57@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@88@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 3)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@88@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $a@88@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@53@01 3)) $a@88@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@55@01 3)) $a@88@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@686@11@686@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@89@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@90@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@91@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@92@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@93@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@94@01 Int)
; [exec]
; var block: $Struct
(declare-const block@95@01 $Struct)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 ($Snap.combine ($Snap.first $t@96@01) ($Snap.second $t@96@01))))
(assert (= ($Snap.first $t@96@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@89@01 0))))
(assert (= ($Snap.second $t@96@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@89@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 ($Snap.combine ($Snap.first $t@97@01) ($Snap.second $t@97@01))))
(assert (= ($Snap.first $t@97@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@89@01 1))))
(assert (= ($Snap.second $t@97@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@89@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@99@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@89@01, 3)), $q0@99@01)) | live]
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@89@01, 3)), $q0@99@01) | live]
(push) ; 5
; [then-branch: 10 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@89@01, 3)), $q0@99@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@89@01, 3)), $q0@99@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@99@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@700@11@700@345-aux|)))
(assert (forall (($q0@99@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@99@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@700@11@700@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@101@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@101@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@101@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 3)) $q0@101@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@701@11@701@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@103@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@89@01, 4)), $q1@103@01)) | live]
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@89@01, 4)), $q1@103@01) | live]
(push) ; 5
; [then-branch: 11 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@89@01, 4)), $q1@103@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@89@01, 4)), $q1@103@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@103@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@702@11@702@345-aux|)))
(assert (forall (($q1@103@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@702@11@702@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@104@01 $Snap)
(assert (= $t@104@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@105@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@105@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@105@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@89@01 4)) $q1@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@703@11@703@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@106@01 $Snap)
(assert (= $t@106@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@89@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 0)): Int) &&
;   ($struct_get($struct_loc($pre_self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@107@01 $Snap)
(assert (= $t@107@01 ($Snap.combine ($Snap.first $t@107@01) ($Snap.second $t@107@01))))
(assert (= ($Snap.first $t@107@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@91@01 0))))
(assert (= ($Snap.second $t@107@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 0)): Int)
; [eval] $struct_loc($pre_self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@91@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 1)): Int) &&
;   ($struct_get($struct_loc($pre_self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 ($Snap.combine ($Snap.first $t@108@01) ($Snap.second $t@108@01))))
(assert (= ($Snap.first $t@108@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@91@01 1))))
(assert (= ($Snap.second $t@108@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 1)): Int)
; [eval] $struct_loc($pre_self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@91@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@109@01 $Snap)
(assert (= $t@109@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@110@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(push) ; 4
; [then-branch: 12 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@91@01, 3)), $q0@110@01)) | live]
; [else-branch: 12 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@91@01, 3)), $q0@110@01) | live]
(push) ; 5
; [then-branch: 12 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@91@01, 3)), $q0@110@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@91@01, 3)), $q0@110@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@110@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@707@11@707@360-aux|)))
(assert (forall (($q0@110@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@110@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@707@11@707@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int))
(declare-const $t@111@01 $Snap)
(assert (= $t@111@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@112@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 3)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@112@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@112@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 3)) $q0@112@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@708@11@708@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@114@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 4)
(push) ; 4
; [then-branch: 13 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@91@01, 4)), $q1@114@01)) | live]
; [else-branch: 13 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@91@01, 4)), $q1@114@01) | live]
(push) ; 5
; [then-branch: 13 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@91@01, 4)), $q1@114@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 13 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@91@01, 4)), $q1@114@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@114@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@709@11@709@360-aux|)))
(assert (forall (($q1@114@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@114@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@709@11@709@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int])): Int))
(declare-const $t@115@01 $Snap)
(assert (= $t@115@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@116@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 4)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@116@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@116@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@91@01 4)) $q1@116@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@710@11@710@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@117@01 $Snap)
(assert (= $t@117@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@91@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 ($Snap.combine ($Snap.first $t@118@01) ($Snap.second $t@118@01))))
(assert (= ($Snap.first $t@118@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@95@01 0))))
(assert (= ($Snap.second $t@118@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@95@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@119@01 $Snap)
(assert (= $t@119@01 ($Snap.combine ($Snap.first $t@119@01) ($Snap.second $t@119@01))))
(assert (= ($Snap.first $t@119@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@95@01 1))))
(assert (= ($Snap.second $t@119@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@95@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 ($Snap.combine ($Snap.first $t@120@01) ($Snap.second $t@120@01))))
(assert (= ($Snap.first $t@120@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@95@01 2))))
(assert (= ($Snap.second $t@120@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@95@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@95@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 ($Snap.combine ($Snap.first $t@122@01) ($Snap.second $t@122@01))))
(assert (= ($Snap.first $t@122@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@95@01 4))))
(assert (= ($Snap.second $t@122@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@95@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@95@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@94@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@125@01 $Snap)
(assert (= $t@125@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@126@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@127@01 $Struct)
(assert (=
  self@127@01
  ($struct_set<$Struct> self@89@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@89@01 0))
    $havoc@94@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$times ----------
(declare-const l$a@128@01 $Int)
(declare-const l$b@129@01 $Int)
(declare-const $succ@130@01 Bool)
(declare-const $res@131@01 Int)
(declare-const l$a@132@01 $Int)
(declare-const l$b@133@01 $Int)
(declare-const $succ@134@01 Bool)
(declare-const $res@135@01 Int)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@136@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@137@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@138@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@139@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@140@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@141@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@142@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@143@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@144@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@145@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@146@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@147@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@148@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@149@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@150@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@151@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@152@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@153@01 $Snap)
(assert (= $t@153@01 ($Snap.combine ($Snap.first $t@153@01) ($Snap.second $t@153@01))))
(assert (= ($Snap.first $t@153@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@140@01 0))))
(assert (= ($Snap.second $t@153@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@140@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 ($Snap.combine ($Snap.first $t@154@01) ($Snap.second $t@154@01))))
(assert (= ($Snap.first $t@154@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@140@01 1))))
(assert (= ($Snap.second $t@154@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@140@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@156@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 14 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@140@01, 3)), $q0@156@01)) | live]
; [else-branch: 14 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@140@01, 3)), $q0@156@01) | live]
(push) ; 5
; [then-branch: 14 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@140@01, 3)), $q0@156@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 14 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@140@01, 3)), $q0@156@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@156@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@748@11@748@345-aux|)))
(assert (forall (($q0@156@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@156@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@748@11@748@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@157@01 $Snap)
(assert (= $t@157@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@158@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@158@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@158@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 3)) $q0@158@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@749@11@749@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@160@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@140@01, 4)), $q1@160@01)) | live]
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@140@01, 4)), $q1@160@01) | live]
(push) ; 5
; [then-branch: 15 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@140@01, 4)), $q1@160@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@140@01, 4)), $q1@160@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@160@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@750@11@750@345-aux|)))
(assert (forall (($q1@160@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@750@11@750@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@162@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@162@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@162@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@140@01 4)) $q1@162@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@751@11@751@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@140@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@164@01 $Snap)
(assert (= $t@164@01 ($Snap.combine ($Snap.first $t@164@01) ($Snap.second $t@164@01))))
(assert (= ($Snap.first $t@164@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@164@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -1701411834604692317316873037158841057280000000000 <= $unwrap(l$a) &&
;   $unwrap(l$a) <= 1701411834604692317316873037158841057270000000000
(declare-const $t@165@01 $Snap)
(assert (= $t@165@01 ($Snap.combine ($Snap.first $t@165@01) ($Snap.second $t@165@01))))
(assert (= ($Snap.first $t@165@01) $Snap.unit))
; [eval] -1701411834604692317316873037158841057280000000000 <= $unwrap(l$a)
; [eval] -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$a)
(assert (<=
  (- 0 1701411834604692317316873037158841057280000000000)
  ($unwrap<Int> l$a@132@01)))
(assert (= ($Snap.second $t@165@01) $Snap.unit))
; [eval] $unwrap(l$a) <= 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$a)
(assert (<= ($unwrap<Int> l$a@132@01) 1701411834604692317316873037158841057270000000000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -1701411834604692317316873037158841057280000000000 <= $unwrap(l$b) &&
;   $unwrap(l$b) <= 1701411834604692317316873037158841057270000000000
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 ($Snap.combine ($Snap.first $t@166@01) ($Snap.second $t@166@01))))
(assert (= ($Snap.first $t@166@01) $Snap.unit))
; [eval] -1701411834604692317316873037158841057280000000000 <= $unwrap(l$b)
; [eval] -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$b)
(assert (<=
  (- 0 1701411834604692317316873037158841057280000000000)
  ($unwrap<Int> l$b@133@01)))
(assert (= ($Snap.second $t@166@01) $Snap.unit))
; [eval] $unwrap(l$b) <= 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$b)
(assert (<= ($unwrap<Int> l$b@133@01) 1701411834604692317316873037158841057270000000000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 ($Snap.combine ($Snap.first $t@167@01) ($Snap.second $t@167@01))))
(assert (= ($Snap.first $t@167@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@137@01 0))))
(assert (= ($Snap.second $t@167@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@137@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 ($Snap.combine ($Snap.first $t@168@01) ($Snap.second $t@168@01))))
(assert (= ($Snap.first $t@168@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@137@01 1))))
(assert (= ($Snap.second $t@168@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@137@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@169@01 $Snap)
(assert (= $t@169@01 ($Snap.combine ($Snap.first $t@169@01) ($Snap.second $t@169@01))))
(assert (= ($Snap.first $t@169@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@137@01 2))))
(assert (= ($Snap.second $t@169@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@137@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@137@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 ($Snap.combine ($Snap.first $t@171@01) ($Snap.second $t@171@01))))
(assert (= ($Snap.first $t@171@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@137@01 4))))
(assert (= ($Snap.second $t@171@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@137@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@137@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@173@01 $Snap)
(assert (= $t@173@01 ($Snap.combine ($Snap.first $t@173@01) ($Snap.second $t@173@01))))
(assert (= ($Snap.first $t@173@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@136@01 0))))
(assert (= ($Snap.second $t@173@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@136@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@174@01 $Snap)
(assert (= $t@174@01 ($Snap.combine ($Snap.first $t@174@01) ($Snap.second $t@174@01))))
(assert (= ($Snap.first $t@174@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@136@01 1))))
(assert (= ($Snap.second $t@174@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@136@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 ($Snap.combine ($Snap.first $t@175@01) ($Snap.second $t@175@01))))
(assert (= ($Snap.first $t@175@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@136@01 2))))
(assert (= ($Snap.second $t@175@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@136@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@176@01 $Snap)
(assert (= $t@176@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@136@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@177@01 $Snap)
(assert (= $t@177@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@136@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@179@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@180@01 $Snap)
(assert (= $t@180@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@136@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)))
; [eval] $wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))
; [eval] $div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
; [eval] $unwrap($w_mul(l$a, l$b)) \ 10000000000
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
; [eval] -1701411834604692317316873037158841057280000000000
(set-option :timeout 0)
(push) ; 3
; [then-branch: 16 | $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 16 | !($unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 4
; [then-branch: 16 | $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
    ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
    10000000000))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 4
(push) ; 4
; [else-branch: 16 | !($unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)))
; [eval] $wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))
; [eval] $div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
; [eval] $unwrap($w_mul(l$a, l$b)) \ 10000000000
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (or
  (<
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) > 1701411834604692317316873037158841057270000000000 | live]
; [else-branch: 17 | !($unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 17 | $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) > 1701411834604692317316873037158841057270000000000]
(assert (or
  (<
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    1701411834604692317316873037158841057270000000000)))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | True | live]
; [else-branch: 18 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 18 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@181@01 $Snap)
(assert (= $t@181@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@151@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@182@01 $Struct)
(assert (=
  self@182@01
  ($struct_set<$Struct> self@140@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@140@01 0))
    l$havoc$1@151@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
; [then-branch: 19 | False | dead]
; [else-branch: 19 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 19 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 17 | !($unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 3
; [eval] !($unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)))
; [eval] $wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))
; [eval] $div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
; [eval] $unwrap($w_mul(l$a, l$b)) \ 10000000000
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 3
; [then-branch: 20 | $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 20 | !($unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 4
; [then-branch: 20 | $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
    ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
    10000000000))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !($unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)))
; [eval] $wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))
; [eval] $div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
; [eval] $unwrap($w_mul(l$a, l$b)) \ 10000000000
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (or
  (<
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | !($unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 21 | $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) > 1701411834604692317316873037158841057270000000000 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 21 | !($unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
        ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
        10000000000))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; $res := $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a,
;   l$b)) \
;   10000000000)))
; [eval] $unwrap($wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)))
; [eval] $wrap($div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000))
; [eval] $div($unwrap($w_mul(l$a, l$b)), 10000000000, $unwrap($w_mul(l$a, l$b)) \ 10000000000)
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
; [eval] $unwrap($w_mul(l$a, l$b)) \ 10000000000
; [eval] $unwrap($w_mul(l$a, l$b))
; [eval] $w_mul(l$a, l$b)
(declare-const $res@183@01 Int)
(assert (=
  $res@183@01
  ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
    ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
    10000000000))))))
; [exec]
; label return
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@149@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@149@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | $out_of_gas@149@01 | live]
; [else-branch: 22 | !($out_of_gas@149@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 22 | $out_of_gas@149@01]
(assert $out_of_gas@149@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | True | live]
; [else-branch: 23 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 23 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@184@01 $Snap)
(assert (= $t@184@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@151@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@185@01 $Struct)
(assert (=
  self@185@01
  ($struct_set<$Struct> self@140@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@140@01 0))
    l$havoc$1@151@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 5
; [then-branch: 24 | False | dead]
; [else-branch: 24 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 24 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 22 | !($out_of_gas@149@01)]
(assert (not $out_of_gas@149@01))
(pop) ; 4
; [eval] !$out_of_gas
(push) ; 4
(set-option :timeout 10)
(assert (not $out_of_gas@149@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not $out_of_gas@149@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | !($out_of_gas@149@01) | live]
; [else-branch: 25 | $out_of_gas@149@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 25 | !($out_of_gas@149@01)]
(assert (not $out_of_gas@149@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 26 | False | dead]
; [else-branch: 26 | True | live]
(push) ; 5
; [else-branch: 26 | True]
(pop) ; 5
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | True | live]
; [else-branch: 27 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 27 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@186@01 $Snap)
(assert (= $t@186@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@151@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@187@01 $Struct)
(assert (=
  self@187@01
  ($struct_set<$Struct> self@140@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@140@01 0))
    l$havoc$1@151@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 5
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 25 | $out_of_gas@149@01]
(assert $out_of_gas@149@01)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 21 | $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int]($wrap[$Int]($div[Int]($unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)), 10000000000, $unwrap[Int]($w_mul[$Int](l$a@132@01, l$b@133@01)) / 10000000000))) > 1701411834604692317316873037158841057270000000000]
(assert (or
  (<
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($unwrap<Int> ($wrap<$Int> ($div<Int> ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01)) 10000000000 (div
      ($unwrap<Int> ($w_mul<$Int> l$a@132@01 l$b@133@01))
      10000000000))))
    1701411834604692317316873037158841057270000000000)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$gaps_fail ----------
(declare-const l$a@188@01 $Int)
(declare-const $succ@189@01 Bool)
(declare-const $res@190@01 Int)
(declare-const l$a@191@01 $Int)
(declare-const $succ@192@01 Bool)
(declare-const $res@193@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@194@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@195@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@196@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@197@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@198@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@199@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@200@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@201@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@202@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@203@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@204@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@205@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@206@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@207@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@208@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@209@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@210@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 ($Snap.combine ($Snap.first $t@211@01) ($Snap.second $t@211@01))))
(assert (= ($Snap.first $t@211@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@198@01 0))))
(assert (= ($Snap.second $t@211@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@198@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 ($Snap.combine ($Snap.first $t@212@01) ($Snap.second $t@212@01))))
(assert (= ($Snap.first $t@212@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@198@01 1))))
(assert (= ($Snap.second $t@212@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@198@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@213@01 $Snap)
(assert (= $t@213@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@214@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 28 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@198@01, 3)), $q0@214@01)) | live]
; [else-branch: 28 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@198@01, 3)), $q0@214@01) | live]
(push) ; 5
; [then-branch: 28 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@198@01, 3)), $q0@214@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 28 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@198@01, 3)), $q0@214@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@214@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@837@11@837@345-aux|)))
(assert (forall (($q0@214@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@214@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@837@11@837@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@215@01 $Snap)
(assert (= $t@215@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@216@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@216@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@216@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 3)) $q0@216@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@838@11@838@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@217@01 $Snap)
(assert (= $t@217@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@218@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 29 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@198@01, 4)), $q1@218@01)) | live]
; [else-branch: 29 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@198@01, 4)), $q1@218@01) | live]
(push) ; 5
; [then-branch: 29 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@198@01, 4)), $q1@218@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@198@01, 4)), $q1@218@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@218@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@839@11@839@345-aux|)))
(assert (forall (($q1@218@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@218@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@839@11@839@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@220@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@220@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@220@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@198@01 4)) $q1@220@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@840@11@840@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@221@01 $Snap)
(assert (= $t@221@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@198@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 ($Snap.combine ($Snap.first $t@222@01) ($Snap.second $t@222@01))))
(assert (= ($Snap.first $t@222@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@222@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -1701411834604692317316873037158841057280000000000 <= $unwrap(l$a) &&
;   $unwrap(l$a) <= 1701411834604692317316873037158841057270000000000
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 ($Snap.combine ($Snap.first $t@223@01) ($Snap.second $t@223@01))))
(assert (= ($Snap.first $t@223@01) $Snap.unit))
; [eval] -1701411834604692317316873037158841057280000000000 <= $unwrap(l$a)
; [eval] -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$a)
(assert (<=
  (- 0 1701411834604692317316873037158841057280000000000)
  ($unwrap<Int> l$a@191@01)))
(assert (= ($Snap.second $t@223@01) $Snap.unit))
; [eval] $unwrap(l$a) <= 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$a)
(assert (<= ($unwrap<Int> l$a@191@01) 1701411834604692317316873037158841057270000000000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 ($Snap.combine ($Snap.first $t@224@01) ($Snap.second $t@224@01))))
(assert (= ($Snap.first $t@224@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@195@01 0))))
(assert (= ($Snap.second $t@224@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@195@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 ($Snap.combine ($Snap.first $t@225@01) ($Snap.second $t@225@01))))
(assert (= ($Snap.first $t@225@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@195@01 1))))
(assert (= ($Snap.second $t@225@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@195@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@226@01 $Snap)
(assert (= $t@226@01 ($Snap.combine ($Snap.first $t@226@01) ($Snap.second $t@226@01))))
(assert (= ($Snap.first $t@226@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@195@01 2))))
(assert (= ($Snap.second $t@226@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@195@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@195@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@228@01 $Snap)
(assert (= $t@228@01 ($Snap.combine ($Snap.first $t@228@01) ($Snap.second $t@228@01))))
(assert (= ($Snap.first $t@228@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@195@01 4))))
(assert (= ($Snap.second $t@228@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@195@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@229@01 $Snap)
(assert (= $t@229@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@195@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@230@01 $Snap)
(assert (= $t@230@01 ($Snap.combine ($Snap.first $t@230@01) ($Snap.second $t@230@01))))
(assert (= ($Snap.first $t@230@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@194@01 0))))
(assert (= ($Snap.second $t@230@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@194@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@231@01 $Snap)
(assert (= $t@231@01 ($Snap.combine ($Snap.first $t@231@01) ($Snap.second $t@231@01))))
(assert (= ($Snap.first $t@231@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@194@01 1))))
(assert (= ($Snap.second $t@231@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@194@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@232@01 $Snap)
(assert (= $t@232@01 ($Snap.combine ($Snap.first $t@232@01) ($Snap.second $t@232@01))))
(assert (= ($Snap.first $t@232@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@194@01 2))))
(assert (= ($Snap.second $t@232@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@194@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@233@01 $Snap)
(assert (= $t@233@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@194@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@234@01 $Snap)
(assert (= $t@234@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@194@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@235@01 $Snap)
(assert (= $t@235@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@236@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@194@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $res := $unwrap(l$a)
; [eval] $unwrap(l$a)
(declare-const $res@238@01 Int)
(assert (= $res@238@01 ($unwrap<Int> l$a@191@01)))
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@207@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@207@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | $out_of_gas@207@01 | live]
; [else-branch: 30 | !($out_of_gas@207@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 30 | $out_of_gas@207@01]
(assert $out_of_gas@207@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $succ ==>
;   $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==>
;   $unwrap(l$a) == 10000000000
; [eval] $succ ==> $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
(push) ; 4
; [then-branch: 31 | False | dead]
; [else-branch: 31 | True | live]
(push) ; 5
; [else-branch: 31 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | True | live]
; [else-branch: 32 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 32 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@209@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@240@01 $Struct)
(assert (=
  self@240@01
  ($struct_set<$Struct> self@198@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@198@01 0))
    l$havoc$1@209@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
; [then-branch: 33 | False | dead]
; [else-branch: 33 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 33 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 30 | !($out_of_gas@207@01)]
(assert (not $out_of_gas@207@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@207@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@207@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | !($out_of_gas@207@01) | live]
; [else-branch: 34 | $out_of_gas@207@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 34 | !($out_of_gas@207@01)]
(assert (not $out_of_gas@207@01))
; [exec]
; label end
; [exec]
; exhale $succ ==>
;   $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==>
;   $unwrap(l$a) == 10000000000
; [eval] $succ ==> $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | True | live]
; [else-branch: 35 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 35 | True]
; [eval] $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
; [eval] $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000
; [eval] $unwrap(l$a) > 0
; [eval] $unwrap(l$a)
(push) ; 6
; [then-branch: 36 | !($unwrap[Int](l$a@191@01) > 0) | live]
; [else-branch: 36 | $unwrap[Int](l$a@191@01) > 0 | live]
(push) ; 7
; [then-branch: 36 | !($unwrap[Int](l$a@191@01) > 0)]
(assert (not (> ($unwrap<Int> l$a@191@01) 0)))
(pop) ; 7
(push) ; 7
; [else-branch: 36 | $unwrap[Int](l$a@191@01) > 0]
(assert (> ($unwrap<Int> l$a@191@01) 0))
; [eval] $unwrap(l$a) <= 10000000000
; [eval] $unwrap(l$a)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (> ($unwrap<Int> l$a@191@01) 0) (not (> ($unwrap<Int> l$a@191@01) 0))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and (> ($unwrap<Int> l$a@191@01) 0) (<= ($unwrap<Int> l$a@191@01) 10000000000))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | $unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000 | live]
; [else-branch: 37 | !($unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 37 | $unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000]
(assert (and (> ($unwrap<Int> l$a@191@01) 0) (<= ($unwrap<Int> l$a@191@01) 10000000000)))
; [eval] $unwrap(l$a) == 10000000000
; [eval] $unwrap(l$a)
(pop) ; 7
(push) ; 7
; [else-branch: 37 | !($unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000)]
(assert (not
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (> ($unwrap<Int> l$a@191@01) 0)
      (<= ($unwrap<Int> l$a@191@01) 10000000000)))
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (or (> ($unwrap<Int> l$a@191@01) 0) (not (> ($unwrap<Int> l$a@191@01) 0)))
  (or
    (not
      (and
        (> ($unwrap<Int> l$a@191@01) 0)
        (<= ($unwrap<Int> l$a@191@01) 10000000000)))
    (and
      (> ($unwrap<Int> l$a@191@01) 0)
      (<= ($unwrap<Int> l$a@191@01) 10000000000)))))
(push) ; 4
(assert (not (=>
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))
  (= ($unwrap<Int> l$a@191@01) 10000000000))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $succ ==> $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 38 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
; [eval] $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000
; [eval] $unwrap(l$a) > 0
; [eval] $unwrap(l$a)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 39 | !($unwrap[Int](l$a@191@01) > 0) | live]
; [else-branch: 39 | $unwrap[Int](l$a@191@01) > 0 | live]
(push) ; 7
; [then-branch: 39 | !($unwrap[Int](l$a@191@01) > 0)]
(assert (not (> ($unwrap<Int> l$a@191@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 39 | $unwrap[Int](l$a@191@01) > 0]
(assert (> ($unwrap<Int> l$a@191@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) <= 10000000000
; [eval] $unwrap(l$a)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and (> ($unwrap<Int> l$a@191@01) 0) (<= ($unwrap<Int> l$a@191@01) 10000000000))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | $unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000 | live]
; [else-branch: 40 | !($unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 40 | $unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000]
(assert (and (> ($unwrap<Int> l$a@191@01) 0) (<= ($unwrap<Int> l$a@191@01) 10000000000)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) == 10000000000
; [eval] $unwrap(l$a)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 40 | !($unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000)]
(assert (not
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (=>
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))
  (= ($unwrap<Int> l$a@191@01) 10000000000))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $succ ==> $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | True | live]
; [else-branch: 41 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 41 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
; [eval] $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000
; [eval] $unwrap(l$a) > 0
; [eval] $unwrap(l$a)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 42 | !($unwrap[Int](l$a@191@01) > 0) | live]
; [else-branch: 42 | $unwrap[Int](l$a@191@01) > 0 | live]
(push) ; 7
; [then-branch: 42 | !($unwrap[Int](l$a@191@01) > 0)]
(assert (not (> ($unwrap<Int> l$a@191@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 42 | $unwrap[Int](l$a@191@01) > 0]
(assert (> ($unwrap<Int> l$a@191@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) <= 10000000000
; [eval] $unwrap(l$a)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and (> ($unwrap<Int> l$a@191@01) 0) (<= ($unwrap<Int> l$a@191@01) 10000000000))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | $unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000 | live]
; [else-branch: 43 | !($unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 43 | $unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000]
(assert (and (> ($unwrap<Int> l$a@191@01) 0) (<= ($unwrap<Int> l$a@191@01) 10000000000)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) == 10000000000
; [eval] $unwrap(l$a)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 43 | !($unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000)]
(assert (not
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (=>
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))
  (= ($unwrap<Int> l$a@191@01) 10000000000))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $succ ==> $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | True | live]
; [else-branch: 44 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 44 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000 ==> $unwrap(l$a) == 10000000000
; [eval] $unwrap(l$a) > 0 && $unwrap(l$a) <= 10000000000
; [eval] $unwrap(l$a) > 0
; [eval] $unwrap(l$a)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 45 | !($unwrap[Int](l$a@191@01) > 0) | live]
; [else-branch: 45 | $unwrap[Int](l$a@191@01) > 0 | live]
(push) ; 7
; [then-branch: 45 | !($unwrap[Int](l$a@191@01) > 0)]
(assert (not (> ($unwrap<Int> l$a@191@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 45 | $unwrap[Int](l$a@191@01) > 0]
(assert (> ($unwrap<Int> l$a@191@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) <= 10000000000
; [eval] $unwrap(l$a)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and (> ($unwrap<Int> l$a@191@01) 0) (<= ($unwrap<Int> l$a@191@01) 10000000000))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | $unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000 | live]
; [else-branch: 46 | !($unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 46 | $unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000]
(assert (and (> ($unwrap<Int> l$a@191@01) 0) (<= ($unwrap<Int> l$a@191@01) 10000000000)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) == 10000000000
; [eval] $unwrap(l$a)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 46 | !($unwrap[Int](l$a@191@01) > 0 && $unwrap[Int](l$a@191@01) <= 10000000000)]
(assert (not
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (=>
  (and
    (> ($unwrap<Int> l$a@191@01) 0)
    (<= ($unwrap<Int> l$a@191@01) 10000000000))
  (= ($unwrap<Int> l$a@191@01) 10000000000))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$invert_fail ----------
(declare-const l$a@241@01 $Int)
(declare-const $succ@242@01 Bool)
(declare-const $res@243@01 Int)
(declare-const l$a@244@01 $Int)
(declare-const $succ@245@01 Bool)
(declare-const $res@246@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@247@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@248@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@249@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@250@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@251@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@252@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@253@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@254@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@255@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@256@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@257@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@258@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@259@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@260@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@261@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@262@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@263@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@264@01 $Snap)
(assert (= $t@264@01 ($Snap.combine ($Snap.first $t@264@01) ($Snap.second $t@264@01))))
(assert (= ($Snap.first $t@264@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@251@01 0))))
(assert (= ($Snap.second $t@264@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@251@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@265@01 $Snap)
(assert (= $t@265@01 ($Snap.combine ($Snap.first $t@265@01) ($Snap.second $t@265@01))))
(assert (= ($Snap.first $t@265@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@251@01 1))))
(assert (= ($Snap.second $t@265@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@251@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@266@01 $Snap)
(assert (= $t@266@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@267@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 47 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@251@01, 3)), $q0@267@01)) | live]
; [else-branch: 47 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@251@01, 3)), $q0@267@01) | live]
(push) ; 5
; [then-branch: 47 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@251@01, 3)), $q0@267@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 47 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@251@01, 3)), $q0@267@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@267@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@923@11@923@345-aux|)))
(assert (forall (($q0@267@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@267@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@923@11@923@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@268@01 $Snap)
(assert (= $t@268@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@269@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@269@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@269@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 3)) $q0@269@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@924@11@924@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@270@01 $Snap)
(assert (= $t@270@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@271@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 48 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@251@01, 4)), $q1@271@01)) | live]
; [else-branch: 48 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@251@01, 4)), $q1@271@01) | live]
(push) ; 5
; [then-branch: 48 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@251@01, 4)), $q1@271@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 48 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@251@01, 4)), $q1@271@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@271@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@925@11@925@345-aux|)))
(assert (forall (($q1@271@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@271@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@925@11@925@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@272@01 $Snap)
(assert (= $t@272@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@273@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@273@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@273@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@251@01 4)) $q1@273@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@926@11@926@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@274@01 $Snap)
(assert (= $t@274@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@251@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@275@01 $Snap)
(assert (= $t@275@01 ($Snap.combine ($Snap.first $t@275@01) ($Snap.second $t@275@01))))
(assert (= ($Snap.first $t@275@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@275@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -1701411834604692317316873037158841057280000000000 <= $unwrap(l$a) &&
;   $unwrap(l$a) <= 1701411834604692317316873037158841057270000000000
(declare-const $t@276@01 $Snap)
(assert (= $t@276@01 ($Snap.combine ($Snap.first $t@276@01) ($Snap.second $t@276@01))))
(assert (= ($Snap.first $t@276@01) $Snap.unit))
; [eval] -1701411834604692317316873037158841057280000000000 <= $unwrap(l$a)
; [eval] -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$a)
(assert (<=
  (- 0 1701411834604692317316873037158841057280000000000)
  ($unwrap<Int> l$a@244@01)))
(assert (= ($Snap.second $t@276@01) $Snap.unit))
; [eval] $unwrap(l$a) <= 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$a)
(assert (<= ($unwrap<Int> l$a@244@01) 1701411834604692317316873037158841057270000000000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 ($Snap.combine ($Snap.first $t@277@01) ($Snap.second $t@277@01))))
(assert (= ($Snap.first $t@277@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@248@01 0))))
(assert (= ($Snap.second $t@277@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@248@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@278@01 $Snap)
(assert (= $t@278@01 ($Snap.combine ($Snap.first $t@278@01) ($Snap.second $t@278@01))))
(assert (= ($Snap.first $t@278@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@248@01 1))))
(assert (= ($Snap.second $t@278@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@248@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@279@01 $Snap)
(assert (= $t@279@01 ($Snap.combine ($Snap.first $t@279@01) ($Snap.second $t@279@01))))
(assert (= ($Snap.first $t@279@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@248@01 2))))
(assert (= ($Snap.second $t@279@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@248@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@280@01 $Snap)
(assert (= $t@280@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@248@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@281@01 $Snap)
(assert (= $t@281@01 ($Snap.combine ($Snap.first $t@281@01) ($Snap.second $t@281@01))))
(assert (= ($Snap.first $t@281@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@248@01 4))))
(assert (= ($Snap.second $t@281@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@248@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@282@01 $Snap)
(assert (= $t@282@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@248@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@283@01 $Snap)
(assert (= $t@283@01 ($Snap.combine ($Snap.first $t@283@01) ($Snap.second $t@283@01))))
(assert (= ($Snap.first $t@283@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@247@01 0))))
(assert (= ($Snap.second $t@283@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@247@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@284@01 $Snap)
(assert (= $t@284@01 ($Snap.combine ($Snap.first $t@284@01) ($Snap.second $t@284@01))))
(assert (= ($Snap.first $t@284@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@247@01 1))))
(assert (= ($Snap.second $t@284@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@247@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@285@01 $Snap)
(assert (= $t@285@01 ($Snap.combine ($Snap.first $t@285@01) ($Snap.second $t@285@01))))
(assert (= ($Snap.first $t@285@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@247@01 2))))
(assert (= ($Snap.second $t@285@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@247@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@286@01 $Snap)
(assert (= $t@286@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@247@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@287@01 $Snap)
(assert (= $t@287@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@247@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@289@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@247@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] $unwrap(l$a) == 0
; [eval] $unwrap(l$a)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$a@244@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$a@244@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | $unwrap[Int](l$a@244@01) == 0 | live]
; [else-branch: 49 | $unwrap[Int](l$a@244@01) != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 49 | $unwrap[Int](l$a@244@01) == 0]
(assert (= ($unwrap<Int> l$a@244@01) 0))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0
(push) ; 4
; [then-branch: 50 | False | dead]
; [else-branch: 50 | True | live]
(push) ; 5
; [else-branch: 50 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | True | live]
; [else-branch: 51 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 51 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@262@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@292@01 $Struct)
(assert (=
  self@292@01
  ($struct_set<$Struct> self@251@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@251@01 0))
    l$havoc$1@262@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 4
; [then-branch: 52 | False | dead]
; [else-branch: 52 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 52 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 49 | $unwrap[Int](l$a@244@01) != 0]
(assert (not (= ($unwrap<Int> l$a@244@01) 0)))
(pop) ; 3
; [eval] !($unwrap(l$a) == 0)
; [eval] $unwrap(l$a) == 0
; [eval] $unwrap(l$a)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$a@244@01) 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$a@244@01) 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | $unwrap[Int](l$a@244@01) != 0 | live]
; [else-branch: 53 | $unwrap[Int](l$a@244@01) == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 53 | $unwrap[Int](l$a@244@01) != 0]
(assert (not (= ($unwrap<Int> l$a@244@01) 0)))
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) < -1701411834604692317316873037158841057280000000000 || $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) > 1701411834604692317316873037158841057270000000000
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) < -1701411834604692317316873037158841057280000000000
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a))
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
; [eval] 10000000000 * 10000000000 \ $unwrap(l$a)
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 4
; [then-branch: 54 | $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 54 | !($div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 5
; [then-branch: 54 | $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
    100000000000000000000
    ($unwrap<Int> l$a@244@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 5
(push) ; 5
; [else-branch: 54 | !($div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
      100000000000000000000
      ($unwrap<Int> l$a@244@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) > 1701411834604692317316873037158841057270000000000
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a))
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
; [eval] 10000000000 * 10000000000 \ $unwrap(l$a)
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
      100000000000000000000
      ($unwrap<Int> l$a@244@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 55 | !($div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 55 | !($div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 4
; [eval] !($div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) < -1701411834604692317316873037158841057280000000000 || $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) < -1701411834604692317316873037158841057280000000000 || $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) > 1701411834604692317316873037158841057270000000000
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) < -1701411834604692317316873037158841057280000000000
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a))
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
; [eval] 10000000000 * 10000000000 \ $unwrap(l$a)
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 4
; [then-branch: 56 | $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 56 | !($div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 5
; [then-branch: 56 | $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
    100000000000000000000
    ($unwrap<Int> l$a@244@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 5
(push) ; 5
; [else-branch: 56 | !($div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
      100000000000000000000
      ($unwrap<Int> l$a@244@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)) > 1701411834604692317316873037158841057270000000000
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a))
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
; [eval] 10000000000 * 10000000000 \ $unwrap(l$a)
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
      100000000000000000000
      ($unwrap<Int> l$a@244@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
      100000000000000000000
      ($unwrap<Int> l$a@244@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | !($div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 57 | $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 57 | !($div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, $unwrap[Int](l$a@244@01), 100000000000000000000 / $unwrap[Int](l$a@244@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
        100000000000000000000
        ($unwrap<Int> l$a@244@01)))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; $res := $unwrap($wrap($div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 *
;   10000000000 \
;   $unwrap(l$a))))
; [eval] $unwrap($wrap($div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a))))
; [eval] $wrap($div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a)))
; [eval] $div(10000000000 * 10000000000, $unwrap(l$a), 10000000000 * 10000000000 \ $unwrap(l$a))
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
; [eval] 10000000000 * 10000000000 \ $unwrap(l$a)
; [eval] 10000000000 * 10000000000
; [eval] $unwrap(l$a)
(declare-const $res@293@01 Int)
(assert (=
  $res@293@01
  ($unwrap<Int> ($wrap<$Int> ($div<Int> 100000000000000000000 ($unwrap<Int> l$a@244@01) (div
    100000000000000000000
    ($unwrap<Int> l$a@244@01)))))))
; [exec]
; label return
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@260@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@260@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | $out_of_gas@260@01 | live]
; [else-branch: 58 | !($out_of_gas@260@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 58 | $out_of_gas@260@01]
(assert $out_of_gas@260@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0
(push) ; 6
; [then-branch: 59 | False | dead]
; [else-branch: 59 | True | live]
(push) ; 7
; [else-branch: 59 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !$succ
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 60 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@294@01 $Snap)
(assert (= $t@294@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@262@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@295@01 $Struct)
(assert (=
  self@295@01
  ($struct_set<$Struct> self@251@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@251@01 0))
    l$havoc$1@262@01))))
; [exec]
; $contracts := l$havoc$2
(pop) ; 6
; [then-branch: 61 | False | dead]
; [else-branch: 61 | True | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 61 | True]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 58 | !($out_of_gas@260@01)]
(assert (not $out_of_gas@260@01))
(pop) ; 5
; [eval] !$out_of_gas
(push) ; 5
(set-option :timeout 10)
(assert (not $out_of_gas@260@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not $out_of_gas@260@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | !($out_of_gas@260@01) | live]
; [else-branch: 62 | $out_of_gas@260@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 62 | !($out_of_gas@260@01)]
(assert (not $out_of_gas@260@01))
; [exec]
; label end
; [exec]
; exhale $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0
(push) ; 6
; [then-branch: 63 | False | live]
; [else-branch: 63 | True | live]
(push) ; 7
; [then-branch: 63 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 63 | True]
; [eval] $unwrap(l$a) > 0
; [eval] $unwrap(l$a)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$a@244@01) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$a@244@01) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | $unwrap[Int](l$a@244@01) > 0 | live]
; [else-branch: 64 | !($unwrap[Int](l$a@244@01) > 0) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 64 | $unwrap[Int](l$a@244@01) > 0]
(assert (> ($unwrap<Int> l$a@244@01) 0))
; [eval] $res <= $unwrap(l$a)
; [eval] $unwrap(l$a)
(pop) ; 7
(push) ; 7
; [else-branch: 64 | !($unwrap[Int](l$a@244@01) > 0)]
(assert (not (> ($unwrap<Int> l$a@244@01) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (> ($unwrap<Int> l$a@244@01) 0)) (> ($unwrap<Int> l$a@244@01) 0)))
(push) ; 6
(assert (not (=> (> ($unwrap<Int> l$a@244@01) 0) (<= $res@293@01 ($unwrap<Int> l$a@244@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0
(set-option :timeout 0)
(push) ; 6
; [then-branch: 65 | False | live]
; [else-branch: 65 | True | live]
(push) ; 7
; [then-branch: 65 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 65 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) > 0
; [eval] $unwrap(l$a)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$a@244@01) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$a@244@01) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | $unwrap[Int](l$a@244@01) > 0 | live]
; [else-branch: 66 | !($unwrap[Int](l$a@244@01) > 0) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 66 | $unwrap[Int](l$a@244@01) > 0]
(assert (> ($unwrap<Int> l$a@244@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res <= $unwrap(l$a)
; [eval] $unwrap(l$a)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 66 | !($unwrap[Int](l$a@244@01) > 0)]
(assert (not (> ($unwrap<Int> l$a@244@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (=> (> ($unwrap<Int> l$a@244@01) 0) (<= $res@293@01 ($unwrap<Int> l$a@244@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0
(set-option :timeout 0)
(push) ; 6
; [then-branch: 67 | False | live]
; [else-branch: 67 | True | live]
(push) ; 7
; [then-branch: 67 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 67 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) > 0
; [eval] $unwrap(l$a)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$a@244@01) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$a@244@01) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | $unwrap[Int](l$a@244@01) > 0 | live]
; [else-branch: 68 | !($unwrap[Int](l$a@244@01) > 0) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 68 | $unwrap[Int](l$a@244@01) > 0]
(assert (> ($unwrap<Int> l$a@244@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res <= $unwrap(l$a)
; [eval] $unwrap(l$a)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 68 | !($unwrap[Int](l$a@244@01) > 0)]
(assert (not (> ($unwrap<Int> l$a@244@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (=> (> ($unwrap<Int> l$a@244@01) 0) (<= $res@293@01 ($unwrap<Int> l$a@244@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $succ && $unwrap(l$a) > 0 ==> $res <= $unwrap(l$a)
; [eval] $succ && $unwrap(l$a) > 0
(set-option :timeout 0)
(push) ; 6
; [then-branch: 69 | False | live]
; [else-branch: 69 | True | live]
(push) ; 7
; [then-branch: 69 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 69 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$a) > 0
; [eval] $unwrap(l$a)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (> ($unwrap<Int> l$a@244@01) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (> ($unwrap<Int> l$a@244@01) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | $unwrap[Int](l$a@244@01) > 0 | live]
; [else-branch: 70 | !($unwrap[Int](l$a@244@01) > 0) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 70 | $unwrap[Int](l$a@244@01) > 0]
(assert (> ($unwrap<Int> l$a@244@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res <= $unwrap(l$a)
; [eval] $unwrap(l$a)
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 70 | !($unwrap[Int](l$a@244@01) > 0)]
(assert (not (> ($unwrap<Int> l$a@244@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 6
(assert (not (=> (> ($unwrap<Int> l$a@244@01) 0) (<= $res@293@01 ($unwrap<Int> l$a@244@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$check ----------
(declare-const $succ@296@01 Bool)
(declare-const $succ@297@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@298@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@299@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@300@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@301@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@302@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@303@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@304@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@305@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@306@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@307@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@308@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@309@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@310@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@311@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@312@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@313@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@314@01 $Snap)
(assert (= $t@314@01 ($Snap.combine ($Snap.first $t@314@01) ($Snap.second $t@314@01))))
(assert (= ($Snap.first $t@314@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@302@01 0))))
(assert (= ($Snap.second $t@314@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 ($Snap.combine ($Snap.first $t@315@01) ($Snap.second $t@315@01))))
(assert (= ($Snap.first $t@315@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))))
(assert (= ($Snap.second $t@315@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@317@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 71 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 3)), $q0@317@01)) | live]
; [else-branch: 71 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 3)), $q0@317@01) | live]
(push) ; 5
; [then-branch: 71 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 3)), $q0@317@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 71 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 3)), $q0@317@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@317@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1015@11@1015@345-aux|)))
(assert (forall (($q0@317@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@317@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1015@11@1015@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@318@01 $Snap)
(assert (= $t@318@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@319@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@319@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@319@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 3)) $q0@319@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1016@11@1016@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@320@01 $Snap)
(assert (= $t@320@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@321@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 72 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 4)), $q1@321@01)) | live]
; [else-branch: 72 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 4)), $q1@321@01) | live]
(push) ; 5
; [then-branch: 72 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 4)), $q1@321@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 72 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@302@01, 4)), $q1@321@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@321@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1017@11@1017@345-aux|)))
(assert (forall (($q1@321@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@321@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1017@11@1017@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@323@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@323@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@323@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@302@01 4)) $q1@323@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1018@11@1018@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@324@01 $Snap)
(assert (= $t@324@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@302@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@325@01 $Snap)
(assert (= $t@325@01 ($Snap.combine ($Snap.first $t@325@01) ($Snap.second $t@325@01))))
(assert (= ($Snap.first $t@325@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@325@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@326@01 $Snap)
(assert (= $t@326@01 ($Snap.combine ($Snap.first $t@326@01) ($Snap.second $t@326@01))))
(assert (= ($Snap.first $t@326@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@299@01 0))))
(assert (= ($Snap.second $t@326@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@327@01 $Snap)
(assert (= $t@327@01 ($Snap.combine ($Snap.first $t@327@01) ($Snap.second $t@327@01))))
(assert (= ($Snap.first $t@327@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@299@01 1))))
(assert (= ($Snap.second $t@327@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@328@01 $Snap)
(assert (= $t@328@01 ($Snap.combine ($Snap.first $t@328@01) ($Snap.second $t@328@01))))
(assert (= ($Snap.first $t@328@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@299@01 2))))
(assert (= ($Snap.second $t@328@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@299@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@330@01 $Snap)
(assert (= $t@330@01 ($Snap.combine ($Snap.first $t@330@01) ($Snap.second $t@330@01))))
(assert (= ($Snap.first $t@330@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@299@01 4))))
(assert (= ($Snap.second $t@330@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@299@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 ($Snap.combine ($Snap.first $t@332@01) ($Snap.second $t@332@01))))
(assert (= ($Snap.first $t@332@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@298@01 0))))
(assert (= ($Snap.second $t@332@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@298@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 ($Snap.combine ($Snap.first $t@333@01) ($Snap.second $t@333@01))))
(assert (= ($Snap.first $t@333@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@298@01 1))))
(assert (= ($Snap.second $t@333@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@298@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@334@01 $Snap)
(assert (= $t@334@01 ($Snap.combine ($Snap.first $t@334@01) ($Snap.second $t@334@01))))
(assert (= ($Snap.first $t@334@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@298@01 2))))
(assert (= ($Snap.second $t@334@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@298@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@335@01 $Snap)
(assert (= $t@335@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@298@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@336@01 $Snap)
(assert (= $t@336@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@298@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@337@01 $Snap)
(assert (= $t@337@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@338@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@339@01 $Snap)
(assert (= $t@339@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@298@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@311@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@311@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | $out_of_gas@311@01 | live]
; [else-branch: 73 | !($out_of_gas@311@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 73 | $out_of_gas@311@01]
(assert $out_of_gas@311@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $div(20000000000 * 10000000000, 20000000000, 20000000000 *
;   10000000000 \
;   20000000000) ==
;   10000000000
; [eval] $div(20000000000 * 10000000000, 20000000000, 20000000000 * 10000000000 \ 20000000000) == 10000000000
; [eval] $div(20000000000 * 10000000000, 20000000000, 20000000000 * 10000000000 \ 20000000000)
; [eval] 20000000000 * 10000000000
; [eval] 20000000000 * 10000000000 \ 20000000000
; [eval] 20000000000 * 10000000000
(push) ; 4
(assert (not (=
  ($div<Int> 200000000000000000000 20000000000 (div
    200000000000000000000
    20000000000))
  10000000000)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($div<Int> 200000000000000000000 20000000000 (div
    200000000000000000000
    20000000000))
  10000000000))
; [exec]
; exhale 0 <
;   $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \
;   20000000000) &&
;   $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \
;   20000000000) <
;   10000000000
; [eval] 0 < $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 20000000000
; [eval] 10000000000 * 10000000000
(push) ; 4
(assert (not (<
  0
  ($div<Int> 100000000000000000000 20000000000 (div
    100000000000000000000
    20000000000)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  ($div<Int> 100000000000000000000 20000000000 (div
    100000000000000000000
    20000000000))))
; [eval] $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000) < 10000000000
; [eval] $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 20000000000
; [eval] 10000000000 * 10000000000
(push) ; 4
(assert (not (<
  ($div<Int> 100000000000000000000 20000000000 (div
    100000000000000000000
    20000000000))
  10000000000)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($div<Int> 100000000000000000000 20000000000 (div
    100000000000000000000
    20000000000))
  10000000000))
; [exec]
; exhale 20000000000 +
;   $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \
;   20000000000) -
;   $div(30000000000 * 10000000000, 20000000000, 30000000000 * 10000000000 \
;   20000000000) ==
;   10000000000
; [eval] 20000000000 + $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000) - $div(30000000000 * 10000000000, 20000000000, 30000000000 * 10000000000 \ 20000000000) == 10000000000
; [eval] 20000000000 + $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000) - $div(30000000000 * 10000000000, 20000000000, 30000000000 * 10000000000 \ 20000000000)
; [eval] 20000000000 + $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 20000000000
; [eval] 10000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 20000000000, 30000000000 * 10000000000 \ 20000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 20000000000
; [eval] 30000000000 * 10000000000
(push) ; 4
(assert (not (=
  (-
    (+
      20000000000
      ($div<Int> 100000000000000000000 20000000000 (div
        100000000000000000000
        20000000000)))
    ($div<Int> 300000000000000000000 20000000000 (div
      300000000000000000000
      20000000000)))
  10000000000)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  (-
    (+
      20000000000
      ($div<Int> 100000000000000000000 20000000000 (div
        100000000000000000000
        20000000000)))
    ($div<Int> 300000000000000000000 20000000000 (div
      300000000000000000000
      20000000000)))
  10000000000))
; [exec]
; exhale 21000000000 + 9000000000 == 30000000000
; [eval] 21000000000 + 9000000000 == 30000000000
; [eval] 21000000000 + 9000000000
; [exec]
; exhale $div(20000000000, 10000000000, 20000000000 \ 10000000000) == 2
; [eval] $div(20000000000, 10000000000, 20000000000 \ 10000000000) == 2
; [eval] $div(20000000000, 10000000000, 20000000000 \ 10000000000)
; [eval] 20000000000 \ 10000000000
(push) ; 4
(assert (not (= ($div<Int> 20000000000 10000000000 (div 20000000000 10000000000)) 2)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (= ($div<Int> 20000000000 10000000000 (div 20000000000 10000000000)) 2))
; [exec]
; exhale $div(31000000000, 10000000000, 31000000000 \ 10000000000) == 3
; [eval] $div(31000000000, 10000000000, 31000000000 \ 10000000000) == 3
; [eval] $div(31000000000, 10000000000, 31000000000 \ 10000000000)
; [eval] 31000000000 \ 10000000000
(push) ; 4
(assert (not (= ($div<Int> 31000000000 10000000000 (div 31000000000 10000000000)) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (= ($div<Int> 31000000000 10000000000 (div 31000000000 10000000000)) 3))
; [exec]
; exhale 21234567890 + 39876543210 < 70000000000
; [eval] 21234567890 + 39876543210 < 70000000000
; [eval] 21234567890 + 39876543210
; [exec]
; exhale $div($div(21234000000 * 100000000000000, 10000000000, 21234000000 *
;   100000000000000 \
;   10000000000), 10000000000, $div(21234000000 * 100000000000000, 10000000000,
;   21234000000 * 100000000000000 \ 10000000000) \
;   10000000000) ==
;   21234
; [eval] $div($div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000), 10000000000, $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000) \ 10000000000) == 21234
; [eval] $div($div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000), 10000000000, $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000) \ 10000000000)
; [eval] $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000)
; [eval] 21234000000 * 100000000000000
; [eval] 21234000000 * 100000000000000 \ 10000000000
; [eval] 21234000000 * 100000000000000
; [eval] $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000) \ 10000000000
; [eval] $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000)
; [eval] 21234000000 * 100000000000000
; [eval] 21234000000 * 100000000000000 \ 10000000000
; [eval] 21234000000 * 100000000000000
(push) ; 4
(assert (not (=
  ($div<Int> ($div<Int> 2123400000000000000000000 10000000000 (div
    2123400000000000000000000
    10000000000)) 10000000000 (div
    ($div<Int> 2123400000000000000000000 10000000000 (div
      2123400000000000000000000
      10000000000))
    10000000000))
  21234)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($div<Int> ($div<Int> 2123400000000000000000000 10000000000 (div
    2123400000000000000000000
    10000000000)) 10000000000 (div
    ($div<Int> 2123400000000000000000000 10000000000 (div
      2123400000000000000000000
      10000000000))
    10000000000))
  21234))
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | True | live]
; [else-branch: 74 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 74 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@340@01 $Snap)
(assert (= $t@340@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@312@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@341@01 $Struct)
(assert (=
  self@341@01
  ($struct_set<$Struct> self@302@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 0))
    l$havoc@312@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
; [then-branch: 75 | False | dead]
; [else-branch: 75 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 75 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 73 | !($out_of_gas@311@01)]
(assert (not $out_of_gas@311@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@311@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@311@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | !($out_of_gas@311@01) | live]
; [else-branch: 76 | $out_of_gas@311@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 76 | !($out_of_gas@311@01)]
(assert (not $out_of_gas@311@01))
; [exec]
; label end
; [exec]
; exhale $div(20000000000 * 10000000000, 20000000000, 20000000000 *
;   10000000000 \
;   20000000000) ==
;   10000000000
; [eval] $div(20000000000 * 10000000000, 20000000000, 20000000000 * 10000000000 \ 20000000000) == 10000000000
; [eval] $div(20000000000 * 10000000000, 20000000000, 20000000000 * 10000000000 \ 20000000000)
; [eval] 20000000000 * 10000000000
; [eval] 20000000000 * 10000000000 \ 20000000000
; [eval] 20000000000 * 10000000000
(push) ; 4
(assert (not (=
  ($div<Int> 200000000000000000000 20000000000 (div
    200000000000000000000
    20000000000))
  10000000000)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($div<Int> 200000000000000000000 20000000000 (div
    200000000000000000000
    20000000000))
  10000000000))
; [exec]
; exhale 0 <
;   $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \
;   20000000000) &&
;   $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \
;   20000000000) <
;   10000000000
; [eval] 0 < $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 20000000000
; [eval] 10000000000 * 10000000000
(push) ; 4
(assert (not (<
  0
  ($div<Int> 100000000000000000000 20000000000 (div
    100000000000000000000
    20000000000)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  ($div<Int> 100000000000000000000 20000000000 (div
    100000000000000000000
    20000000000))))
; [eval] $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000) < 10000000000
; [eval] $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 20000000000
; [eval] 10000000000 * 10000000000
(push) ; 4
(assert (not (<
  ($div<Int> 100000000000000000000 20000000000 (div
    100000000000000000000
    20000000000))
  10000000000)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($div<Int> 100000000000000000000 20000000000 (div
    100000000000000000000
    20000000000))
  10000000000))
; [exec]
; exhale 20000000000 +
;   $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \
;   20000000000) -
;   $div(30000000000 * 10000000000, 20000000000, 30000000000 * 10000000000 \
;   20000000000) ==
;   10000000000
; [eval] 20000000000 + $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000) - $div(30000000000 * 10000000000, 20000000000, 30000000000 * 10000000000 \ 20000000000) == 10000000000
; [eval] 20000000000 + $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000) - $div(30000000000 * 10000000000, 20000000000, 30000000000 * 10000000000 \ 20000000000)
; [eval] 20000000000 + $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] $div(10000000000 * 10000000000, 20000000000, 10000000000 * 10000000000 \ 20000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 20000000000
; [eval] 10000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 20000000000, 30000000000 * 10000000000 \ 20000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 20000000000
; [eval] 30000000000 * 10000000000
(push) ; 4
(assert (not (=
  (-
    (+
      20000000000
      ($div<Int> 100000000000000000000 20000000000 (div
        100000000000000000000
        20000000000)))
    ($div<Int> 300000000000000000000 20000000000 (div
      300000000000000000000
      20000000000)))
  10000000000)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  (-
    (+
      20000000000
      ($div<Int> 100000000000000000000 20000000000 (div
        100000000000000000000
        20000000000)))
    ($div<Int> 300000000000000000000 20000000000 (div
      300000000000000000000
      20000000000)))
  10000000000))
; [exec]
; exhale 21000000000 + 9000000000 == 30000000000
; [eval] 21000000000 + 9000000000 == 30000000000
; [eval] 21000000000 + 9000000000
; [exec]
; exhale $div(20000000000, 10000000000, 20000000000 \ 10000000000) == 2
; [eval] $div(20000000000, 10000000000, 20000000000 \ 10000000000) == 2
; [eval] $div(20000000000, 10000000000, 20000000000 \ 10000000000)
; [eval] 20000000000 \ 10000000000
(push) ; 4
(assert (not (= ($div<Int> 20000000000 10000000000 (div 20000000000 10000000000)) 2)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (= ($div<Int> 20000000000 10000000000 (div 20000000000 10000000000)) 2))
; [exec]
; exhale $div(31000000000, 10000000000, 31000000000 \ 10000000000) == 3
; [eval] $div(31000000000, 10000000000, 31000000000 \ 10000000000) == 3
; [eval] $div(31000000000, 10000000000, 31000000000 \ 10000000000)
; [eval] 31000000000 \ 10000000000
(push) ; 4
(assert (not (= ($div<Int> 31000000000 10000000000 (div 31000000000 10000000000)) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (= ($div<Int> 31000000000 10000000000 (div 31000000000 10000000000)) 3))
; [exec]
; exhale 21234567890 + 39876543210 < 70000000000
; [eval] 21234567890 + 39876543210 < 70000000000
; [eval] 21234567890 + 39876543210
; [exec]
; exhale $div($div(21234000000 * 100000000000000, 10000000000, 21234000000 *
;   100000000000000 \
;   10000000000), 10000000000, $div(21234000000 * 100000000000000, 10000000000,
;   21234000000 * 100000000000000 \ 10000000000) \
;   10000000000) ==
;   21234
; [eval] $div($div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000), 10000000000, $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000) \ 10000000000) == 21234
; [eval] $div($div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000), 10000000000, $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000) \ 10000000000)
; [eval] $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000)
; [eval] 21234000000 * 100000000000000
; [eval] 21234000000 * 100000000000000 \ 10000000000
; [eval] 21234000000 * 100000000000000
; [eval] $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000) \ 10000000000
; [eval] $div(21234000000 * 100000000000000, 10000000000, 21234000000 * 100000000000000 \ 10000000000)
; [eval] 21234000000 * 100000000000000
; [eval] 21234000000 * 100000000000000 \ 10000000000
; [eval] 21234000000 * 100000000000000
(push) ; 4
(assert (not (=
  ($div<Int> ($div<Int> 2123400000000000000000000 10000000000 (div
    2123400000000000000000000
    10000000000)) 10000000000 (div
    ($div<Int> 2123400000000000000000000 10000000000 (div
      2123400000000000000000000
      10000000000))
    10000000000))
  21234)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($div<Int> ($div<Int> 2123400000000000000000000 10000000000 (div
    2123400000000000000000000
    10000000000)) 10000000000 (div
    ($div<Int> 2123400000000000000000000 10000000000 (div
      2123400000000000000000000
      10000000000))
    10000000000))
  21234))
; [eval] !$succ
; [then-branch: 77 | False | dead]
; [else-branch: 77 | True | live]
(push) ; 4
; [else-branch: 77 | True]
(pop) ; 4
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | True | live]
; [else-branch: 78 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 78 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@312@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@343@01 $Struct)
(assert (=
  self@343@01
  ($struct_set<$Struct> self@302@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@302@01 0))
    l$havoc@312@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 76 | $out_of_gas@311@01]
(assert $out_of_gas@311@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$check_fail_0 ----------
(declare-const $succ@344@01 Bool)
(declare-const $succ@345@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@346@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@347@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@348@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@349@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@350@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@351@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@352@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@353@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@354@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@355@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@356@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@357@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@358@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@359@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@360@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@361@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 ($Snap.combine ($Snap.first $t@362@01) ($Snap.second $t@362@01))))
(assert (= ($Snap.first $t@362@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@350@01 0))))
(assert (= ($Snap.second $t@362@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@350@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 ($Snap.combine ($Snap.first $t@363@01) ($Snap.second $t@363@01))))
(assert (= ($Snap.first $t@363@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@350@01 1))))
(assert (= ($Snap.second $t@363@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@350@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@364@01 $Snap)
(assert (= $t@364@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@365@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 79 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@350@01, 3)), $q0@365@01)) | live]
; [else-branch: 79 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@350@01, 3)), $q0@365@01) | live]
(push) ; 5
; [then-branch: 79 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@350@01, 3)), $q0@365@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 79 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@350@01, 3)), $q0@365@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@365@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1101@11@1101@345-aux|)))
(assert (forall (($q0@365@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@365@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1101@11@1101@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@367@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@367@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@367@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 3)) $q0@367@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1102@11@1102@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@369@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 80 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@350@01, 4)), $q1@369@01)) | live]
; [else-branch: 80 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@350@01, 4)), $q1@369@01) | live]
(push) ; 5
; [then-branch: 80 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@350@01, 4)), $q1@369@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 80 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@350@01, 4)), $q1@369@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@369@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1103@11@1103@345-aux|)))
(assert (forall (($q1@369@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@369@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1103@11@1103@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@371@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@371@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@371@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@350@01 4)) $q1@371@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1104@11@1104@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@372@01 $Snap)
(assert (= $t@372@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@350@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@373@01 $Snap)
(assert (= $t@373@01 ($Snap.combine ($Snap.first $t@373@01) ($Snap.second $t@373@01))))
(assert (= ($Snap.first $t@373@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@373@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@374@01 $Snap)
(assert (= $t@374@01 ($Snap.combine ($Snap.first $t@374@01) ($Snap.second $t@374@01))))
(assert (= ($Snap.first $t@374@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@347@01 0))))
(assert (= ($Snap.second $t@374@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@347@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@375@01 $Snap)
(assert (= $t@375@01 ($Snap.combine ($Snap.first $t@375@01) ($Snap.second $t@375@01))))
(assert (= ($Snap.first $t@375@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@347@01 1))))
(assert (= ($Snap.second $t@375@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@347@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@376@01 $Snap)
(assert (= $t@376@01 ($Snap.combine ($Snap.first $t@376@01) ($Snap.second $t@376@01))))
(assert (= ($Snap.first $t@376@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@347@01 2))))
(assert (= ($Snap.second $t@376@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@347@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@347@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@378@01 $Snap)
(assert (= $t@378@01 ($Snap.combine ($Snap.first $t@378@01) ($Snap.second $t@378@01))))
(assert (= ($Snap.first $t@378@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@347@01 4))))
(assert (= ($Snap.second $t@378@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@347@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@347@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@380@01 $Snap)
(assert (= $t@380@01 ($Snap.combine ($Snap.first $t@380@01) ($Snap.second $t@380@01))))
(assert (= ($Snap.first $t@380@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@346@01 0))))
(assert (= ($Snap.second $t@380@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@346@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@381@01 $Snap)
(assert (= $t@381@01 ($Snap.combine ($Snap.first $t@381@01) ($Snap.second $t@381@01))))
(assert (= ($Snap.first $t@381@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@346@01 1))))
(assert (= ($Snap.second $t@381@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@346@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 ($Snap.combine ($Snap.first $t@382@01) ($Snap.second $t@382@01))))
(assert (= ($Snap.first $t@382@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@346@01 2))))
(assert (= ($Snap.second $t@382@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@346@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@346@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@346@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@386@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@387@01 $Snap)
(assert (= $t@387@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@346@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@359@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@359@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | $out_of_gas@359@01 | live]
; [else-branch: 81 | !($out_of_gas@359@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 81 | $out_of_gas@359@01]
(assert $out_of_gas@359@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $div(10000000000 * 10000000000, 30000000000, 10000000000 *
;   10000000000 \
;   30000000000) ==
;   0
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) == 0
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(push) ; 4
(assert (not (=
  ($div<Int> 100000000000000000000 30000000000 (div
    100000000000000000000
    30000000000))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) == 0
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($div<Int> 100000000000000000000 30000000000 (div
    100000000000000000000
    30000000000))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) == 0
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($div<Int> 100000000000000000000 30000000000 (div
    100000000000000000000
    30000000000))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) == 0
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($div<Int> 100000000000000000000 30000000000 (div
    100000000000000000000
    30000000000))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$check_fail_1 ----------
(declare-const $succ@388@01 Bool)
(declare-const $succ@389@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@390@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@391@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@392@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@393@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@394@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@395@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@396@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@397@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@398@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@399@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@400@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@401@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@402@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@403@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@404@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@405@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@406@01 $Snap)
(assert (= $t@406@01 ($Snap.combine ($Snap.first $t@406@01) ($Snap.second $t@406@01))))
(assert (= ($Snap.first $t@406@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@394@01 0))))
(assert (= ($Snap.second $t@406@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@394@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@407@01 $Snap)
(assert (= $t@407@01 ($Snap.combine ($Snap.first $t@407@01) ($Snap.second $t@407@01))))
(assert (= ($Snap.first $t@407@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@394@01 1))))
(assert (= ($Snap.second $t@407@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@394@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@408@01 $Snap)
(assert (= $t@408@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@409@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 82 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $q0@409@01)) | live]
; [else-branch: 82 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $q0@409@01) | live]
(push) ; 5
; [then-branch: 82 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $q0@409@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 82 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 3)), $q0@409@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@409@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1180@11@1180@345-aux|)))
(assert (forall (($q0@409@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@409@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1180@11@1180@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@411@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@411@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@411@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 3)) $q0@411@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1181@11@1181@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@413@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 83 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 4)), $q1@413@01)) | live]
; [else-branch: 83 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 4)), $q1@413@01) | live]
(push) ; 5
; [then-branch: 83 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 4)), $q1@413@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 83 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@394@01, 4)), $q1@413@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@413@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1182@11@1182@345-aux|)))
(assert (forall (($q1@413@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@413@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1182@11@1182@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@415@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@415@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@415@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@394@01 4)) $q1@415@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1183@11@1183@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@416@01 $Snap)
(assert (= $t@416@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@394@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@417@01 $Snap)
(assert (= $t@417@01 ($Snap.combine ($Snap.first $t@417@01) ($Snap.second $t@417@01))))
(assert (= ($Snap.first $t@417@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@417@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@418@01 $Snap)
(assert (= $t@418@01 ($Snap.combine ($Snap.first $t@418@01) ($Snap.second $t@418@01))))
(assert (= ($Snap.first $t@418@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@391@01 0))))
(assert (= ($Snap.second $t@418@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@391@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@419@01 $Snap)
(assert (= $t@419@01 ($Snap.combine ($Snap.first $t@419@01) ($Snap.second $t@419@01))))
(assert (= ($Snap.first $t@419@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@391@01 1))))
(assert (= ($Snap.second $t@419@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@391@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@420@01 $Snap)
(assert (= $t@420@01 ($Snap.combine ($Snap.first $t@420@01) ($Snap.second $t@420@01))))
(assert (= ($Snap.first $t@420@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@391@01 2))))
(assert (= ($Snap.second $t@420@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@391@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@421@01 $Snap)
(assert (= $t@421@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@391@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@422@01 $Snap)
(assert (= $t@422@01 ($Snap.combine ($Snap.first $t@422@01) ($Snap.second $t@422@01))))
(assert (= ($Snap.first $t@422@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@391@01 4))))
(assert (= ($Snap.second $t@422@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@391@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@423@01 $Snap)
(assert (= $t@423@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@391@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@424@01 $Snap)
(assert (= $t@424@01 ($Snap.combine ($Snap.first $t@424@01) ($Snap.second $t@424@01))))
(assert (= ($Snap.first $t@424@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@390@01 0))))
(assert (= ($Snap.second $t@424@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@390@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@425@01 $Snap)
(assert (= $t@425@01 ($Snap.combine ($Snap.first $t@425@01) ($Snap.second $t@425@01))))
(assert (= ($Snap.first $t@425@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@390@01 1))))
(assert (= ($Snap.second $t@425@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@390@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@426@01 $Snap)
(assert (= $t@426@01 ($Snap.combine ($Snap.first $t@426@01) ($Snap.second $t@426@01))))
(assert (= ($Snap.first $t@426@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@390@01 2))))
(assert (= ($Snap.second $t@426@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@390@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@427@01 $Snap)
(assert (= $t@427@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@390@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@428@01 $Snap)
(assert (= $t@428@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@390@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@429@01 $Snap)
(assert (= $t@429@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@430@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@431@01 $Snap)
(assert (= $t@431@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@390@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@403@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@403@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | $out_of_gas@403@01 | live]
; [else-branch: 84 | !($out_of_gas@403@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 84 | $out_of_gas@403@01]
(assert $out_of_gas@403@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $div($div(10000000000 * 10000000000, 30000000000, 10000000000 *
;   10000000000 \
;   30000000000) *
;   30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 *
;   10000000000 \
;   30000000000) *
;   30000000000 \
;   10000000000) ==
;   10000000000
; [eval] $div($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000) == 10000000000
; [eval] $div($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000)
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(push) ; 4
(assert (not (=
  ($div<Int> (*
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    30000000000) 10000000000 (div
    (*
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      30000000000)
    10000000000))
  10000000000)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $div($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000) == 10000000000
; [eval] $div($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000)
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($div<Int> (*
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    30000000000) 10000000000 (div
    (*
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      30000000000)
    10000000000))
  10000000000)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $div($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000) == 10000000000
; [eval] $div($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000)
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($div<Int> (*
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    30000000000) 10000000000 (div
    (*
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      30000000000)
    10000000000))
  10000000000)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $div($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000) == 10000000000
; [eval] $div($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000, 10000000000, $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000)
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000 \ 10000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) * 30000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($div<Int> (*
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    30000000000) 10000000000 (div
    (*
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      30000000000)
    10000000000))
  10000000000)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$div3 ----------
(declare-const $succ@432@01 Bool)
(declare-const $succ@433@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@434@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@435@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@436@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@437@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@438@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@439@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@440@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@441@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@442@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@443@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@444@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@445@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@446@01 Bool)
; [exec]
; var l$d: Int
(declare-const l$d@447@01 Int)
; [exec]
; var l$p: Int
(declare-const l$p@448@01 Int)
; [exec]
; var l$e: Int
(declare-const l$e@449@01 Int)
; [exec]
; var l$i: $Int
(declare-const l$i@450@01 $Int)
; [exec]
; var l$e$1: $Int
(declare-const l$e$1@451@01 $Int)
; [exec]
; var l$p$1: $Int
(declare-const l$p$1@452@01 $Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@453@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@454@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@455@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 ($Snap.combine ($Snap.first $t@456@01) ($Snap.second $t@456@01))))
(assert (= ($Snap.first $t@456@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@438@01 0))))
(assert (= ($Snap.second $t@456@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@438@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@457@01 $Snap)
(assert (= $t@457@01 ($Snap.combine ($Snap.first $t@457@01) ($Snap.second $t@457@01))))
(assert (= ($Snap.first $t@457@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@438@01 1))))
(assert (= ($Snap.second $t@457@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@438@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@459@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 85 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@438@01, 3)), $q0@459@01)) | live]
; [else-branch: 85 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@438@01, 3)), $q0@459@01) | live]
(push) ; 5
; [then-branch: 85 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@438@01, 3)), $q0@459@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 85 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@438@01, 3)), $q0@459@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@459@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1265@11@1265@345-aux|)))
(assert (forall (($q0@459@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@459@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1265@11@1265@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@460@01 $Snap)
(assert (= $t@460@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@461@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@461@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@461@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 3)) $q0@461@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1266@11@1266@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@462@01 $Snap)
(assert (= $t@462@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@463@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 86 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@438@01, 4)), $q1@463@01)) | live]
; [else-branch: 86 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@438@01, 4)), $q1@463@01) | live]
(push) ; 5
; [then-branch: 86 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@438@01, 4)), $q1@463@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 86 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@438@01, 4)), $q1@463@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@463@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1267@11@1267@345-aux|)))
(assert (forall (($q1@463@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@463@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1267@11@1267@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@464@01 $Snap)
(assert (= $t@464@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@465@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@465@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@465@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@438@01 4)) $q1@465@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1268@11@1268@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@466@01 $Snap)
(assert (= $t@466@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@438@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 ($Snap.combine ($Snap.first $t@467@01) ($Snap.second $t@467@01))))
(assert (= ($Snap.first $t@467@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@467@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@468@01 $Snap)
(assert (= $t@468@01 ($Snap.combine ($Snap.first $t@468@01) ($Snap.second $t@468@01))))
(assert (= ($Snap.first $t@468@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@435@01 0))))
(assert (= ($Snap.second $t@468@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@435@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 ($Snap.combine ($Snap.first $t@469@01) ($Snap.second $t@469@01))))
(assert (= ($Snap.first $t@469@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@435@01 1))))
(assert (= ($Snap.second $t@469@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@435@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 ($Snap.combine ($Snap.first $t@470@01) ($Snap.second $t@470@01))))
(assert (= ($Snap.first $t@470@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@435@01 2))))
(assert (= ($Snap.second $t@470@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@435@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@435@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@472@01 $Snap)
(assert (= $t@472@01 ($Snap.combine ($Snap.first $t@472@01) ($Snap.second $t@472@01))))
(assert (= ($Snap.first $t@472@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@435@01 4))))
(assert (= ($Snap.second $t@472@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@435@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@473@01 $Snap)
(assert (= $t@473@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@435@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 ($Snap.combine ($Snap.first $t@474@01) ($Snap.second $t@474@01))))
(assert (= ($Snap.first $t@474@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@434@01 0))))
(assert (= ($Snap.second $t@474@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@434@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@475@01 $Snap)
(assert (= $t@475@01 ($Snap.combine ($Snap.first $t@475@01) ($Snap.second $t@475@01))))
(assert (= ($Snap.first $t@475@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@434@01 1))))
(assert (= ($Snap.second $t@475@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@434@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 ($Snap.combine ($Snap.first $t@476@01) ($Snap.second $t@476@01))))
(assert (= ($Snap.first $t@476@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@434@01 2))))
(assert (= ($Snap.second $t@476@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@434@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@434@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@478@01 $Snap)
(assert (= $t@478@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@434@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int))
(declare-const $a@480@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@481@01 $Snap)
(assert (= $t@481@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@434@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] 30000000000 == 0
; [then-branch: 87 | False | dead]
; [else-branch: 87 | True | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 87 | True]
(pop) ; 3
; [eval] !(30000000000 == 0)
; [eval] 30000000000 == 0
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | True | live]
; [else-branch: 88 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 88 | True]
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) < -1701411834604692317316873037158841057280000000000 || $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 4
; [then-branch: 89 | $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 89 | !($div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 5
; [then-branch: 89 | $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 100000000000000000000 30000000000 (div
    100000000000000000000
    30000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 5
(push) ; 5
; [else-branch: 89 | !($div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 90 | !($div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 90 | !($div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 4
; [eval] !($div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) < -1701411834604692317316873037158841057280000000000 || $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) < -1701411834604692317316873037158841057280000000000 || $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 4
; [then-branch: 91 | $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 91 | !($div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 5
; [then-branch: 91 | $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 100000000000000000000 30000000000 (div
    100000000000000000000
    30000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 5
(push) ; 5
; [else-branch: 91 | !($div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 100000000000000000000 30000000000 (div
      100000000000000000000
      30000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | !($div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 92 | $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 92 | !($div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](100000000000000000000, 30000000000, 100000000000000000000 / 30000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 100000000000000000000 30000000000 (div
        100000000000000000000
        30000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$d := $div(10000000000 * 10000000000, 30000000000, 10000000000 *
;   10000000000 \
;   30000000000)
; [eval] $div(10000000000 * 10000000000, 30000000000, 10000000000 * 10000000000 \ 30000000000)
; [eval] 10000000000 * 10000000000
; [eval] 10000000000 * 10000000000 \ 30000000000
; [eval] 10000000000 * 10000000000
(declare-const l$d@482@01 Int)
(assert (=
  l$d@482@01
  ($div<Int> 100000000000000000000 30000000000 (div
    100000000000000000000
    30000000000))))
; [exec]
; l$p := 100000000000
; [exec]
; l$e := 0
; [exec]
; l$p$1 := $wrap(l$p)
; [eval] $wrap(l$p)
(declare-const l$p$1@483@01 $Int)
(assert (= l$p$1@483@01 ($wrap<$Int> 100000000000)))
; [exec]
; l$e$1 := $wrap(l$e)
; [eval] $wrap(l$e)
(declare-const l$e$1@484@01 $Int)
(assert (= l$e$1@484@01 ($wrap<$Int> 0)))
; [exec]
; l$i := $wrap($range(0, 10)[0])
; [eval] $wrap($range(0, 10)[0])
; [eval] $range(0, 10)[0]
; [eval] $range(0, 10)
(push) ; 5
(assert (not (< 0 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@485@01 $Int)
(assert (= l$i@485@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 0))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 5
; [then-branch: 93 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 93 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 6
; [then-branch: 93 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 6
(push) ; 6
; [else-branch: 93 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 94 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 94 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 5
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 5
; [then-branch: 95 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 95 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 6
; [then-branch: 95 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 6
(push) ; 6
; [else-branch: 95 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 96 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 96 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [eval] l$p == 0
; [then-branch: 97 | False | dead]
; [else-branch: 97 | True | live]
(push) ; 6
; [else-branch: 97 | True]
(pop) ; 6
; [eval] !(l$p == 0)
; [eval] l$p == 0
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | True | live]
; [else-branch: 98 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 98 | True]
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 7
; [then-branch: 99 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 99 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 8
; [then-branch: 99 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) 100000000000 (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    100000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 8
(push) ; 8
; [else-branch: 99 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 100 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 100 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 7
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 7
; [then-branch: 101 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 101 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 8
; [then-branch: 101 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) 100000000000 (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    100000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 8
(push) ; 8
; [else-branch: 101 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 102 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 102 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) 100000000000 (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        100000000000))
      1701411834604692317316873037158841057270000000000))))
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000 || l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 8
; [then-branch: 103 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 103 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 9
; [then-branch: 103 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) 100000000000 (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    100000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 9
(push) ; 9
; [else-branch: 103 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [then-branch: 104 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 104 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 8
; [else-branch: 104 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 8
; [eval] !(l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000 || l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000)
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000 || l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) < -1701411834604692317316873037158841057280000000000
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 8
; [then-branch: 105 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 105 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 9
; [then-branch: 105 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) 100000000000 (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    100000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 9
(push) ; 9
; [else-branch: 105 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p) > 1701411834604692317316873037158841057270000000000
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) 100000000000 (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      100000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 106 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 106 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, 100000000000, $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / 100000000000) > 1701411834604692317316873037158841057270000000000)]
; [exec]
; l$e$1 := $wrap(l$e +
;   $div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000 \
;   l$p))
; [eval] $wrap(l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p))
; [eval] l$e + $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, l$p, $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ l$p
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(declare-const l$e$1@486@01 $Int)
(assert (=
  l$e$1@486@01
  ($wrap<$Int> ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) 100000000000 (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    100000000000)))))
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000)
; [eval] l$p * 100000000000
; [eval] l$p * 100000000000 \ 10000000000
; [eval] l$p * 100000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 9
; [then-branch: 107 | $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 107 | !($div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 10
; [then-branch: 107 | $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 10000000000000000000000 10000000000 (div
    10000000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 10
(push) ; 10
; [else-branch: 107 | !($div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 10000000000000000000000 10000000000 (div
      10000000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000)
; [eval] l$p * 100000000000
; [eval] l$p * 100000000000 \ 10000000000
; [eval] l$p * 100000000000
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> 10000000000000000000000 10000000000 (div
      10000000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 108 | !($div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 108 | !($div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 9
; [eval] !($div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000)
; [eval] l$p * 100000000000
; [eval] l$p * 100000000000 \ 10000000000
; [eval] l$p * 100000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 9
; [then-branch: 109 | $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 109 | !($div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 10
; [then-branch: 109 | $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 10000000000000000000000 10000000000 (div
    10000000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 10
(push) ; 10
; [else-branch: 109 | !($div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 10000000000000000000000 10000000000 (div
      10000000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000)
; [eval] l$p * 100000000000
; [eval] l$p * 100000000000 \ 10000000000
; [eval] l$p * 100000000000
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 10000000000000000000000 10000000000 (div
      10000000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 10000000000000000000000 10000000000 (div
      10000000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | !($div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 110 | $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 110 | !($div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](10000000000000000000000, 10000000000, 10000000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> 10000000000000000000000 10000000000 (div
        10000000000000000000000
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div(l$p * 100000000000, 10000000000, l$p * 100000000000 \
;   10000000000))
; [eval] $wrap($div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000))
; [eval] $div(l$p * 100000000000, 10000000000, l$p * 100000000000 \ 10000000000)
; [eval] l$p * 100000000000
; [eval] l$p * 100000000000 \ 10000000000
; [eval] l$p * 100000000000
(declare-const l$p$1@487@01 $Int)
(assert (=
  l$p$1@487@01
  ($wrap<$Int> ($div<Int> 10000000000000000000000 10000000000 (div
    10000000000000000000000
    10000000000)))))
; [exec]
; label continue_0
; [exec]
; l$i := $wrap($range(0, 10)[1])
; [eval] $wrap($range(0, 10)[1])
; [eval] $range(0, 10)[1]
; [eval] $range(0, 10)
(push) ; 10
(assert (not (< 1 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@488@01 $Int)
(assert (= l$i@488@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 1))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 10
; [then-branch: 111 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 111 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 11
; [then-branch: 111 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 11
(push) ; 11
; [else-branch: 111 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 112 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 112 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 10
; [else-branch: 112 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 10
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 10
; [then-branch: 113 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 113 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 11
; [then-branch: 113 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 11
(push) ; 11
; [else-branch: 113 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 114 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 114 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@487@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | $unwrap[Int](l$p$1@487@01) == 0 | dead]
; [else-branch: 115 | $unwrap[Int](l$p$1@487@01) != 0 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 115 | $unwrap[Int](l$p$1@487@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@487@01) 0)))
(pop) ; 11
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@487@01) 0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@487@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | $unwrap[Int](l$p$1@487@01) != 0 | live]
; [else-branch: 116 | $unwrap[Int](l$p$1@487@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 116 | $unwrap[Int](l$p$1@487@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@487@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 12
; [then-branch: 117 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 117 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 13
; [then-branch: 117 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@487@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@487@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 13
(push) ; 13
; [else-branch: 117 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@487@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@487@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@487@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@487@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 118 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 118 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 12
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 12
; [then-branch: 119 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 119 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 13
; [then-branch: 119 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@487@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@487@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 13
(push) ; 13
; [else-branch: 119 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@487@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@487@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@487@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@487@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@487@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@487@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 120 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 120 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 13
; [then-branch: 121 | $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 121 | !($unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 14
; [then-branch: 121 | $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@486@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@487@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@487@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 14
(push) ; 14
; [else-branch: 121 | !($unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@486@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@486@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 122 | !($unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 122 | !($unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 13
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 13
; [then-branch: 123 | $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 123 | !($unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 14
; [then-branch: 123 | $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@486@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@487@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@487@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 14
(push) ; 14
; [else-branch: 123 | !($unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@486@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@486@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@486@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@487@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@487@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | !($unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 124 | $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 124 | !($unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@486@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@487@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@487@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@486@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@487@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@487@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@489@01 $Int)
(assert (=
  l$e$1@489@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@486@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@487@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@487@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 14
; [then-branch: 125 | $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 125 | !($div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 15
; [then-branch: 125 | $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@487@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 15
(push) ; 15
; [else-branch: 125 | !($div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@487@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@487@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 126 | !($div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 126 | !($div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 14
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 14
; [then-branch: 127 | $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 127 | !($div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 15
; [then-branch: 127 | $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@487@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 15
(push) ; 15
; [else-branch: 127 | !($div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@487@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@487@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@487@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | !($div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 128 | $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 128 | !($div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@487@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@487@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@487@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@490@01 $Int)
(assert (=
  l$p$1@490@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@487@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@487@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_1
; [exec]
; l$i := $wrap($range(0, 10)[2])
; [eval] $wrap($range(0, 10)[2])
; [eval] $range(0, 10)[2]
; [eval] $range(0, 10)
(push) ; 15
(assert (not (< 2 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@491@01 $Int)
(assert (= l$i@491@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 2))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 15
; [then-branch: 129 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 129 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 16
; [then-branch: 129 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 16
(push) ; 16
; [else-branch: 129 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 130 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 130 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 15
; [else-branch: 130 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 15
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 15
; [then-branch: 131 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 131 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 16
; [then-branch: 131 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 16
(push) ; 16
; [else-branch: 131 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 132 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 132 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@490@01) 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | $unwrap[Int](l$p$1@490@01) == 0 | dead]
; [else-branch: 133 | $unwrap[Int](l$p$1@490@01) != 0 | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 133 | $unwrap[Int](l$p$1@490@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@490@01) 0)))
(pop) ; 16
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@490@01) 0)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@490@01) 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | $unwrap[Int](l$p$1@490@01) != 0 | live]
; [else-branch: 134 | $unwrap[Int](l$p$1@490@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 134 | $unwrap[Int](l$p$1@490@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@490@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 17
; [then-branch: 135 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 135 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 18
; [then-branch: 135 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@490@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@490@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 18
(push) ; 18
; [else-branch: 135 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@490@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@490@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@490@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@490@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 136 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 136 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 17
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 17
; [then-branch: 137 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 137 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 18
; [then-branch: 137 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@490@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@490@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 18
(push) ; 18
; [else-branch: 137 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@490@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@490@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@490@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@490@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@490@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@490@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 138 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 138 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 18
; [then-branch: 139 | $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 139 | !($unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 19
; [then-branch: 139 | $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@489@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@490@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@490@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 19
(push) ; 19
; [else-branch: 139 | !($unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@489@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@489@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 140 | !($unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 140 | !($unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 18
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 18
; [then-branch: 141 | $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 141 | !($unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 19
; [then-branch: 141 | $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@489@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@490@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@490@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 19
(push) ; 19
; [else-branch: 141 | !($unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@489@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@489@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@489@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@490@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@490@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | !($unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 142 | $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 142 | !($unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@489@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@490@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@490@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@489@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@490@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@490@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@492@01 $Int)
(assert (=
  l$e$1@492@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@489@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@490@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@490@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 19
; [then-branch: 143 | $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 143 | !($div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 20
; [then-branch: 143 | $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@490@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 20
(push) ; 20
; [else-branch: 143 | !($div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@490@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@490@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 19
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 144 | !($div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 144 | !($div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 19
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 19
; [then-branch: 145 | $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 145 | !($div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 20
; [then-branch: 145 | $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@490@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 20
(push) ; 20
; [else-branch: 145 | !($div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@490@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@490@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@490@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | !($div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 146 | $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 146 | !($div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@490@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@490@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@490@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@493@01 $Int)
(assert (=
  l$p$1@493@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@490@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@490@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_2
; [exec]
; l$i := $wrap($range(0, 10)[3])
; [eval] $wrap($range(0, 10)[3])
; [eval] $range(0, 10)[3]
; [eval] $range(0, 10)
(push) ; 20
(assert (not (< 3 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@494@01 $Int)
(assert (= l$i@494@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 3))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 20
; [then-branch: 147 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 147 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 21
; [then-branch: 147 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 21
(push) ; 21
; [else-branch: 147 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 148 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 148 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 20
; [else-branch: 148 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 20
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 20
; [then-branch: 149 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 149 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 21
; [then-branch: 149 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 21
(push) ; 21
; [else-branch: 149 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 150 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 150 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 21
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@493@01) 0))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | $unwrap[Int](l$p$1@493@01) == 0 | dead]
; [else-branch: 151 | $unwrap[Int](l$p$1@493@01) != 0 | live]
(set-option :timeout 0)
(push) ; 21
; [else-branch: 151 | $unwrap[Int](l$p$1@493@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@493@01) 0)))
(pop) ; 21
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 21
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@493@01) 0)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@493@01) 0))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | $unwrap[Int](l$p$1@493@01) != 0 | live]
; [else-branch: 152 | $unwrap[Int](l$p$1@493@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 152 | $unwrap[Int](l$p$1@493@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@493@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 22
; [then-branch: 153 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 153 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 23
; [then-branch: 153 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@493@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@493@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 23
(push) ; 23
; [else-branch: 153 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@493@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@493@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@493@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@493@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 154 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 154 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 154 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 22
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 22
; [then-branch: 155 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 155 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 23
; [then-branch: 155 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@493@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@493@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 23
(push) ; 23
; [else-branch: 155 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@493@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@493@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@493@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@493@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@493@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@493@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 156 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 156 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 23
; [then-branch: 157 | $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 157 | !($unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 24
; [then-branch: 157 | $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@492@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@493@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@493@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 24
(push) ; 24
; [else-branch: 157 | !($unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@492@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@492@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 158 | !($unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 158 | !($unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 23
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 23
; [then-branch: 159 | $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 159 | !($unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 24
; [then-branch: 159 | $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@492@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@493@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@493@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 24
(push) ; 24
; [else-branch: 159 | !($unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@492@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@492@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@492@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@493@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@493@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | !($unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 160 | $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 160 | !($unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@492@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@493@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@493@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@492@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@493@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@493@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@495@01 $Int)
(assert (=
  l$e$1@495@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@492@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@493@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@493@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 24
; [then-branch: 161 | $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 161 | !($div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 25
; [then-branch: 161 | $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@493@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 25
(push) ; 25
; [else-branch: 161 | !($div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@493@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@493@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 162 | $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 162 | !($div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 162 | !($div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 24
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 24
; [then-branch: 163 | $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 163 | !($div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 25
; [then-branch: 163 | $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@493@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 25
(push) ; 25
; [else-branch: 163 | !($div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@493@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@493@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@493@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | !($div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 164 | $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 164 | !($div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@493@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@493@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@493@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@496@01 $Int)
(assert (=
  l$p$1@496@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@493@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@493@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_3
; [exec]
; l$i := $wrap($range(0, 10)[4])
; [eval] $wrap($range(0, 10)[4])
; [eval] $range(0, 10)[4]
; [eval] $range(0, 10)
(push) ; 25
(assert (not (< 4 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@497@01 $Int)
(assert (= l$i@497@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 4))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 25
; [then-branch: 165 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 165 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 26
; [then-branch: 165 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 26
(push) ; 26
; [else-branch: 165 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
; [then-branch: 166 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 166 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 25
; [else-branch: 166 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 25
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 25
; [then-branch: 167 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 167 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 26
; [then-branch: 167 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 26
(push) ; 26
; [else-branch: 167 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(push) ; 25
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 168 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 168 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@496@01) 0))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | $unwrap[Int](l$p$1@496@01) == 0 | dead]
; [else-branch: 169 | $unwrap[Int](l$p$1@496@01) != 0 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 169 | $unwrap[Int](l$p$1@496@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@496@01) 0)))
(pop) ; 26
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 26
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@496@01) 0)))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@496@01) 0))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | $unwrap[Int](l$p$1@496@01) != 0 | live]
; [else-branch: 170 | $unwrap[Int](l$p$1@496@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 170 | $unwrap[Int](l$p$1@496@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@496@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 27
; [then-branch: 171 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 171 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 28
; [then-branch: 171 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@496@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@496@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 28
(push) ; 28
; [else-branch: 171 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@496@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@496@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@496@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@496@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 27
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 172 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 172 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 27
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 27
; [then-branch: 173 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 173 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 28
; [then-branch: 173 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@496@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@496@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 28
(push) ; 28
; [else-branch: 173 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@496@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@496@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(push) ; 27
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@496@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@496@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@496@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@496@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 174 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 174 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 28
; [then-branch: 175 | $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 175 | !($unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 29
; [then-branch: 175 | $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@495@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@496@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@496@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 29
(push) ; 29
; [else-branch: 175 | !($unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@495@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@495@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 28
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 176 | !($unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 176 | !($unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 28
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 28
; [then-branch: 177 | $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 177 | !($unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 29
; [then-branch: 177 | $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@495@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@496@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@496@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 29
(push) ; 29
; [else-branch: 177 | !($unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@495@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(push) ; 28
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@495@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@495@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@496@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@496@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | !($unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 178 | $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 178 | !($unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@495@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@496@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@496@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@495@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@496@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@496@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@498@01 $Int)
(assert (=
  l$e$1@498@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@495@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@496@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@496@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 29
; [then-branch: 179 | $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 179 | !($div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 30
; [then-branch: 179 | $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@496@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 30
(push) ; 30
; [else-branch: 179 | !($div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@496@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@496@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 29
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 180 | !($div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 180 | !($div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 29
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 29
; [then-branch: 181 | $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 181 | !($div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 30
; [then-branch: 181 | $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@496@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 30
(push) ; 30
; [else-branch: 181 | !($div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@496@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@496@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@496@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 29
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | !($div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 182 | $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 182 | !($div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@496@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@496@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@496@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@499@01 $Int)
(assert (=
  l$p$1@499@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@496@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@496@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_4
; [exec]
; l$i := $wrap($range(0, 10)[5])
; [eval] $wrap($range(0, 10)[5])
; [eval] $range(0, 10)[5]
; [eval] $range(0, 10)
(push) ; 30
(assert (not (< 5 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@500@01 $Int)
(assert (= l$i@500@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 5))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 30
; [then-branch: 183 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 183 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 31
; [then-branch: 183 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 31
(push) ; 31
; [else-branch: 183 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
; [then-branch: 184 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 184 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 30
; [else-branch: 184 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 30
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 30
; [then-branch: 185 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 185 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 31
; [then-branch: 185 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 31
(push) ; 31
; [else-branch: 185 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(push) ; 30
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 186 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 30
; [then-branch: 186 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 31
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@499@01) 0))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | $unwrap[Int](l$p$1@499@01) == 0 | dead]
; [else-branch: 187 | $unwrap[Int](l$p$1@499@01) != 0 | live]
(set-option :timeout 0)
(push) ; 31
; [else-branch: 187 | $unwrap[Int](l$p$1@499@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@499@01) 0)))
(pop) ; 31
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 31
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@499@01) 0)))
(check-sat)
; unknown
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@499@01) 0))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | $unwrap[Int](l$p$1@499@01) != 0 | live]
; [else-branch: 188 | $unwrap[Int](l$p$1@499@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 31
; [then-branch: 188 | $unwrap[Int](l$p$1@499@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@499@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 32
; [then-branch: 189 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 189 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 33
; [then-branch: 189 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@499@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@499@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 33
(push) ; 33
; [else-branch: 189 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@499@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@499@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@499@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@499@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 32
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 190 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 32
; [else-branch: 190 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 32
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 32
; [then-branch: 191 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 191 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 33
; [then-branch: 191 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@499@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@499@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 33
(push) ; 33
; [else-branch: 191 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@499@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@499@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(push) ; 32
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@499@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@499@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@499@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@499@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 32
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 192 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 32
; [then-branch: 192 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 33
; [then-branch: 193 | $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 193 | !($unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 34
; [then-branch: 193 | $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@498@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@499@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@499@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 34
(push) ; 34
; [else-branch: 193 | !($unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@498@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@498@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 33
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 194 | !($unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 33
; [else-branch: 194 | !($unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 33
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 33
; [then-branch: 195 | $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 195 | !($unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 34
; [then-branch: 195 | $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@498@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@499@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@499@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 34
(push) ; 34
; [else-branch: 195 | !($unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@498@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 34
(pop) ; 33
; Joined path conditions
; Joined path conditions
(push) ; 33
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@498@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@498@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@499@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@499@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 33
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | !($unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 196 | $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 33
; [then-branch: 196 | !($unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@498@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@499@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@499@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@498@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@499@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@499@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@501@01 $Int)
(assert (=
  l$e$1@501@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@498@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@499@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@499@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 34
; [then-branch: 197 | $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 197 | !($div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 35
; [then-branch: 197 | $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@499@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 35
(push) ; 35
; [else-branch: 197 | !($div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@499@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@499@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 34
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 198 | !($div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 34
; [else-branch: 198 | !($div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 34
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 34
; [then-branch: 199 | $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 199 | !($div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 35
; [then-branch: 199 | $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@499@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 35
(push) ; 35
; [else-branch: 199 | !($div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@499@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(push) ; 34
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@499@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@499@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 34
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | !($div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 200 | $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 34
; [then-branch: 200 | !($div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@499@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@499@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@499@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@502@01 $Int)
(assert (=
  l$p$1@502@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@499@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@499@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_5
; [exec]
; l$i := $wrap($range(0, 10)[6])
; [eval] $wrap($range(0, 10)[6])
; [eval] $range(0, 10)[6]
; [eval] $range(0, 10)
(push) ; 35
(assert (not (< 6 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@503@01 $Int)
(assert (= l$i@503@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 6))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 35
; [then-branch: 201 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 201 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 36
; [then-branch: 201 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 36
(push) ; 36
; [else-branch: 201 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
; [then-branch: 202 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 202 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 35
; [else-branch: 202 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 35
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 35
; [then-branch: 203 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 203 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 36
; [then-branch: 203 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 36
(push) ; 36
; [else-branch: 203 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 36
(pop) ; 35
; Joined path conditions
; Joined path conditions
(push) ; 35
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 35
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 204 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 35
; [then-branch: 204 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 36
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@502@01) 0))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | $unwrap[Int](l$p$1@502@01) == 0 | dead]
; [else-branch: 205 | $unwrap[Int](l$p$1@502@01) != 0 | live]
(set-option :timeout 0)
(push) ; 36
; [else-branch: 205 | $unwrap[Int](l$p$1@502@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@502@01) 0)))
(pop) ; 36
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 36
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@502@01) 0)))
(check-sat)
; unknown
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 36
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@502@01) 0))))
(check-sat)
; unsat
(pop) ; 36
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | $unwrap[Int](l$p$1@502@01) != 0 | live]
; [else-branch: 206 | $unwrap[Int](l$p$1@502@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 36
; [then-branch: 206 | $unwrap[Int](l$p$1@502@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@502@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 37
; [then-branch: 207 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 207 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 38
; [then-branch: 207 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@502@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@502@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 38
(push) ; 38
; [else-branch: 207 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@502@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@502@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@502@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@502@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 37
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 208 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 37
; [else-branch: 208 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 37
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 37
; [then-branch: 209 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 209 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 38
; [then-branch: 209 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@502@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@502@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 38
(push) ; 38
; [else-branch: 209 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@502@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@502@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 38
(pop) ; 37
; Joined path conditions
; Joined path conditions
(push) ; 37
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@502@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@502@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@502@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@502@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 37
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 37
; 0.00s
; (get-info :all-statistics)
; [then-branch: 210 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 210 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 37
; [then-branch: 210 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 38
; [then-branch: 211 | $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 211 | !($unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 39
; [then-branch: 211 | $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@501@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@502@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@502@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 39
(push) ; 39
; [else-branch: 211 | !($unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@501@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@501@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 38
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 38
; 0.01s
; (get-info :all-statistics)
; [then-branch: 212 | $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 212 | !($unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 38
; [else-branch: 212 | !($unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 38
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 38
; [then-branch: 213 | $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 213 | !($unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 39
; [then-branch: 213 | $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@501@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@502@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@502@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 39
(push) ; 39
; [else-branch: 213 | !($unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@501@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 39
(pop) ; 38
; Joined path conditions
; Joined path conditions
(push) ; 38
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@501@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@501@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@502@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@502@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 38
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 38
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 38
; 0.01s
; (get-info :all-statistics)
; [then-branch: 214 | !($unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 214 | $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 38
; [then-branch: 214 | !($unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@501@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@502@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@502@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@501@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@502@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@502@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@504@01 $Int)
(assert (=
  l$e$1@504@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@501@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@502@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@502@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 39
; [then-branch: 215 | $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 215 | !($div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 40
; [then-branch: 215 | $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@502@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 40
(push) ; 40
; [else-branch: 215 | !($div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@502@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@502@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 216 | !($div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 39
; [else-branch: 216 | !($div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 39
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 39
; [then-branch: 217 | $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 217 | !($div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 40
; [then-branch: 217 | $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@502@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 40
(push) ; 40
; [else-branch: 217 | !($div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@502@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 40
(pop) ; 39
; Joined path conditions
; Joined path conditions
(push) ; 39
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@502@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@502@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 39
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 39
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | !($div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 218 | $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 39
; [then-branch: 218 | !($div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@502@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@502@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@502@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@505@01 $Int)
(assert (=
  l$p$1@505@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@502@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@502@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_6
; [exec]
; l$i := $wrap($range(0, 10)[7])
; [eval] $wrap($range(0, 10)[7])
; [eval] $range(0, 10)[7]
; [eval] $range(0, 10)
(push) ; 40
(assert (not (< 7 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@506@01 $Int)
(assert (= l$i@506@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 7))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 40
; [then-branch: 219 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 219 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 41
; [then-branch: 219 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 41
(push) ; 41
; [else-branch: 219 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
; [then-branch: 220 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 220 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 40
; [else-branch: 220 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 40
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 40
; [then-branch: 221 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 221 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 41
; [then-branch: 221 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 41
(push) ; 41
; [else-branch: 221 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 41
(pop) ; 40
; Joined path conditions
; Joined path conditions
(push) ; 40
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 40
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 222 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 40
; [then-branch: 222 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 41
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@505@01) 0))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | $unwrap[Int](l$p$1@505@01) == 0 | dead]
; [else-branch: 223 | $unwrap[Int](l$p$1@505@01) != 0 | live]
(set-option :timeout 0)
(push) ; 41
; [else-branch: 223 | $unwrap[Int](l$p$1@505@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@505@01) 0)))
(pop) ; 41
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 41
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@505@01) 0)))
(check-sat)
; unknown
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 41
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@505@01) 0))))
(check-sat)
; unsat
(pop) ; 41
; 0.00s
; (get-info :all-statistics)
; [then-branch: 224 | $unwrap[Int](l$p$1@505@01) != 0 | live]
; [else-branch: 224 | $unwrap[Int](l$p$1@505@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 41
; [then-branch: 224 | $unwrap[Int](l$p$1@505@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@505@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 42
; [then-branch: 225 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 225 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 43
; [then-branch: 225 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@505@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@505@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 43
(push) ; 43
; [else-branch: 225 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@505@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@505@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@505@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@505@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 42
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 42
; 0.01s
; (get-info :all-statistics)
; [then-branch: 226 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 226 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 42
; [else-branch: 226 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 42
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 42
; [then-branch: 227 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 227 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 43
; [then-branch: 227 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@505@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@505@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 43
(push) ; 43
; [else-branch: 227 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@505@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@505@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 43
(pop) ; 42
; Joined path conditions
; Joined path conditions
(push) ; 42
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@505@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@505@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@505@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@505@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 42
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 42
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 228 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 42
; [then-branch: 228 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 43
; [then-branch: 229 | $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 229 | !($unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 44
; [then-branch: 229 | $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@504@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@505@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@505@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 44
(push) ; 44
; [else-branch: 229 | !($unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@504@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@504@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 43
; 0.01s
; (get-info :all-statistics)
; [then-branch: 230 | $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 230 | !($unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 43
; [else-branch: 230 | !($unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 43
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 43
; [then-branch: 231 | $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 231 | !($unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 44
; [then-branch: 231 | $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@504@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@505@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@505@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 44
(push) ; 44
; [else-branch: 231 | !($unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@504@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 44
(pop) ; 43
; Joined path conditions
; Joined path conditions
(push) ; 43
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@504@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@504@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@505@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@505@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 43
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 43
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 43
; 0.01s
; (get-info :all-statistics)
; [then-branch: 232 | !($unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 232 | $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 43
; [then-branch: 232 | !($unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@504@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@505@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@505@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@504@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@505@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@505@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@507@01 $Int)
(assert (=
  l$e$1@507@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@504@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@505@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@505@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 44
; [then-branch: 233 | $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 233 | !($div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 45
; [then-branch: 233 | $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@505@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 45
(push) ; 45
; [else-branch: 233 | !($div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@505@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@505@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 234 | !($div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 44
; [else-branch: 234 | !($div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 44
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 44
; [then-branch: 235 | $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 235 | !($div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 45
; [then-branch: 235 | $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@505@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 45
(push) ; 45
; [else-branch: 235 | !($div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@505@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 45
(pop) ; 44
; Joined path conditions
; Joined path conditions
(push) ; 44
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@505@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@505@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 44
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 44
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | !($div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 236 | $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 44
; [then-branch: 236 | !($div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@505@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@505@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@505@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@508@01 $Int)
(assert (=
  l$p$1@508@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@505@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@505@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_7
; [exec]
; l$i := $wrap($range(0, 10)[8])
; [eval] $wrap($range(0, 10)[8])
; [eval] $range(0, 10)[8]
; [eval] $range(0, 10)
(push) ; 45
(assert (not (< 8 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@509@01 $Int)
(assert (= l$i@509@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 8))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 45
; [then-branch: 237 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 237 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 46
; [then-branch: 237 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 46
(push) ; 46
; [else-branch: 237 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
; [then-branch: 238 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 238 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 45
; [else-branch: 238 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 45
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 45
; [then-branch: 239 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 239 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 46
; [then-branch: 239 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 46
(push) ; 46
; [else-branch: 239 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 46
(pop) ; 45
; Joined path conditions
; Joined path conditions
(push) ; 45
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 45
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 240 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 45
; [then-branch: 240 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 46
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@508@01) 0))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | $unwrap[Int](l$p$1@508@01) == 0 | dead]
; [else-branch: 241 | $unwrap[Int](l$p$1@508@01) != 0 | live]
(set-option :timeout 0)
(push) ; 46
; [else-branch: 241 | $unwrap[Int](l$p$1@508@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@508@01) 0)))
(pop) ; 46
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 46
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@508@01) 0)))
(check-sat)
; unknown
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 46
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@508@01) 0))))
(check-sat)
; unsat
(pop) ; 46
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | $unwrap[Int](l$p$1@508@01) != 0 | live]
; [else-branch: 242 | $unwrap[Int](l$p$1@508@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 46
; [then-branch: 242 | $unwrap[Int](l$p$1@508@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@508@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 47
; [then-branch: 243 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 243 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 48
; [then-branch: 243 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@508@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@508@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 48
(push) ; 48
; [else-branch: 243 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@508@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@508@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@508@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@508@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 47
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 47
; 0.01s
; (get-info :all-statistics)
; [then-branch: 244 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 244 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 47
; [else-branch: 244 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 47
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 47
; [then-branch: 245 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 245 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 48
; [then-branch: 245 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@508@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@508@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 48
(push) ; 48
; [else-branch: 245 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@508@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@508@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 48
(pop) ; 47
; Joined path conditions
; Joined path conditions
(push) ; 47
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@508@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@508@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@508@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@508@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 47
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 47
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 47
; 0.01s
; (get-info :all-statistics)
; [then-branch: 246 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 246 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 47
; [then-branch: 246 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 48
; [then-branch: 247 | $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 247 | !($unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 49
; [then-branch: 247 | $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@507@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@508@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@508@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 49
(push) ; 49
; [else-branch: 247 | !($unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 48
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unknown
(pop) ; 48
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 48
; 0.00s
; (get-info :all-statistics)
; [then-branch: 248 | $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) > 1701411834604692317316873037158841057270000000000 | live]
; [else-branch: 248 | !($unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 248 | $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) > 1701411834604692317316873037158841057270000000000]
(assert (or
  (<
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    1701411834604692317316873037158841057270000000000)))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 49
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 49
; 0.01s
; (get-info :all-statistics)
; [then-branch: 249 | True | live]
; [else-branch: 249 | False | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 249 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@510@01 $Snap)
(assert (= $t@510@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@454@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@511@01 $Struct)
(assert (=
  self@511@01
  ($struct_set<$Struct> self@438@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@438@01 0))
    l$havoc@454@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 49
; [then-branch: 250 | False | dead]
; [else-branch: 250 | True | live]
(set-option :timeout 0)
(push) ; 49
; [else-branch: 250 | True]
(pop) ; 49
(pop) ; 48
(push) ; 48
; [else-branch: 248 | !($unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 48
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 48
; [then-branch: 251 | $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 251 | !($unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 49
; [then-branch: 251 | $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@507@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@508@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@508@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 49
(push) ; 49
; [else-branch: 251 | !($unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 49
(pop) ; 48
; Joined path conditions
; Joined path conditions
(push) ; 48
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 48
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 48
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unknown
(pop) ; 48
; 0.01s
; (get-info :all-statistics)
; [then-branch: 252 | !($unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 252 | $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) > 1701411834604692317316873037158841057270000000000 | live]
(set-option :timeout 0)
(push) ; 48
; [then-branch: 252 | !($unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@507@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@508@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@508@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@512@01 $Int)
(assert (=
  l$e$1@512@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@507@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@508@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@508@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 49
; [then-branch: 253 | $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 253 | !($div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 50
; [then-branch: 253 | $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@508@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 50
(push) ; 50
; [else-branch: 253 | !($div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@508@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@508@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 49
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 254 | !($div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 49
; [else-branch: 254 | !($div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 49
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 49
; [then-branch: 255 | $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 255 | !($div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 50
; [then-branch: 255 | $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@508@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 50
(push) ; 50
; [else-branch: 255 | !($div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@508@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 50
(pop) ; 49
; Joined path conditions
; Joined path conditions
(push) ; 49
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@508@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@508@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 49
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 49
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 49
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | !($div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 256 | $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 49
; [then-branch: 256 | !($div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@508@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@508@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@508@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@513@01 $Int)
(assert (=
  l$p$1@513@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@508@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@508@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_8
; [exec]
; l$i := $wrap($range(0, 10)[9])
; [eval] $wrap($range(0, 10)[9])
; [eval] $range(0, 10)[9]
; [eval] $range(0, 10)
(push) ; 50
(assert (not (< 9 (Seq_length ($range<Seq<Int>> 0 10)))))
(check-sat)
; unsat
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@514@01 $Int)
(assert (= l$i@514@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 10) 9))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 50
; [then-branch: 257 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 257 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 51
; [then-branch: 257 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 51
(push) ; 51
; [else-branch: 257 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
; [then-branch: 258 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 258 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(push) ; 50
; [else-branch: 258 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(pop) ; 50
; [eval] !($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 50
; [then-branch: 259 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 259 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 51
; [then-branch: 259 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> 300000000000000000000 10000000000 (div
    300000000000000000000
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 51
(push) ; 51
; [else-branch: 259 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
(pop) ; 51
(pop) ; 50
; Joined path conditions
; Joined path conditions
(push) ; 50
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 50
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 260 | $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 50
; [then-branch: 260 | !($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 51
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@513@01) 0))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | $unwrap[Int](l$p$1@513@01) == 0 | dead]
; [else-branch: 261 | $unwrap[Int](l$p$1@513@01) != 0 | live]
(set-option :timeout 0)
(push) ; 51
; [else-branch: 261 | $unwrap[Int](l$p$1@513@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@513@01) 0)))
(pop) ; 51
; [eval] !($unwrap(l$p$1) == 0)
; [eval] $unwrap(l$p$1) == 0
; [eval] $unwrap(l$p$1)
(push) ; 51
(set-option :timeout 10)
(assert (not (= ($unwrap<Int> l$p$1@513@01) 0)))
(check-sat)
; unknown
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 51
(set-option :timeout 10)
(assert (not (not (= ($unwrap<Int> l$p$1@513@01) 0))))
(check-sat)
; unsat
(pop) ; 51
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | $unwrap[Int](l$p$1@513@01) != 0 | live]
; [else-branch: 262 | $unwrap[Int](l$p$1@513@01) == 0 | dead]
(set-option :timeout 0)
(push) ; 51
; [then-branch: 262 | $unwrap[Int](l$p$1@513@01) != 0]
(assert (not (= ($unwrap<Int> l$p$1@513@01) 0)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 52
; [then-branch: 263 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 263 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 53
; [then-branch: 263 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@513@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@513@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 53
(push) ; 53
; [else-branch: 263 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@513@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@513@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 53
(pop) ; 52
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@513@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@513@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 52
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 264 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 52
; [else-branch: 264 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 52
; [eval] !($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000 || $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) < -1701411834604692317316873037158841057280000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 52
; [then-branch: 265 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 265 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 53
; [then-branch: 265 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (*
    ($div<Int> 300000000000000000000 10000000000 (div
      300000000000000000000
      10000000000))
    10000000000) ($unwrap<Int> l$p$1@513@01) (div
    (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000)
    ($unwrap<Int> l$p$1@513@01)))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 53
(push) ; 53
; [else-branch: 265 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@513@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@513@01)))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)) > 1701411834604692317316873037158841057270000000000
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 53
(pop) ; 52
; Joined path conditions
; Joined path conditions
(push) ; 52
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@513@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@513@01)))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@513@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@513@01)))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 52
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 52
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 52
; 0.00s
; (get-info :all-statistics)
; [then-branch: 266 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 266 | $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 52
; [then-branch: 266 | !($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) < -1701411834604692317316873037158841057280000000000 || $div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01)))
      1701411834604692317316873037158841057270000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 53
; [then-branch: 267 | $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 267 | !($unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 54
; [then-branch: 267 | $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@512@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@513@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@513@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 54
(push) ; 54
; [else-branch: 267 | !($unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@512@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    (+
      ($unwrap<Int> l$e$1@512@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [then-branch: 268 | $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 268 | !($unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 53
; [else-branch: 268 | !($unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 53
; [eval] !($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000)
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000 || $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) < -1701411834604692317316873037158841057280000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 53
; [then-branch: 269 | $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 269 | !($unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 54
; [then-branch: 269 | $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000]
(assert (<
  (+
    ($unwrap<Int> l$e$1@512@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@513@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@513@01))))))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 54
(push) ; 54
; [else-branch: 269 | !($unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$e$1@512@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))) > 1701411834604692317316873037158841057270000000000
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(pop) ; 54
(pop) ; 53
; Joined path conditions
; Joined path conditions
(push) ; 53
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$e$1@512@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@512@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@513@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@513@01))))))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 53
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 53
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 53
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | !($unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 270 | $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 53
; [then-branch: 270 | !($unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@512@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@513@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@513@01)))) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      (+
        ($unwrap<Int> l$e$1@512@01)
        ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000) ($unwrap<Int> l$p$1@513@01) (div
          (*
            ($div<Int> 300000000000000000000 10000000000 (div
              300000000000000000000
              10000000000))
            10000000000)
          ($unwrap<Int> l$p$1@513@01))))))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$e$1 := $wrap($unwrap(l$e$1) +
;   $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 *
;   10000000000 \
;   10000000000) *
;   10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000,
;   30000000000 * 10000000000 \ 10000000000) *
;   10000000000 \
;   $unwrap(l$p$1)))))
; [eval] $wrap($unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))))
; [eval] $unwrap(l$e$1) + $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $unwrap(l$e$1)
; [eval] $unwrap($wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))))
; [eval] $wrap($div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)))
; [eval] $div($div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000, $unwrap(l$p$1), $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1))
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000 \ $unwrap(l$p$1)
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000) * 10000000000
; [eval] $div(30000000000 * 10000000000, 10000000000, 30000000000 * 10000000000 \ 10000000000)
; [eval] 30000000000 * 10000000000
; [eval] 30000000000 * 10000000000 \ 10000000000
; [eval] 30000000000 * 10000000000
; [eval] $unwrap(l$p$1)
(declare-const l$e$1@515@01 $Int)
(assert (=
  l$e$1@515@01
  ($wrap<$Int> (+
    ($unwrap<Int> l$e$1@512@01)
    ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
      ($div<Int> 300000000000000000000 10000000000 (div
        300000000000000000000
        10000000000))
      10000000000) ($unwrap<Int> l$p$1@513@01) (div
      (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000)
      ($unwrap<Int> l$p$1@513@01)))))))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 54
; [then-branch: 271 | $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 271 | !($div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 55
; [then-branch: 271 | $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@513@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 55
(push) ; 55
; [else-branch: 271 | !($div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@513@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 55
(pop) ; 54
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000)))
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@513@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
(push) ; 54
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
; [then-branch: 272 | $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
; [else-branch: 272 | !($div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
(set-option :timeout 0)
(push) ; 54
; [else-branch: 272 | !($div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
(pop) ; 54
; [eval] !($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000)
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000 || $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) < -1701411834604692317316873037158841057280000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] -1701411834604692317316873037158841057280000000000
(push) ; 54
; [then-branch: 273 | $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 | live]
; [else-branch: 273 | !($div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000) | live]
(push) ; 55
; [then-branch: 273 | $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000]
(assert (<
  ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@513@01) 100000000000)
    10000000000))
  (- 0 1701411834604692317316873037158841057280000000000)))
(pop) ; 55
(push) ; 55
; [else-branch: 273 | !($div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000)]
(assert (not
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@513@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000) > 1701411834604692317316873037158841057270000000000
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(pop) ; 55
(pop) ; 54
; Joined path conditions
; Joined path conditions
(push) ; 54
(set-option :timeout 10)
(assert (not (or
  (<
    ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@513@01) 100000000000)
      10000000000))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
      (* ($unwrap<Int> l$p$1@513@01) 100000000000)
      10000000000))
    1701411834604692317316873037158841057270000000000))))
(check-sat)
; unknown
(pop) ; 54
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 54
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000)))))
(check-sat)
; unsat
(pop) ; 54
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | !($div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000) | live]
; [else-branch: 274 | $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000 | dead]
(set-option :timeout 0)
(push) ; 54
; [then-branch: 274 | !($div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) < -1701411834604692317316873037158841057280000000000 || $div[Int]($unwrap[Int](l$p$1@513@01) * 100000000000, 10000000000, $unwrap[Int](l$p$1@513@01) * 100000000000 / 10000000000) > 1701411834604692317316873037158841057270000000000)]
(assert (not
  (or
    (<
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      (- 0 1701411834604692317316873037158841057280000000000))
    (>
      ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
        (* ($unwrap<Int> l$p$1@513@01) 100000000000)
        10000000000))
      1701411834604692317316873037158841057270000000000))))
; [exec]
; l$p$1 := $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) *
;   100000000000 \
;   10000000000))
; [eval] $wrap($div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000))
; [eval] $div($unwrap(l$p$1) * 100000000000, 10000000000, $unwrap(l$p$1) * 100000000000 \ 10000000000)
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
; [eval] $unwrap(l$p$1) * 100000000000 \ 10000000000
; [eval] $unwrap(l$p$1) * 100000000000
; [eval] $unwrap(l$p$1)
(declare-const l$p$1@516@01 $Int)
(assert (=
  l$p$1@516@01
  ($wrap<$Int> ($div<Int> (* ($unwrap<Int> l$p$1@513@01) 100000000000) 10000000000 (div
    (* ($unwrap<Int> l$p$1@513@01) 100000000000)
    10000000000)))))
; [exec]
; label continue_9
; [exec]
; label break_0
; [exec]
; assert l$d == $unwrap(l$e$1)
; [eval] l$d == $unwrap(l$e$1)
; [eval] $unwrap(l$e$1)
(push) ; 55
(assert (not (= l$d@482@01 ($unwrap<Int> l$e$1@515@01))))
(check-sat)
; unsat
(pop) ; 55
; 0.06s
; (get-info :all-statistics)
(assert (= l$d@482@01 ($unwrap<Int> l$e$1@515@01)))
; [exec]
; label return
(push) ; 55
(set-option :timeout 10)
(assert (not (not $out_of_gas@453@01)))
(check-sat)
; unknown
(pop) ; 55
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 55
(set-option :timeout 10)
(assert (not $out_of_gas@453@01))
(check-sat)
; unknown
(pop) ; 55
; 0.00s
; (get-info :all-statistics)
; [then-branch: 275 | $out_of_gas@453@01 | live]
; [else-branch: 275 | !($out_of_gas@453@01) | live]
(set-option :timeout 0)
(push) ; 55
; [then-branch: 275 | $out_of_gas@453@01]
(assert $out_of_gas@453@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 56
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 56
; 0.00s
; (get-info :all-statistics)
; [then-branch: 276 | True | live]
; [else-branch: 276 | False | dead]
(set-option :timeout 0)
(push) ; 56
; [then-branch: 276 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@517@01 $Snap)
(assert (= $t@517@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@454@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@518@01 $Struct)
(assert (=
  self@518@01
  ($struct_set<$Struct> self@438@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@438@01 0))
    l$havoc@454@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 56
; [then-branch: 277 | False | dead]
; [else-branch: 277 | True | live]
(set-option :timeout 0)
(push) ; 56
; [else-branch: 277 | True]
(pop) ; 56
(pop) ; 55
(push) ; 55
; [else-branch: 275 | !($out_of_gas@453@01)]
(assert (not $out_of_gas@453@01))
(pop) ; 55
; [eval] !$out_of_gas
(push) ; 55
(set-option :timeout 10)
(assert (not $out_of_gas@453@01))
(check-sat)
; unknown
(pop) ; 55
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 55
(set-option :timeout 10)
(assert (not (not $out_of_gas@453@01)))
(check-sat)
; unknown
(pop) ; 55
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | !($out_of_gas@453@01) | live]
; [else-branch: 278 | $out_of_gas@453@01 | live]
(set-option :timeout 0)
(push) ; 55
; [then-branch: 278 | !($out_of_gas@453@01)]
(assert (not $out_of_gas@453@01))
; [exec]
; label end
; [eval] !$succ
; [then-branch: 279 | False | dead]
; [else-branch: 279 | True | live]
(push) ; 56
; [else-branch: 279 | True]
(pop) ; 56
(push) ; 56
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 56
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | True | live]
; [else-branch: 280 | False | dead]
(set-option :timeout 0)
(push) ; 56
; [then-branch: 280 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@519@01 $Snap)
(assert (= $t@519@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@454@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@520@01 $Struct)
(assert (=
  self@520@01
  ($struct_set<$Struct> self@438@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@438@01 0))
    l$havoc@454@01))))
; [exec]
; $contracts := l$havoc$1
(pop) ; 56
(pop) ; 55
(set-option :timeout 0)
(push) ; 55
; [else-branch: 278 | $out_of_gas@453@01]
(assert $out_of_gas@453@01)
(pop) ; 55
(pop) ; 54
(pop) ; 53
(pop) ; 52
(pop) ; 51
(pop) ; 50
(pop) ; 49
(pop) ; 48
(push) ; 48
; [else-branch: 252 | $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) < -1701411834604692317316873037158841057280000000000 || $unwrap[Int](l$e$1@507@01) + $unwrap[Int]($wrap[$Int]($div[Int]($div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000, $unwrap[Int](l$p$1@508@01), $div[Int](300000000000000000000, 10000000000, 300000000000000000000 / 10000000000) * 10000000000 / $unwrap[Int](l$p$1@508@01)))) > 1701411834604692317316873037158841057270000000000]
(assert (or
  (<
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    (- 0 1701411834604692317316873037158841057280000000000))
  (>
    (+
      ($unwrap<Int> l$e$1@507@01)
      ($unwrap<Int> ($wrap<$Int> ($div<Int> (*
        ($div<Int> 300000000000000000000 10000000000 (div
          300000000000000000000
          10000000000))
        10000000000) ($unwrap<Int> l$p$1@508@01) (div
        (*
          ($div<Int> 300000000000000000000 10000000000 (div
            300000000000000000000
            10000000000))
          10000000000)
        ($unwrap<Int> l$p$1@508@01))))))
    1701411834604692317316873037158841057270000000000)))
(pop) ; 48
(pop) ; 47
(pop) ; 46
(pop) ; 45
(pop) ; 44
(pop) ; 43
(pop) ; 42
(pop) ; 41
(pop) ; 40
(pop) ; 39
(pop) ; 38
(pop) ; 37
(pop) ; 36
(pop) ; 35
(pop) ; 34
(pop) ; 33
(pop) ; 32
(pop) ; 31
(pop) ; 30
(pop) ; 29
(pop) ; 28
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const $succ@521@01 Bool)
(declare-const $succ@522@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@523@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@524@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@525@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@526@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@527@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@528@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@529@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@530@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@531@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@532@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@533@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@534@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@535@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@536@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@537@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@538@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@539@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@540@01 $Map<Int~_$Struct>)
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 0)): Int) &&
;   ($struct_get($struct_loc(self, 0)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@541@01 $Snap)
(assert (= $t@541@01 ($Snap.combine ($Snap.first $t@541@01) ($Snap.second $t@541@01))))
(assert (= ($Snap.first $t@541@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 0)): Int)
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@527@01 0))))
(assert (= ($Snap.second $t@541@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 0)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@527@01 0))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 1)): Int) &&
;   ($struct_get($struct_loc(self, 1)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@542@01 $Snap)
(assert (= $t@542@01 ($Snap.combine ($Snap.first $t@542@01) ($Snap.second $t@542@01))))
(assert (= ($Snap.first $t@542@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@527@01 1))))
(assert (= ($Snap.second $t@542@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 1)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Int)
; [eval] $struct_loc(self, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@527@01 1))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@543@01 $Snap)
(assert (= $t@543@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q0@544@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) && ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(push) ; 4
; [then-branch: 281 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@527@01, 3)), $q0@544@01)) | live]
; [else-branch: 281 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@527@01, 3)), $q0@544@01) | live]
(push) ; 5
; [then-branch: 281 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@527@01, 3)), $q0@544@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 281 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@527@01, 3)), $q0@544@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@544@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1610@11@1610@345-aux|)))
(assert (forall (($q0@544@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@544@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1610@11@1610@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) }
;     ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $t@545@01 $Snap)
(assert (= $t@545@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) } ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int))
(declare-const $q0@546@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int) <= ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 3)): $Map[Int, Int]), $q0): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
; [eval] ($map_sum(($struct_get($struct_loc(self, 3)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 3)): $Map[Int, Int])
; [eval] $struct_loc(self, 3)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@546@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@546@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 3)) $q0@546@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1611@11@1611@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@547@01 $Snap)
(assert (= $t@547@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q1@548@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(push) ; 4
; [then-branch: 282 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@527@01, 4)), $q1@548@01)) | live]
; [else-branch: 282 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@527@01, 4)), $q1@548@01) | live]
(push) ; 5
; [then-branch: 282 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@527@01, 4)), $q1@548@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 282 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@527@01, 4)), $q1@548@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@548@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1612@11@1612@345-aux|)))
(assert (forall (($q1@548@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@548@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1612@11@1612@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) }
;     ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $t@549@01 $Snap)
(assert (= $t@549@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) } ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int))
(declare-const $q1@550@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int) <= ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Int]), $q1): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
; [eval] ($map_sum(($struct_get($struct_loc(self, 4)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Int])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@550@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@550@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@527@01 4)) $q1@550@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagedecimal.vy.vpr@1613@11@1613@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@551@01 $Snap)
(assert (= $t@551@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@527@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@552@01 $Snap)
(assert (= $t@552@01 ($Snap.combine ($Snap.first $t@552@01) ($Snap.second $t@552@01))))
(assert (= ($Snap.first $t@552@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@552@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@553@01 $Snap)
(assert (= $t@553@01 ($Snap.combine ($Snap.first $t@553@01) ($Snap.second $t@553@01))))
(assert (= ($Snap.first $t@553@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@524@01 0))))
(assert (= ($Snap.second $t@553@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@524@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@554@01 $Snap)
(assert (= $t@554@01 ($Snap.combine ($Snap.first $t@554@01) ($Snap.second $t@554@01))))
(assert (= ($Snap.first $t@554@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@524@01 1))))
(assert (= ($Snap.second $t@554@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@524@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@555@01 $Snap)
(assert (= $t@555@01 ($Snap.combine ($Snap.first $t@555@01) ($Snap.second $t@555@01))))
(assert (= ($Snap.first $t@555@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@524@01 2))))
(assert (= ($Snap.second $t@555@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@524@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@556@01 $Snap)
(assert (= $t@556@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@524@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@557@01 $Snap)
(assert (= $t@557@01 ($Snap.combine ($Snap.first $t@557@01) ($Snap.second $t@557@01))))
(assert (= ($Snap.first $t@557@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@524@01 4))))
(assert (= ($Snap.second $t@557@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@524@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@558@01 $Snap)
(assert (= $t@558@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@524@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@559@01 $Snap)
(assert (= $t@559@01 ($Snap.combine ($Snap.first $t@559@01) ($Snap.second $t@559@01))))
(assert (= ($Snap.first $t@559@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@523@01 0))))
(assert (= ($Snap.second $t@559@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@523@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 ($Snap.combine ($Snap.first $t@560@01) ($Snap.second $t@560@01))))
(assert (= ($Snap.first $t@560@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@523@01 1))))
(assert (= ($Snap.second $t@560@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@523@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@561@01 $Snap)
(assert (= $t@561@01 ($Snap.combine ($Snap.first $t@561@01) ($Snap.second $t@561@01))))
(assert (= ($Snap.first $t@561@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@523@01 2))))
(assert (= ($Snap.second $t@561@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@523@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@562@01 $Snap)
(assert (= $t@562@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@523@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@563@01 $Snap)
(assert (= $t@563@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@523@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]),
;   false)
; [eval] s$struct$self$init(0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@564@01 $Struct)
(assert (=
  self@564@01
  (s$struct$self$init<$Struct> 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@565@01 $Snap)
(assert (= $t@565@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@537@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@566@01 $Struct)
(assert (=
  self@566@01
  ($struct_set<$Struct> self@564@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@564@01 0))
    l$havoc@537@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@567@01 $Snap)
(assert (= $t@567@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@523@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label return
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@538@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@538@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | $out_of_gas@538@01 | live]
; [else-branch: 283 | !($out_of_gas@538@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 283 | $out_of_gas@538@01]
(assert $out_of_gas@538@01)
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | True | live]
; [else-branch: 284 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 284 | True]
; [exec]
; $old_self := self
; [eval] !$succ
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | True | live]
; [else-branch: 285 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 285 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@568@01 $Snap)
(assert (= $t@568@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@539@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@569@01 $Struct)
(assert (=
  self@569@01
  ($struct_set<$Struct> self@527@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@527@01 0))
    l$havoc$1@539@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | True | live]
; [else-branch: 286 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 286 | True]
; [exec]
; $old_self := self
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 287 | False | dead]
; [else-branch: 287 | True | live]
(push) ; 6
; [else-branch: 287 | True]
(pop) ; 6
(pop) ; 5
; [then-branch: 288 | False | dead]
; [else-branch: 288 | True | live]
(push) ; 5
; [else-branch: 288 | True]
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 289 | False | dead]
; [else-branch: 289 | True | live]
(push) ; 4
; [else-branch: 289 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 283 | !($out_of_gas@538@01)]
(assert (not $out_of_gas@538@01))
(pop) ; 3
; [eval] !$out_of_gas
(push) ; 3
(set-option :timeout 10)
(assert (not $out_of_gas@538@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not $out_of_gas@538@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 290 | !($out_of_gas@538@01) | live]
; [else-branch: 290 | $out_of_gas@538@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 290 | !($out_of_gas@538@01)]
(assert (not $out_of_gas@538@01))
; [exec]
; label end
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 291 | True | live]
; [else-branch: 291 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 291 | True]
; [exec]
; $old_self := self
; [eval] !$succ
; [then-branch: 292 | False | dead]
; [else-branch: 292 | True | live]
(push) ; 5
; [else-branch: 292 | True]
(pop) ; 5
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | True | live]
; [else-branch: 293 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 293 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@570@01 $Snap)
(assert (= $t@570@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@539@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 0)): Int)
; [eval] $struct_loc(self, 0)
(declare-const self@571@01 $Struct)
(assert (=
  self@571@01
  ($struct_set<$Struct> self@566@01 0 (+
    ($struct_get<Int> ($struct_loc<Int> self@566@01 0))
    l$havoc$1@539@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | True | live]
; [else-branch: 294 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 294 | True]
; [exec]
; $old_self := self
(pop) ; 6
; [eval] !$first_public_state
; [then-branch: 295 | False | dead]
; [else-branch: 295 | True | live]
(push) ; 6
; [else-branch: 295 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !$first_public_state
; [then-branch: 296 | False | dead]
; [else-branch: 296 | True | live]
(push) ; 4
; [else-branch: 296 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 290 | $out_of_gas@538@01]
(assert $out_of_gas@538@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
