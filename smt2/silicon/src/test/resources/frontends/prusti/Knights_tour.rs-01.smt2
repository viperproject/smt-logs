(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-08 21:07:12
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $FVF<val_ref> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<val_ref>To$Snap ($FVF<val_ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<val_ref> ($Snap) $FVF<val_ref>)
(assert (forall ((x $FVF<val_ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<val_ref>($SortWrappers.$FVF<val_ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<val_ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<val_ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<val_ref>To$Snap($SortWrappers.$SnapTo$FVF<val_ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<val_ref> x))
    :qid |$Snap.$FVF<val_ref>To$SnapTo$FVF<val_ref>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_skolem_diff (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
; /field_value_functions_declarations.smt2 [val_ref: Ref]
(declare-fun $FVF.domain_val_ref ($FVF<val_ref>) Set<$Ref>)
(declare-fun $FVF.lookup_val_ref ($FVF<val_ref> $Ref) $Ref)
(declare-fun $FVF.after_val_ref ($FVF<val_ref> $FVF<val_ref>) Bool)
(declare-fun $FVF.loc_val_ref ($Ref $Ref) Bool)
(declare-fun $FVF.perm_val_ref ($FPM $Ref) $Perm)
(declare-const $fvfTOP_val_ref $FVF<val_ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun read$ ($Snap) $Perm)
(declare-fun read$%limited ($Snap) $Perm)
(declare-const read$%stateless Bool)
(declare-fun read$%precondition ($Snap) Bool)
(declare-fun m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap) Int)
(declare-fun m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%limited ($Snap) Int)
(declare-const m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%stateless Bool)
(declare-fun m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap) Bool)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap $Ref) Int)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited ($Snap $Ref) Int)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless ($Ref) Bool)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap $Ref) Int)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited ($Snap $Ref) Int)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless ($Ref) Bool)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ ($Snap $Ref Int Int) Int)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap $Ref Int Int) Int)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%stateless ($Ref Int Int) Bool)
(declare-fun m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap $Ref Int Int) Bool)
(declare-fun builtin$unreach_bool__$TY$__$bool$ ($Snap) Bool)
(declare-fun builtin$unreach_bool__$TY$__$bool$%limited ($Snap) Bool)
(declare-const builtin$unreach_bool__$TY$__$bool$%stateless Bool)
(declare-fun builtin$unreach_bool__$TY$__$bool$%precondition ($Snap) Bool)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ ($Snap $Ref) Int)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited ($Snap $Ref) Int)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%stateless ($Ref) Bool)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition ($Snap $Ref) Bool)
(declare-fun builtin$undef_bool__$TY$__$bool$ ($Snap) Bool)
(declare-fun builtin$undef_bool__$TY$__$bool$%limited ($Snap) Bool)
(declare-const builtin$undef_bool__$TY$__$bool$%stateless Bool)
(declare-fun builtin$undef_bool__$TY$__$bool$%precondition ($Snap) Bool)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ ($Snap $Ref) Int)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited ($Snap $Ref) Int)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%stateless ($Ref) Bool)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%limited ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%stateless ($Ref) Bool)
(declare-fun m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap $Ref) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun DeadBorrowToken$%trigger ($Snap Int) Bool)
(declare-fun bool%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_11$3$16836186685558598718%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_12$3$16836186685558598718%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_13$4$1589009702788246713%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_15$3$856908841841235720%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_16$3$16836186685558598718%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_17$3$16123126176350911560%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_18$3$936109105845141873%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_19$3$17660061404446368440%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_20$3$1747452362277107208%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_21$3$1886885960320301046%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_22$3$16836186685558598718%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_23$4$1860419104383651931%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_24$3$9005329699453506105%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_25$3$8233369117391950042%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_26$3$6831129558716023658%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_27$3$8084697069950319799%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_29$3$11933678243532117102%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_30$3$4920139583706826500%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_31$3$13448283034829184517%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_32$3$15809515461060994565%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_33$3$11933678243532117102%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_34$3$4920139583706826500%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_35$3$13448283034829184517%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_36$3$15809515461060994565%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_37$6$9382093347497428436%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_38$5$16262156183622235759%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_39$6$2570231456930421564%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_40$5$8151149684055769446%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_41$3$11933678243532117102%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_44$3$11957180999391598925%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_45$3$18068549781639004461%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_46$4$2316023683921474614%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_47$4$7438738628820119904%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_48$3$5169942411020240745%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_49$3$13177526864632184778%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_51$3$11921783312157906974%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_52$3$15203628194863643940%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_53$2$4061298814955297750%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_54$3$3845551369651406509%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_55$4$12478973570546726808%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_56$2$4061298814955297750%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_57$3$3155449875120012984%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_58$3$7682442910302967967%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_59$3$2360874258797543443%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_60$3$18314004443372132536%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_61$2$4061298814955297750%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_62$3$8554745105452251562%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_63$4$11738836714435574072%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_64$3$6302789819304097144%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_65$3$11937539310563724083%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_66$3$13333293174589074011%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_67$3$2467019396475800186%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_68$2$4061298814955297750%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_69$3$15436921638386154731%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_70$4$13742673918391663087%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_71$3$13802932288664565916%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_72$3$11933678243532117102%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_73$3$4920139583706826500%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_74$3$13448283034829184517%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_75$3$15809515461060994565%trigger ($Snap $Ref) Bool)
(declare-fun i32%trigger ($Snap $Ref) Bool)
(declare-fun isize%trigger ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$alloc$opensqu$0$closesqu$$$Global$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$raw_vec$opensqu$0$closesqu$$$RawVec$opensqu$0$closesqu$$_beg_$i32$_sep_$m_alloc$$alloc$opensqu$0$closesqu$$$Global$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$raw_vec$opensqu$0$closesqu$$$RawVec$opensqu$0$closesqu$$_beg_$m_alloc$$vec$opensqu$0$closesqu$$$Vec$opensqu$0$closesqu$$_beg_$i32$_end_$_sep_$m_alloc$$alloc$opensqu$0$closesqu$$$Global$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$raw_vec$opensqu$0$closesqu$$$RawVec$opensqu$0$closesqu$$_beg_$tuple2$i32$i32$_sep_$m_alloc$$alloc$opensqu$0$closesqu$$$Global$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$raw_vec$opensqu$0$closesqu$$$RawVec$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_sep_$m_alloc$$alloc$opensqu$0$closesqu$$$Global$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$vec$opensqu$0$closesqu$$$Vec$opensqu$0$closesqu$$_beg_$i32$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$vec$opensqu$0$closesqu$$$Vec$opensqu$0$closesqu$$_beg_$m_alloc$$vec$opensqu$0$closesqu$$$Vec$opensqu$0$closesqu$$_beg_$i32$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$vec$opensqu$0$closesqu$$$Vec$opensqu$0$closesqu$$_beg_$tuple2$i32$i32$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$vec$opensqu$0$closesqu$$$Vec$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_Some%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_Some%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$ptr$opensqu$0$closesqu$$$Unique$opensqu$0$closesqu$$_beg_$i32$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$ptr$opensqu$0$closesqu$$$Unique$opensqu$0$closesqu$$_beg_$m_alloc$$vec$opensqu$0$closesqu$$$Vec$opensqu$0$closesqu$$_beg_$i32$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$ptr$opensqu$0$closesqu$$$Unique$opensqu$0$closesqu$$_beg_$tuple2$i32$i32$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$ptr$opensqu$0$closesqu$$$Unique$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun never%trigger ($Snap $Ref) Bool)
(declare-fun ref$bool%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_11$3$16836186685558598718%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_12$3$16836186685558598718%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_13$4$1589009702788246713%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_15$3$856908841841235720%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_16$3$16836186685558598718%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_17$3$16123126176350911560%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_18$3$936109105845141873%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_19$3$17660061404446368440%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_20$3$1747452362277107208%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_21$3$1886885960320301046%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_22$3$16836186685558598718%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_23$4$1860419104383651931%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_24$3$9005329699453506105%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_25$3$8233369117391950042%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_26$3$6831129558716023658%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_27$3$8084697069950319799%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_29$3$11933678243532117102%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_30$3$4920139583706826500%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_31$3$13448283034829184517%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_32$3$15809515461060994565%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_33$3$11933678243532117102%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_34$3$4920139583706826500%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_35$3$13448283034829184517%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_36$3$15809515461060994565%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_37$6$9382093347497428436%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_38$5$16262156183622235759%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_39$6$2570231456930421564%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_40$5$8151149684055769446%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_41$3$11933678243532117102%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_44$3$11957180999391598925%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_45$3$18068549781639004461%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_46$4$2316023683921474614%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_47$4$7438738628820119904%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_48$3$5169942411020240745%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_49$3$13177526864632184778%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_51$3$11921783312157906974%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_52$3$15203628194863643940%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_54$3$3845551369651406509%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_55$4$12478973570546726808%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_57$3$3155449875120012984%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_58$3$7682442910302967967%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_59$3$2360874258797543443%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_60$3$18314004443372132536%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_62$3$8554745105452251562%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_63$4$11738836714435574072%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_64$3$6302789819304097144%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_65$3$11937539310563724083%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_66$3$13333293174589074011%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_67$3$2467019396475800186%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_69$3$15436921638386154731%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_70$4$13742673918391663087%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_71$3$13802932288664565916%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_72$3$11933678243532117102%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_73$3$4920139583706826500%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_74$3$13448283034829184517%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_75$3$15809515461060994565%trigger ($Snap $Ref) Bool)
(declare-fun ref$i32%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$ref$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$ref$m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$ref$m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$ref$m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$ref$m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$tuple2$i32$i32%trigger ($Snap $Ref) Bool)
(declare-fun ref$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$usize%trigger ($Snap $Ref) Bool)
(declare-fun tuple0$%trigger ($Snap $Ref) Bool)
(declare-fun tuple2$i32$bool%trigger ($Snap $Ref) Bool)
(declare-fun tuple2$i32$i32%trigger ($Snap $Ref) Bool)
(declare-fun tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun tuple2$usize$bool%trigger ($Snap $Ref) Bool)
(declare-fun u8%trigger ($Snap $Ref) Bool)
(declare-fun usize%trigger ($Snap $Ref) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Bool)) (!
  (not (Set_in o (as Set_empty  Set<Bool>)))
  :pattern ((Set_in o (as Set_empty  Set<Bool>)))
  )))
(assert (forall ((s Set<Bool>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Bool))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Bool)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Bool) (o Bool)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Bool)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (o Bool)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (Set_subset a b)
    (forall ((o Bool)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
; /field_value_functions_axioms.smt2 [val_ref: Ref]
(assert (forall ((vs $FVF<val_ref>) (ws $FVF<val_ref>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_val_ref vs) ($FVF.domain_val_ref ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_val_ref vs))
            (= ($FVF.lookup_val_ref vs x) ($FVF.lookup_val_ref ws x)))
          :pattern (($FVF.lookup_val_ref vs x) ($FVF.lookup_val_ref ws x))
          :qid |qp.$FVF<val_ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<val_ref>To$Snap vs)
              ($SortWrappers.$FVF<val_ref>To$Snap ws)
              )
    :qid |qp.$FVF<val_ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_val_ref pm r))
    :pattern (($FVF.perm_val_ref pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_val_ref f r) true)
    :pattern (($FVF.loc_val_ref f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun joined_unfolding@24@00 ($Snap $Ref) Int)
(declare-fun joined_unfolding@26@00 ($Snap $Ref) Int)
(declare-fun joined_unfolding@28@00 ($Snap $Ref) Bool)
(assert (forall ((s@$ $Snap)) (!
  (= (read$%limited s@$) (read$ s@$))
  :pattern ((read$ s@$))
  :qid |quant-u-190|)))
(assert (forall ((s@$ $Snap)) (!
  (as read$%stateless  Bool)
  :pattern ((read$%limited s@$))
  :qid |quant-u-191|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) (=>
    (read$%precondition s@$)
    (and (< $Perm.No result@0@00) (< result@0@00 $Perm.Write))))
  :pattern ((read$%limited s@$))
  :qid |quant-u-210|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) true)
  :pattern ((read$%limited s@$))
  :qid |quant-u-211|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) true)
  :pattern ((read$%limited s@$))
  :qid |quant-u-212|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%limited s@$)
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ s@$))
  :pattern ((m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ s@$))
  :qid |quant-u-192|)))
(assert (forall ((s@$ $Snap)) (!
  (as m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%stateless  Bool)
  :pattern ((m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%limited s@$))
  :qid |quant-u-193|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@1@00 (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%limited s@$))) (=>
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition s@$)
    (= result@1@00 8)))
  :pattern ((m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%limited s@$))
  :qid |quant-u-213|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@1@00 (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%limited s@$))) true)
  :pattern ((m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%limited s@$))
  :qid |quant-u-214|)))
(assert (forall ((s@$ $Snap) (_pure_1@2@00 $Ref)) (!
  (=
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@2@00)
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@2@00))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@2@00))
  :qid |quant-u-194|)))
(assert (forall ((s@$ $Snap) (_pure_1@2@00 $Ref)) (!
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless _pure_1@2@00)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@2@00))
  :qid |quant-u-195|)))
(assert (forall ((s@$ $Snap) (_pure_1@2@00 $Ref)) (!
  (let ((result@3@00 (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@2@00))) (=>
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ _pure_1@2@00)
    (and (>= result@3@00 0) (<= 0 result@3@00))))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@2@00))
  :qid |quant-u-215|)))
(assert (forall ((s@$ $Snap) (_pure_1@2@00 $Ref)) (!
  (let ((result@3@00 (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@2@00))) true)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@2@00))
  :qid |quant-u-216|)))
(assert (forall ((s@$ $Snap) (_pure_1@2@00 $Ref)) (!
  (let ((result@3@00 (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@2@00))) true)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@2@00))
  :qid |quant-u-217|)))
(assert (forall ((s@$ $Snap) (_pure_1@4@00 $Ref)) (!
  (=
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@4@00)
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@4@00))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@4@00))
  :qid |quant-u-196|)))
(assert (forall ((s@$ $Snap) (_pure_1@4@00 $Ref)) (!
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless _pure_1@4@00)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@4@00))
  :qid |quant-u-197|)))
(assert (forall ((s@$ $Snap) (_pure_1@4@00 $Ref)) (!
  (let ((result@5@00 (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@4@00))) (=>
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ _pure_1@4@00)
    (and (>= result@5@00 0) (<= 0 result@5@00))))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@4@00))
  :qid |quant-u-218|)))
(assert (forall ((s@$ $Snap) (_pure_1@4@00 $Ref)) (!
  (let ((result@5@00 (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@4@00))) true)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@4@00))
  :qid |quant-u-219|)))
(assert (forall ((s@$ $Snap) (_pure_1@4@00 $Ref)) (!
  (let ((result@5@00 (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@4@00))) true)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@4@00))
  :qid |quant-u-220|)))
(assert (forall ((s@$ $Snap) (_pure_1@6@00 $Ref) (_pure_2@7@00 Int) (_pure_3@8@00 Int)) (!
  (=
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited s@$ _pure_1@6@00 _pure_2@7@00 _pure_3@8@00)
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ s@$ _pure_1@6@00 _pure_2@7@00 _pure_3@8@00))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ s@$ _pure_1@6@00 _pure_2@7@00 _pure_3@8@00))
  :qid |quant-u-198|)))
(assert (forall ((s@$ $Snap) (_pure_1@6@00 $Ref) (_pure_2@7@00 Int) (_pure_3@8@00 Int)) (!
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%stateless _pure_1@6@00 _pure_2@7@00 _pure_3@8@00)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited s@$ _pure_1@6@00 _pure_2@7@00 _pure_3@8@00))
  :qid |quant-u-199|)))
(assert (forall ((s@$ $Snap) (_pure_1@6@00 $Ref) (_pure_2@7@00 Int) (_pure_3@8@00 Int)) (!
  (let ((result@9@00 (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited s@$ _pure_1@6@00 _pure_2@7@00 _pure_3@8@00))) true)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited s@$ _pure_1@6@00 _pure_2@7@00 _pure_3@8@00))
  :qid |quant-u-221|)))
(assert (forall ((s@$ $Snap) (_pure_1@6@00 $Ref) (_pure_2@7@00 Int) (_pure_3@8@00 Int)) (!
  (let ((result@9@00 (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited s@$ _pure_1@6@00 _pure_2@7@00 _pure_3@8@00))) true)
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited s@$ _pure_1@6@00 _pure_2@7@00 _pure_3@8@00))
  :qid |quant-u-222|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (builtin$unreach_bool__$TY$__$bool$%limited s@$)
    (builtin$unreach_bool__$TY$__$bool$ s@$))
  :pattern ((builtin$unreach_bool__$TY$__$bool$ s@$))
  :qid |quant-u-200|)))
(assert (forall ((s@$ $Snap)) (!
  (as builtin$unreach_bool__$TY$__$bool$%stateless  Bool)
  :pattern ((builtin$unreach_bool__$TY$__$bool$%limited s@$))
  :qid |quant-u-201|)))
(assert (forall ((s@$ $Snap) (self@11@00 $Ref)) (!
  (=
    (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@11@00)
    (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@11@00))
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@11@00))
  :qid |quant-u-202|)))
(assert (forall ((s@$ $Snap) (self@11@00 $Ref)) (!
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%stateless self@11@00)
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@11@00))
  :qid |quant-u-203|)))
(assert (forall ((s@$ $Snap) (self@11@00 $Ref)) (!
  (let ((result@12@00 (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@11@00))) (=>
    (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition s@$ self@11@00)
    (and (<= 0 result@12@00) (<= result@12@00 1))))
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@11@00))
  :qid |quant-u-223|)))
(assert (forall ((s@$ $Snap) (self@11@00 $Ref)) (!
  (let ((result@12@00 (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@11@00))) true)
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@11@00))
  :qid |quant-u-224|)))
(assert (forall ((s@$ $Snap) (self@11@00 $Ref)) (!
  (=>
    (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition s@$ self@11@00)
    (=
      (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@11@00)
      ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@11@00))
  :qid |quant-u-225|)))
(assert (forall ((s@$ $Snap) (self@11@00 $Ref)) (!
  true
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@11@00))
  :qid |quant-u-226|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (builtin$undef_bool__$TY$__$bool$%limited s@$)
    (builtin$undef_bool__$TY$__$bool$ s@$))
  :pattern ((builtin$undef_bool__$TY$__$bool$ s@$))
  :qid |quant-u-204|)))
(assert (forall ((s@$ $Snap)) (!
  (as builtin$undef_bool__$TY$__$bool$%stateless  Bool)
  :pattern ((builtin$undef_bool__$TY$__$bool$%limited s@$))
  :qid |quant-u-205|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (=
    (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@14@00)
    (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@14@00))
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@14@00))
  :qid |quant-u-206|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%stateless self@14@00)
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@14@00))
  :qid |quant-u-207|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (let ((result@15@00 (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@14@00))) (=>
    (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition s@$ self@14@00)
    (and (<= 0 result@15@00) (<= result@15@00 1))))
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@14@00))
  :qid |quant-u-227|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (let ((result@15@00 (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@14@00))) true)
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%limited s@$ self@14@00))
  :qid |quant-u-228|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (=>
    (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition s@$ self@14@00)
    (=
      (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@14@00)
      ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@14@00))
  :qid |quant-u-229|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  true
  :pattern ((m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ s@$ self@14@00))
  :qid |quant-u-230|)))
(assert (forall ((s@$ $Snap) (_pure_1@16@00 $Ref)) (!
  (=
    (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%limited s@$ _pure_1@16@00)
    (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ s@$ _pure_1@16@00))
  :pattern ((m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ s@$ _pure_1@16@00))
  :qid |quant-u-208|)))
(assert (forall ((s@$ $Snap) (_pure_1@16@00 $Ref)) (!
  (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%stateless _pure_1@16@00)
  :pattern ((m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%limited s@$ _pure_1@16@00))
  :qid |quant-u-209|)))
(assert (forall ((s@$ $Snap) (_pure_1@16@00 $Ref)) (!
  (let ((result@17@00 (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%limited s@$ _pure_1@16@00))) true)
  :pattern ((m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%limited s@$ _pure_1@16@00))
  :qid |quant-u-231|)))
(assert (forall ((s@$ $Snap) (_pure_1@16@00 $Ref)) (!
  (let ((result@17@00 (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%limited s@$ _pure_1@16@00))) true)
  :pattern ((m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%limited s@$ _pure_1@16@00))
  :qid |quant-u-232|)))
(assert (forall ((s@$ $Snap) (_pure_1@16@00 $Ref)) (!
  (=>
    (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition s@$ _pure_1@16@00)
    (=
      (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ s@$ _pure_1@16@00)
      (=>
        (not (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))) 0))
        (and
          (=>
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))))
            false)
          (=>
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$)))))))))))))
            (and
              (=>
                (not
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit))))
                false)
              (=>
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (and
                  (=>
                    (not
                      (<=
                        0
                        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$)))))))))))))))
                    false)
                  (=>
                    (<=
                      0
                      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))))
                    (<
                      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$)))))))))))))
                      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                        $Snap.unit
                        $Snap.unit))))))))))))
  :pattern ((m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ s@$ _pure_1@16@00))
  :pattern ((m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%stateless _pure_1@16@00) (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap.first s@$) _pure_1@16@00))
  :qid |quant-u-233|)))
(assert (forall ((s@$ $Snap) (_pure_1@16@00 $Ref)) (!
  (=>
    (and
      (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition s@$ _pure_1@16@00)
      (and
        (not (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))) 0))
        (and
          (=>
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))))
            false)
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))))))
    (and
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
        $Snap.unit
        $Snap.unit))
      (=>
        (=>
          (not
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit))))
          false)
        (and
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
            $Snap.unit
            $Snap.unit))
          (=>
            (and
              (<
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (and
                (=>
                  (not
                    (<=
                      0
                      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$)))))))))))))))
                  false)
                (<=
                  0
                  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))))))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  :pattern ((m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ s@$ _pure_1@16@00))
  :qid |quant-u-234|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$9$closesqu$$$new$opensqu$0$closesqu$ ----------
(declare-const _0@0@01 $Ref)
(declare-const _0@1@01 $Ref)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@2@01 Bool)
; [exec]
; var __t1: Bool
(declare-const __t1@3@01 Bool)
; [exec]
; var __t2: Bool
(declare-const __t2@4@01 Bool)
; [exec]
; var _2: Ref
(declare-const _2@5@01 $Ref)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; __t1 := false
; [exec]
; __t2 := false
; [exec]
; inhale true
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@7@01 $Snap)
(assert (= $t@7@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; label bb0
; [exec]
; __t0 := true
; [exec]
; label l0
; [exec]
; _2 := builtin$havoc_ref()
(declare-const ret@10@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_2), write)
(declare-const $t@12@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l1
; [exec]
; label bb2
; [exec]
; __t1 := true
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@15@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(declare-const $t@16@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(assert (= $t@16@01 ($Snap.combine ($Snap.first $t@16@01) ($Snap.second $t@16@01))))
(assert (not (= ret@15@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@10@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@16@01)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_%trigger $t@16@01 ret@15@01))
; [exec]
; _0.f$field := _2
; [exec]
; label l2
; [exec]
; label bb3
; [exec]
; __t2 := true
; [exec]
; label return
; [exec]
; fold acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(assert (m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($SortWrappers.$RefTo$Snap ret@10@01)
  $t@12@01) ret@15@01))
; [exec]
; assert true
; [exec]
; exhale acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 2
(pop) ; 1
; ---------- m_Knights_tour$$main$opensqu$0$closesqu$ ----------
(declare-const _0@17@01 $Ref)
(declare-const _0@18@01 $Ref)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@19@01 Bool)
; [exec]
; var __t1: Bool
(declare-const __t1@20@01 Bool)
; [exec]
; var __t2: Bool
(declare-const __t2@21@01 Bool)
; [exec]
; var __t3: Bool
(declare-const __t3@22@01 Bool)
; [exec]
; var __t4: Bool
(declare-const __t4@23@01 Bool)
; [exec]
; var __t5: Bool
(declare-const __t5@24@01 Bool)
; [exec]
; var __t6: Bool
(declare-const __t6@25@01 Bool)
; [exec]
; var __t7: Bool
(declare-const __t7@26@01 Bool)
; [exec]
; var __t8: Bool
(declare-const __t8@27@01 Bool)
; [exec]
; var __t9: Bool
(declare-const __t9@28@01 Bool)
; [exec]
; var __t10: Bool
(declare-const __t10@29@01 Bool)
; [exec]
; var __t11: Bool
(declare-const __t11@30@01 Bool)
; [exec]
; var __t12: Bool
(declare-const __t12@31@01 Bool)
; [exec]
; var __t13: Bool
(declare-const __t13@32@01 Bool)
; [exec]
; var _aux_havoc_i32: Ref
(declare-const _aux_havoc_i32@33@01 $Ref)
; [exec]
; var __t14: Int
(declare-const __t14@34@01 Int)
; [exec]
; var _1: Int
(declare-const _1@35@01 Int)
; [exec]
; var _2: Int
(declare-const _2@36@01 Int)
; [exec]
; var _3: Ref
(declare-const _3@37@01 $Ref)
; [exec]
; var _4: Ref
(declare-const _4@38@01 $Ref)
; [exec]
; var _5: Ref
(declare-const _5@39@01 $Ref)
; [exec]
; var _6: Ref
(declare-const _6@40@01 $Ref)
; [exec]
; var _7: Ref
(declare-const _7@41@01 $Ref)
; [exec]
; var _8: Ref
(declare-const _8@42@01 $Ref)
; [exec]
; var _9: Ref
(declare-const _9@43@01 $Ref)
; [exec]
; var _10: Ref
(declare-const _10@44@01 $Ref)
; [exec]
; var _11: Int
(declare-const _11@45@01 Int)
; [exec]
; var _12: Ref
(declare-const _12@46@01 $Ref)
; [exec]
; var _13: Ref
(declare-const _13@47@01 $Ref)
; [exec]
; var _14: Int
(declare-const _14@48@01 Int)
; [exec]
; var _15: Ref
(declare-const _15@49@01 $Ref)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; __t1 := false
; [exec]
; __t2 := false
; [exec]
; __t3 := false
; [exec]
; __t4 := false
; [exec]
; __t5 := false
; [exec]
; __t6 := false
; [exec]
; __t7 := false
; [exec]
; __t8 := false
; [exec]
; __t9 := false
; [exec]
; __t10 := false
; [exec]
; __t11 := false
; [exec]
; __t12 := false
; [exec]
; __t13 := false
; [exec]
; inhale true
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; label bb0
; [exec]
; __t0 := true
; [exec]
; _3 := builtin$havoc_ref()
(declare-const ret@54@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple2$i32$i32(_3), write)
(declare-const $t@55@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _aux_havoc_i32 := builtin$havoc_ref()
(declare-const ret@56@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(tuple2$i32$i32(_3), write)
(assert (= $t@55@01 ($Snap.combine ($Snap.first $t@55@01) ($Snap.second $t@55@01))))
(assert (not (= ret@54@01 $Ref.null)))
(assert (=
  ($Snap.second $t@55@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@55@01))
    ($Snap.second ($Snap.second $t@55@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@55@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@55@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@55@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@55@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tuple2$i32$i32%trigger $t@55@01 ret@54@01))
; [exec]
; _3.tuple_0 := _aux_havoc_i32
; [exec]
; inhale acc(_3.tuple_0.val_int, write)
(declare-const $t@57@01 Int)
(assert (not (= ret@56@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _3.tuple_0.val_int := 3
; [exec]
; _aux_havoc_i32 := builtin$havoc_ref()
(declare-const ret@58@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _3.tuple_1 := _aux_havoc_i32
; [exec]
; inhale acc(_3.tuple_1.val_int, write)
(declare-const $t@59@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@58@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@58@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _3.tuple_1.val_int := 1
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@58@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; _1 := builtin$havoc_int()
(declare-const ret@60@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _1 := _3.tuple_0.val_int
; [exec]
; label l0
; [exec]
; _2 := builtin$havoc_int()
(declare-const ret@62@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _2 := _3.tuple_1.val_int
; [exec]
; label l1
; [exec]
; label l2
; [exec]
; _4 := builtin$havoc_ref()
(declare-const ret@64@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_4), write)
(declare-const $t@66@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l3
; [exec]
; label bb2
; [exec]
; __t1 := true
; [exec]
; _6 := builtin$havoc_ref()
(declare-const ret@69@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_6.val_int, write)
(declare-const $t@70@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@58@01 ret@69@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@69@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@69@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _6.val_int := _1
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@58@01 ret@69@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@69@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l4
; [exec]
; _7 := builtin$havoc_ref()
(declare-const ret@71@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_7.val_int, write)
(declare-const $t@72@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@69@01 ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@58@01 ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@71@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _7.val_int := _2
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@69@01 ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@58@01 ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l5
; [exec]
; label l6
; [exec]
; fold acc(i32(_6), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap 3) ret@69@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@55@01))))
  ret@69@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@55@01)) ret@69@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_7), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap 1) ret@71@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@69@01 ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@55@01))))
  ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@55@01)) ret@71@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert true
; [exec]
; exhale acc(i32(_6), write) && acc(i32(_7), write)
; [exec]
; _5 := builtin$havoc_ref()
(declare-const ret@73@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_5), write)
(declare-const $t@75@01 $Snap)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@64@01 ret@73@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l7
; [exec]
; label bb3
; [exec]
; __t2 := true
; [exec]
; _9 := builtin$havoc_ref()
(declare-const ret@78@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_9.val_int, write)
(declare-const $t@79@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@58@01 ret@78@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@78@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@78@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _9.val_int := _1
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@58@01 ret@78@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@78@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l8
; [exec]
; _10 := builtin$havoc_ref()
(declare-const ret@80@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_10.val_int, write)
(declare-const $t@81@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@78@01 ret@80@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@58@01 ret@80@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@80@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@80@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _10.val_int := _2
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@78@01 ret@80@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@58@01 ret@80@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@56@01 ret@80@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l9
; [exec]
; label l10
; [exec]
; assert 0 <= _9.val_int &&
;   (_9.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;   (0 <= _10.val_int &&
;   _10.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= _9.val_int
; [eval] _9.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 3
(assert (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
  $Snap.unit
  $Snap.unit)))
(pop) ; 3
; Joined path conditions
(assert (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
  $Snap.unit
  $Snap.unit)))
(push) ; 3
(assert (not (<
  3
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  3
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= _10.val_int
; [eval] _10.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (<
  1
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  1
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [exec]
; fold acc(i32(_10), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap 1) ret@80@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@55@01))))
  ret@80@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@55@01)) ret@80@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_9), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap 3) ret@78@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@80@01 ret@78@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@55@01))))
  ret@78@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@55@01)) ret@78@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert true
; [exec]
; exhale acc(i32(_9), write) && acc(i32(_10), write)
; [exec]
; _8 := builtin$havoc_ref()
(declare-const ret@82@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_8), write)
(declare-const $t@84@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l11
; [exec]
; label bb4
; [exec]
; __t3 := true
; [exec]
; _11 := builtin$havoc_int()
(declare-const ret@87@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _11 := m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_8)
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_8)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(assert (read$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@84@01 ret@82@01))
(pop) ; 3
; Joined path conditions
(assert (and
  (read$%precondition $Snap.unit)
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@84@01 ret@82@01)))
(declare-const _11@89@01 Int)
(assert (=
  _11@89@01
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ $t@84@01 ret@82@01)))
; [exec]
; _12 := builtin$havoc_ref()
(declare-const ret@90@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_12.val_ref, write)
(declare-const $t@91@01 $Ref)
(assert (not (= ret@90@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _12.val_ref := _8
; [exec]
; exhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_8), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_12.val_ref), read$())
; [eval] read$()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $t@92@01 $Snap)
(declare-const $t@93@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@93@01 $t@84@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@93@01 $t@92@01))))
(assert (<=
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    (read$ $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l12
; [exec]
; _14 := builtin$havoc_int()
(declare-const ret@94@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@95@01 $Snap)
(assert (= $t@95@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _14 := m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_12.val_ref)
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_12.val_ref)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@93@01 ret@82@01))
(pop) ; 3
; Joined path conditions
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@93@01 ret@82@01))
(declare-const _14@96@01 Int)
(assert (=
  _14@96@01
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ $t@93@01 ret@82@01)))
; [exec]
; __t14 := _14
; [eval] __t14 == 0
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _14@96@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _14@96@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | _14@96@01 == 0 | live]
; [else-branch: 0 | _14@96@01 != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | _14@96@01 == 0]
(assert (= _14@96@01 0))
; [exec]
; label l14
; [exec]
; label bb7
; [exec]
; __t9 := true
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | True | live]
; [else-branch: 1 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1 | True]
; [exec]
; exhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_12.val_ref), read$())
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_8), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $t@97@01 $Snap)
(declare-const $t@98@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@98@01 $t@93@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@98@01 $t@97@01))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    (- $Perm.Write (read$ $Snap.unit)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb5
; [exec]
; __t10 := true
; [exec]
; label l20
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@99@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@100@01 $Snap)
(assert (= $t@100@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_0), write)
(declare-const $t@101@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@73@01 ret@99@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@64@01 ret@99@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@103@01 $Snap)
(assert (= $t@103@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l21
; [exec]
; label l23
; [exec]
; label bb11
; [exec]
; __t11 := true
; [exec]
; label bb17
; [exec]
; __t12 := true
; [exec]
; label bb18
; [exec]
; __t13 := true
; [exec]
; label return
; [exec]
; assert true
; [exec]
; exhale acc(tuple0$(_0), write)
; [exec]
; label end_of_method
(pop) ; 4
; [eval] !__t3
; [then-branch: 2 | False | dead]
; [else-branch: 2 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 2 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 0 | _14@96@01 != 0]
(assert (not (= _14@96@01 0)))
(pop) ; 3
; [eval] !(__t14 == 0)
; [eval] __t14 == 0
(push) ; 3
(set-option :timeout 10)
(assert (not (= _14@96@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _14@96@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | _14@96@01 != 0 | live]
; [else-branch: 3 | _14@96@01 == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3 | _14@96@01 != 0]
(assert (not (= _14@96@01 0)))
; [exec]
; label l13
; [exec]
; label bb6
; [exec]
; __t5 := true
; [exec]
; label l15
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | True | live]
; [else-branch: 4 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 4 | True]
; [exec]
; exhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_12.val_ref), read$())
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_8), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $t@104@01 $Snap)
(declare-const $t@105@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@105@01 $t@93@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@105@01 $t@104@01))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    (- $Perm.Write (read$ $Snap.unit)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb10
; [exec]
; __t6 := true
; [exec]
; unfold acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_8), write)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (= $t@105@01 ($Snap.combine ($Snap.first $t@105@01) ($Snap.second $t@105@01))))
(assert (not (= ret@82@01 $Ref.null)))
(assert (=
  ($Snap.second $t@105@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@105@01))
    ($Snap.second ($Snap.second $t@105@01)))))
(assert (= ($Snap.first ($Snap.second $t@105@01)) $Snap.unit))
; [eval] 0 <= self.discriminant
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@105@01))))
(assert (=
  ($Snap.second ($Snap.second $t@105@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@105@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@105@01))) $Snap.unit))
; [eval] self.discriminant <= 1
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@105@01)) 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@105@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
; [eval] self.discriminant == 1
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@105@01)) 1))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@105@01)) 1)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | First:($t@105@01) == 1 | live]
; [else-branch: 5 | First:($t@105@01) != 1 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5 | First:($t@105@01) == 1]
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@105@01)) 1))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger $t@105@01 ret@82@01))
; [exec]
; unfold acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_Some(_8.enum_Some), write)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))
    $Ref.null)))
; State saturation: after unfold
(check-sat)
; unknown
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_Some%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@105@01)))))))
; [exec]
; _13 := _8.enum_Some.f$0
(declare-const _13@106@01 $Ref)
(assert (=
  _13@106@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))))
; [exec]
; label l16
; [exec]
; _15 := _13
; [exec]
; label l17
; [exec]
; label l18
; [exec]
; assert true
; [exec]
; exhale acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_15), write)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@105@01))))))
  _13@106@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@107@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_0), write)
(declare-const $t@109@01 $Snap)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@73@01 ret@107@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@64@01 ret@107@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@110@01 $Snap)
(assert (= $t@110@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@111@01 $Snap)
(assert (= $t@111@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l19
; [exec]
; label bb12
; [exec]
; __t7 := true
; [exec]
; label bb16
; [exec]
; __t8 := true
; [exec]
; label l22
; [exec]
; label bb11
; [exec]
; __t11 := true
; [exec]
; label bb17
; [exec]
; __t12 := true
; [exec]
; label bb18
; [exec]
; __t13 := true
; [exec]
; label return
; [exec]
; assert true
; [exec]
; exhale acc(tuple0$(_0), write)
; [exec]
; label end_of_method
(pop) ; 5
(pop) ; 4
; [eval] !__t3
; [then-branch: 6 | False | dead]
; [else-branch: 6 | True | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 6 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 3 | _14@96@01 == 0]
(assert (= _14@96@01 0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$7$closesqu$$$clone$opensqu$0$closesqu$ ----------
(declare-const _0@112@01 $Ref)
(declare-const _0@113@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@114@01 Bool)
; [exec]
; var _old$pre$0: Ref
(declare-const _old$pre$0@115@01 $Ref)
; [exec]
; var _1: Ref
(declare-const _1@116@01 $Ref)
; [exec]
; var _2: Ref
(declare-const _2@117@01 $Ref)
; [exec]
; var _3: Ref
(declare-const _3@118@01 $Ref)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; inhale acc(_1.val_ref, write) &&
;   acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write)
(declare-const $t@119@01 $Snap)
(assert (= $t@119@01 ($Snap.combine ($Snap.first $t@119@01) ($Snap.second $t@119@01))))
(assert (not (= _1@116@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; label bb0
; [exec]
; __t0 := true
; [exec]
; _2 := builtin$havoc_ref()
(declare-const ret@123@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_2.val_int, write)
(declare-const $t@124@01 Int)
(assert (not (= ret@123@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write)
(assert (=
  ($Snap.second $t@119@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@119@01))
    ($Snap.second ($Snap.second $t@119@01)))))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@119@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@119@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@119@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.second $t@119@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01))))
; [exec]
; unfold acc(i32(_1.val_ref.f$x), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@123@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.second $t@119@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))))
; [exec]
; _2.val_int := _1.val_ref.f$x.val_int
(declare-const val_int@125@01 Int)
(assert (=
  val_int@125@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@119@01))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))) ret@123@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l0
; [exec]
; _3 := builtin$havoc_ref()
(declare-const ret@126@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_3.val_int, write)
(declare-const $t@127@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@123@01 ret@126@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))) ret@126@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@126@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_1.val_ref.f$y), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ret@126@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ret@123@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
; [exec]
; _3.val_int := _1.val_ref.f$y.val_int
(declare-const val_int@128@01 Int)
(assert (=
  val_int@128@01
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))
  ret@126@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@123@01 ret@126@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))) ret@126@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l1
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@129@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(declare-const $t@130@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(assert (= $t@130@01 ($Snap.combine ($Snap.first $t@130@01) ($Snap.second $t@130@01))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) ret@129@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@129@01 $Ref.null)))
(assert (=
  ($Snap.second $t@130@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@130@01))
    ($Snap.second ($Snap.second $t@130@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@130@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@130@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@130@01))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) ret@129@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@130@01 ret@129@01))
; [exec]
; _0.f$x := _2
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) ret@129@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l2
; [exec]
; _0.f$y := _3
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) ret@129@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l3
; [exec]
; label return
; [exec]
; fold acc(i32(_1.val_ref.f$x), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_1.val_ref.f$y), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($Snap.first ($Snap.second $t@119@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@119@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01))))
; [exec]
; _old$pre$0 := _1.val_ref
(declare-const _old$pre$0@131@01 $Ref)
(assert (= _old$pre$0@131@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01))))
; [exec]
; fold acc(i32(_0.f$x), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@125@01) ret@123@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ret@123@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01)) ret@123@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_0.f$y), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@128@01) ret@126@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@123@01 ret@126@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ret@126@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01)) ret@126@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($SortWrappers.$RefTo$Snap ret@123@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap val_int@125@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap ret@126@01)
      ($SortWrappers.IntTo$Snap val_int@128@01)))) ret@129@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) ret@129@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write) in
;     (unfolding acc(i32(_0.f$x), write) in _0.f$x.val_int)) ==
;   old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in
;     (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int))) &&
;   ((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write) in
;     (unfolding acc(i32(_0.f$y), write) in _0.f$y.val_int)) ==
;   old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in
;     (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int))) &&
;   ((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in
;     (unfolding acc(i32(_old$pre$0.f$x), write) in _old$pre$0.f$x.val_int)) ==
;   old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in
;     (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int))) &&
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in
;     (unfolding acc(i32(_old$pre$0.f$y), write) in _old$pre$0.f$y.val_int)) ==
;   old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in
;     (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)))))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write) in (unfolding acc(i32(_0.f$x), write) in _0.f$x.val_int)) == old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write) in (unfolding acc(i32(_0.f$x), write) in _0.f$x.val_int))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ret@123@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01)) ret@123@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@123@01 ret@126@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ret@126@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01)) ret@126@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_0.f$x), write) in _0.f$x.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write) in (unfolding acc(i32(_0.f$y), write) in _0.f$y.val_int)) == old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write) in (unfolding acc(i32(_0.f$y), write) in _0.f$y.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ret@123@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01)) ret@123@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@123@01 ret@126@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ret@126@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01)) ret@126@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_0.f$y), write) in _0.f$y.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in (unfolding acc(i32(_old$pre$0.f$x), write) in _old$pre$0.f$x.val_int)) == old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in (unfolding acc(i32(_old$pre$0.f$x), write) in _old$pre$0.f$x.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@129@01 _old$pre$0@131@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) _old$pre$0@131@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($Snap.first ($Snap.second $t@119@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@119@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))) _old$pre$0@131@01))
(assert (not (= _old$pre$0@131@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_old$pre$0.f$x), write) in _old$pre$0.f$x.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
    ($Snap.first ($Snap.second $t@119@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@119@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))) _old$pre$0@131@01)
  (not (= _old$pre$0@131@01 $Ref.null))))
; [eval] old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in (unfolding acc(i32(_old$pre$0.f$y), write) in _old$pre$0.f$y.val_int)) == old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in (unfolding acc(i32(_old$pre$0.f$y), write) in _old$pre$0.f$y.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@129@01 _old$pre$0@131@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) _old$pre$0@131@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@130@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@130@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_old$pre$0.f$y), write) in _old$pre$0.f$y.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@119@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [exec]
; assert true
; [exec]
; exhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@129@01 _old$pre$0@131@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@119@01)) _old$pre$0@131@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 2
(pop) ; 1
; ---------- m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$7$closesqu$$$mov$opensqu$0$closesqu$ ----------
(declare-const _0@132@01 $Ref)
(declare-const _0@133@01 $Ref)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@134@01 Bool)
; [exec]
; var __t1: Bool
(declare-const __t1@135@01 Bool)
; [exec]
; var __t2: Bool
(declare-const __t2@136@01 Bool)
; [exec]
; var __t3: Bool
(declare-const __t3@137@01 Bool)
; [exec]
; var __t4: Bool
(declare-const __t4@138@01 Bool)
; [exec]
; var _old$pre$0: Ref
(declare-const _old$pre$0@139@01 $Ref)
; [exec]
; var _old$pre$1: Ref
(declare-const _old$pre$1@140@01 $Ref)
; [exec]
; var _1: Ref
(declare-const _1@141@01 $Ref)
; [exec]
; var _2: Ref
(declare-const _2@142@01 $Ref)
; [exec]
; var _3: Int
(declare-const _3@143@01 Int)
; [exec]
; var _4: Int
(declare-const _4@144@01 Int)
; [exec]
; var _5: Ref
(declare-const _5@145@01 $Ref)
; [exec]
; var _6: Int
(declare-const _6@146@01 Int)
; [exec]
; var _7: Int
(declare-const _7@147@01 Int)
; [exec]
; var _8: Ref
(declare-const _8@148@01 $Ref)
; [exec]
; var _9: Ref
(declare-const _9@149@01 $Ref)
; [exec]
; var _10: Int
(declare-const _10@150@01 Int)
; [exec]
; var _11: Int
(declare-const _11@151@01 Int)
; [exec]
; var _12: Ref
(declare-const _12@152@01 $Ref)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; __t1 := false
; [exec]
; __t2 := false
; [exec]
; inhale acc(_1.val_ref, write) &&
;   (acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) &&
;   (acc(_2.val_ref, write) && acc(tuple2$i32$i32(_2.val_ref), write)))
(declare-const $t@153@01 $Snap)
(assert (= $t@153@01 ($Snap.combine ($Snap.first $t@153@01) ($Snap.second $t@153@01))))
(assert (not (= _1@141@01 $Ref.null)))
(assert (=
  ($Snap.second $t@153@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@153@01))
    ($Snap.second ($Snap.second $t@153@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@153@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@153@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@141@01 _2@142@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= _2@142@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@156@01 $Snap)
(assert (= $t@156@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; label bb0
; [exec]
; __t0 := true
; [exec]
; _3 := builtin$havoc_int()
(declare-const ret@157@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(tuple2$i32$i32(_2.val_ref), write)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@153@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tuple2$i32$i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@153@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))))
; [exec]
; unfold acc(i32(_2.val_ref.tuple_0), write)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
    $Ref.null)))
; State saturation: after unfold
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
; [exec]
; _3 := _2.val_ref.tuple_0.val_int
(declare-const _3@159@01 Int)
(assert (=
  _3@159@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))
; [exec]
; label l0
; [exec]
; _4 := builtin$havoc_int()
(declare-const ret@160@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_2.val_ref.tuple_1), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))))
; [exec]
; _4 := _2.val_ref.tuple_1.val_int
(declare-const _4@162@01 Int)
(assert (=
  _4@162@01
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))))
; [exec]
; label l1
; [exec]
; _6 := builtin$havoc_int()
(declare-const ret@163@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@164@01 $Snap)
(assert (= $t@164@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write)
(assert (=
  ($Snap.first ($Snap.second $t@153@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@153@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@153@01))))))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@153@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@153@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.first ($Snap.second $t@153@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01))))
; [exec]
; unfold acc(i32(_1.val_ref.f$x), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@153@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))))
; [exec]
; _6 := _1.val_ref.f$x.val_int
(declare-const _6@165@01 Int)
(assert (=
  _6@165@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))
; [exec]
; label l2
; [exec]
; _7 := builtin$havoc_int()
(declare-const ret@166@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _7 := _3
; [exec]
; label l3
; [exec]
; _8 := builtin$havoc_ref()
(declare-const ret@168@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_8.tuple_0, write)
(declare-const $t@169@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))
  ret@168@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@168@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_8.tuple_0.val_int, write)
(declare-const $t@170@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  $t@169@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
  $t@169@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  $t@169@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@169@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_8.tuple_1, write)
(declare-const $t@171@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))
  ret@168@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_8.tuple_1.val_bool, write)
(declare-const $t@172@01 Bool)
(assert (not (= $t@171@01 $Ref.null)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _8.tuple_0.val_int := _6 + _7
; [eval] _6 + _7
(declare-const val_int@173@01 Int)
(assert (= val_int@173@01 (+ _6@165@01 _3@159@01)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  $t@169@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
  $t@169@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  $t@169@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; _8.tuple_1.val_bool := false
; [exec]
; __t3 := _8.tuple_1.val_bool
; [exec]
; assert !__t3
; [eval] !__t3
; [exec]
; label bb2
; [exec]
; __t1 := true
; [exec]
; _5 := _8.tuple_0
; [exec]
; label l4
; [exec]
; _10 := builtin$havoc_int()
(declare-const ret@174@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_1.val_ref.f$y), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  $t@169@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))))))
; [exec]
; _10 := _1.val_ref.f$y.val_int
(declare-const _10@176@01 Int)
(assert (=
  _10@176@01
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))))))
; [exec]
; label l5
; [exec]
; _11 := builtin$havoc_int()
(declare-const ret@177@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _11 := _4
; [exec]
; label l6
; [exec]
; _12 := builtin$havoc_ref()
(declare-const ret@179@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_12.tuple_0, write)
(declare-const $t@180@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@168@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))
  ret@179@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@179@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_12.tuple_0.val_int, write)
(declare-const $t@181@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@169@01 $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@180@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_12.tuple_1, write)
(declare-const $t@182@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@168@01 ret@179@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))
  ret@179@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_12.tuple_1.val_bool, write)
(declare-const $t@183@01 Bool)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@171@01 $t@182@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@182@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _12.tuple_0.val_int := _10 + _11
; [eval] _10 + _11
(declare-const val_int@184@01 Int)
(assert (= val_int@184@01 (+ _10@176@01 _4@162@01)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@169@01 $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; _12.tuple_1.val_bool := false
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@171@01 $t@182@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t4 := _12.tuple_1.val_bool
; [exec]
; assert !__t4
; [eval] !__t4
; [exec]
; label bb3
; [exec]
; __t2 := true
; [exec]
; _9 := _12.tuple_0
; [exec]
; label l7
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@185@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(declare-const $t@186@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(assert (= $t@186@01 ($Snap.combine ($Snap.first $t@186@01) ($Snap.second $t@186@01))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) ret@185@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@185@01 $Ref.null)))
(assert (=
  ($Snap.second $t@186@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@186@01))
    ($Snap.second ($Snap.second $t@186@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@186@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@186@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@186@01))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) ret@185@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@186@01 ret@185@01))
; [exec]
; _0.f$x := _5
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) ret@185@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l8
; [exec]
; _0.f$y := _9
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) ret@185@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l9
; [exec]
; label return
; [exec]
; fold acc(i32(_1.val_ref.f$y), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_1.val_ref.f$x), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@153@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@153@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01))))
; [exec]
; _old$pre$0 := _1.val_ref
(declare-const _old$pre$0@187@01 $Ref)
(assert (= _old$pre$0@187@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01))))
; [exec]
; fold acc(i32(_2.val_ref.tuple_0), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_2.val_ref.tuple_1), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tuple2$i32$i32(_2.val_ref), write)
(assert (tuple2$i32$i32%trigger ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@153@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))))
; [exec]
; _old$pre$1 := _2.val_ref
(declare-const _old$pre$1@188@01 $Ref)
(assert (=
  _old$pre$1@188@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))))
; [exec]
; fold acc(i32(_0.f$x), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@173@01) $t@169@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  $t@169@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01)) $t@169@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_0.f$y), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@184@01) $t@180@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@169@01 $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01)) $t@180@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($SortWrappers.$RefTo$Snap $t@169@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap val_int@173@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap $t@180@01)
      ($SortWrappers.IntTo$Snap val_int@184@01)))) ret@185@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) ret@185@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in
;     (unfolding acc(i32(_old$pre$0.f$x), write) in _old$pre$0.f$x.val_int)) ==
;   old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in
;     (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int))) &&
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in
;     (unfolding acc(i32(_old$pre$0.f$y), write) in _old$pre$0.f$y.val_int)) ==
;   old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in
;     (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in (unfolding acc(i32(_old$pre$0.f$x), write) in _old$pre$0.f$x.val_int)) == old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in (unfolding acc(i32(_old$pre$0.f$x), write) in _old$pre$0.f$x.val_int))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@185@01 _old$pre$0@187@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) _old$pre$0@187@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@153@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@153@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))) _old$pre$0@187@01))
(assert (not (= _old$pre$0@187@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_old$pre$0.f$x), write) in _old$pre$0.f$x.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@153@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@153@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))) _old$pre$0@187@01)
  (not (= _old$pre$0@187@01 $Ref.null))))
; [eval] old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_1.val_ref.f$x), write) in _1.val_ref.f$x.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in (unfolding acc(i32(_old$pre$0.f$y), write) in _old$pre$0.f$y.val_int)) == old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) in (unfolding acc(i32(_old$pre$0.f$y), write) in _old$pre$0.f$y.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@185@01 _old$pre$0@187@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) _old$pre$0@187@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@186@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@186@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_old$pre$0.f$y), write) in _old$pre$0.f$y.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] old[pre]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) in (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@153@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@153@01)))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_1.val_ref.f$y), write) in _1.val_ref.f$y.val_int)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [exec]
; assert true
; [exec]
; exhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) &&
;   acc(tuple2$i32$i32(_old$pre$1), write)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@185@01 _old$pre$0@187@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@153@01)) _old$pre$0@187@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@153@01))))
  _old$pre$1@188@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 2
(pop) ; 1
; ---------- m_Knights_tour$$knights_tour$opensqu$0$closesqu$ ----------
(declare-const _0@189@01 $Ref)
(declare-const _0@190@01 $Ref)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@191@01 Bool)
; [exec]
; var __t1: Bool
(declare-const __t1@192@01 Bool)
; [exec]
; var __t2: Bool
(declare-const __t2@193@01 Bool)
; [exec]
; var __t3: Bool
(declare-const __t3@194@01 Bool)
; [exec]
; var __t4: Bool
(declare-const __t4@195@01 Bool)
; [exec]
; var __t5: Bool
(declare-const __t5@196@01 Bool)
; [exec]
; var __t6: Bool
(declare-const __t6@197@01 Bool)
; [exec]
; var __t7: Bool
(declare-const __t7@198@01 Bool)
; [exec]
; var __t8: Bool
(declare-const __t8@199@01 Bool)
; [exec]
; var __t9: Bool
(declare-const __t9@200@01 Bool)
; [exec]
; var __t10: Bool
(declare-const __t10@201@01 Bool)
; [exec]
; var __t11: Bool
(declare-const __t11@202@01 Bool)
; [exec]
; var __t12: Bool
(declare-const __t12@203@01 Bool)
; [exec]
; var __t13: Bool
(declare-const __t13@204@01 Bool)
; [exec]
; var __t14: Bool
(declare-const __t14@205@01 Bool)
; [exec]
; var __t15: Bool
(declare-const __t15@206@01 Bool)
; [exec]
; var __t16: Bool
(declare-const __t16@207@01 Bool)
; [exec]
; var __t17: Bool
(declare-const __t17@208@01 Bool)
; [exec]
; var __t18: Bool
(declare-const __t18@209@01 Bool)
; [exec]
; var __t19: Bool
(declare-const __t19@210@01 Bool)
; [exec]
; var __t20: Bool
(declare-const __t20@211@01 Bool)
; [exec]
; var __t21: Bool
(declare-const __t21@212@01 Bool)
; [exec]
; var __t22: Bool
(declare-const __t22@213@01 Bool)
; [exec]
; var __t23: Bool
(declare-const __t23@214@01 Bool)
; [exec]
; var __t24: Bool
(declare-const __t24@215@01 Bool)
; [exec]
; var __t25: Bool
(declare-const __t25@216@01 Bool)
; [exec]
; var __t26: Bool
(declare-const __t26@217@01 Bool)
; [exec]
; var __t27: Bool
(declare-const __t27@218@01 Bool)
; [exec]
; var __t28: Bool
(declare-const __t28@219@01 Bool)
; [exec]
; var __t29: Bool
(declare-const __t29@220@01 Bool)
; [exec]
; var __t30: Bool
(declare-const __t30@221@01 Bool)
; [exec]
; var __t31: Bool
(declare-const __t31@222@01 Bool)
; [exec]
; var __t32: Bool
(declare-const __t32@223@01 Bool)
; [exec]
; var __t33: Bool
(declare-const __t33@224@01 Bool)
; [exec]
; var __t34: Bool
(declare-const __t34@225@01 Bool)
; [exec]
; var __t35: Bool
(declare-const __t35@226@01 Bool)
; [exec]
; var __t36: Bool
(declare-const __t36@227@01 Bool)
; [exec]
; var __t37: Bool
(declare-const __t37@228@01 Bool)
; [exec]
; var __t38: Bool
(declare-const __t38@229@01 Bool)
; [exec]
; var __t39: Bool
(declare-const __t39@230@01 Bool)
; [exec]
; var __t40: Bool
(declare-const __t40@231@01 Bool)
; [exec]
; var __t41: Bool
(declare-const __t41@232@01 Bool)
; [exec]
; var __t42: Bool
(declare-const __t42@233@01 Bool)
; [exec]
; var __t43: Bool
(declare-const __t43@234@01 Bool)
; [exec]
; var __t44: Bool
(declare-const __t44@235@01 Bool)
; [exec]
; var __t45: Bool
(declare-const __t45@236@01 Bool)
; [exec]
; var __t46: Bool
(declare-const __t46@237@01 Bool)
; [exec]
; var __t47: Bool
(declare-const __t47@238@01 Bool)
; [exec]
; var __t48: Bool
(declare-const __t48@239@01 Bool)
; [exec]
; var __t49: Bool
(declare-const __t49@240@01 Bool)
; [exec]
; var __t50: Bool
(declare-const __t50@241@01 Bool)
; [exec]
; var __t51: Bool
(declare-const __t51@242@01 Bool)
; [exec]
; var __t52: Bool
(declare-const __t52@243@01 Bool)
; [exec]
; var __t53: Bool
(declare-const __t53@244@01 Bool)
; [exec]
; var __t54: Bool
(declare-const __t54@245@01 Bool)
; [exec]
; var __t55: Bool
(declare-const __t55@246@01 Bool)
; [exec]
; var __t56: Bool
(declare-const __t56@247@01 Bool)
; [exec]
; var __t57: Bool
(declare-const __t57@248@01 Bool)
; [exec]
; var __t58: Bool
(declare-const __t58@249@01 Bool)
; [exec]
; var __t59: Bool
(declare-const __t59@250@01 Bool)
; [exec]
; var __t60: Bool
(declare-const __t60@251@01 Bool)
; [exec]
; var __t61: Bool
(declare-const __t61@252@01 Bool)
; [exec]
; var __t62: Bool
(declare-const __t62@253@01 Bool)
; [exec]
; var __t63: Bool
(declare-const __t63@254@01 Bool)
; [exec]
; var __t64: Bool
(declare-const __t64@255@01 Bool)
; [exec]
; var __t65: Bool
(declare-const __t65@256@01 Bool)
; [exec]
; var __t66: Bool
(declare-const __t66@257@01 Bool)
; [exec]
; var __t67: Bool
(declare-const __t67@258@01 Bool)
; [exec]
; var __t68: Bool
(declare-const __t68@259@01 Bool)
; [exec]
; var __t69: Bool
(declare-const __t69@260@01 Bool)
; [exec]
; var __t70: Bool
(declare-const __t70@261@01 Bool)
; [exec]
; var __t71: Bool
(declare-const __t71@262@01 Bool)
; [exec]
; var __t72: Bool
(declare-const __t72@263@01 Bool)
; [exec]
; var __t73: Bool
(declare-const __t73@264@01 Bool)
; [exec]
; var __t74: Bool
(declare-const __t74@265@01 Bool)
; [exec]
; var __t75: Bool
(declare-const __t75@266@01 Bool)
; [exec]
; var __t76: Bool
(declare-const __t76@267@01 Bool)
; [exec]
; var __t77: Bool
(declare-const __t77@268@01 Bool)
; [exec]
; var __t78: Bool
(declare-const __t78@269@01 Bool)
; [exec]
; var __t79: Bool
(declare-const __t79@270@01 Bool)
; [exec]
; var __t80: Bool
(declare-const __t80@271@01 Bool)
; [exec]
; var __t81: Bool
(declare-const __t81@272@01 Bool)
; [exec]
; var __t82: Bool
(declare-const __t82@273@01 Bool)
; [exec]
; var __t83: Bool
(declare-const __t83@274@01 Bool)
; [exec]
; var __t84: Bool
(declare-const __t84@275@01 Bool)
; [exec]
; var __t85: Bool
(declare-const __t85@276@01 Bool)
; [exec]
; var __t86: Bool
(declare-const __t86@277@01 Bool)
; [exec]
; var __t87: Int
(declare-const __t87@278@01 Int)
; [exec]
; var __t88: Bool
(declare-const __t88@279@01 Bool)
; [exec]
; var __t89: Bool
(declare-const __t89@280@01 Bool)
; [exec]
; var __t90: Bool
(declare-const __t90@281@01 Bool)
; [exec]
; var __t91: Bool
(declare-const __t91@282@01 Bool)
; [exec]
; var __t92: Bool
(declare-const __t92@283@01 Bool)
; [exec]
; var __t93: Bool
(declare-const __t93@284@01 Bool)
; [exec]
; var __t94: Bool
(declare-const __t94@285@01 Bool)
; [exec]
; var _1: Ref
(declare-const _1@286@01 $Ref)
; [exec]
; var _2: Ref
(declare-const _2@287@01 $Ref)
; [exec]
; var _3: Ref
(declare-const _3@288@01 $Ref)
; [exec]
; var _4: Ref
(declare-const _4@289@01 $Ref)
; [exec]
; var _5: Ref
(declare-const _5@290@01 $Ref)
; [exec]
; var _6: Ref
(declare-const _6@291@01 $Ref)
; [exec]
; var _7: Ref
(declare-const _7@292@01 $Ref)
; [exec]
; var _8: Ref
(declare-const _8@293@01 $Ref)
; [exec]
; var _9: Ref
(declare-const _9@294@01 $Ref)
; [exec]
; var _10: Ref
(declare-const _10@295@01 $Ref)
; [exec]
; var _11: Ref
(declare-const _11@296@01 $Ref)
; [exec]
; var _12: Ref
(declare-const _12@297@01 $Ref)
; [exec]
; var _13: Ref
(declare-const _13@298@01 $Ref)
; [exec]
; var _14: Ref
(declare-const _14@299@01 $Ref)
; [exec]
; var _15: Ref
(declare-const _15@300@01 $Ref)
; [exec]
; var _16: Int
(declare-const _16@301@01 Int)
; [exec]
; var _17: Ref
(declare-const _17@302@01 $Ref)
; [exec]
; var _18: Ref
(declare-const _18@303@01 $Ref)
; [exec]
; var _19: Ref
(declare-const _19@304@01 $Ref)
; [exec]
; var _20: Ref
(declare-const _20@305@01 $Ref)
; [exec]
; var _21: Ref
(declare-const _21@306@01 $Ref)
; [exec]
; var _22: Ref
(declare-const _22@307@01 $Ref)
; [exec]
; var _23: Ref
(declare-const _23@308@01 $Ref)
; [exec]
; var _24: Ref
(declare-const _24@309@01 $Ref)
; [exec]
; var _34: Ref
(declare-const _34@310@01 $Ref)
; [exec]
; var _35: Ref
(declare-const _35@311@01 $Ref)
; [exec]
; var _36: Ref
(declare-const _36@312@01 $Ref)
; [exec]
; var _37: Ref
(declare-const _37@313@01 $Ref)
; [exec]
; var _38: Int
(declare-const _38@314@01 Int)
; [exec]
; var _39: Int
(declare-const _39@315@01 Int)
; [exec]
; var _40: Ref
(declare-const _40@316@01 $Ref)
; [exec]
; var _41: Ref
(declare-const _41@317@01 $Ref)
; [exec]
; var _42: Ref
(declare-const _42@318@01 $Ref)
; [exec]
; var _43: Ref
(declare-const _43@319@01 $Ref)
; [exec]
; var _58: Ref
(declare-const _58@320@01 $Ref)
; [exec]
; var _59: Ref
(declare-const _59@321@01 $Ref)
; [exec]
; var _60: Int
(declare-const _60@322@01 Int)
; [exec]
; var _61: Ref
(declare-const _61@323@01 $Ref)
; [exec]
; var _62: Ref
(declare-const _62@324@01 $Ref)
; [exec]
; var _63: Ref
(declare-const _63@325@01 $Ref)
; [exec]
; var _64: Ref
(declare-const _64@326@01 $Ref)
; [exec]
; var _65: Ref
(declare-const _65@327@01 $Ref)
; [exec]
; var _66: Ref
(declare-const _66@328@01 $Ref)
; [exec]
; var _67: Ref
(declare-const _67@329@01 $Ref)
; [exec]
; var _68: Ref
(declare-const _68@330@01 $Ref)
; [exec]
; var _69: Ref
(declare-const _69@331@01 $Ref)
; [exec]
; var _70: Ref
(declare-const _70@332@01 $Ref)
; [exec]
; var _71: Ref
(declare-const _71@333@01 $Ref)
; [exec]
; var _72: Ref
(declare-const _72@334@01 $Ref)
; [exec]
; var _73: Ref
(declare-const _73@335@01 $Ref)
; [exec]
; var _74: Ref
(declare-const _74@336@01 $Ref)
; [exec]
; var _75: Ref
(declare-const _75@337@01 $Ref)
; [exec]
; var _76: Ref
(declare-const _76@338@01 $Ref)
; [exec]
; var _77: Ref
(declare-const _77@339@01 $Ref)
; [exec]
; var _78: Ref
(declare-const _78@340@01 $Ref)
; [exec]
; var _79: Ref
(declare-const _79@341@01 $Ref)
; [exec]
; var _80: Int
(declare-const _80@342@01 Int)
; [exec]
; var _81: Int
(declare-const _81@343@01 Int)
; [exec]
; var _82: Ref
(declare-const _82@344@01 $Ref)
; [exec]
; var _83: Ref
(declare-const _83@345@01 $Ref)
; [exec]
; var _84: Ref
(declare-const _84@346@01 $Ref)
; [exec]
; var _85: Int
(declare-const _85@347@01 Int)
; [exec]
; var _86: Int
(declare-const _86@348@01 Int)
; [exec]
; var _87: Ref
(declare-const _87@349@01 $Ref)
; [exec]
; var _88: Ref
(declare-const _88@350@01 $Ref)
; [exec]
; var _89: Ref
(declare-const _89@351@01 $Ref)
; [exec]
; var _90: Ref
(declare-const _90@352@01 $Ref)
; [exec]
; var _91: Ref
(declare-const _91@353@01 $Ref)
; [exec]
; var _92: Ref
(declare-const _92@354@01 $Ref)
; [exec]
; var _93: Ref
(declare-const _93@355@01 $Ref)
; [exec]
; var _94: Ref
(declare-const _94@356@01 $Ref)
; [exec]
; var _95: Ref
(declare-const _95@357@01 $Ref)
; [exec]
; var _104: Int
(declare-const _104@358@01 Int)
; [exec]
; var _105: Ref
(declare-const _105@359@01 $Ref)
; [exec]
; var _106: Ref
(declare-const _106@360@01 $Ref)
; [exec]
; var _107: Ref
(declare-const _107@361@01 $Ref)
; [exec]
; var _108: Int
(declare-const _108@362@01 Int)
; [exec]
; var _109: Ref
(declare-const _109@363@01 $Ref)
; [exec]
; var _110: Ref
(declare-const _110@364@01 $Ref)
; [exec]
; var _111: Int
(declare-const _111@365@01 Int)
; [exec]
; var _112: Int
(declare-const _112@366@01 Int)
; [exec]
; var _113: Ref
(declare-const _113@367@01 $Ref)
; [exec]
; var _114: Ref
(declare-const _114@368@01 $Ref)
; [exec]
; var _115: Ref
(declare-const _115@369@01 $Ref)
; [exec]
; var _116: Ref
(declare-const _116@370@01 $Ref)
; [exec]
; var _117: Ref
(declare-const _117@371@01 $Ref)
; [exec]
; var _118: Int
(declare-const _118@372@01 Int)
; [exec]
; var _119: Int
(declare-const _119@373@01 Int)
; [exec]
; var _120: Ref
(declare-const _120@374@01 $Ref)
; [exec]
; var _121: Ref
(declare-const _121@375@01 $Ref)
; [exec]
; var _122: Int
(declare-const _122@376@01 Int)
; [exec]
; var _123: Ref
(declare-const _123@377@01 $Ref)
; [exec]
; var _124: Ref
(declare-const _124@378@01 $Ref)
; [exec]
; var _125: Int
(declare-const _125@379@01 Int)
; [exec]
; var _126: Ref
(declare-const _126@380@01 $Ref)
; [exec]
; var _127: Ref
(declare-const _127@381@01 $Ref)
; [exec]
; var _128: Ref
(declare-const _128@382@01 $Ref)
; [exec]
; var _129: Ref
(declare-const _129@383@01 $Ref)
; [exec]
; var _130: Ref
(declare-const _130@384@01 $Ref)
; [exec]
; var _131: Ref
(declare-const _131@385@01 $Ref)
; [exec]
; var _132: Ref
(declare-const _132@386@01 $Ref)
; [exec]
; var _133: Ref
(declare-const _133@387@01 $Ref)
; [exec]
; var _134: Ref
(declare-const _134@388@01 $Ref)
; [exec]
; var _135: Int
(declare-const _135@389@01 Int)
; [exec]
; var _136: Ref
(declare-const _136@390@01 $Ref)
; [exec]
; var _137: Ref
(declare-const _137@391@01 $Ref)
; [exec]
; var _138: Ref
(declare-const _138@392@01 $Ref)
; [exec]
; var _139: Ref
(declare-const _139@393@01 $Ref)
; [exec]
; var _140: Ref
(declare-const _140@394@01 $Ref)
; [exec]
; var _141: Ref
(declare-const _141@395@01 $Ref)
; [exec]
; var _142: Ref
(declare-const _142@396@01 $Ref)
; [exec]
; var _144: Ref
(declare-const _144@397@01 $Ref)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; __t1 := false
; [exec]
; __t2 := false
; [exec]
; __t3 := false
; [exec]
; __t4 := false
; [exec]
; __t5 := false
; [exec]
; __t6 := false
; [exec]
; __t7 := false
; [exec]
; __t8 := false
; [exec]
; __t9 := false
; [exec]
; __t10 := false
; [exec]
; __t11 := false
; [exec]
; __t12 := false
; [exec]
; __t13 := false
; [exec]
; __t14 := false
; [exec]
; __t15 := false
; [exec]
; __t16 := false
; [exec]
; __t17 := false
; [exec]
; __t18 := false
; [exec]
; __t19 := false
; [exec]
; __t20 := false
; [exec]
; __t21 := false
; [exec]
; __t22 := false
; [exec]
; __t23 := false
; [exec]
; __t24 := false
; [exec]
; __t25 := false
; [exec]
; __t26 := false
; [exec]
; __t27 := false
; [exec]
; __t28 := false
; [exec]
; __t29 := false
; [exec]
; __t30 := false
; [exec]
; __t31 := false
; [exec]
; __t32 := false
; [exec]
; __t33 := false
; [exec]
; __t34 := false
; [exec]
; __t35 := false
; [exec]
; __t36 := false
; [exec]
; __t37 := false
; [exec]
; __t38 := false
; [exec]
; __t39 := false
; [exec]
; __t40 := false
; [exec]
; __t41 := false
; [exec]
; __t42 := false
; [exec]
; __t43 := false
; [exec]
; __t44 := false
; [exec]
; __t45 := false
; [exec]
; __t46 := false
; [exec]
; __t47 := false
; [exec]
; __t48 := false
; [exec]
; __t49 := false
; [exec]
; __t50 := false
; [exec]
; __t51 := false
; [exec]
; __t52 := false
; [exec]
; __t53 := false
; [exec]
; __t54 := false
; [exec]
; __t55 := false
; [exec]
; __t56 := false
; [exec]
; __t57 := false
; [exec]
; __t58 := false
; [exec]
; __t59 := false
; [exec]
; __t60 := false
; [exec]
; __t61 := false
; [exec]
; __t62 := false
; [exec]
; __t63 := false
; [exec]
; __t64 := false
; [exec]
; __t65 := false
; [exec]
; __t66 := false
; [exec]
; __t67 := false
; [exec]
; __t68 := false
; [exec]
; __t69 := false
; [exec]
; inhale acc(i32(_1), write) && acc(i32(_2), write)
(declare-const $t@398@01 $Snap)
(assert (= $t@398@01 ($Snap.combine ($Snap.first $t@398@01) ($Snap.second $t@398@01))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 _2@287@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@400@01 $Snap)
(assert (= $t@400@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(i32(_2), write) in
;     (unfolding acc(i32(_1), write) in
;       0 <= _1.val_int &&
;       (_1.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;       (0 <= _2.val_int &&
;       _2.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))
(declare-const $t@401@01 $Snap)
(assert (= $t@401@01 $Snap.unit))
; [eval] (unfolding acc(i32(_2), write) in (unfolding acc(i32(_1), write) in 0 <= _1.val_int && (_1.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _2.val_int && _2.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))
(set-option :timeout 0)
(push) ; 3
(assert (i32%trigger ($Snap.second $t@398@01) _2@287@01))
(assert (not (= _2@287@01 $Ref.null)))
; [eval] (unfolding acc(i32(_1), write) in 0 <= _1.val_int && (_1.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _2.val_int && _2.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))
(push) ; 4
(assert (i32%trigger ($Snap.first $t@398@01) _1@286@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (= _2@287@01 _1@286@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= _1@286@01 $Ref.null)))
; [eval] 0 <= _1.val_int && (_1.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _2.val_int && _2.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= _1.val_int
(set-option :timeout 0)
(push) ; 5
; [then-branch: 7 | !(0 <= First:($t@398@01)) | live]
; [else-branch: 7 | 0 <= First:($t@398@01) | live]
(push) ; 6
; [then-branch: 7 | !(0 <= First:($t@398@01))]
(assert (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 7 | 0 <= First:($t@398@01)]
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))))
; [eval] _1.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 7
(assert (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
  $Snap.unit
  $Snap.unit)))
(pop) ; 7
; Joined path conditions
(assert (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
  $Snap.unit
  $Snap.unit)))
(push) ; 7
; [then-branch: 8 | !(First:($t@398@01) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 8 | First:($t@398@01) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 8
; [then-branch: 8 | !(First:($t@398@01) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 8
(push) ; 8
; [else-branch: 8 | First:($t@398@01) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= _2.val_int
(push) ; 9
; [then-branch: 9 | !(0 <= Second:($t@398@01)) | live]
; [else-branch: 9 | 0 <= Second:($t@398@01) | live]
(push) ; 10
; [then-branch: 9 | !(0 <= Second:($t@398@01))]
(assert (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))))
(pop) ; 10
(push) ; 10
; [else-branch: 9 | 0 <= Second:($t@398@01)]
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01))))
; [eval] _2.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))
  (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (or
      (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))
      (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01))))))))
(assert (or
  (<
    ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
  (and
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
      $Snap.unit
      $Snap.unit))
    (=>
      (<
        ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<
          ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (or
          (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))
          (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))))))
    (or
      (<
        ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
  (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))))))
(pop) ; 4
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first $t@398@01) _1@286@01)
  (not (= _1@286@01 $Ref.null))
  (=>
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
    (and
      (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
        $Snap.unit
        $Snap.unit))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))
            (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
    (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))))))
(pop) ; 3
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second $t@398@01) _2@287@01)
  (not (= _2@287@01 $Ref.null))
  (i32%trigger ($Snap.first $t@398@01) _1@286@01)
  (not (= _1@286@01 $Ref.null))
  (=>
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
    (and
      (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
        $Snap.unit
        $Snap.unit))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))
            (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
    (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))))))
(assert (and
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01)))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (and
      (<= 0 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01)))
      (<
        ($SortWrappers.$SnapToInt ($Snap.second $t@398@01))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; label bb0
; [exec]
; __t0 := true
; [exec]
; label l0
; [exec]
; _3 := builtin$havoc_ref()
(declare-const ret@402@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@403@01 $Snap)
(assert (= $t@403@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write)
(declare-const $t@404@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@405@01 $Snap)
(assert (= $t@405@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@406@01 $Snap)
(assert (= $t@406@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l1
; [exec]
; label bb2
; [exec]
; __t1 := true
; [exec]
; _5 := builtin$havoc_ref()
(declare-const ret@407@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_5.val_int, write)
(declare-const $t@408@01 Int)
(assert (not (= ret@407@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_1), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 _1@286@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _5.val_int := _1.val_int
(declare-const val_int@409@01 Int)
(assert (= val_int@409@01 ($SortWrappers.$SnapToInt ($Snap.first $t@398@01))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l2
; [exec]
; _6 := builtin$havoc_ref()
(declare-const ret@410@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_6.val_int, write)
(declare-const $t@411@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@410@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_2), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 _2@287@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 _2@287@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 _2@287@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _6.val_int := _2.val_int
(declare-const val_int@412@01 Int)
(assert (= val_int@412@01 ($SortWrappers.$SnapToInt ($Snap.second $t@398@01))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l3
; [exec]
; _4 := builtin$havoc_ref()
(declare-const ret@413@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write)
(declare-const $t@414@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write)
(assert (= $t@414@01 ($Snap.combine ($Snap.first $t@414@01) ($Snap.second $t@414@01))))
(assert (not (= ret@413@01 $Ref.null)))
(assert (=
  ($Snap.second $t@414@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@414@01))
    ($Snap.second ($Snap.second $t@414@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@414@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@414@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@414@01 ret@413@01))
; [exec]
; _4.f$x := _5
; [exec]
; label l4
; [exec]
; _4.f$y := _6
; [exec]
; label l5
; [exec]
; _7 := builtin$havoc_ref()
(declare-const ret@415@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_7.val_int, write)
(declare-const $t@416@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@415@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _7.val_int := 1
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; _8 := builtin$havoc_ref()
(declare-const ret@417@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_8.val_bool, write)
(declare-const $t@418@01 Bool)
(assert (not (= ret@417@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _8.val_bool := false
; [exec]
; _10 := builtin$havoc_ref()
(declare-const ret@419@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_10.val_ref, write)
(declare-const $t@420@01 $Ref)
(assert (not (= ret@419@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write)
(assert (= $t@404@01 ($Snap.combine ($Snap.first $t@404@01) ($Snap.second $t@404@01))))
(assert (not (= ret@402@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_%trigger $t@404@01 ret@402@01))
; [exec]
; _10.val_ref := _3.f$field
(declare-const val_ref@421@01 $Ref)
(assert (= val_ref@421@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@404@01))))
; [exec]
; label l6
; [exec]
; _11 := builtin$havoc_ref()
(declare-const ret@422@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_11.val_int, write)
(declare-const $t@423@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@422@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _11.val_int := _4.f$x.val_int
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l7
; [exec]
; _12 := builtin$havoc_ref()
(declare-const ret@424@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_12.val_int, write)
(declare-const $t@425@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@424@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _12.val_int := _4.f$y.val_int
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l8
; [exec]
; _13 := builtin$havoc_ref()
(declare-const ret@426@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_13.val_int, write)
(declare-const $t@427@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@424@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@426@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _13.val_int := _7.val_int
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@424@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l9
; [exec]
; label l10
; [exec]
; assert 0 <= _11.val_int &&
;   (_11.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;   (0 <= _12.val_int &&
;   _12.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= _11.val_int
(set-option :timeout 0)
(push) ; 3
(assert (not (<= 0 val_int@409@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@409@01))
; [eval] _11.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 3
(assert (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
  $Snap.unit
  $Snap.unit)))
(pop) ; 3
; Joined path conditions
(assert (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$%precondition ($Snap.combine
  $Snap.unit
  $Snap.unit)))
(push) ; 3
(assert (not (<
  val_int@409@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@409@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= _12.val_int
(push) ; 3
(assert (not (<= 0 val_int@412@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@412@01))
; [eval] _12.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (<
  val_int@412@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@412@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [exec]
; fold acc(i32(_12), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@412@01) ret@424@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@424@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_11), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@409@01) ret@422@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@424@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@422@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_13), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap 1) ret@426@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@424@01 ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@426@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert true
; [exec]
; exhale acc(_10.val_ref, write) &&
;   (acc(m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_10.val_ref), write) &&
;   (acc(i32(_11), write) && (acc(i32(_12), write) && acc(i32(_13), write))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@404@01)) val_ref@421@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; _9 := builtin$havoc_ref()
(declare-const ret@428@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(old[l10](_10.val_ref)), write)
; [eval] old[l10](_10.val_ref)
(declare-const $t@429@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_9), write)
(declare-const $t@430@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@431@01 $Snap)
(assert (= $t@431@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref),
;   old[l10](_11.val_int), old[l10](_12.val_int)) ==
;   old[l10](_13.val_int) &&
;   (forall px: Int, py: Int ::
;     { m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref),
;     px, py) }
;     { old[l10](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_10.val_ref,
;     px, py)) }
;     0 <= px &&
;     (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;     (!(px == old[l10](_11.val_int)) &&
;     (0 <= py &&
;     (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;     !(py == old[l10](_12.val_int)))))) ==>
;     m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref),
;     px, py) ==
;     old[l10](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_10.val_ref,
;     px, py)))
(declare-const $t@432@01 $Snap)
(assert (= $t@432@01 ($Snap.combine ($Snap.first $t@432@01) ($Snap.second $t@432@01))))
(assert (= ($Snap.first $t@432@01) $Snap.unit))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref), old[l10](_11.val_int), old[l10](_12.val_int)) == old[l10](_13.val_int)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref), old[l10](_11.val_int), old[l10](_12.val_int))
; [eval] old[l10](_10.val_ref)
; [eval] old[l10](_11.val_int)
; [eval] old[l10](_12.val_int)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(assert (read$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] 0 <= _pure_3
; [eval] _pure_3 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@429@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 val_int@409@01 val_int@412@01))
(pop) ; 3
; Joined path conditions
(assert (and
  (read$%precondition $Snap.unit)
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
    $t@429@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 val_int@409@01 val_int@412@01)))
; [eval] old[l10](_13.val_int)
(assert (=
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ ($Snap.combine
    $t@429@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 val_int@409@01 val_int@412@01)
  1))
(assert (= ($Snap.second $t@432@01) $Snap.unit))
; [eval] (forall px: Int, py: Int :: { m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref), px, py) } { old[l10](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_10.val_ref, px, py)) } 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l10](_11.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l10](_12.val_int)))))) ==> m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref), px, py) == old[l10](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_10.val_ref, px, py)))
(declare-const px@433@01 Int)
(declare-const py@434@01 Int)
(push) ; 3
; [eval] 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l10](_11.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l10](_12.val_int)))))) ==> m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref), px, py) == old[l10](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_10.val_ref, px, py))
; [eval] 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l10](_11.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l10](_12.val_int))))))
; [eval] 0 <= px
(push) ; 4
; [then-branch: 10 | !(0 <= px@433@01) | live]
; [else-branch: 10 | 0 <= px@433@01 | live]
(push) ; 5
; [then-branch: 10 | !(0 <= px@433@01)]
(assert (not (<= 0 px@433@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | 0 <= px@433@01]
(assert (<= 0 px@433@01))
; [eval] px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [then-branch: 11 | !(px@433@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 11 | px@433@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 7
; [then-branch: 11 | !(px@433@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    px@433@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 7
(push) ; 7
; [else-branch: 11 | px@433@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  px@433@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] !(px == old[l10](_11.val_int))
; [eval] px == old[l10](_11.val_int)
; [eval] old[l10](_11.val_int)
(push) ; 8
; [then-branch: 12 | px@433@01 == val_int@409@01 | live]
; [else-branch: 12 | px@433@01 != val_int@409@01 | live]
(push) ; 9
; [then-branch: 12 | px@433@01 == val_int@409@01]
(assert (= px@433@01 val_int@409@01))
(pop) ; 9
(push) ; 9
; [else-branch: 12 | px@433@01 != val_int@409@01]
(assert (not (= px@433@01 val_int@409@01)))
; [eval] 0 <= py
(push) ; 10
; [then-branch: 13 | !(0 <= py@434@01) | live]
; [else-branch: 13 | 0 <= py@434@01 | live]
(push) ; 11
; [then-branch: 13 | !(0 <= py@434@01)]
(assert (not (<= 0 py@434@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 13 | 0 <= py@434@01]
(assert (<= 0 py@434@01))
; [eval] py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 14 | !(py@434@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 14 | py@434@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 13
; [then-branch: 14 | !(py@434@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    py@434@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 13
(push) ; 13
; [else-branch: 14 | py@434@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  py@434@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] !(py == old[l10](_12.val_int))
; [eval] py == old[l10](_12.val_int)
; [eval] old[l10](_12.val_int)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    py@434@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      py@434@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 py@434@01)
  (and
    (<= 0 py@434@01)
    (or
      (<
        py@434@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          py@434@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or (<= 0 py@434@01) (not (<= 0 py@434@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= px@433@01 val_int@409@01))
  (and
    (not (= px@433@01 val_int@409@01))
    (=>
      (<= 0 py@434@01)
      (and
        (<= 0 py@434@01)
        (or
          (<
            py@434@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              py@434@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or (<= 0 py@434@01) (not (<= 0 py@434@01))))))
(assert (or (not (= px@433@01 val_int@409@01)) (= px@433@01 val_int@409@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    px@433@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (and
    (<
      px@433@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (=>
      (not (= px@433@01 val_int@409@01))
      (and
        (not (= px@433@01 val_int@409@01))
        (=>
          (<= 0 py@434@01)
          (and
            (<= 0 py@434@01)
            (or
              (<
                py@434@01
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (not
                (<
                  py@434@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))))))
        (or (<= 0 py@434@01) (not (<= 0 py@434@01)))))
    (or (not (= px@433@01 val_int@409@01)) (= px@433@01 val_int@409@01)))))
(assert (or
  (<
    px@433@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      px@433@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 px@433@01)
  (and
    (<= 0 px@433@01)
    (=>
      (<
        px@433@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<
          px@433@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (=>
          (not (= px@433@01 val_int@409@01))
          (and
            (not (= px@433@01 val_int@409@01))
            (=>
              (<= 0 py@434@01)
              (and
                (<= 0 py@434@01)
                (or
                  (<
                    py@434@01
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (not
                    (<
                      py@434@01
                      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                        $Snap.unit
                        $Snap.unit)))))))
            (or (<= 0 py@434@01) (not (<= 0 py@434@01)))))
        (or (not (= px@433@01 val_int@409@01)) (= px@433@01 val_int@409@01))))
    (or
      (<
        px@433@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          px@433@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or (<= 0 px@433@01) (not (<= 0 px@433@01))))
(push) ; 4
; [then-branch: 15 | 0 <= px@433@01 && px@433@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@433@01 != val_int@409@01 && 0 <= py@434@01 && py@434@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@434@01 != val_int@412@01 | live]
; [else-branch: 15 | !(0 <= px@433@01 && px@433@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@433@01 != val_int@409@01 && 0 <= py@434@01 && py@434@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@434@01 != val_int@412@01) | live]
(push) ; 5
; [then-branch: 15 | 0 <= px@433@01 && px@433@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@433@01 != val_int@409@01 && 0 <= py@434@01 && py@434@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@434@01 != val_int@412@01]
(assert (and
  (<= 0 px@433@01)
  (and
    (<
      px@433@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (and
      (not (= px@433@01 val_int@409@01))
      (and
        (<= 0 py@434@01)
        (and
          (<
            py@434@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not (= py@434@01 val_int@412@01))))))))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref), px, py) == old[l10](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_10.val_ref, px, py))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l10](_10.val_ref), px, py)
; [eval] old[l10](_10.val_ref)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] 0 <= _pure_3
; [eval] _pure_3 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@429@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))
(pop) ; 6
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@429@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))
; [eval] old[l10](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_10.val_ref, px, py))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_10.val_ref, px, py)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@404@01)) val_ref@421@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] 0 <= _pure_3
; [eval] _pure_3 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@404@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))
(pop) ; 6
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@404@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | !(0 <= px@433@01 && px@433@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@433@01 != val_int@409@01 && 0 <= py@434@01 && py@434@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@434@01 != val_int@412@01)]
(assert (not
  (and
    (<= 0 px@433@01)
    (and
      (<
        px@433@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (not (= px@433@01 val_int@409@01))
        (and
          (<= 0 py@434@01)
          (and
            (<
              py@434@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (not (= py@434@01 val_int@412@01)))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 px@433@01)
    (and
      (<
        px@433@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (not (= px@433@01 val_int@409@01))
        (and
          (<= 0 py@434@01)
          (and
            (<
              py@434@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (not (= py@434@01 val_int@412@01)))))))
  (and
    (<= 0 px@433@01)
    (<
      px@433@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (not (= px@433@01 val_int@409@01))
    (<= 0 py@434@01)
    (<
      py@434@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (not (= py@434@01 val_int@412@01))
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
      $t@429@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01)
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
      ($Snap.second $t@404@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 px@433@01)
      (and
        (<
          px@433@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (not (= px@433@01 val_int@409@01))
          (and
            (<= 0 py@434@01)
            (and
              (<
                py@434@01
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (not (= py@434@01 val_int@412@01))))))))
  (and
    (<= 0 px@433@01)
    (and
      (<
        px@433@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (not (= px@433@01 val_int@409@01))
        (and
          (<= 0 py@434@01)
          (and
            (<
              py@434@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (not (= py@434@01 val_int@412@01)))))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((px@433@01 Int) (py@434@01 Int)) (!
  (and
    (=>
      (<= 0 px@433@01)
      (and
        (<= 0 px@433@01)
        (=>
          (<
            px@433@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (<
              px@433@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (=>
              (not (= px@433@01 val_int@409@01))
              (and
                (not (= px@433@01 val_int@409@01))
                (=>
                  (<= 0 py@434@01)
                  (and
                    (<= 0 py@434@01)
                    (or
                      (<
                        py@434@01
                        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                          $Snap.unit
                          $Snap.unit)))
                      (not
                        (<
                          py@434@01
                          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                            $Snap.unit
                            $Snap.unit)))))))
                (or (<= 0 py@434@01) (not (<= 0 py@434@01)))))
            (or (not (= px@433@01 val_int@409@01)) (= px@433@01 val_int@409@01))))
        (or
          (<
            px@433@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              px@433@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or (<= 0 px@433@01) (not (<= 0 px@433@01)))
    (=>
      (and
        (<= 0 px@433@01)
        (and
          (<
            px@433@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (not (= px@433@01 val_int@409@01))
            (and
              (<= 0 py@434@01)
              (and
                (<
                  py@434@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not (= py@434@01 val_int@412@01)))))))
      (and
        (<= 0 px@433@01)
        (<
          px@433@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not (= px@433@01 val_int@409@01))
        (<= 0 py@434@01)
        (<
          py@434@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not (= py@434@01 val_int@412@01))
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
          $t@429@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01)
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@404@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01)))
    (or
      (not
        (and
          (<= 0 px@433@01)
          (and
            (<
              px@433@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (and
              (not (= px@433@01 val_int@409@01))
              (and
                (<= 0 py@434@01)
                (and
                  (<
                    py@434@01
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (not (= py@434@01 val_int@412@01))))))))
      (and
        (<= 0 px@433@01)
        (and
          (<
            px@433@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (not (= px@433@01 val_int@409@01))
            (and
              (<= 0 py@434@01)
              (and
                (<
                  py@434@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not (= py@434@01 val_int@412@01)))))))))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap.combine
    $t@429@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Knights_tour.rs.vpr@1882@305@1882@1017-aux|)))
(assert (forall ((px@433@01 Int) (py@434@01 Int)) (!
  (and
    (=>
      (<= 0 px@433@01)
      (and
        (<= 0 px@433@01)
        (=>
          (<
            px@433@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (<
              px@433@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (=>
              (not (= px@433@01 val_int@409@01))
              (and
                (not (= px@433@01 val_int@409@01))
                (=>
                  (<= 0 py@434@01)
                  (and
                    (<= 0 py@434@01)
                    (or
                      (<
                        py@434@01
                        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                          $Snap.unit
                          $Snap.unit)))
                      (not
                        (<
                          py@434@01
                          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                            $Snap.unit
                            $Snap.unit)))))))
                (or (<= 0 py@434@01) (not (<= 0 py@434@01)))))
            (or (not (= px@433@01 val_int@409@01)) (= px@433@01 val_int@409@01))))
        (or
          (<
            px@433@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              px@433@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or (<= 0 px@433@01) (not (<= 0 px@433@01)))
    (=>
      (and
        (<= 0 px@433@01)
        (and
          (<
            px@433@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (not (= px@433@01 val_int@409@01))
            (and
              (<= 0 py@434@01)
              (and
                (<
                  py@434@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not (= py@434@01 val_int@412@01)))))))
      (and
        (<= 0 px@433@01)
        (<
          px@433@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not (= px@433@01 val_int@409@01))
        (<= 0 py@434@01)
        (<
          py@434@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not (= py@434@01 val_int@412@01))
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
          $t@429@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01)
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@404@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01)))
    (or
      (not
        (and
          (<= 0 px@433@01)
          (and
            (<
              px@433@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (and
              (not (= px@433@01 val_int@409@01))
              (and
                (<= 0 py@434@01)
                (and
                  (<
                    py@434@01
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (not (= py@434@01 val_int@412@01))))))))
      (and
        (<= 0 px@433@01)
        (and
          (<
            px@433@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (not (= px@433@01 val_int@409@01))
            (and
              (<= 0 py@434@01)
              (and
                (<
                  py@434@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not (= py@434@01 val_int@412@01)))))))))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap.combine
    ($Snap.second $t@404@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Knights_tour.rs.vpr@1882@305@1882@1017-aux|)))
(assert (forall ((px@433@01 Int) (py@434@01 Int)) (!
  (=>
    (and
      (<= 0 px@433@01)
      (and
        (<
          px@433@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (not (= px@433@01 val_int@409@01))
          (and
            (<= 0 py@434@01)
            (and
              (<
                py@434@01
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (not (= py@434@01 val_int@412@01)))))))
    (=
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ ($Snap.combine
        $t@429@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01)
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ ($Snap.combine
        ($Snap.second $t@404@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01)))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap.combine
    $t@429@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap.combine
    ($Snap.second $t@404@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@421@01 px@433@01 py@434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Knights_tour.rs.vpr@1882@305@1882@1017|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l11
; [exec]
; label l12
; [exec]
; label bb3
; [exec]
; __t2 := true
; [exec]
; _14 := builtin$havoc_ref()
(declare-const ret@435@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_14.tuple_0, write)
(declare-const $t@436@01 $Ref)
(assert (not (= ret@435@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_14.tuple_0.val_int, write)
(declare-const $t@437@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@436@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_14.tuple_1, write)
(declare-const $t@438@01 $Ref)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_14.tuple_1.val_bool, write)
(declare-const $t@439@01 Bool)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@417@01 $t@438@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@438@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _14.tuple_0.val_int := _7.val_int + 1
; [eval] _7.val_int + 1
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@436@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; _14.tuple_1.val_bool := false
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@417@01 $t@438@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t70 := _14.tuple_1.val_bool
; [exec]
; assert !__t70
; [eval] !__t70
; [exec]
; label bb6
; [exec]
; __t3 := true
; [exec]
; _7 := _14.tuple_0
; [exec]
; label l13
; [exec]
; _16 := builtin$havoc_int()
(declare-const ret@440@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@441@01 $Snap)
(assert (= $t@441@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _16 := _7.val_int
; [exec]
; label l14
; [exec]
; label l15
; [exec]
; _18 := builtin$havoc_ref()
(declare-const ret@442@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(_18), write)
(declare-const $t@443@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@442@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@442@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_18), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@442@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@442@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@442@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@442@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@442@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@442@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@442@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@443@01) ret@442@01))
; [exec]
; inhale _18.val_int ==
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(declare-const $t@444@01 $Snap)
(assert (= $t@444@01 $Snap.unit))
; [eval] _18.val_int == m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  $t@443@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb7
; [exec]
; __t4 := true
; [exec]
; label l16
; [exec]
; _19 := builtin$havoc_ref()
(declare-const ret@445@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(_19), write)
(declare-const $t@446@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_19), write)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@445@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@446@01) ret@445@01))
; [exec]
; inhale _19.val_int ==
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(declare-const $t@447@01 $Snap)
(assert (= $t@447@01 $Snap.unit))
; [eval] _19.val_int == m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  $t@446@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb8
; [exec]
; __t5 := true
; [exec]
; _20 := builtin$havoc_ref()
(declare-const ret@448@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_20.tuple_0, write)
(declare-const $t@449@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@448@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@448@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_20.tuple_0.val_int, write)
(declare-const $t@450@01 Int)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@436@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@449@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_20.tuple_1, write)
(declare-const $t@451@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@448@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_20.tuple_1.val_bool, write)
(declare-const $t@452@01 Bool)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@451@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@417@01 $t@451@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@451@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _20.tuple_0.val_int := _18.val_int * _19.val_int
; [eval] _18.val_int * _19.val_int
(declare-const val_int@453@01 Int)
(assert (= val_int@453@01 (* $t@443@01 $t@446@01)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@436@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@410@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@407@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@449@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; _20.tuple_1.val_bool := false
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@451@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@417@01 $t@451@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t71 := _20.tuple_1.val_bool
; [exec]
; assert !__t71
; [eval] !__t71
; [exec]
; label bb9
; [exec]
; __t6 := true
; [exec]
; _17 := _20.tuple_0
; [exec]
; label l17
; [exec]
; _15 := builtin$havoc_ref()
(declare-const ret@454@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_15.val_bool, write)
(declare-const $t@455@01 Bool)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@454@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@454@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@454@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@454@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _15.val_bool := _16 <= _17.val_int
; [eval] _16 <= _17.val_int
(declare-const val_bool@456@01 Bool)
(assert (= val_bool@456@01 (<= 2 val_int@453@01)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@454@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@454@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@454@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label loop10_start
; [exec]
; label loop10_group1_bb10
; [exec]
; __t7 := true
; [exec]
; _22 := builtin$havoc_ref()
(declare-const ret@457@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_22.val_bool, write)
(declare-const $t@458@01 Bool)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@454@01 ret@457@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@457@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@457@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@457@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@457@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _22.val_bool := _15.val_bool
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@454@01 ret@457@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@457@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@457@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@457@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l18
; [exec]
; __t72 := _22.val_bool
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not val_bool@456@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not val_bool@456@01))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | val_bool@456@01 | live]
; [else-branch: 16 | !(val_bool@456@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 16 | val_bool@456@01]
(assert val_bool@456@01)
; [exec]
; label l20
; [exec]
; label loop10_group2_bb12
; [exec]
; __t8 := true
; [exec]
; __t73 := false
; [exec]
; label loop10_inv_pre
; [exec]
; fold acc(bool(_8), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap false) ret@417@01))
; [exec]
; fold acc(i32(_4.f$y), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@412@01) ret@410@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@410@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@410@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_4.f$x), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@409@01) ret@407@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@410@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@407@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@407@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($SortWrappers.$RefTo$Snap ret@407@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap val_int@409@01)
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap ret@410@01)
      ($SortWrappers.IntTo$Snap val_int@412@01)))) ret@413@01))
; [exec]
; fold acc(i32(_7), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap 2) $t@436@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  $t@436@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) $t@436@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(bool(_15), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap val_bool@456@01) ret@454@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@454@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write)
(assert (m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($Snap.first $t@404@01)
  $t@429@01) ret@402@01))
; [exec]
; assert 0 <=
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) &&
;   ((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) <
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;   (0 <=
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) &&
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) <
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] 0 <= (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@407@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@407@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@436@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@410@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@410@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [exec]
; exhale acc(bool(_8), write) &&
;   (acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) &&
;   (acc(i32(_7), write) &&
;   (acc(bool(_15), write) &&
;   acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write))))
; [exec]
; _107 := builtin$havoc_ref()
(declare-const ret@459@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __t45 := builtin$havoc_bool()
(declare-const ret@460@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t85 := builtin$havoc_bool()
(declare-const ret@461@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _138 := builtin$havoc_ref()
(declare-const ret@462@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _133 := builtin$havoc_ref()
(declare-const ret@463@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t80 := builtin$havoc_bool()
(declare-const ret@464@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t92 := builtin$havoc_bool()
(declare-const ret@465@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _4 := builtin$havoc_ref()
(declare-const ret@466@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t91 := builtin$havoc_bool()
(declare-const ret@467@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _95 := builtin$havoc_ref()
(declare-const ret@468@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _115 := builtin$havoc_ref()
(declare-const ret@469@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t35 := builtin$havoc_bool()
(declare-const ret@470@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _36 := builtin$havoc_ref()
(declare-const ret@471@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t16 := builtin$havoc_bool()
(declare-const ret@472@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _113 := builtin$havoc_ref()
(declare-const ret@473@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t33 := builtin$havoc_bool()
(declare-const ret@474@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _84 := builtin$havoc_ref()
(declare-const ret@475@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _81 := builtin$havoc_int()
(declare-const ret@476@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t87 := builtin$havoc_int()
(declare-const ret@477@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t54 := builtin$havoc_bool()
(declare-const ret@478@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t56 := builtin$havoc_bool()
(declare-const ret@479@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _67 := builtin$havoc_ref()
(declare-const ret@480@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t53 := builtin$havoc_bool()
(declare-const ret@481@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t75 := builtin$havoc_bool()
(declare-const ret@482@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _117 := builtin$havoc_ref()
(declare-const ret@483@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t20 := builtin$havoc_bool()
(declare-const ret@484@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t44 := builtin$havoc_bool()
(declare-const ret@485@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t23 := builtin$havoc_bool()
(declare-const ret@486@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _135 := builtin$havoc_int()
(declare-const ret@487@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t82 := builtin$havoc_bool()
(declare-const ret@488@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t78 := builtin$havoc_bool()
(declare-const ret@489@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _41 := builtin$havoc_ref()
(declare-const ret@490@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t17 := builtin$havoc_bool()
(declare-const ret@491@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t59 := builtin$havoc_bool()
(declare-const ret@492@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _40 := builtin$havoc_ref()
(declare-const ret@493@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t84 := builtin$havoc_bool()
(declare-const ret@494@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _43 := builtin$havoc_ref()
(declare-const ret@495@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t30 := builtin$havoc_bool()
(declare-const ret@496@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _123 := builtin$havoc_ref()
(declare-const ret@497@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _38 := builtin$havoc_int()
(declare-const ret@498@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _75 := builtin$havoc_ref()
(declare-const ret@499@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t93 := builtin$havoc_bool()
(declare-const ret@500@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t48 := builtin$havoc_bool()
(declare-const ret@501@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _134 := builtin$havoc_ref()
(declare-const ret@502@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t10 := builtin$havoc_bool()
(declare-const ret@503@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _80 := builtin$havoc_int()
(declare-const ret@504@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _132 := builtin$havoc_ref()
(declare-const ret@505@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _42 := builtin$havoc_ref()
(declare-const ret@506@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _64 := builtin$havoc_ref()
(declare-const ret@507@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _79 := builtin$havoc_ref()
(declare-const ret@508@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t77 := builtin$havoc_bool()
(declare-const ret@509@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _139 := builtin$havoc_ref()
(declare-const ret@510@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t55 := builtin$havoc_bool()
(declare-const ret@511@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _92 := builtin$havoc_ref()
(declare-const ret@512@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _68 := builtin$havoc_ref()
(declare-const ret@513@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _71 := builtin$havoc_ref()
(declare-const ret@514@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _15 := builtin$havoc_ref()
(declare-const ret@515@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _119 := builtin$havoc_int()
(declare-const ret@516@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t13 := builtin$havoc_bool()
(declare-const ret@517@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _127 := builtin$havoc_ref()
(declare-const ret@518@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _88 := builtin$havoc_ref()
(declare-const ret@519@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t26 := builtin$havoc_bool()
(declare-const ret@520@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _121 := builtin$havoc_ref()
(declare-const ret@521@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _91 := builtin$havoc_ref()
(declare-const ret@522@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t43 := builtin$havoc_bool()
(declare-const ret@523@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t58 := builtin$havoc_bool()
(declare-const ret@524@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t19 := builtin$havoc_bool()
(declare-const ret@525@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _37 := builtin$havoc_ref()
(declare-const ret@526@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _73 := builtin$havoc_ref()
(declare-const ret@527@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _63 := builtin$havoc_ref()
(declare-const ret@528@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t79 := builtin$havoc_bool()
(declare-const ret@529@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _124 := builtin$havoc_ref()
(declare-const ret@530@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _82 := builtin$havoc_ref()
(declare-const ret@531@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _77 := builtin$havoc_ref()
(declare-const ret@532@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t24 := builtin$havoc_bool()
(declare-const ret@533@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _136 := builtin$havoc_ref()
(declare-const ret@534@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t18 := builtin$havoc_bool()
(declare-const ret@535@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t15 := builtin$havoc_bool()
(declare-const ret@536@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _72 := builtin$havoc_ref()
(declare-const ret@537@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t9 := builtin$havoc_bool()
(declare-const ret@538@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _112 := builtin$havoc_int()
(declare-const ret@539@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t51 := builtin$havoc_bool()
(declare-const ret@540@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _118 := builtin$havoc_int()
(declare-const ret@541@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t22 := builtin$havoc_bool()
(declare-const ret@542@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t38 := builtin$havoc_bool()
(declare-const ret@543@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _116 := builtin$havoc_ref()
(declare-const ret@544@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _131 := builtin$havoc_ref()
(declare-const ret@545@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _89 := builtin$havoc_ref()
(declare-const ret@546@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _39 := builtin$havoc_int()
(declare-const ret@547@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t34 := builtin$havoc_bool()
(declare-const ret@548@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _93 := builtin$havoc_ref()
(declare-const ret@549@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _120 := builtin$havoc_ref()
(declare-const ret@550@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t31 := builtin$havoc_bool()
(declare-const ret@551@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _94 := builtin$havoc_ref()
(declare-const ret@552@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t8 := builtin$havoc_bool()
(declare-const ret@553@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t28 := builtin$havoc_bool()
(declare-const ret@554@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _76 := builtin$havoc_ref()
(declare-const ret@555@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t7 := builtin$havoc_bool()
(declare-const ret@556@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _104 := builtin$havoc_int()
(declare-const ret@557@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t57 := builtin$havoc_bool()
(declare-const ret@558@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _74 := builtin$havoc_ref()
(declare-const ret@559@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t42 := builtin$havoc_bool()
(declare-const ret@560@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _70 := builtin$havoc_ref()
(declare-const ret@561@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _128 := builtin$havoc_ref()
(declare-const ret@562@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t39 := builtin$havoc_bool()
(declare-const ret@563@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _34 := builtin$havoc_ref()
(declare-const ret@564@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _108 := builtin$havoc_int()
(declare-const ret@565@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t36 := builtin$havoc_bool()
(declare-const ret@566@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _111 := builtin$havoc_int()
(declare-const ret@567@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t49 := builtin$havoc_bool()
(declare-const ret@568@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _61 := builtin$havoc_ref()
(declare-const ret@569@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t14 := builtin$havoc_bool()
(declare-const ret@570@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t52 := builtin$havoc_bool()
(declare-const ret@571@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t60 := builtin$havoc_bool()
(declare-const ret@572@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t83 := builtin$havoc_bool()
(declare-const ret@573@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _22 := builtin$havoc_ref()
(declare-const ret@574@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t50 := builtin$havoc_bool()
(declare-const ret@575@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _129 := builtin$havoc_ref()
(declare-const ret@576@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t76 := builtin$havoc_bool()
(declare-const ret@577@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t61 := builtin$havoc_bool()
(declare-const ret@578@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _59 := builtin$havoc_ref()
(declare-const ret@579@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _114 := builtin$havoc_ref()
(declare-const ret@580@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t37 := builtin$havoc_bool()
(declare-const ret@581@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _69 := builtin$havoc_ref()
(declare-const ret@582@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t41 := builtin$havoc_bool()
(declare-const ret@583@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _90 := builtin$havoc_ref()
(declare-const ret@584@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t46 := builtin$havoc_bool()
(declare-const ret@585@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t90 := builtin$havoc_bool()
(declare-const ret@586@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t32 := builtin$havoc_bool()
(declare-const ret@587@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t21 := builtin$havoc_bool()
(declare-const ret@588@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _62 := builtin$havoc_ref()
(declare-const ret@589@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _83 := builtin$havoc_ref()
(declare-const ret@590@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _58 := builtin$havoc_ref()
(declare-const ret@591@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t88 := builtin$havoc_bool()
(declare-const ret@592@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t27 := builtin$havoc_bool()
(declare-const ret@593@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t74 := builtin$havoc_bool()
(declare-const ret@594@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _122 := builtin$havoc_int()
(declare-const ret@595@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _86 := builtin$havoc_int()
(declare-const ret@596@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _66 := builtin$havoc_ref()
(declare-const ret@597@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _23 := builtin$havoc_ref()
(declare-const ret@598@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _137 := builtin$havoc_ref()
(declare-const ret@599@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _24 := builtin$havoc_ref()
(declare-const ret@600@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t29 := builtin$havoc_bool()
(declare-const ret@601@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _105 := builtin$havoc_ref()
(declare-const ret@602@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _87 := builtin$havoc_ref()
(declare-const ret@603@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _85 := builtin$havoc_int()
(declare-const ret@604@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _106 := builtin$havoc_ref()
(declare-const ret@605@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t86 := builtin$havoc_bool()
(declare-const ret@606@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _141 := builtin$havoc_ref()
(declare-const ret@607@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t81 := builtin$havoc_bool()
(declare-const ret@608@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _65 := builtin$havoc_ref()
(declare-const ret@609@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t25 := builtin$havoc_bool()
(declare-const ret@610@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t11 := builtin$havoc_bool()
(declare-const ret@611@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _7 := builtin$havoc_ref()
(declare-const ret@612@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t40 := builtin$havoc_bool()
(declare-const ret@613@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t12 := builtin$havoc_bool()
(declare-const ret@614@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _109 := builtin$havoc_ref()
(declare-const ret@615@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _110 := builtin$havoc_ref()
(declare-const ret@616@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _78 := builtin$havoc_ref()
(declare-const ret@617@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _130 := builtin$havoc_ref()
(declare-const ret@618@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _140 := builtin$havoc_ref()
(declare-const ret@619@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _35 := builtin$havoc_ref()
(declare-const ret@620@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _60 := builtin$havoc_int()
(declare-const ret@621@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _126 := builtin$havoc_ref()
(declare-const ret@622@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t89 := builtin$havoc_bool()
(declare-const ret@623@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _125 := builtin$havoc_int()
(declare-const ret@624@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t47 := builtin$havoc_bool()
(declare-const ret@625@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; label loop10_inv_post
; [exec]
; inhale acc(bool(_8), write) &&
;   (acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) &&
;   (acc(i32(_7), write) &&
;   (acc(bool(_15), write) &&
;   acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write))))
(declare-const $t@626@01 $Snap)
(assert (= $t@626@01 ($Snap.combine ($Snap.first $t@626@01) ($Snap.second $t@626@01))))
(assert (=
  ($Snap.second $t@626@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@626@01))
    ($Snap.second ($Snap.second $t@626@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@626@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@626@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@626@01))))))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@612@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@612@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@626@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@626@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@626@01)))))))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@515@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@627@01 $Snap)
(assert (= $t@627@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$y), write) in
;       (unfolding acc(i32(_4.f$x), write) in
;         0 <= _4.f$x.val_int &&
;         (_4.f$x.val_int <
;         m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;         (0 <= _4.f$y.val_int &&
;         _4.f$y.val_int <
;         m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))))
(declare-const $t@628@01 $Snap)
(assert (= $t@628@01 $Snap.unit))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in (unfolding acc(i32(_4.f$x), write) in 0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))))
(set-option :timeout 0)
(push) ; 4
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.first ($Snap.second $t@626@01)) ret@466@01))
(assert (=
  ($Snap.first ($Snap.second $t@626@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@626@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
(assert (not (= ret@466@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@626@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$y), write) in (unfolding acc(i32(_4.f$x), write) in 0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))
(set-option :timeout 0)
(push) ; 5
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
    $Ref.null)))
; [eval] (unfolding acc(i32(_4.f$x), write) in 0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))
(set-option :timeout 0)
(push) ; 6
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
    $Ref.null)))
; [eval] 0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= _4.f$x.val_int
(set-option :timeout 0)
(push) ; 7
; [then-branch: 17 | !(0 <= First:(Second:(First:(Second:($t@626@01))))) | live]
; [else-branch: 17 | 0 <= First:(Second:(First:(Second:($t@626@01)))) | live]
(push) ; 8
; [then-branch: 17 | !(0 <= First:(Second:(First:(Second:($t@626@01)))))]
(assert (not
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 17 | 0 <= First:(Second:(First:(Second:($t@626@01))))]
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
; [eval] _4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 18 | !(First:(Second:(First:(Second:($t@626@01)))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 18 | First:(Second:(First:(Second:($t@626@01)))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 10
; [then-branch: 18 | !(First:(Second:(First:(Second:($t@626@01)))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 10
(push) ; 10
; [else-branch: 18 | First:(Second:(First:(Second:($t@626@01)))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= _4.f$y.val_int
(push) ; 11
; [then-branch: 19 | !(0 <= Second:(Second:(Second:(First:(Second:($t@626@01)))))) | live]
; [else-branch: 19 | 0 <= Second:(Second:(Second:(First:(Second:($t@626@01))))) | live]
(push) ; 12
; [then-branch: 19 | !(0 <= Second:(Second:(Second:(First:(Second:($t@626@01))))))]
(assert (not
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(pop) ; 12
(push) ; 12
; [else-branch: 19 | 0 <= Second:(Second:(Second:(First:(Second:($t@626@01)))))]
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))
; [eval] _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
  (not
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (or
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
      (not
        (<=
          0
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))))))
(assert (or
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
  (and
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
    (=>
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (or
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
          (not
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))))
    (or
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
  (not
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(pop) ; 6
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
      $Ref.null))
  (=>
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
    (not
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))))
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
      $Ref.null))
  (=>
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
    (not
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))))
(pop) ; 4
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.first ($Snap.second $t@626@01)) ret@466@01)
  (=
    ($Snap.first ($Snap.second $t@626@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@626@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
  (not (= ret@466@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@626@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
      $Ref.null))
  (=>
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
    (not
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))))))
(assert (and
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01))))))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb14
; [exec]
; __t9 := true
; [exec]
; _24 := builtin$havoc_ref()
(declare-const ret@629@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_24), write)
(declare-const $t@630@01 $Snap)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@629@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb15
; [exec]
; __t10 := true
; [exec]
; label l21
; [exec]
; _34 := builtin$havoc_ref()
(declare-const ret@631@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@632@01 $Snap)
(assert (= $t@632@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write)
(declare-const $t@633@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@634@01 $Snap)
(assert (= $t@634@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34) ==
;   0
(declare-const $t@635@01 $Snap)
(assert (= $t@635@01 $Snap.unit))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34) == 0
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34)
(set-option :timeout 0)
(push) ; 4
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@633@01
  $Snap.unit) ret@631@01))
(pop) ; 4
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@633@01
  $Snap.unit) ret@631@01))
(assert (=
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@633@01
    $Snap.unit) ret@631@01)
  0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l22
; [exec]
; label loop10_group3_bb16
; [exec]
; __t11 := true
; [exec]
; label l23
; [exec]
; _35 := builtin$havoc_ref()
(declare-const ret@636@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@637@01 $Snap)
(assert (= $t@637@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_35), write)
(declare-const $t@638@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@639@01 $Snap)
(assert (= $t@639@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@640@01 $Snap)
(assert (= $t@640@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l24
; [exec]
; label loop10_group3_bb17
; [exec]
; __t12 := true
; [exec]
; _36 := builtin$havoc_ref()
(declare-const ret@641@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_36.val_int, write)
(declare-const $t@642@01 Int)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@641@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _36.val_int := 0
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; _38 := builtin$havoc_int()
(declare-const ret@643@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@644@01 $Snap)
(assert (= $t@644@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _38 := _36.val_int
; [exec]
; label l25
; [exec]
; _40 := builtin$havoc_ref()
(declare-const ret@645@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_40.val_ref, write)
(declare-const $t@646@01 $Ref)
(assert (not (= ret@645@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _40.val_ref := _35
; [exec]
; exhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_35), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_40.val_ref), read$())
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $t@647@01 $Snap)
(declare-const $t@648@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@648@01 $t@638@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@648@01 $t@647@01))))
(assert (<=
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    (read$ $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l26
; [exec]
; label l27
; [exec]
; _39 := builtin$havoc_int()
(declare-const ret@649@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale _39 >= 0
(declare-const $t@650@01 $Snap)
(assert (= $t@650@01 $Snap.unit))
; [eval] _39 >= 0
(assert (>= ret@649@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale _39 >= 0
(declare-const $t@651@01 $Snap)
(assert (= $t@651@01 $Snap.unit))
; [eval] _39 >= 0
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale _39 ==
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_40.val_ref)
(declare-const $t@652@01 $Snap)
(assert (= $t@652@01 $Snap.unit))
; [eval] _39 == m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_40.val_ref)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_40.val_ref)
(set-option :timeout 0)
(push) ; 4
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@648@01
  $Snap.unit) ret@636@01))
(pop) ; 4
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@648@01
  $Snap.unit) ret@636@01))
(assert (=
  ret@649@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@648@01
    $Snap.unit) ret@636@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l28
; [eval] __t12 && __t12
(set-option :timeout 0)
(push) ; 4
; [then-branch: 20 | False | live]
; [else-branch: 20 | True | live]
(push) ; 5
; [then-branch: 20 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 20 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | True | live]
; [else-branch: 21 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 21 | True]
; [exec]
; exhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(old[l26](_40.val_ref)), read$())
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] old[l26](_40.val_ref)
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_35), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $t@653@01 $Snap)
(declare-const $t@654@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@654@01 $t@648@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@654@01 $t@653@01))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    (- $Perm.Write (read$ $Snap.unit)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb19
; [exec]
; __t13 := true
; [exec]
; _37 := builtin$havoc_ref()
(declare-const ret@655@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_37.val_bool, write)
(declare-const $t@656@01 Bool)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@655@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _37.val_bool := _38 < _39
; [eval] _38 < _39
(declare-const val_bool@657@01 Bool)
(assert (= val_bool@657@01 (< 0 ret@649@01)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; label loop10_group3_loop22_start
; [exec]
; label loop10_group3_loop22_group1_bb22
; [exec]
; __t14 := true
; [exec]
; _42 := builtin$havoc_ref()
(declare-const ret@658@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_42.val_bool, write)
(declare-const $t@659@01 Bool)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@658@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _42.val_bool := _37.val_bool
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@658@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l29
; [exec]
; __t74 := _42.val_bool
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not val_bool@657@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not val_bool@657@01))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | val_bool@657@01 | live]
; [else-branch: 22 | !(val_bool@657@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 22 | val_bool@657@01]
(assert val_bool@657@01)
; [exec]
; label l31
; [exec]
; label loop10_group3_loop22_group2_bb24
; [exec]
; __t15 := true
; [exec]
; __t75 := false
; [exec]
; label loop10_group3_loop22_inv_pre
; [exec]
; fold acc(usize(_36), write)
; [eval] 0 <= self.val_int
(assert (usize%trigger ($Snap.combine ($SortWrappers.IntTo$Snap 0) $Snap.unit) ret@641@01))
; [exec]
; fold acc(bool(_37), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap val_bool@657@01) ret@655@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@515@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert 0 <= (unfolding acc(usize(_36), write) in _36.val_int) &&
;   ((unfolding acc(usize(_36), write) in _36.val_int) <
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35) &&
;   (0 <=
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) &&
;   ((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) <
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;   (0 <=
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) &&
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) <
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))
; [eval] 0 <= (unfolding acc(usize(_36), write) in _36.val_int)
; [eval] (unfolding acc(usize(_36), write) in _36.val_int)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
(pop) ; 6
; Joined path conditions
; [eval] (unfolding acc(usize(_36), write) in _36.val_int) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35)
; [eval] (unfolding acc(usize(_36), write) in _36.val_int)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@641@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
(pop) ; 6
; Joined path conditions
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@654@01
  $Snap.unit) ret@636@01))
(pop) ; 6
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@654@01
  $Snap.unit) ret@636@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@654@01
    $Snap.unit) ret@636@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@654@01
    $Snap.unit) ret@636@01)))
; [eval] 0 <= (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
; [eval] 0 <= (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second $t@626@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@626@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
; [exec]
; exhale acc(usize(_36), write) &&
;   (acc(bool(_37), write) &&
;   (acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_35), write) &&
;   (acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) &&
;   (acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write) &&
;   acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write)))))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; _62 := builtin$havoc_ref()
(declare-const ret@660@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _67 := builtin$havoc_ref()
(declare-const ret@661@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _73 := builtin$havoc_ref()
(declare-const ret@662@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t20 := builtin$havoc_bool()
(declare-const ret@663@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t21 := builtin$havoc_bool()
(declare-const ret@664@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t27 := builtin$havoc_bool()
(declare-const ret@665@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t22 := builtin$havoc_bool()
(declare-const ret@666@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t23 := builtin$havoc_bool()
(declare-const ret@667@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _82 := builtin$havoc_ref()
(declare-const ret@668@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t19 := builtin$havoc_bool()
(declare-const ret@669@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _61 := builtin$havoc_ref()
(declare-const ret@670@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _78 := builtin$havoc_ref()
(declare-const ret@671@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _60 := builtin$havoc_int()
(declare-const ret@672@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _76 := builtin$havoc_ref()
(declare-const ret@673@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _80 := builtin$havoc_int()
(declare-const ret@674@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t16 := builtin$havoc_bool()
(declare-const ret@675@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t76 := builtin$havoc_bool()
(declare-const ret@676@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _63 := builtin$havoc_ref()
(declare-const ret@677@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _43 := builtin$havoc_ref()
(declare-const ret@678@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _71 := builtin$havoc_ref()
(declare-const ret@679@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t26 := builtin$havoc_bool()
(declare-const ret@680@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t15 := builtin$havoc_bool()
(declare-const ret@681@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t29 := builtin$havoc_bool()
(declare-const ret@682@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t79 := builtin$havoc_bool()
(declare-const ret@683@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _74 := builtin$havoc_ref()
(declare-const ret@684@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _58 := builtin$havoc_ref()
(declare-const ret@685@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _66 := builtin$havoc_ref()
(declare-const ret@686@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _68 := builtin$havoc_ref()
(declare-const ret@687@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t28 := builtin$havoc_bool()
(declare-const ret@688@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t77 := builtin$havoc_bool()
(declare-const ret@689@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _23 := builtin$havoc_ref()
(declare-const ret@690@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t17 := builtin$havoc_bool()
(declare-const ret@691@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _69 := builtin$havoc_ref()
(declare-const ret@692@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _36 := builtin$havoc_ref()
(declare-const ret@693@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t78 := builtin$havoc_bool()
(declare-const ret@694@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _77 := builtin$havoc_ref()
(declare-const ret@695@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _81 := builtin$havoc_int()
(declare-const ret@696@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _70 := builtin$havoc_ref()
(declare-const ret@697@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _42 := builtin$havoc_ref()
(declare-const ret@698@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t24 := builtin$havoc_bool()
(declare-const ret@699@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _59 := builtin$havoc_ref()
(declare-const ret@700@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _64 := builtin$havoc_ref()
(declare-const ret@701@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t25 := builtin$havoc_bool()
(declare-const ret@702@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _75 := builtin$havoc_ref()
(declare-const ret@703@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _65 := builtin$havoc_ref()
(declare-const ret@704@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _79 := builtin$havoc_ref()
(declare-const ret@705@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _72 := builtin$havoc_ref()
(declare-const ret@706@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t18 := builtin$havoc_bool()
(declare-const ret@707@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t14 := builtin$havoc_bool()
(declare-const ret@708@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop22_inv_post
; [exec]
; inhale acc(usize(_36), write) &&
;   (acc(bool(_37), write) &&
;   (acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_35), write) &&
;   (acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) &&
;   (acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write) &&
;   acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write)))))
(declare-const $t@709@01 $Snap)
(assert (= $t@709@01 ($Snap.combine ($Snap.first $t@709@01) ($Snap.second $t@709@01))))
(assert (=
  ($Snap.second $t@709@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@709@01))
    ($Snap.second ($Snap.second $t@709@01)))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@515@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@709@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@709@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@709@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@710@01 $Snap)
(assert (= $t@710@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$y), write) in
;       (unfolding acc(i32(_4.f$x), write) in
;         (unfolding acc(usize(_36), write) in
;           0 <= _36.val_int &&
;           (_36.val_int <
;           m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35) &&
;           (0 <= _4.f$x.val_int &&
;           (_4.f$x.val_int <
;           m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;           (0 <= _4.f$y.val_int &&
;           _4.f$y.val_int <
;           m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))))))
(declare-const $t@711@01 $Snap)
(assert (= $t@711@01 $Snap.unit))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in (unfolding acc(i32(_4.f$x), write) in (unfolding acc(usize(_36), write) in 0 <= _36.val_int && (_36.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35) && (0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))))))
(set-option :timeout 0)
(push) ; 6
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))) ret@466@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$y), write) in (unfolding acc(i32(_4.f$x), write) in (unfolding acc(usize(_36), write) in 0 <= _36.val_int && (_36.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35) && (0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))))))
(set-option :timeout 0)
(push) ; 7
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
    $Ref.null)))
; [eval] (unfolding acc(i32(_4.f$x), write) in (unfolding acc(usize(_36), write) in 0 <= _36.val_int && (_36.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35) && (0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))))
(set-option :timeout 0)
(push) ; 8
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
    $Ref.null)))
; [eval] (unfolding acc(usize(_36), write) in 0 <= _36.val_int && (_36.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35) && (0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))))
(set-option :timeout 0)
(push) ; 9
(assert (usize%trigger ($Snap.first $t@709@01) ret@693@01))
(assert (=
  ($Snap.first $t@709@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@709@01))
    ($Snap.second ($Snap.first $t@709@01)))))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
  ret@693@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
  ret@693@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@693@01 $Ref.null)))
(assert (= ($Snap.second ($Snap.first $t@709@01)) $Snap.unit))
; [eval] 0 <= self.val_int
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))))
; [eval] 0 <= _36.val_int && (_36.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35) && (0 <= _4.f$x.val_int && (_4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _4.f$y.val_int && _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))
; [eval] 0 <= _36.val_int
(set-option :timeout 0)
(push) ; 10
; [then-branch: 23 | !(0 <= First:(First:($t@709@01))) | live]
; [else-branch: 23 | 0 <= First:(First:($t@709@01)) | live]
(push) ; 11
; [then-branch: 23 | !(0 <= First:(First:($t@709@01)))]
(assert (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))))
(pop) ; 11
(push) ; 11
; [else-branch: 23 | 0 <= First:(First:($t@709@01))]
; [eval] _36.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
  $Snap.unit) ret@636@01))
(pop) ; 12
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
  $Snap.unit) ret@636@01))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 24 | !(First:(First:($t@709@01)) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:($t@709@01))), _), ret@636@01)) | live]
; [else-branch: 24 | First:(First:($t@709@01)) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:($t@709@01))), _), ret@636@01) | live]
(push) ; 13
; [then-branch: 24 | !(First:(First:($t@709@01)) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:($t@709@01))), _), ret@636@01))]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
      $Snap.unit) ret@636@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 24 | First:(First:($t@709@01)) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:($t@709@01))), _), ret@636@01)]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
    $Snap.unit) ret@636@01)))
; [eval] 0 <= _4.f$x.val_int
(push) ; 14
; [then-branch: 25 | !(0 <= First:(Second:(First:(Second:(Second:(Second:($t@709@01))))))) | live]
; [else-branch: 25 | 0 <= First:(Second:(First:(Second:(Second:(Second:($t@709@01)))))) | live]
(push) ; 15
; [then-branch: 25 | !(0 <= First:(Second:(First:(Second:(Second:(Second:($t@709@01)))))))]
(assert (not
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))
(pop) ; 15
(push) ; 15
; [else-branch: 25 | 0 <= First:(Second:(First:(Second:(Second:(Second:($t@709@01))))))]
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
; [eval] _4.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
; [then-branch: 26 | !(First:(Second:(First:(Second:(Second:(Second:($t@709@01)))))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 26 | First:(Second:(First:(Second:(Second:(Second:($t@709@01)))))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 17
; [then-branch: 26 | !(First:(Second:(First:(Second:(Second:(Second:($t@709@01)))))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 17
(push) ; 17
; [else-branch: 26 | First:(Second:(First:(Second:(Second:(Second:($t@709@01)))))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= _4.f$y.val_int
(push) ; 18
; [then-branch: 27 | !(0 <= Second:(Second:(Second:(First:(Second:(Second:(Second:($t@709@01)))))))) | live]
; [else-branch: 27 | 0 <= Second:(Second:(Second:(First:(Second:(Second:(Second:($t@709@01))))))) | live]
(push) ; 19
; [then-branch: 27 | !(0 <= Second:(Second:(Second:(First:(Second:(Second:(Second:($t@709@01))))))))]
(assert (not
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(pop) ; 19
(push) ; 19
; [else-branch: 27 | 0 <= Second:(Second:(Second:(First:(Second:(Second:(Second:($t@709@01)))))))]
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))
; [eval] _4.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
  (not
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (or
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
      (not
        (<=
          0
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))))
(assert (or
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
  (and
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
    (=>
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (or
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
          (not
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))))
    (or
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
  (not
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
      $Snap.unit) ret@636@01))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
        $Snap.unit) ret@636@01))
    (=>
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
      (and
        (<=
          0
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
        (=>
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (or
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
              (not
                (<=
                  0
                  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))))
        (or
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
      (not
        (<=
          0
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))))
(assert (or
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
      $Snap.unit) ret@636@01))
  (not
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
        $Snap.unit) ret@636@01)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
  (and
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
      $Snap.unit) ret@636@01)
    (=>
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
          $Snap.unit) ret@636@01))
      (and
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (=>
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
          (and
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (=>
              (<
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (and
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (or
                  (<=
                    0
                    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
                  (not
                    (<=
                      0
                      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))))
            (or
              (<
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (not
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))))))
        (or
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
          (not
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
    (or
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
          $Snap.unit) ret@636@01))
      (not
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01)))))))
(assert (or
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
  (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))))))
(pop) ; 9
; Joined path conditions
(assert (and
  (usize%trigger ($Snap.first $t@709@01) ret@693@01)
  (=
    ($Snap.first $t@709@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@709@01))
      ($Snap.second ($Snap.first $t@709@01))))
  (not (= ret@693@01 $Ref.null))
  (= ($Snap.second ($Snap.first $t@709@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
  (=>
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
    (and
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
        $Snap.unit) ret@636@01)
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
              $Snap.unit) ret@636@01))
          (=>
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (and
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
              (=>
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (and
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (or
                    (<=
                      0
                      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
                    (not
                      (<=
                        0
                        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))))
              (or
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))))))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
              $Snap.unit) ret@636@01))))))
  (or
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
    (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
      $Ref.null))
  (usize%trigger ($Snap.first $t@709@01) ret@693@01)
  (=
    ($Snap.first $t@709@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@709@01))
      ($Snap.second ($Snap.first $t@709@01))))
  (not (= ret@693@01 $Ref.null))
  (= ($Snap.second ($Snap.first $t@709@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
  (=>
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
    (and
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
        $Snap.unit) ret@636@01)
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
              $Snap.unit) ret@636@01))
          (=>
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (and
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
              (=>
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (and
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (or
                    (<=
                      0
                      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
                    (not
                      (<=
                        0
                        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))))
              (or
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))))))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
              $Snap.unit) ret@636@01))))))
  (or
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
    (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))))))
(pop) ; 7
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
      $Ref.null))
  (usize%trigger ($Snap.first $t@709@01) ret@693@01)
  (=
    ($Snap.first $t@709@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@709@01))
      ($Snap.second ($Snap.first $t@709@01))))
  (not (= ret@693@01 $Ref.null))
  (= ($Snap.second ($Snap.first $t@709@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
  (=>
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
    (and
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
        $Snap.unit) ret@636@01)
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
              $Snap.unit) ret@636@01))
          (=>
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (and
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
              (=>
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (and
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (or
                    (<=
                      0
                      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
                    (not
                      (<=
                        0
                        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))))
              (or
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))))))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
              $Snap.unit) ret@636@01))))))
  (or
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
    (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))))))
(pop) ; 6
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))) ret@466@01)
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
  (=
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
      $Ref.null))
  (usize%trigger ($Snap.first $t@709@01) ret@693@01)
  (=
    ($Snap.first $t@709@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@709@01))
      ($Snap.second ($Snap.first $t@709@01))))
  (not (= ret@693@01 $Ref.null))
  (= ($Snap.second ($Snap.first $t@709@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
  (=>
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
    (and
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
        $Snap.unit) ret@636@01)
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
              $Snap.unit) ret@636@01))
          (=>
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (and
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
              (=>
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (and
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (or
                    (<=
                      0
                      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
                    (not
                      (<=
                        0
                        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))))
              (or
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))))))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
            $Snap.unit) ret@636@01))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
              $Snap.unit) ret@636@01))))))
  (or
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
    (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))))))
(assert (and
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
        $Snap.unit) ret@636@01))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
      (and
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
          (<
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop22_group3_bb26
; [exec]
; __t16 := true
; [exec]
; _43 := builtin$havoc_ref()
(declare-const ret@712@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_43), write)
(declare-const $t@713@01 $Snap)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@712@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@712@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop22_group3_bb27
; [exec]
; __t17 := true
; [exec]
; _59 := builtin$havoc_ref()
(declare-const ret@714@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_59.val_ref, write)
(declare-const $t@715@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@714@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@714@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _59.val_ref := _35
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@714@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l32
; [exec]
; _60 := builtin$havoc_int()
(declare-const ret@716@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@717@01 $Snap)
(assert (= $t@717@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(usize(_36), write)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@693@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _60 := _36.val_int
(declare-const _60@718@01 Int)
(assert (= _60@718@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01)))))
; [exec]
; label l33
; [exec]
; label l34
; [exec]
; assert 0 <= _60 &&
;   _60 <
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_59.val_ref)
; [eval] 0 <= _60
(set-option :timeout 0)
(push) ; 6
(assert (not (<= 0 _60@718@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 _60@718@01))
; [eval] _60 < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_59.val_ref)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_59.val_ref)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
  $Snap.unit) ret@636@01))
(pop) ; 6
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
  $Snap.unit) ret@636@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  _60@718@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
    $Snap.unit) ret@636@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  _60@718@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@709@01)))
    $Snap.unit) ret@636@01)))
; [exec]
; assert _60 >= 0
; [eval] _60 >= 0
(push) ; 6
(assert (not (>= _60@718@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>= _60@718@01 0))
; [exec]
; assert true
; [exec]
; exhale acc(_59.val_ref, write) &&
;   (acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_59.val_ref), write) &&
;   _60 >= 0)
; [eval] _60 >= 0
; [exec]
; _58 := builtin$havoc_ref()
(declare-const ret@719@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(old[l34](_59.val_ref)), write)
; [eval] old[l34](_59.val_ref)
(declare-const $t@720@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple2$i32$i32(_58), write)
(declare-const $t@721@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@722@01 $Snap)
(assert (= $t@722@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@723@01 $Snap)
(assert (= $t@723@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label l35
; [exec]
; label l36
; [exec]
; label loop10_group3_loop22_group3_bb28
; [exec]
; __t18 := true
; [exec]
; _62 := builtin$havoc_ref()
(declare-const ret@724@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_62.val_ref, write)
(declare-const $t@725@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@724@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@724@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _62.val_ref := _4
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@724@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l37
; [exec]
; _64 := builtin$havoc_ref()
(declare-const ret@726@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_64.val_ref, write)
(declare-const $t@727@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@724@01 ret@726@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@726@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@726@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _64.val_ref := _58
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@724@01 ret@726@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@726@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l38
; [exec]
; _63 := builtin$havoc_ref()
(declare-const ret@728@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_63.val_ref, write)
(declare-const $t@729@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@728@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@724@01 ret@728@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@728@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@728@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _63.val_ref := _64.val_ref
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@728@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@724@01 ret@728@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@728@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l39
; [exec]
; label l40
; [exec]
; assert true
; [exec]
; exhale acc(_62.val_ref, write) &&
;   (acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) &&
;   (acc(_63.val_ref, write) && acc(tuple2$i32$i32(_63.val_ref), write)))
; [exec]
; _61 := builtin$havoc_ref()
(declare-const ret@730@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(old[l40](_62.val_ref)), write) &&
;   acc(tuple2$i32$i32(old[l40](_63.val_ref)), write)
(declare-const $t@731@01 $Snap)
(assert (= $t@731@01 ($Snap.combine ($Snap.first $t@731@01) ($Snap.second $t@731@01))))
; [eval] old[l40](_62.val_ref)
; [eval] old[l40](_63.val_ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_61), write)
(declare-const $t@732@01 $Snap)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@466@01 ret@730@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@733@01 $Snap)
(assert (= $t@733@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(old[l40](_62.val_ref)), write) in
;     (unfolding acc(i32(old[l40](_62.val_ref).f$y), write) in
;       (unfolding acc(i32(old[l40](_62.val_ref).f$x), write) in
;         old[l40](_62.val_ref).f$x.val_int ==
;         old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in
;           (unfolding acc(i32(_62.val_ref.f$x), write) in
;             _62.val_ref.f$x.val_int))) &&
;         old[l40](_62.val_ref).f$y.val_int ==
;         old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in
;           (unfolding acc(i32(_62.val_ref.f$y), write) in
;             _62.val_ref.f$y.val_int))))))
(declare-const $t@734@01 $Snap)
(assert (= $t@734@01 $Snap.unit))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(old[l40](_62.val_ref)), write) in (unfolding acc(i32(old[l40](_62.val_ref).f$y), write) in (unfolding acc(i32(old[l40](_62.val_ref).f$x), write) in old[l40](_62.val_ref).f$x.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$x), write) in _62.val_ref.f$x.val_int))) && old[l40](_62.val_ref).f$y.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$y), write) in _62.val_ref.f$y.val_int))))))
; [eval] old[l40](_62.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] old[l40](_62.val_ref)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.first $t@731@01) ret@466@01))
(assert (=
  ($Snap.first $t@731@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@731@01))
    ($Snap.second ($Snap.first $t@731@01)))))
(assert (=
  ($Snap.second ($Snap.first $t@731@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@731@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@731@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(old[l40](_62.val_ref).f$y), write) in (unfolding acc(i32(old[l40](_62.val_ref).f$x), write) in old[l40](_62.val_ref).f$x.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$x), write) in _62.val_ref.f$x.val_int))) && old[l40](_62.val_ref).f$y.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$y), write) in _62.val_ref.f$y.val_int)))))
; [eval] old[l40](_62.val_ref)
(set-option :timeout 0)
(push) ; 7
; [eval] old[l40](_62.val_ref)
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
    $Ref.null)))
; [eval] (unfolding acc(i32(old[l40](_62.val_ref).f$x), write) in old[l40](_62.val_ref).f$x.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$x), write) in _62.val_ref.f$x.val_int))) && old[l40](_62.val_ref).f$y.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$y), write) in _62.val_ref.f$y.val_int))))
; [eval] old[l40](_62.val_ref)
(set-option :timeout 0)
(push) ; 8
; [eval] old[l40](_62.val_ref)
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.first $t@731@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) $Ref.null)))
; [eval] old[l40](_62.val_ref).f$x.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$x), write) in _62.val_ref.f$x.val_int))) && old[l40](_62.val_ref).f$y.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$y), write) in _62.val_ref.f$y.val_int)))
; [eval] old[l40](_62.val_ref).f$x.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$x), write) in _62.val_ref.f$x.val_int)))
; [eval] old[l40](_62.val_ref)
; [eval] old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$x), write) in _62.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$x), write) in _62.val_ref.f$x.val_int))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_62.val_ref.f$x), write) in _62.val_ref.f$x.val_int)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
; [then-branch: 28 | First:(Second:(First:($t@731@01))) != First:(Second:(First:(Second:(Second:(Second:($t@709@01)))))) | live]
; [else-branch: 28 | First:(Second:(First:($t@731@01))) == First:(Second:(First:(Second:(Second:(Second:($t@709@01)))))) | live]
(push) ; 10
; [then-branch: 28 | First:(Second:(First:($t@731@01))) != First:(Second:(First:(Second:(Second:(Second:($t@709@01))))))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 28 | First:(Second:(First:($t@731@01))) == First:(Second:(First:(Second:(Second:(Second:($t@709@01))))))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
; [eval] old[l40](_62.val_ref).f$y.val_int == old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$y), write) in _62.val_ref.f$y.val_int)))
; [eval] old[l40](_62.val_ref)
; [eval] old[l40]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$y), write) in _62.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), write) in (unfolding acc(i32(_62.val_ref.f$y), write) in _62.val_ref.f$y.val_int))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_62.val_ref.f$y), write) in _62.val_ref.f$y.val_int)
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first $t@731@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
      $Ref.null))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
(pop) ; 7
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first $t@731@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
      $Ref.null))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
(pop) ; 6
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.first $t@731@01) ret@466@01)
  (=
    ($Snap.first $t@731@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@731@01))
      ($Snap.second ($Snap.first $t@731@01))))
  (=
    ($Snap.second ($Snap.first $t@731@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@731@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first $t@731@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.first $t@731@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
      $Ref.null))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))))))
(assert (and
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01))))))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l41
; [exec]
; label l42
; [exec]
; label loop10_group3_loop22_group3_bb30
; [exec]
; __t19 := true
; [exec]
; _67 := builtin$havoc_ref()
(declare-const ret@735@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_67.val_ref, write)
(declare-const $t@736@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@735@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@735@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@735@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _67.val_ref := _3
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@735@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@735@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l43
; [exec]
; _69 := builtin$havoc_ref()
(declare-const ret@737@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.val_ref, write)
(declare-const $t@738@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@735@01 ret@737@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@737@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@737@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@737@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _69.val_ref := _61
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@735@01 ret@737@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@737@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@737@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l44
; [exec]
; label l45
; [exec]
; assert true
; [exec]
; exhale acc(_69.val_ref, write) &&
;   acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write)
; [exec]
; _68 := builtin$havoc_ref()
(declare-const ret@739@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(old[l45](_69.val_ref)), write)
; [eval] old[l45](_69.val_ref)
(declare-const $t@740@01 $Snap)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@466@01 ret@730@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write)
(declare-const $t@741@01 $Snap)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@730@01 ret@739@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@466@01 ret@739@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@742@01 $Snap)
(assert (= $t@742@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(old[l45](_69.val_ref)), write) in
;     (unfolding acc(i32(old[l45](_69.val_ref).f$y), write) in
;       (unfolding acc(i32(old[l45](_69.val_ref).f$x), write) in
;         (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in
;           (unfolding acc(i32(_68.f$y), write) in
;             (unfolding acc(i32(_68.f$x), write) in
;               _68.f$x.val_int ==
;               old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in
;                 (unfolding acc(i32(_69.val_ref.f$x), write) in
;                   _69.val_ref.f$x.val_int))) &&
;               (_68.f$y.val_int ==
;               old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in
;                 (unfolding acc(i32(_69.val_ref.f$y), write) in
;                   _69.val_ref.f$y.val_int))) &&
;               (old[l45](_69.val_ref).f$x.val_int ==
;               old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in
;                 (unfolding acc(i32(_69.val_ref.f$x), write) in
;                   _69.val_ref.f$x.val_int))) &&
;               old[l45](_69.val_ref).f$y.val_int ==
;               old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in
;                 (unfolding acc(i32(_69.val_ref.f$y), write) in
;                   _69.val_ref.f$y.val_int)))))))))))
(declare-const $t@743@01 $Snap)
(assert (= $t@743@01 $Snap.unit))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(old[l45](_69.val_ref)), write) in (unfolding acc(i32(old[l45](_69.val_ref).f$y), write) in (unfolding acc(i32(old[l45](_69.val_ref).f$x), write) in (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && (_68.f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))) && (old[l45](_69.val_ref).f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && old[l45](_69.val_ref).f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)))))))))))
; [eval] old[l45](_69.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] old[l45](_69.val_ref)
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@740@01 ret@730@01))
(assert (= $t@740@01 ($Snap.combine ($Snap.first $t@740@01) ($Snap.second $t@740@01))))
(assert (not (= ret@730@01 $Ref.null)))
(assert (=
  ($Snap.second $t@740@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@740@01))
    ($Snap.second ($Snap.second $t@740@01)))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@740@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@740@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(old[l45](_69.val_ref).f$y), write) in (unfolding acc(i32(old[l45](_69.val_ref).f$x), write) in (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && (_68.f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))) && (old[l45](_69.val_ref).f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && old[l45](_69.val_ref).f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))))))))))
; [eval] old[l45](_69.val_ref)
(set-option :timeout 0)
(push) ; 7
; [eval] old[l45](_69.val_ref)
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@740@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01))))
    $Ref.null)))
; [eval] (unfolding acc(i32(old[l45](_69.val_ref).f$x), write) in (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && (_68.f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))) && (old[l45](_69.val_ref).f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && old[l45](_69.val_ref).f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)))))))))
; [eval] old[l45](_69.val_ref)
(set-option :timeout 0)
(push) ; 8
; [eval] old[l45](_69.val_ref)
(assert (i32%trigger ($Snap.first ($Snap.second $t@740@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01))))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)) $Ref.null)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && (_68.f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))) && (old[l45](_69.val_ref).f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && old[l45](_69.val_ref).f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))))))))
(set-option :timeout 0)
(push) ; 9
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@741@01 ret@739@01))
(assert (= $t@741@01 ($Snap.combine ($Snap.first $t@741@01) ($Snap.second $t@741@01))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@730@01 ret@739@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@739@01 $Ref.null)))
(assert (=
  ($Snap.second $t@741@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@741@01))
    ($Snap.second ($Snap.second $t@741@01)))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@741@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@741@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@741@01))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@730@01 ret@739@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_68.f$y), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && (_68.f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))) && (old[l45](_69.val_ref).f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && old[l45](_69.val_ref).f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)))))))
(set-option :timeout 0)
(push) ; 10
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@741@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01))))
    $Ref.null)))
; [eval] (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && (_68.f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))) && (old[l45](_69.val_ref).f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && old[l45](_69.val_ref).f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))))))
(set-option :timeout 0)
(push) ; 11
(assert (i32%trigger ($Snap.first ($Snap.second $t@741@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01))))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)) $Ref.null)))
; [eval] _68.f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && (_68.f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))) && (old[l45](_69.val_ref).f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))) && old[l45](_69.val_ref).f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)))))
; [eval] _68.f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int)))
; [eval] old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))
(set-option :timeout 0)
(push) ; 12
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@732@01 ret@730@01))
(assert (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01))))
(assert (=
  ($Snap.second $t@732@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@732@01))
    ($Snap.second ($Snap.second $t@732@01)))))
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@732@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@732@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@732@01))))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int)
(set-option :timeout 0)
(push) ; 13
(assert (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01))))
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null)))
(pop) ; 13
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null))))
(pop) ; 12
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@732@01 ret@730@01)
  (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01)))
  (=
    ($Snap.second $t@732@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@732@01))
      ($Snap.second ($Snap.second $t@732@01))))
  (=
    ($Snap.second ($Snap.second $t@732@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@732@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null))))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 29 | First:(Second:($t@741@01)) != First:(Second:($t@732@01)) | live]
; [else-branch: 29 | First:(Second:($t@741@01)) == First:(Second:($t@732@01)) | live]
(push) ; 13
; [then-branch: 29 | First:(Second:($t@741@01)) != First:(Second:($t@732@01))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))
(pop) ; 13
(push) ; 13
; [else-branch: 29 | First:(Second:($t@741@01)) == First:(Second:($t@732@01))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01)))))
; [eval] _68.f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)))
; [eval] old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)
(set-option :timeout 0)
(push) ; 15
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))))
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
    $Ref.null)))
(pop) ; 15
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
      $Ref.null))))
(pop) ; 14
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 14
; [then-branch: 30 | Second:(Second:(Second:($t@741@01))) != Second:(Second:(Second:($t@732@01))) | live]
; [else-branch: 30 | Second:(Second:(Second:($t@741@01))) == Second:(Second:(Second:($t@732@01))) | live]
(push) ; 15
; [then-branch: 30 | Second:(Second:(Second:($t@741@01))) != Second:(Second:(Second:($t@732@01)))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))))
(pop) ; 15
(push) ; 15
; [else-branch: 30 | Second:(Second:(Second:($t@741@01))) == Second:(Second:(Second:($t@732@01)))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01))))))
; [eval] old[l45](_69.val_ref).f$x.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int)))
; [eval] old[l45](_69.val_ref)
; [eval] old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int))
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_69.val_ref.f$x), write) in _69.val_ref.f$x.val_int)
(set-option :timeout 0)
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
; Joined path conditions
(pop) ; 16
; Joined path conditions
(set-option :timeout 0)
(push) ; 16
; [then-branch: 31 | First:(Second:($t@740@01)) != First:(Second:($t@732@01)) | live]
; [else-branch: 31 | First:(Second:($t@740@01)) == First:(Second:($t@732@01)) | live]
(push) ; 17
; [then-branch: 31 | First:(Second:($t@740@01)) != First:(Second:($t@732@01))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))
(pop) ; 17
(push) ; 17
; [else-branch: 31 | First:(Second:($t@740@01)) == First:(Second:($t@732@01))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01)))))
; [eval] old[l45](_69.val_ref).f$y.val_int == old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)))
; [eval] old[l45](_69.val_ref)
; [eval] old[l45]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_69.val_ref), write) in (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int))
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_69.val_ref.f$y), write) in _69.val_ref.f$y.val_int)
(set-option :timeout 0)
(push) ; 19
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
; Joined path conditions
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01)))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
    (or
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
      (not
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01)))))))))
(assert (or
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01))))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
        $Ref.null))
    (=>
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
      (and
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (or
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
          (not
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
    (or
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
      (not
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01))))))))))
(assert (or
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01)))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first ($Snap.second $t@741@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@732@01 ret@730@01)
  (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01)))
  (=
    ($Snap.second $t@732@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@732@01))
      ($Snap.second ($Snap.second $t@732@01))))
  (=
    ($Snap.second ($Snap.second $t@732@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@732@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null))
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
      (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
          $Ref.null))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
          (or
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
            (not
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
(pop) ; 10
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@741@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second $t@741@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@732@01 ret@730@01)
  (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01)))
  (=
    ($Snap.second $t@732@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@732@01))
      ($Snap.second ($Snap.second $t@732@01))))
  (=
    ($Snap.second ($Snap.second $t@732@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@732@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null))
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
      (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
          $Ref.null))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
          (or
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
            (not
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
(pop) ; 9
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@741@01 ret@739@01)
  (= $t@741@01 ($Snap.combine ($Snap.first $t@741@01) ($Snap.second $t@741@01)))
  (not (= ret@739@01 $Ref.null))
  (=
    ($Snap.second $t@741@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@741@01))
      ($Snap.second ($Snap.second $t@741@01))))
  (=
    ($Snap.second ($Snap.second $t@741@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@741@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@741@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second $t@741@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@732@01 ret@730@01)
  (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01)))
  (=
    ($Snap.second $t@732@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@732@01))
      ($Snap.second ($Snap.second $t@732@01))))
  (=
    ($Snap.second ($Snap.second $t@732@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@732@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null))
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
      (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
          $Ref.null))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
          (or
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
            (not
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first ($Snap.second $t@740@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@741@01 ret@739@01)
  (= $t@741@01 ($Snap.combine ($Snap.first $t@741@01) ($Snap.second $t@741@01)))
  (not (= ret@739@01 $Ref.null))
  (=
    ($Snap.second $t@741@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@741@01))
      ($Snap.second ($Snap.second $t@741@01))))
  (=
    ($Snap.second ($Snap.second $t@741@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@741@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@741@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second $t@741@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@732@01 ret@730@01)
  (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01)))
  (=
    ($Snap.second $t@732@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@732@01))
      ($Snap.second ($Snap.second $t@732@01))))
  (=
    ($Snap.second ($Snap.second $t@732@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@732@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null))
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
      (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
          $Ref.null))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
          (or
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
            (not
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
(pop) ; 7
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@740@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second $t@740@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@741@01 ret@739@01)
  (= $t@741@01 ($Snap.combine ($Snap.first $t@741@01) ($Snap.second $t@741@01)))
  (not (= ret@739@01 $Ref.null))
  (=
    ($Snap.second $t@741@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@741@01))
      ($Snap.second ($Snap.second $t@741@01))))
  (=
    ($Snap.second ($Snap.second $t@741@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@741@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@741@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second $t@741@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@732@01 ret@730@01)
  (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01)))
  (=
    ($Snap.second $t@732@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@732@01))
      ($Snap.second ($Snap.second $t@732@01))))
  (=
    ($Snap.second ($Snap.second $t@732@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@732@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null))
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
      (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
          $Ref.null))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
          (or
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
            (not
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
(pop) ; 6
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@740@01 ret@730@01)
  (= $t@740@01 ($Snap.combine ($Snap.first $t@740@01) ($Snap.second $t@740@01)))
  (not (= ret@730@01 $Ref.null))
  (=
    ($Snap.second $t@740@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@740@01))
      ($Snap.second ($Snap.second $t@740@01))))
  (=
    ($Snap.second ($Snap.second $t@740@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@740@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@740@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@740@01))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second $t@740@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@740@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@741@01 ret@739@01)
  (= $t@741@01 ($Snap.combine ($Snap.first $t@741@01) ($Snap.second $t@741@01)))
  (not (= ret@739@01 $Ref.null))
  (=
    ($Snap.second $t@741@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@741@01))
      ($Snap.second ($Snap.second $t@741@01))))
  (=
    ($Snap.second ($Snap.second $t@741@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@741@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@741@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second $t@741@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)) $Ref.null))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@732@01 ret@730@01)
  (= $t@732@01 ($Snap.combine ($Snap.first $t@732@01) ($Snap.second $t@732@01)))
  (=
    ($Snap.second $t@732@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@732@01))
      ($Snap.second ($Snap.second $t@732@01))))
  (=
    ($Snap.second ($Snap.second $t@732@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@732@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
  (i32%trigger ($Snap.first ($Snap.second $t@732@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@732@01)) $Ref.null))
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
      (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@732@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01)))))
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@732@01))))
          $Ref.null))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
          (or
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
            (not
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))))))
(assert (and
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@740@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@732@01))))
      (=
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@732@01)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l46
; [exec]
; label l47
; [exec]
; label loop10_group3_loop22_group3_bb32
; [exec]
; __t20 := true
; [exec]
; label l48
; [exec]
; assert true
; [exec]
; exhale acc(_67.val_ref, write) &&
;   (acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_67.val_ref), write) &&
;   acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write))
; [exec]
; _66 := builtin$havoc_ref()
(declare-const ret@744@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(old[l48](_67.val_ref)), write)
; [eval] old[l48](_67.val_ref)
(declare-const $t@745@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(bool(_66), write)
(declare-const $t@746@01 Bool)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@515@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@747@01 $Snap)
(assert (= $t@747@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(bool(_66), write) in
;     _66.val_bool ==>
;     0 <=
;     old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in
;       (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) &&
;     (old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in
;       (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) <
;     m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;     (0 <=
;     old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in
;       (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) &&
;     old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in
;       (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) <
;     m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))
(declare-const $t@748@01 $Snap)
(assert (= $t@748@01 $Snap.unit))
; [eval] (unfolding acc(bool(_66), write) in _66.val_bool ==> 0 <= old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) && (old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) && old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))
(set-option :timeout 0)
(push) ; 6
(assert (bool%trigger ($SortWrappers.BoolTo$Snap $t@746@01) ret@744@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@744@01 $Ref.null)))
; [eval] _66.val_bool ==> 0 <= old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) && (old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) && old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not $t@746@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not $t@746@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | $t@746@01 | live]
; [else-branch: 32 | !($t@746@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 32 | $t@746@01]
(assert $t@746@01)
; [eval] 0 <= old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) && (old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) && old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int)))
; [eval] old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
; [then-branch: 33 | !(0 <= First:(Second:($t@741@01))) | live]
; [else-branch: 33 | 0 <= First:(Second:($t@741@01)) | live]
(push) ; 10
; [then-branch: 33 | !(0 <= First:(Second:($t@741@01)))]
(assert (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))))
(pop) ; 10
(push) ; 10
; [else-branch: 33 | 0 <= First:(Second:($t@741@01))]
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))))
; [eval] old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_68.f$x), write) in _68.f$x.val_int)
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 34 | !(First:(Second:($t@741@01)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 34 | First:(Second:($t@741@01)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 12
; [then-branch: 34 | !(First:(Second:($t@741@01)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 12
(push) ; 12
; [else-branch: 34 | First:(Second:($t@741@01)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int)))
; [eval] old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
; [then-branch: 35 | !(0 <= Second:(Second:(Second:($t@741@01)))) | live]
; [else-branch: 35 | 0 <= Second:(Second:(Second:($t@741@01))) | live]
(push) ; 14
; [then-branch: 35 | !(0 <= Second:(Second:(Second:($t@741@01))))]
(assert (not
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))))
(pop) ; 14
(push) ; 14
; [else-branch: 35 | 0 <= Second:(Second:(Second:($t@741@01)))]
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))))
; [eval] old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] old[l48]((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int)))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_68), write) in (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int))
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@741@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_68.f$y), write) in _68.f$y.val_int)
(set-option :timeout 0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@741@01)))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(pop) ; 15
; Joined path conditions
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
  (not
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (or
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
      (not
        (<=
          0
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))))))))
(assert (or
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
  (and
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
    (=>
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (or
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
          (not
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))))))
    (or
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
  (not (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))))))
(pop) ; 8
(push) ; 8
; [else-branch: 32 | !($t@746@01)]
(assert (not $t@746@01))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  $t@746@01
  (and
    $t@746@01
    (=>
      (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
      (and
        (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
        (=>
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (or
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
              (not
                (<=
                  0
                  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))))))
        (or
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or
      (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
      (not
        (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))))))))
; Joined path conditions
(assert (or (not $t@746@01) $t@746@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (bool%trigger ($SortWrappers.BoolTo$Snap $t@746@01) ret@744@01)
  (not (= ret@744@01 $Ref.null))
  (=>
    $t@746@01
    (and
      $t@746@01
      (=>
        (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
        (and
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
          (=>
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (and
              (<
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (or
                (<=
                  0
                  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
                (not
                  (<=
                    0
                    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))))))
          (or
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (not
              (<
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))))))
      (or
        (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
        (not
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))))))
  (or (not $t@746@01) $t@746@01)))
(assert (=>
  $t@746@01
  (and
    (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01))))
    (and
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@741@01)))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<=
          0
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01)))))
        (<
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second $t@741@01))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l49
; [exec]
; label l50
; [exec]
; label loop10_group3_loop22_group3_bb35
; [exec]
; __t21 := true
; [exec]
; unfold acc(bool(_66), write)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@744@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; __t76 := _66.val_bool
; [eval] !__t76
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not $t@746@01))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not $t@746@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | !($t@746@01) | live]
; [else-branch: 36 | $t@746@01 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 36 | !($t@746@01)]
(assert (not $t@746@01))
; [exec]
; label l52
; [exec]
; label loop10_group3_loop22_group3_bb37
; [exec]
; __t26 := true
; [exec]
; _65 := builtin$havoc_ref()
(declare-const ret@749@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_65), write)
(declare-const $t@750@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@749@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@749@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@749@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l147
; [exec]
; label loop10_group3_loop22_group3_bb44
; [exec]
; __t27 := true
; [exec]
; _79 := builtin$havoc_ref()
(declare-const ret@751@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_79.tuple_0, write)
(declare-const $t@752@01 $Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@751@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@751@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@751@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_79.tuple_0.val_int, write)
(declare-const $t@753@01 Int)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@752@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_79.tuple_1, write)
(declare-const $t@754@01 $Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@751@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@751@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_79.tuple_1.val_bool, write)
(declare-const $t@755@01 Bool)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@754@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _79.tuple_0.val_int := _36.val_int + 1
; [eval] _36.val_int + 1
(declare-const val_int@756@01 Int)
(assert (=
  val_int@756@01
  (+ ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@709@01))) 1)))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; _79.tuple_1.val_bool := false
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@754@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t77 := _79.tuple_1.val_bool
; [exec]
; assert !__t77
; [eval] !__t77
; [exec]
; label loop10_group3_loop22_group3_bb45
; [exec]
; __t28 := true
; [exec]
; _36 := _79.tuple_0
; [exec]
; label l69
; [exec]
; _80 := builtin$havoc_int()
(declare-const ret@757@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@758@01 $Snap)
(assert (= $t@758@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _80 := _36.val_int
; [exec]
; label l70
; [exec]
; _82 := builtin$havoc_ref()
(declare-const ret@759@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_82.val_ref, write)
(declare-const $t@760@01 $Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@759@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@759@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@759@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _82.val_ref := _35
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@759@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@759@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_35), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_82.val_ref), read$())
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $t@761@01 $Snap)
(declare-const $t@762@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@762@01 $t@720@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@762@01 $t@761@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l71
; [exec]
; label l72
; [exec]
; _81 := builtin$havoc_int()
(declare-const ret@763@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale _81 >= 0
(declare-const $t@764@01 $Snap)
(assert (= $t@764@01 $Snap.unit))
; [eval] _81 >= 0
(assert (>= ret@763@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale _81 >= 0
(declare-const $t@765@01 $Snap)
(assert (= $t@765@01 $Snap.unit))
; [eval] _81 >= 0
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale _81 ==
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_82.val_ref)
(declare-const $t@766@01 $Snap)
(assert (= $t@766@01 $Snap.unit))
; [eval] _81 == m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_82.val_ref)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_82.val_ref)
(set-option :timeout 0)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@762@01
  $Snap.unit) ret@636@01))
(pop) ; 7
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@762@01
  $Snap.unit) ret@636@01))
(assert (=
  ret@763@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@762@01
    $Snap.unit) ret@636@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l73
; [eval] __t28 && __t28
(set-option :timeout 0)
(push) ; 7
; [then-branch: 37 | False | live]
; [else-branch: 37 | True | live]
(push) ; 8
; [then-branch: 37 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 37 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 38 | True]
; [exec]
; exhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(old[l71](_82.val_ref)), read$())
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] old[l71](_82.val_ref)
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_35), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const $t@767@01 $Snap)
(declare-const $t@768@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@768@01 $t@762@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@768@01 $t@767@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop22_group3_bb46
; [exec]
; __t29 := true
; [exec]
; unfold acc(bool(_37), write)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bool%trigger ($Snap.first ($Snap.second $t@709@01)) ret@655@01))
; [exec]
; _37.val_bool := _80 < _81
; [eval] _80 < _81
(declare-const val_bool@769@01 Bool)
(assert (= val_bool@769@01 (< val_int@756@01 ret@763@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; _23 := builtin$havoc_ref()
(declare-const ret@770@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_23), write)
(declare-const $t@771@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@770@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@770@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@770@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@770@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop22_group4_bb22
; [exec]
; __t14 := true
; [exec]
; _42 := builtin$havoc_ref()
(declare-const ret@772@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_42.val_bool, write)
(declare-const $t@773@01 Bool)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@772@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _42.val_bool := _37.val_bool
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@772@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l74
; [exec]
; __t78 := _42.val_bool
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not val_bool@769@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not val_bool@769@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | val_bool@769@01 | live]
; [else-branch: 39 | !(val_bool@769@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 39 | val_bool@769@01]
(assert val_bool@769@01)
; [exec]
; label l76
; [exec]
; label loop10_group3_loop22_group5_bb24
; [exec]
; __t15 := true
; [exec]
; __t79 := false
; [exec]
; label loop10_group3_loop22_end_body
; [exec]
; fold acc(usize(_36), write)
; [eval] 0 <= self.val_int
(push) ; 9
(assert (not (<= 0 val_int@756@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@756@01))
(assert (usize%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap val_int@756@01)
  $Snap.unit) $t@752@01))
; [exec]
; fold acc(bool(_37), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap val_bool@769@01) ret@655@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@515@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@655@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert 0 <= (unfolding acc(usize(_36), write) in _36.val_int) &&
;   ((unfolding acc(usize(_36), write) in _36.val_int) <
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35) &&
;   (0 <=
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) &&
;   ((unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) <
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;   (0 <=
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) &&
;   (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in
;     (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) <
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))
; [eval] 0 <= (unfolding acc(usize(_36), write) in _36.val_int)
; [eval] (unfolding acc(usize(_36), write) in _36.val_int)
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
(pop) ; 9
; Joined path conditions
; [eval] (unfolding acc(usize(_36), write) in _36.val_int) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35)
; [eval] (unfolding acc(usize(_36), write) in _36.val_int)
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@752@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
(pop) ; 9
; Joined path conditions
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$(_35)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@768@01
  $Snap.unit) ret@636@01))
(pop) ; 9
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@768@01
  $Snap.unit) ret@636@01))
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  val_int@756@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@768@01
    $Snap.unit) ret@636@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@756@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@768@01
    $Snap.unit) ret@636@01)))
; [eval] 0 <= (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$x), write) in _4.f$x.val_int)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))))
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) in (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int))
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_4.f$y), write) in _4.f$y.val_int)
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [exec]
; exhale acc(usize(_36), write) &&
;   (acc(bool(_37), write) &&
;   (acc(m_Knights_tour$$VecWrapperI32I32$opensqu$0$closesqu$$_beg_$_end_(_35), write) &&
;   (acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write) &&
;   (acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write) &&
;   acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write)))))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale false
(pop) ; 8
(push) ; 8
; [else-branch: 39 | !(val_bool@769@01)]
(assert (not val_bool@769@01))
(pop) ; 8
; [eval] !__t78
(push) ; 8
(set-option :timeout 10)
(assert (not val_bool@769@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not val_bool@769@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | !(val_bool@769@01) | live]
; [else-branch: 40 | val_bool@769@01 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 40 | !(val_bool@769@01)]
(assert (not val_bool@769@01))
; [exec]
; label l75
; [exec]
; label l148
; [exec]
; label loop10_group3_bb23
; [exec]
; __t30 := true
; [exec]
; _41 := builtin$havoc_ref()
(declare-const ret@774@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_41), write)
(declare-const $t@775@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@774@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@774@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@774@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@774@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@774@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _83 := builtin$havoc_ref()
(declare-const ret@776@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_83.val_int, write)
(declare-const $t@777@01 Int)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@776@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _83.val_int := 0
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; _85 := builtin$havoc_int()
(declare-const ret@778@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@779@01 $Snap)
(assert (= $t@779@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _85 := _83.val_int
; [exec]
; label l77
; [exec]
; _87 := builtin$havoc_ref()
(declare-const ret@780@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_87.val_ref, write)
(declare-const $t@781@01 $Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@780@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@780@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@780@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@780@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _87.val_ref := _34
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@780@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@780@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@780@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_87.val_ref), read$())
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@782@01 $Snap)
(declare-const $t@783@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (=
      $t@783@01
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@709@01)))))))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@783@01 $t@782@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l78
; [exec]
; label l79
; [exec]
; _86 := builtin$havoc_int()
(declare-const ret@784@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale _86 >= 0
(declare-const $t@785@01 $Snap)
(assert (= $t@785@01 $Snap.unit))
; [eval] _86 >= 0
(assert (>= ret@784@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale _86 >= 0
(declare-const $t@786@01 $Snap)
(assert (= $t@786@01 $Snap.unit))
; [eval] _86 >= 0
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale _86 ==
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_87.val_ref)
(declare-const $t@787@01 $Snap)
(assert (= $t@787@01 $Snap.unit))
; [eval] _86 == m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_87.val_ref)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_87.val_ref)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@783@01
  $Snap.unit) ret@631@01))
(pop) ; 9
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@783@01
  $Snap.unit) ret@631@01))
(assert (=
  ret@784@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@783@01
    $Snap.unit) ret@631@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l80
; [eval] __t30 && __t30
(set-option :timeout 0)
(push) ; 9
; [then-branch: 41 | False | live]
; [else-branch: 41 | True | live]
(push) ; 10
; [then-branch: 41 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 41 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | True | live]
; [else-branch: 42 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 42 | True]
; [exec]
; exhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(old[l78](_87.val_ref)), read$())
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] old[l78](_87.val_ref)
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $t@788@01 $Snap)
(declare-const $t@789@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@789@01 $t@783@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@789@01 $t@788@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb48
; [exec]
; __t31 := true
; [exec]
; _84 := builtin$havoc_ref()
(declare-const ret@790@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_84.val_bool, write)
(declare-const $t@791@01 Bool)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@790@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _84.val_bool := _85 < _86
; [eval] _85 < _86
(declare-const val_bool@792@01 Bool)
(assert (= val_bool@792@01 (< 0 ret@784@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; _88 := builtin$havoc_ref()
(declare-const ret@793@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_88), write)
(declare-const $t@794@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_88) ==
;   0
(declare-const $t@795@01 $Snap)
(assert (= $t@795@01 $Snap.unit))
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_88) == 0
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_88)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@794@01 ret@793@01))
(pop) ; 10
; Joined path conditions
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@794@01 ret@793@01))
(assert (=
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ $t@794@01 ret@793@01)
  0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l81
; [exec]
; _90 := builtin$havoc_ref()
(declare-const ret@796@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(_90), write)
(declare-const $t@797@01 Int)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@612@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_90), write)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@776@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@796@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@796@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@797@01) ret@796@01))
; [exec]
; inhale _90.val_int ==
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(declare-const $t@798@01 $Snap)
(assert (= $t@798@01 $Snap.unit))
; [eval] _90.val_int == m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (=
  $t@797@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb50
; [exec]
; __t32 := true
; [exec]
; label l82
; [exec]
; _91 := builtin$havoc_ref()
(declare-const ret@799@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(_91), write)
(declare-const $t@800@01 Int)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@612@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_91), write)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@776@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@799@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@799@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@800@01) ret@799@01))
; [exec]
; inhale _91.val_int ==
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(declare-const $t@801@01 $Snap)
(assert (= $t@801@01 $Snap.unit))
; [eval] _91.val_int == m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (=
  $t@800@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb51
; [exec]
; __t33 := true
; [exec]
; _92 := builtin$havoc_ref()
(declare-const ret@802@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_92.tuple_0, write)
(declare-const $t@803@01 $Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@802@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@802@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@802@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@802@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_92.tuple_0.val_int, write)
(declare-const $t@804@01 Int)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@776@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@803@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_92.tuple_1, write)
(declare-const $t@805@01 $Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@802@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@802@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@802@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_92.tuple_1.val_bool, write)
(declare-const $t@806@01 Bool)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@790@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@772@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@655@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@754@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@805@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _92.tuple_0.val_int := _90.val_int * _91.val_int
; [eval] _90.val_int * _91.val_int
(declare-const val_int@807@01 Int)
(assert (= val_int@807@01 (* $t@797@01 $t@800@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@776@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; _92.tuple_1.val_bool := false
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@790@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@772@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@655@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@754@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@805@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t80 := _92.tuple_1.val_bool
; [exec]
; assert !__t80
; [eval] !__t80
; [exec]
; label loop10_group3_bb52
; [exec]
; __t34 := true
; [exec]
; _89 := _92.tuple_0
; [exec]
; label l83
; [exec]
; label loop10_group3_loop53_start
; [exec]
; label loop10_group3_loop53_group1_bb53
; [exec]
; __t35 := true
; [exec]
; _94 := builtin$havoc_ref()
(declare-const ret@808@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_94.val_bool, write)
(declare-const $t@809@01 Bool)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@808@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _94.val_bool := _84.val_bool
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@808@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l84
; [exec]
; __t81 := _94.val_bool
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not val_bool@792@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not val_bool@792@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | val_bool@792@01 | live]
; [else-branch: 43 | !(val_bool@792@01) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 43 | val_bool@792@01]
(assert val_bool@792@01)
; [exec]
; label l86
; [exec]
; label loop10_group3_loop53_group2_bb55
; [exec]
; __t36 := true
; [exec]
; __t82 := false
; [exec]
; label loop10_group3_loop53_inv_pre
; [exec]
; fold acc(i32(_89), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@807@01) $t@803@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@612@01 $t@803@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  $t@803@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) $t@803@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(usize(_83), write)
; [eval] 0 <= self.val_int
(assert (usize%trigger ($Snap.combine ($SortWrappers.IntTo$Snap 0) $Snap.unit) ret@776@01))
; [exec]
; fold acc(bool(_84), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap val_bool@792@01) ret@790@01))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@515@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert 0 <= (unfolding acc(usize(_83), write) in _83.val_int) &&
;   ((unfolding acc(usize(_83), write) in _83.val_int) <
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34) &&
;   m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$(_88))
; [eval] 0 <= (unfolding acc(usize(_83), write) in _83.val_int)
; [eval] (unfolding acc(usize(_83), write) in _83.val_int)
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
(pop) ; 11
; Joined path conditions
; [eval] (unfolding acc(usize(_83), write) in _83.val_int) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34)
; [eval] (unfolding acc(usize(_83), write) in _83.val_int)
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@776@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
(pop) ; 11
; Joined path conditions
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34)
(set-option :timeout 0)
(push) ; 11
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@789@01
  $Snap.unit) ret@631@01))
(pop) ; 11
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@789@01
  $Snap.unit) ret@631@01))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@789@01
    $Snap.unit) ret@631@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@789@01
    $Snap.unit) ret@631@01)))
; [eval] m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$(_88)
(push) ; 11
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
  $t@794@01
  $Snap.unit) ret@793@01))
(pop) ; 11
; Joined path conditions
(assert (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
  $t@794@01
  $Snap.unit) ret@793@01))
(set-option :timeout 0)
(push) ; 11
(assert (not (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ ($Snap.combine
  $t@794@01
  $Snap.unit) ret@793@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ ($Snap.combine
  $t@794@01
  $Snap.unit) ret@793@01))
; [exec]
; exhale acc(i32(_89), write) &&
;   (acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_88), write) &&
;   (acc(usize(_83), write) &&
;   (acc(bool(_84), write) &&
;   acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write))))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; _119 := builtin$havoc_int()
(declare-const ret@810@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _23 := builtin$havoc_ref()
(declare-const ret@811@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _108 := builtin$havoc_int()
(declare-const ret@812@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t85 := builtin$havoc_bool()
(declare-const ret@813@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _89 := builtin$havoc_ref()
(declare-const ret@814@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _105 := builtin$havoc_ref()
(declare-const ret@815@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _120 := builtin$havoc_ref()
(declare-const ret@816@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t35 := builtin$havoc_bool()
(declare-const ret@817@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t84 := builtin$havoc_bool()
(declare-const ret@818@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t37 := builtin$havoc_bool()
(declare-const ret@819@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _116 := builtin$havoc_ref()
(declare-const ret@820@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t42 := builtin$havoc_bool()
(declare-const ret@821@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _88 := builtin$havoc_ref()
(declare-const ret@822@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t86 := builtin$havoc_bool()
(declare-const ret@823@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _117 := builtin$havoc_ref()
(declare-const ret@824@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t41 := builtin$havoc_bool()
(declare-const ret@825@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _111 := builtin$havoc_int()
(declare-const ret@826@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _95 := builtin$havoc_ref()
(declare-const ret@827@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _109 := builtin$havoc_ref()
(declare-const ret@828@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _83 := builtin$havoc_ref()
(declare-const ret@829@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _104 := builtin$havoc_int()
(declare-const ret@830@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _106 := builtin$havoc_ref()
(declare-const ret@831@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _113 := builtin$havoc_ref()
(declare-const ret@832@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t36 := builtin$havoc_bool()
(declare-const ret@833@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _110 := builtin$havoc_ref()
(declare-const ret@834@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t43 := builtin$havoc_bool()
(declare-const ret@835@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _94 := builtin$havoc_ref()
(declare-const ret@836@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t38 := builtin$havoc_bool()
(declare-const ret@837@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _115 := builtin$havoc_ref()
(declare-const ret@838@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _118 := builtin$havoc_int()
(declare-const ret@839@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _107 := builtin$havoc_ref()
(declare-const ret@840@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t44 := builtin$havoc_bool()
(declare-const ret@841@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _112 := builtin$havoc_int()
(declare-const ret@842@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t40 := builtin$havoc_bool()
(declare-const ret@843@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t83 := builtin$havoc_bool()
(declare-const ret@844@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t39 := builtin$havoc_bool()
(declare-const ret@845@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _114 := builtin$havoc_ref()
(declare-const ret@846@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop53_inv_post
; [exec]
; inhale acc(i32(_89), write) &&
;   (acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_88), write) &&
;   (acc(usize(_83), write) &&
;   (acc(bool(_84), write) &&
;   acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write))))
(declare-const $t@847@01 $Snap)
(assert (= $t@847@01 ($Snap.combine ($Snap.first $t@847@01) ($Snap.second $t@847@01))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@612@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@847@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@847@01))
    ($Snap.second ($Snap.second $t@847@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@847@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@847@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@847@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@847@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01)))))))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@515@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@848@01 $Snap)
(assert (= $t@848@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(usize(_83), write) in
;     0 <= _83.val_int &&
;     (_83.val_int <
;     m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34) &&
;     m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$(_88)))
(declare-const $t@849@01 $Snap)
(assert (= $t@849@01 $Snap.unit))
; [eval] (unfolding acc(usize(_83), write) in 0 <= _83.val_int && (_83.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34) && m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$(_88)))
(set-option :timeout 0)
(push) ; 11
(assert (usize%trigger ($Snap.first ($Snap.second ($Snap.second $t@847@01))) ret@829@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@847@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))))
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@829@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@847@01))))
  $Snap.unit))
; [eval] 0 <= self.val_int
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))))
; [eval] 0 <= _83.val_int && (_83.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34) && m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$(_88))
; [eval] 0 <= _83.val_int
(set-option :timeout 0)
(push) ; 12
; [then-branch: 44 | !(0 <= First:(First:(Second:(Second:($t@847@01))))) | live]
; [else-branch: 44 | 0 <= First:(First:(Second:(Second:($t@847@01)))) | live]
(push) ; 13
; [then-branch: 44 | !(0 <= First:(First:(Second:(Second:($t@847@01)))))]
(assert (not
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))))
(pop) ; 13
(push) ; 13
; [else-branch: 44 | 0 <= First:(First:(Second:(Second:($t@847@01))))]
; [eval] _83.val_int < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
  $Snap.unit) ret@631@01))
(pop) ; 14
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
  $Snap.unit) ret@631@01))
(set-option :timeout 0)
(push) ; 14
; [then-branch: 45 | !(First:(First:(Second:(Second:($t@847@01)))) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$((Second:(Second:(Second:(Second:($t@847@01)))), _), ret@631@01)) | live]
; [else-branch: 45 | First:(First:(Second:(Second:($t@847@01)))) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$((Second:(Second:(Second:(Second:($t@847@01)))), _), ret@631@01) | live]
(push) ; 15
; [then-branch: 45 | !(First:(First:(Second:(Second:($t@847@01)))) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$((Second:(Second:(Second:(Second:($t@847@01)))), _), ret@631@01))]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
      $Snap.unit) ret@631@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 45 | First:(First:(Second:(Second:($t@847@01)))) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$((Second:(Second:(Second:(Second:($t@847@01)))), _), ret@631@01)]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
    $Snap.unit) ret@631@01)))
; [eval] m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$(_88)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@847@01))
  $Snap.unit) ret@822@01))
(pop) ; 16
; Joined path conditions
(assert (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@847@01))
  $Snap.unit) ret@822@01))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
      $Snap.unit) ret@631@01))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
        $Snap.unit) ret@631@01))
    (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@847@01))
      $Snap.unit) ret@822@01))))
(assert (or
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
      $Snap.unit) ret@631@01))
  (not
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
        $Snap.unit) ret@631@01)))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))
  (and
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
      $Snap.unit) ret@631@01)
    (=>
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
          $Snap.unit) ret@631@01))
      (and
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
            $Snap.unit) ret@631@01))
        (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@847@01))
          $Snap.unit) ret@822@01)))
    (or
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
          $Snap.unit) ret@631@01))
      (not
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
            $Snap.unit) ret@631@01)))))))
(assert (or
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))
  (not
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (usize%trigger ($Snap.first ($Snap.second ($Snap.second $t@847@01))) ret@829@01)
  (=
    ($Snap.first ($Snap.second ($Snap.second $t@847@01)))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))
  (not (= ret@829@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@847@01))))
    $Snap.unit)
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))
  (=>
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))
    (and
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
        $Snap.unit) ret@631@01)
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
            $Snap.unit) ret@631@01))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
              $Snap.unit) ret@631@01))
          (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
            ($Snap.first ($Snap.second $t@847@01))
            $Snap.unit) ret@822@01)))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
          (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
            $Snap.unit) ret@631@01))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
            (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
              $Snap.unit) ret@631@01))))))
  (or
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))
    (not
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))))))
(assert (and
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01))))))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
        $Snap.unit) ret@631@01))
    (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$ ($Snap.combine
      ($Snap.first ($Snap.second $t@847@01))
      $Snap.unit) ret@822@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop53_group3_bb57
; [exec]
; __t37 := true
; [exec]
; _95 := builtin$havoc_ref()
(declare-const ret@850@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_95), write)
(declare-const $t@851@01 $Snap)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@850@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@850@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@850@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@850@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@850@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@850@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop53_group3_bb58
; [exec]
; __t38 := true
; [exec]
; _107 := builtin$havoc_ref()
(declare-const ret@852@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_107.val_ref, write)
(declare-const $t@853@01 $Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@852@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@852@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@852@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@852@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@852@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _107.val_ref := _34
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@852@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@852@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@852@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@852@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l87
; [exec]
; _108 := builtin$havoc_int()
(declare-const ret@854@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@855@01 $Snap)
(assert (= $t@855@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(usize(_83), write)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@829@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _108 := _83.val_int
(declare-const _108@856@01 Int)
(assert (=
  _108@856@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))))
; [exec]
; label l88
; [exec]
; label l89
; [exec]
; assert 0 <= _108 &&
;   _108 <
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_107.val_ref)
; [eval] 0 <= _108
(set-option :timeout 0)
(push) ; 11
(assert (not (<= 0 _108@856@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 _108@856@01))
; [eval] _108 < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_107.val_ref)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_107.val_ref)
(push) ; 11
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
  $Snap.unit) ret@631@01))
(pop) ; 11
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
  $Snap.unit) ret@631@01))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  _108@856@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
    $Snap.unit) ret@631@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  _108@856@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@847@01))))
    $Snap.unit) ret@631@01)))
; [exec]
; assert _108 >= 0
; [eval] _108 >= 0
(push) ; 11
(assert (not (>= _108@856@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>= _108@856@01 0))
; [exec]
; assert true
; [exec]
; exhale acc(_107.val_ref, write) &&
;   (acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_107.val_ref), write) &&
;   _108 >= 0)
; [eval] _108 >= 0
; [exec]
; _106 := builtin$havoc_ref()
(declare-const ret@857@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(old[l89](_107.val_ref)), write)
; [eval] old[l89](_107.val_ref)
(declare-const $t@858@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_106), write)
(declare-const $t@859@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@860@01 $Snap)
(assert (= $t@860@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_106), write) in
;     (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_106.tuple_1), write) in
;       (unfolding acc(i32(_106.tuple_1.f$y), write) in
;         (unfolding acc(i32(_106.tuple_1.f$x), write) in
;           0 <= _106.tuple_1.f$x.val_int &&
;           (_106.tuple_1.f$x.val_int <
;           m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;           (0 <= _106.tuple_1.f$y.val_int &&
;           _106.tuple_1.f$y.val_int <
;           m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))))
(declare-const $t@861@01 $Snap)
(assert (= $t@861@01 $Snap.unit))
; [eval] (unfolding acc(tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_106), write) in (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_106.tuple_1), write) in (unfolding acc(i32(_106.tuple_1.f$y), write) in (unfolding acc(i32(_106.tuple_1.f$x), write) in 0 <= _106.tuple_1.f$x.val_int && (_106.tuple_1.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _106.tuple_1.f$y.val_int && _106.tuple_1.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))))
(set-option :timeout 0)
(push) ; 11
(assert (tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@859@01 ret@857@01))
(assert (= $t@859@01 ($Snap.combine ($Snap.first $t@859@01) ($Snap.second $t@859@01))))
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@857@01 $Ref.null)))
(assert (=
  ($Snap.second $t@859@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@859@01))
    ($Snap.second ($Snap.second $t@859@01)))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@814@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@859@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@859@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ret@730@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ret@466@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_106.tuple_1), write) in (unfolding acc(i32(_106.tuple_1.f$y), write) in (unfolding acc(i32(_106.tuple_1.f$x), write) in 0 <= _106.tuple_1.f$x.val_int && (_106.tuple_1.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _106.tuple_1.f$y.val_int && _106.tuple_1.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))))
(set-option :timeout 0)
(push) ; 12
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.second ($Snap.second ($Snap.second $t@859@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@859@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@814@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@814@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] (unfolding acc(i32(_106.tuple_1.f$y), write) in (unfolding acc(i32(_106.tuple_1.f$x), write) in 0 <= _106.tuple_1.f$x.val_int && (_106.tuple_1.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _106.tuple_1.f$y.val_int && _106.tuple_1.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))))
(set-option :timeout 0)
(push) ; 13
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ret@829@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ret@799@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ret@796@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  $t@752@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    $Ref.null)))
; [eval] (unfolding acc(i32(_106.tuple_1.f$x), write) in 0 <= _106.tuple_1.f$x.val_int && (_106.tuple_1.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _106.tuple_1.f$y.val_int && _106.tuple_1.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$())))
(set-option :timeout 0)
(push) ; 14
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@829@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@799@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@796@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  $t@752@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
    $Ref.null)))
; [eval] 0 <= _106.tuple_1.f$x.val_int && (_106.tuple_1.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (0 <= _106.tuple_1.f$y.val_int && _106.tuple_1.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= _106.tuple_1.f$x.val_int
(set-option :timeout 0)
(push) ; 15
; [then-branch: 46 | !(0 <= First:(Second:(Second:(Second:(Second:($t@859@01)))))) | live]
; [else-branch: 46 | 0 <= First:(Second:(Second:(Second:(Second:($t@859@01))))) | live]
(push) ; 16
; [then-branch: 46 | !(0 <= First:(Second:(Second:(Second:(Second:($t@859@01))))))]
(assert (not
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))
(pop) ; 16
(push) ; 16
; [else-branch: 46 | 0 <= First:(Second:(Second:(Second:(Second:($t@859@01)))))]
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
; [eval] _106.tuple_1.f$x.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
; [then-branch: 47 | !(First:(Second:(Second:(Second:(Second:($t@859@01))))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 47 | First:(Second:(Second:(Second:(Second:($t@859@01))))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 18
; [then-branch: 47 | !(First:(Second:(Second:(Second:(Second:($t@859@01))))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 18
(push) ; 18
; [else-branch: 47 | First:(Second:(Second:(Second:(Second:($t@859@01))))) < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= _106.tuple_1.f$y.val_int
(push) ; 19
; [then-branch: 48 | !(0 <= Second:(Second:(Second:(Second:(Second:(Second:($t@859@01))))))) | live]
; [else-branch: 48 | 0 <= Second:(Second:(Second:(Second:(Second:(Second:($t@859@01)))))) | live]
(push) ; 20
; [then-branch: 48 | !(0 <= Second:(Second:(Second:(Second:(Second:(Second:($t@859@01)))))))]
(assert (not
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(pop) ; 20
(push) ; 20
; [else-branch: 48 | 0 <= Second:(Second:(Second:(Second:(Second:(Second:($t@859@01))))))]
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))
; [eval] _106.tuple_1.f$y.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 21
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
  (not
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (or
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
      (not
        (<=
          0
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))))))
(assert (or
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (=>
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
  (and
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (=>
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (or
          (<=
            0
            ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
          (not
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))))
    (or
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
  (not
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))
(pop) ; 14
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
      $Ref.null))
  (=>
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (not
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))))
(pop) ; 13
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
      $Ref.null))
  (=>
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (not
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))))
(pop) ; 12
; Joined path conditions
(assert (and
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.second ($Snap.second ($Snap.second $t@859@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@859@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01))))
      $Ref.null))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
      $Ref.null))
  (=>
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (not
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger $t@859@01 ret@857@01)
  (= $t@859@01 ($Snap.combine ($Snap.first $t@859@01) ($Snap.second $t@859@01)))
  (not (= ret@857@01 $Ref.null))
  (=
    ($Snap.second $t@859@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@859@01))
      ($Snap.second ($Snap.second $t@859@01))))
  (=
    ($Snap.second ($Snap.second $t@859@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@859@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
  (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.second ($Snap.second ($Snap.second $t@859@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@859@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01))))
      $Ref.null))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
      $Ref.null))
  (i32%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
      $Ref.null))
  (=>
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
      (=>
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (or
            (<=
              0
              ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
            (not
              (<=
                0
                ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))))))
      (or
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))))))
  (or
    (<=
      0
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
    (not
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))))))
(assert (and
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
  (and
    (<
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (and
      (<=
        0
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l90
; [exec]
; label l91
; [exec]
; label loop10_group3_loop53_group3_bb59
; [exec]
; __t39 := true
; [exec]
; _104 := builtin$havoc_int()
(declare-const ret@862@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@863@01 $Snap)
(assert (= $t@863@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_106), write)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@814@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@857@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@730@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ret@466@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_106.tuple_0), write)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@829@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@799@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@796@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@752@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first ($Snap.second $t@859@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01))))
; [exec]
; _104 := _106.tuple_0.val_int
(declare-const _104@864@01 Int)
(assert (= _104@864@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@859@01)))))
; [exec]
; label l92
; [exec]
; _105 := _106.tuple_1
(declare-const _105@865@01 $Ref)
(assert (=
  _105@865@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01))))))
; [exec]
; label l93
; [exec]
; _111 := builtin$havoc_int()
(declare-const ret@866@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@867@01 $Snap)
(assert (= $t@867@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_89), write)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@814@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first $t@847@01) ret@814@01))
; [exec]
; _111 := _89.val_int
(declare-const _111@868@01 Int)
(assert (= _111@868@01 ($SortWrappers.$SnapToInt ($Snap.first $t@847@01))))
; [exec]
; label l94
; [exec]
; _112 := builtin$havoc_int()
(declare-const ret@869@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@870@01 $Snap)
(assert (= $t@870@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _112 := _104
; [exec]
; label l95
; [exec]
; _110 := builtin$havoc_ref()
(declare-const ret@871@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_110.val_bool, write)
(declare-const $t@872@01 Bool)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@871@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _110.val_bool := _111 > _112
; [eval] _111 > _112
(declare-const val_bool@873@01 Bool)
(assert (= val_bool@873@01 (> _111@868@01 _104@864@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@871@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t83 := _110.val_bool
; [eval] !__t83
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not val_bool@873@01))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not val_bool@873@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | !(val_bool@873@01) | live]
; [else-branch: 49 | val_bool@873@01 | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 49 | !(val_bool@873@01)]
(assert (not val_bool@873@01))
; [exec]
; label l97
; [exec]
; label loop10_group3_loop53_group3_bb62
; [exec]
; __t41 := true
; [exec]
; _109 := builtin$havoc_ref()
(declare-const ret@874@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_109), write)
(declare-const $t@875@01 $Snap)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@874@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@874@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@874@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@874@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@874@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@874@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@874@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l150
; [exec]
; label loop10_group3_loop53_group3_bb63
; [exec]
; __t42 := true
; [exec]
; _117 := builtin$havoc_ref()
(declare-const ret@876@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_117.tuple_0, write)
(declare-const $t@877@01 $Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@857@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@876@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_117.tuple_0.val_int, write)
(declare-const $t@878@01 Int)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@814@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@829@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@877@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_117.tuple_1, write)
(declare-const $t@879@01 $Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@857@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@876@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_117.tuple_1.val_bool, write)
(declare-const $t@880@01 Bool)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@871@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@808@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@805@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@772@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@655@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@754@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@879@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _117.tuple_0.val_int := _83.val_int + 1
; [eval] _83.val_int + 1
(declare-const val_int@881@01 Int)
(assert (=
  val_int@881@01
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@847@01)))))
    1)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@814@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@829@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; _117.tuple_1.val_bool := false
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@871@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@808@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@805@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@772@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@655@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@754@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@879@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t84 := _117.tuple_1.val_bool
; [exec]
; assert !__t84
; [eval] !__t84
; [exec]
; label loop10_group3_loop53_group3_bb64
; [exec]
; __t43 := true
; [exec]
; _83 := _117.tuple_0
; [exec]
; label l105
; [exec]
; _118 := builtin$havoc_int()
(declare-const ret@882@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@883@01 $Snap)
(assert (= $t@883@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _118 := _83.val_int
; [exec]
; label l106
; [exec]
; _120 := builtin$havoc_ref()
(declare-const ret@884@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_120.val_ref, write)
(declare-const $t@885@01 $Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@884@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@884@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@884@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@884@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@884@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _120.val_ref := _34
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@884@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@884@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@884@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@884@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_120.val_ref), read$())
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@886@01 $Snap)
(declare-const $t@887@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@887@01 $t@858@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@887@01 $t@886@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l107
; [exec]
; label l108
; [exec]
; _119 := builtin$havoc_int()
(declare-const ret@888@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale _119 >= 0
(declare-const $t@889@01 $Snap)
(assert (= $t@889@01 $Snap.unit))
; [eval] _119 >= 0
(assert (>= ret@888@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale _119 >= 0
(declare-const $t@890@01 $Snap)
(assert (= $t@890@01 $Snap.unit))
; [eval] _119 >= 0
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale _119 ==
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_120.val_ref)
(declare-const $t@891@01 $Snap)
(assert (= $t@891@01 $Snap.unit))
; [eval] _119 == m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_120.val_ref)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_120.val_ref)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@887@01
  $Snap.unit) ret@631@01))
(pop) ; 12
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@887@01
  $Snap.unit) ret@631@01))
(assert (=
  ret@888@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@887@01
    $Snap.unit) ret@631@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l109
; [eval] __t43 && __t43
(set-option :timeout 0)
(push) ; 12
; [then-branch: 50 | False | live]
; [else-branch: 50 | True | live]
(push) ; 13
; [then-branch: 50 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 50 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | True | live]
; [else-branch: 51 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 51 | True]
; [exec]
; exhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(old[l107](_120.val_ref)), read$())
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
; [eval] old[l107](_120.val_ref)
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $t@892@01 $Snap)
(declare-const $t@893@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@893@01 $t@887@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@893@01 $t@892@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop53_group3_bb65
; [exec]
; __t44 := true
; [exec]
; unfold acc(bool(_84), write)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bool%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@847@01)))) ret@790@01))
; [exec]
; _84.val_bool := _118 < _119
; [eval] _118 < _119
(declare-const val_bool@894@01 Bool)
(assert (= val_bool@894@01 (< val_int@881@01 ret@888@01)))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; _23 := builtin$havoc_ref()
(declare-const ret@895@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_23), write)
(declare-const $t@896@01 $Snap)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@895@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@895@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@895@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@895@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@895@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@895@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@895@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@895@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_loop53_group4_bb53
; [exec]
; __t35 := true
; [exec]
; _94 := builtin$havoc_ref()
(declare-const ret@897@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_94.val_bool, write)
(declare-const $t@898@01 Bool)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@897@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _94.val_bool := _84.val_bool
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@897@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l110
; [exec]
; __t85 := _94.val_bool
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not val_bool@894@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not val_bool@894@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | val_bool@894@01 | live]
; [else-branch: 52 | !(val_bool@894@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 52 | val_bool@894@01]
(assert val_bool@894@01)
; [exec]
; label l112
; [exec]
; label loop10_group3_loop53_group5_bb55
; [exec]
; __t36 := true
; [exec]
; __t86 := false
; [exec]
; label loop10_group3_loop53_end_body
; [exec]
; fold acc(i32(_89), write)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@612@01 ret@814@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@814@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@814@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(usize(_83), write)
; [eval] 0 <= self.val_int
(set-option :timeout 0)
(push) ; 14
(assert (not (<= 0 val_int@881@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@881@01))
(assert (usize%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap val_int@881@01)
  $Snap.unit) $t@877@01))
; [exec]
; fold acc(bool(_84), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap val_bool@894@01) ret@790@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@515@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@790@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert 0 <= (unfolding acc(usize(_83), write) in _83.val_int) &&
;   ((unfolding acc(usize(_83), write) in _83.val_int) <
;   m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34) &&
;   m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$(_88))
; [eval] 0 <= (unfolding acc(usize(_83), write) in _83.val_int)
; [eval] (unfolding acc(usize(_83), write) in _83.val_int)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@829@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
(pop) ; 14
; Joined path conditions
; [eval] (unfolding acc(usize(_83), write) in _83.val_int) < m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34)
; [eval] (unfolding acc(usize(_83), write) in _83.val_int)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@829@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@877@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
(pop) ; 14
; Joined path conditions
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$(_34)
(set-option :timeout 0)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@893@01
  $Snap.unit) ret@631@01))
(pop) ; 14
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@893@01
  $Snap.unit) ret@631@01))
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  val_int@881@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@893@01
    $Snap.unit) ret@631@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@881@01
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@893@01
    $Snap.unit) ret@631@01)))
; [eval] m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$(_88)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@847@01))
  $Snap.unit) ret@822@01))
(pop) ; 14
; Joined path conditions
(assert (m_Knights_tour$$valid$opensqu$0$closesqu$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$bool$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@847@01))
  $Snap.unit) ret@822@01))
; [exec]
; exhale acc(i32(_89), write) &&
;   (acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_88), write) &&
;   (acc(usize(_83), write) &&
;   (acc(bool(_84), write) &&
;   acc(m_Knights_tour$$VecCandidates$opensqu$0$closesqu$$_beg_$_end_(_34), write))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale false
(pop) ; 13
(push) ; 13
; [else-branch: 52 | !(val_bool@894@01)]
(assert (not val_bool@894@01))
(pop) ; 13
; [eval] !__t85
(push) ; 13
(set-option :timeout 10)
(assert (not val_bool@894@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not val_bool@894@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | !(val_bool@894@01) | live]
; [else-branch: 53 | val_bool@894@01 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 53 | !(val_bool@894@01)]
(assert (not val_bool@894@01))
; [exec]
; label l111
; [exec]
; label l151
; [exec]
; label loop10_group3_bb54
; [exec]
; __t45 := true
; [exec]
; _93 := builtin$havoc_ref()
(declare-const ret@899@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_93), write)
(declare-const $t@900@01 $Snap)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@899@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _122 := builtin$havoc_int()
(declare-const ret@901@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@902@01 $Snap)
(assert (= $t@902@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _122 := m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_88)
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_88)
(set-option :timeout 0)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition ($Snap.first ($Snap.second $t@847@01)) ret@822@01))
(pop) ; 14
; Joined path conditions
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition ($Snap.first ($Snap.second $t@847@01)) ret@822@01))
(declare-const _122@903@01 Int)
(assert (=
  _122@903@01
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ ($Snap.first ($Snap.second $t@847@01)) ret@822@01)))
; [exec]
; _123 := builtin$havoc_ref()
(declare-const ret@904@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_123.val_ref, write)
(declare-const $t@905@01 $Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@884@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@904@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _123.val_ref := _88
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@884@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@904@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_88), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_123.val_ref), read$())
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const $t@906@01 $Snap)
(declare-const $t@907@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@907@01 ($Snap.first ($Snap.second $t@847@01))))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@907@01 $t@906@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l113
; [exec]
; _125 := builtin$havoc_int()
(declare-const ret@908@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@909@01 $Snap)
(assert (= $t@909@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _125 := m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_123.val_ref)
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_123.val_ref)
(set-option :timeout 0)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@907@01 ret@822@01))
(pop) ; 14
; Joined path conditions
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@907@01 ret@822@01))
(declare-const _125@910@01 Int)
(assert (=
  _125@910@01
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ $t@907@01 ret@822@01)))
; [exec]
; __t87 := _125
; [eval] __t87 == 0
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= _125@910@01 0))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _125@910@01 0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | _125@910@01 == 0 | live]
; [else-branch: 54 | _125@910@01 != 0 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 54 | _125@910@01 == 0]
(assert (= _125@910@01 0))
; [exec]
; label l115
; [exec]
; label loop10_group3_bb69
; [exec]
; __t48 := true
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | True | live]
; [else-branch: 55 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 55 | True]
; [exec]
; exhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_123.val_ref), read$())
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_88), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(declare-const $t@911@01 $Snap)
(declare-const $t@912@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@912@01 $t@907@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@912@01 $t@911@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb67
; [exec]
; __t49 := true
; [exec]
; unfold acc(bool(_8), write)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bool%trigger ($Snap.first $t@626@01) ret@417@01))
; [exec]
; _8.val_bool := true
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; _121 := builtin$havoc_ref()
(declare-const ret@913@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_121), write)
(declare-const $t@914@01 $Snap)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@899@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@913@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l153
; [exec]
; label loop10_group3_bb73
; [exec]
; __t50 := true
; [exec]
; _128 := builtin$havoc_ref()
(declare-const ret@915@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_128.val_ref, write)
(declare-const $t@916@01 $Ref)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@904@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@884@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@915@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write)
(assert (= $t@745@01 ($Snap.combine ($Snap.first $t@745@01) ($Snap.second $t@745@01))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_%trigger $t@745@01 ret@402@01))
; [exec]
; _128.val_ref := _3.f$field
(declare-const val_ref@917@01 $Ref)
(assert (= val_ref@917@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@745@01))))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@904@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@884@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@915@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l120
; [exec]
; _129 := builtin$havoc_ref()
(declare-const ret@918@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_129.val_int, write)
(declare-const $t@919@01 Int)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@918@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_4.f$x), write)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@918@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _129.val_int := _4.f$x.val_int
(declare-const val_int@920@01 Int)
(assert (=
  val_int@920@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.first $t@731@01))))))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l121
; [exec]
; _130 := builtin$havoc_ref()
(declare-const ret@921@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_130.val_int, write)
(declare-const $t@922@01 Int)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@918@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@921@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_4.f$y), write)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@921@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@918@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  $t@877@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@814@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@829@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@799@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@796@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  $t@752@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _130.val_int := _4.f$y.val_int
(declare-const val_int@923@01 Int)
(assert (=
  val_int@923@01
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@918@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l122
; [exec]
; _131 := builtin$havoc_ref()
(declare-const ret@924@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_131.val_int, write)
(declare-const $t@925@01 Int)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@921@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@918@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@924@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_7), write)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@924@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@921@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@918@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@612@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.second $t@626@01))) ret@612@01))
; [exec]
; _131.val_int := _7.val_int
(declare-const val_int@926@01 Int)
(assert (=
  val_int@926@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@626@01))))))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@921@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@918@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l123
; [exec]
; label l124
; [exec]
; assert 0 <= _129.val_int &&
;   (_129.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;   (0 <= _130.val_int &&
;   _130.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= _129.val_int
(set-option :timeout 0)
(push) ; 16
(assert (not (<= 0 val_int@920@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@920@01))
; [eval] _129.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (<
  val_int@920@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@920@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= _130.val_int
(push) ; 16
(assert (not (<= 0 val_int@923@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@923@01))
; [eval] _130.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (<
  val_int@923@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@923@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [exec]
; fold acc(i32(_130), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@923@01) ret@921@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@921@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_129), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@920@01) ret@918@01))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@921@01 ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@918@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_131), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@926@01) ret@924@01))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@918@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@921@01 ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@924@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert true
; [exec]
; exhale acc(_128.val_ref, write) &&
;   (acc(m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_128.val_ref), write) &&
;   (acc(i32(_129), write) &&
;   (acc(i32(_130), write) && acc(i32(_131), write))))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@745@01)) val_ref@917@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; _127 := builtin$havoc_ref()
(declare-const ret@927@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(old[l124](_128.val_ref)), write)
; [eval] old[l124](_128.val_ref)
(declare-const $t@928@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_127), write)
(declare-const $t@929@01 $Snap)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@913@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@899@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@927@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@930@01 $Snap)
(assert (= $t@930@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref),
;   old[l124](_129.val_int), old[l124](_130.val_int)) ==
;   old[l124](_131.val_int) &&
;   (forall px: Int, py: Int ::
;     { m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref),
;     px, py) }
;     { old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref,
;     px, py)) }
;     0 <= px &&
;     (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;     (!(px == old[l124](_129.val_int)) &&
;     (0 <= py &&
;     (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;     !(py == old[l124](_130.val_int)))))) ==>
;     m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref),
;     px, py) ==
;     old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref,
;     px, py)))
(declare-const $t@931@01 $Snap)
(assert (= $t@931@01 ($Snap.combine ($Snap.first $t@931@01) ($Snap.second $t@931@01))))
(assert (= ($Snap.first $t@931@01) $Snap.unit))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), old[l124](_129.val_int), old[l124](_130.val_int)) == old[l124](_131.val_int)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), old[l124](_129.val_int), old[l124](_130.val_int))
; [eval] old[l124](_128.val_ref)
; [eval] old[l124](_129.val_int)
; [eval] old[l124](_130.val_int)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 17
(pop) ; 17
; Joined path conditions
; [eval] 0 <= _pure_3
; [eval] _pure_3 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@928@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 val_int@920@01 val_int@923@01))
(pop) ; 16
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@928@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 val_int@920@01 val_int@923@01))
; [eval] old[l124](_131.val_int)
(assert (=
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ ($Snap.combine
    $t@928@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 val_int@920@01 val_int@923@01)
  val_int@926@01))
(assert (= ($Snap.second $t@931@01) $Snap.unit))
; [eval] (forall px: Int, py: Int :: { m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py) } { old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py)) } 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l124](_129.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l124](_130.val_int)))))) ==> m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py) == old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py)))
(declare-const px@932@01 Int)
(declare-const py@933@01 Int)
(push) ; 16
; [eval] 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l124](_129.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l124](_130.val_int)))))) ==> m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py) == old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py))
; [eval] 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l124](_129.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l124](_130.val_int))))))
; [eval] 0 <= px
(push) ; 17
; [then-branch: 56 | !(0 <= px@932@01) | live]
; [else-branch: 56 | 0 <= px@932@01 | live]
(push) ; 18
; [then-branch: 56 | !(0 <= px@932@01)]
(assert (not (<= 0 px@932@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 56 | 0 <= px@932@01]
(assert (<= 0 px@932@01))
; [eval] px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
; [then-branch: 57 | !(px@932@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 57 | px@932@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 20
; [then-branch: 57 | !(px@932@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    px@932@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 20
(push) ; 20
; [else-branch: 57 | px@932@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  px@932@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] !(px == old[l124](_129.val_int))
; [eval] px == old[l124](_129.val_int)
; [eval] old[l124](_129.val_int)
(push) ; 21
; [then-branch: 58 | px@932@01 == val_int@920@01 | live]
; [else-branch: 58 | px@932@01 != val_int@920@01 | live]
(push) ; 22
; [then-branch: 58 | px@932@01 == val_int@920@01]
(assert (= px@932@01 val_int@920@01))
(pop) ; 22
(push) ; 22
; [else-branch: 58 | px@932@01 != val_int@920@01]
(assert (not (= px@932@01 val_int@920@01)))
; [eval] 0 <= py
(push) ; 23
; [then-branch: 59 | !(0 <= py@933@01) | live]
; [else-branch: 59 | 0 <= py@933@01 | live]
(push) ; 24
; [then-branch: 59 | !(0 <= py@933@01)]
(assert (not (<= 0 py@933@01)))
(pop) ; 24
(push) ; 24
; [else-branch: 59 | 0 <= py@933@01]
(assert (<= 0 py@933@01))
; [eval] py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 25
(pop) ; 25
; Joined path conditions
(push) ; 25
; [then-branch: 60 | !(py@933@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 60 | py@933@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 26
; [then-branch: 60 | !(py@933@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    py@933@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 26
(push) ; 26
; [else-branch: 60 | py@933@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  py@933@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] !(py == old[l124](_130.val_int))
; [eval] py == old[l124](_130.val_int)
; [eval] old[l124](_130.val_int)
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    py@933@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      py@933@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 py@933@01)
  (and
    (<= 0 py@933@01)
    (or
      (<
        py@933@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          py@933@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or (<= 0 py@933@01) (not (<= 0 py@933@01))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= px@932@01 val_int@920@01))
  (and
    (not (= px@932@01 val_int@920@01))
    (=>
      (<= 0 py@933@01)
      (and
        (<= 0 py@933@01)
        (or
          (<
            py@933@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              py@933@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or (<= 0 py@933@01) (not (<= 0 py@933@01))))))
(assert (or (not (= px@932@01 val_int@920@01)) (= px@932@01 val_int@920@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    px@932@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (and
    (<
      px@932@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (=>
      (not (= px@932@01 val_int@920@01))
      (and
        (not (= px@932@01 val_int@920@01))
        (=>
          (<= 0 py@933@01)
          (and
            (<= 0 py@933@01)
            (or
              (<
                py@933@01
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (not
                (<
                  py@933@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))))))
        (or (<= 0 py@933@01) (not (<= 0 py@933@01)))))
    (or (not (= px@932@01 val_int@920@01)) (= px@932@01 val_int@920@01)))))
(assert (or
  (<
    px@932@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      px@932@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 px@932@01)
  (and
    (<= 0 px@932@01)
    (=>
      (<
        px@932@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<
          px@932@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (=>
          (not (= px@932@01 val_int@920@01))
          (and
            (not (= px@932@01 val_int@920@01))
            (=>
              (<= 0 py@933@01)
              (and
                (<= 0 py@933@01)
                (or
                  (<
                    py@933@01
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (not
                    (<
                      py@933@01
                      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                        $Snap.unit
                        $Snap.unit)))))))
            (or (<= 0 py@933@01) (not (<= 0 py@933@01)))))
        (or (not (= px@932@01 val_int@920@01)) (= px@932@01 val_int@920@01))))
    (or
      (<
        px@932@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          px@932@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or (<= 0 px@932@01) (not (<= 0 px@932@01))))
(push) ; 17
; [then-branch: 61 | 0 <= px@932@01 && px@932@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@932@01 != val_int@920@01 && 0 <= py@933@01 && py@933@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@933@01 != val_int@923@01 | live]
; [else-branch: 61 | !(0 <= px@932@01 && px@932@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@932@01 != val_int@920@01 && 0 <= py@933@01 && py@933@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@933@01 != val_int@923@01) | live]
(push) ; 18
; [then-branch: 61 | 0 <= px@932@01 && px@932@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@932@01 != val_int@920@01 && 0 <= py@933@01 && py@933@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@933@01 != val_int@923@01]
(assert (and
  (<= 0 px@932@01)
  (and
    (<
      px@932@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (and
      (not (= px@932@01 val_int@920@01))
      (and
        (<= 0 py@933@01)
        (and
          (<
            py@933@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not (= py@933@01 val_int@923@01))))))))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py) == old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py)
; [eval] old[l124](_128.val_ref)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 20
(pop) ; 20
; Joined path conditions
; [eval] 0 <= _pure_3
; [eval] _pure_3 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@928@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))
(pop) ; 19
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@928@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))
; [eval] old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@745@01)) val_ref@917@01)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 20
(pop) ; 20
; Joined path conditions
; [eval] 0 <= _pure_3
; [eval] _pure_3 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@745@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))
(pop) ; 19
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  ($Snap.second $t@745@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))
(pop) ; 18
(push) ; 18
; [else-branch: 61 | !(0 <= px@932@01 && px@932@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@932@01 != val_int@920@01 && 0 <= py@933@01 && py@933@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@933@01 != val_int@923@01)]
(assert (not
  (and
    (<= 0 px@932@01)
    (and
      (<
        px@932@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (not (= px@932@01 val_int@920@01))
        (and
          (<= 0 py@933@01)
          (and
            (<
              py@933@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (not (= py@933@01 val_int@923@01)))))))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (=>
  (and
    (<= 0 px@932@01)
    (and
      (<
        px@932@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (not (= px@932@01 val_int@920@01))
        (and
          (<= 0 py@933@01)
          (and
            (<
              py@933@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (not (= py@933@01 val_int@923@01)))))))
  (and
    (<= 0 px@932@01)
    (<
      px@932@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (not (= px@932@01 val_int@920@01))
    (<= 0 py@933@01)
    (<
      py@933@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (not (= py@933@01 val_int@923@01))
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
      $t@928@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01)
    (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
      ($Snap.second $t@745@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 px@932@01)
      (and
        (<
          px@932@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (not (= px@932@01 val_int@920@01))
          (and
            (<= 0 py@933@01)
            (and
              (<
                py@933@01
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (not (= py@933@01 val_int@923@01))))))))
  (and
    (<= 0 px@932@01)
    (and
      (<
        px@932@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (not (= px@932@01 val_int@920@01))
        (and
          (<= 0 py@933@01)
          (and
            (<
              py@933@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (not (= py@933@01 val_int@923@01)))))))))
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((px@932@01 Int) (py@933@01 Int)) (!
  (and
    (=>
      (<= 0 px@932@01)
      (and
        (<= 0 px@932@01)
        (=>
          (<
            px@932@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (<
              px@932@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (=>
              (not (= px@932@01 val_int@920@01))
              (and
                (not (= px@932@01 val_int@920@01))
                (=>
                  (<= 0 py@933@01)
                  (and
                    (<= 0 py@933@01)
                    (or
                      (<
                        py@933@01
                        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                          $Snap.unit
                          $Snap.unit)))
                      (not
                        (<
                          py@933@01
                          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                            $Snap.unit
                            $Snap.unit)))))))
                (or (<= 0 py@933@01) (not (<= 0 py@933@01)))))
            (or (not (= px@932@01 val_int@920@01)) (= px@932@01 val_int@920@01))))
        (or
          (<
            px@932@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              px@932@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or (<= 0 px@932@01) (not (<= 0 px@932@01)))
    (=>
      (and
        (<= 0 px@932@01)
        (and
          (<
            px@932@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (not (= px@932@01 val_int@920@01))
            (and
              (<= 0 py@933@01)
              (and
                (<
                  py@933@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not (= py@933@01 val_int@923@01)))))))
      (and
        (<= 0 px@932@01)
        (<
          px@932@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not (= px@932@01 val_int@920@01))
        (<= 0 py@933@01)
        (<
          py@933@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not (= py@933@01 val_int@923@01))
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
          $t@928@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01)
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@745@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01)))
    (or
      (not
        (and
          (<= 0 px@932@01)
          (and
            (<
              px@932@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (and
              (not (= px@932@01 val_int@920@01))
              (and
                (<= 0 py@933@01)
                (and
                  (<
                    py@933@01
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (not (= py@933@01 val_int@923@01))))))))
      (and
        (<= 0 px@932@01)
        (and
          (<
            px@932@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (not (= px@932@01 val_int@920@01))
            (and
              (<= 0 py@933@01)
              (and
                (<
                  py@933@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not (= py@933@01 val_int@923@01)))))))))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap.combine
    $t@928@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Knights_tour.rs.vpr@3147@313@3147@1033-aux|)))
(assert (forall ((px@932@01 Int) (py@933@01 Int)) (!
  (and
    (=>
      (<= 0 px@932@01)
      (and
        (<= 0 px@932@01)
        (=>
          (<
            px@932@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (<
              px@932@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (=>
              (not (= px@932@01 val_int@920@01))
              (and
                (not (= px@932@01 val_int@920@01))
                (=>
                  (<= 0 py@933@01)
                  (and
                    (<= 0 py@933@01)
                    (or
                      (<
                        py@933@01
                        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                          $Snap.unit
                          $Snap.unit)))
                      (not
                        (<
                          py@933@01
                          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                            $Snap.unit
                            $Snap.unit)))))))
                (or (<= 0 py@933@01) (not (<= 0 py@933@01)))))
            (or (not (= px@932@01 val_int@920@01)) (= px@932@01 val_int@920@01))))
        (or
          (<
            px@932@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              px@932@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or (<= 0 px@932@01) (not (<= 0 px@932@01)))
    (=>
      (and
        (<= 0 px@932@01)
        (and
          (<
            px@932@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (not (= px@932@01 val_int@920@01))
            (and
              (<= 0 py@933@01)
              (and
                (<
                  py@933@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not (= py@933@01 val_int@923@01)))))))
      (and
        (<= 0 px@932@01)
        (<
          px@932@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not (= px@932@01 val_int@920@01))
        (<= 0 py@933@01)
        (<
          py@933@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (not (= py@933@01 val_int@923@01))
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
          $t@928@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01)
        (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
          ($Snap.second $t@745@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01)))
    (or
      (not
        (and
          (<= 0 px@932@01)
          (and
            (<
              px@932@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))
            (and
              (not (= px@932@01 val_int@920@01))
              (and
                (<= 0 py@933@01)
                (and
                  (<
                    py@933@01
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (not (= py@933@01 val_int@923@01))))))))
      (and
        (<= 0 px@932@01)
        (and
          (<
            px@932@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (and
            (not (= px@932@01 val_int@920@01))
            (and
              (<= 0 py@933@01)
              (and
                (<
                  py@933@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))
                (not (= py@933@01 val_int@923@01)))))))))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap.combine
    ($Snap.second $t@745@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Knights_tour.rs.vpr@3147@313@3147@1033-aux|)))
(assert (forall ((px@932@01 Int) (py@933@01 Int)) (!
  (=>
    (and
      (<= 0 px@932@01)
      (and
        (<
          px@932@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (and
          (not (= px@932@01 val_int@920@01))
          (and
            (<= 0 py@933@01)
            (and
              (<
                py@933@01
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (not (= py@933@01 val_int@923@01)))))))
    (=
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ ($Snap.combine
        $t@928@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01)
      (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ ($Snap.combine
        ($Snap.second $t@745@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01)))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap.combine
    $t@928@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))
  :pattern ((m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%limited ($Snap.combine
    ($Snap.second $t@745@01)
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@917@01 px@932@01 py@933@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Knights_tour.rs.vpr@3147@313@3147@1033|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l125
; [exec]
; label l126
; [exec]
; label loop10_group3_bb74
; [exec]
; __t51 := true
; [exec]
; _132 := builtin$havoc_ref()
(declare-const ret@934@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_132.tuple_0, write)
(declare-const $t@935@01 $Ref)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@876@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@857@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@934@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_132.tuple_0.val_int, write)
(declare-const $t@936@01 Int)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@935@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_132.tuple_1, write)
(declare-const $t@937@01 $Ref)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@876@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@857@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@934@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_132.tuple_1.val_bool, write)
(declare-const $t@938@01 Bool)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@417@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@897@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@790@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@879@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@871@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@808@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@805@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@772@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@655@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@754@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@937@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _132.tuple_0.val_int := _7.val_int + 1
; [eval] _7.val_int + 1
(declare-const val_int@939@01 Int)
(assert (=
  val_int@939@01
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@626@01))))
    1)))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@935@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; _132.tuple_1.val_bool := false
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@417@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@897@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@790@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@879@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@871@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@808@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@805@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@772@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@655@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@754@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@937@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t88 := _132.tuple_1.val_bool
; [exec]
; assert !__t88
; [eval] !__t88
; [exec]
; label loop10_group3_bb76
; [exec]
; __t52 := true
; [exec]
; _7 := _132.tuple_0
; [exec]
; label l127
; [exec]
; _135 := builtin$havoc_int()
(declare-const ret@940@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@941@01 $Snap)
(assert (= $t@941@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _135 := _7.val_int
; [exec]
; label l128
; [exec]
; label l129
; [exec]
; _137 := builtin$havoc_ref()
(declare-const ret@942@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(_137), write)
(declare-const $t@943@01 Int)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_137), write)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@935@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@942@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@942@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@943@01) ret@942@01))
; [exec]
; inhale _137.val_int ==
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(declare-const $t@944@01 $Snap)
(assert (= $t@944@01 $Snap.unit))
; [eval] _137.val_int == m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(assert (=
  $t@943@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb81
; [exec]
; __t53 := true
; [exec]
; label l130
; [exec]
; _138 := builtin$havoc_ref()
(declare-const ret@945@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(_138), write)
(declare-const $t@946@01 Int)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_138), write)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@942@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@935@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@945@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@945@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($SortWrappers.IntTo$Snap $t@946@01) ret@945@01))
; [exec]
; inhale _138.val_int ==
;   m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(declare-const $t@947@01 $Snap)
(assert (= $t@947@01 $Snap.unit))
; [eval] _138.val_int == m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 16
(pop) ; 16
; Joined path conditions
(assert (=
  $t@946@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb82
; [exec]
; __t54 := true
; [exec]
; _139 := builtin$havoc_ref()
(declare-const ret@948@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_139.tuple_0, write)
(declare-const $t@949@01 $Ref)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@934@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@876@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@857@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@948@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_139.tuple_0.val_int, write)
(declare-const $t@950@01 Int)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@945@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@942@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@935@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@949@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_139.tuple_1, write)
(declare-const $t@951@01 $Ref)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@934@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@876@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@857@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@802@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@751@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@448@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@435@01 ret@948@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_139.tuple_1.val_bool, write)
(declare-const $t@952@01 Bool)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@937@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@417@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@897@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@790@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@879@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@871@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@808@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@805@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@772@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@655@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@754@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@951@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _139.tuple_0.val_int := _137.val_int * _138.val_int
; [eval] _137.val_int * _138.val_int
(declare-const val_int@953@01 Int)
(assert (= val_int@953@01 (* $t@943@01 $t@946@01)))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@945@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@942@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@935@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@612@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@731@01)))))
  $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first $t@731@01))) $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@877@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@814@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@829@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@799@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@796@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@752@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@693@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@449@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@445@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@442@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@415@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _2@287@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= _1@286@01 $t@949@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; _139.tuple_1.val_bool := false
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@937@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@417@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@897@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@790@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@879@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@871@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@808@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@805@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@772@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@655@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@754@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@744@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@658@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@457@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@451@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@438@01 $t@951@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t89 := _139.tuple_1.val_bool
; [exec]
; assert !__t89
; [eval] !__t89
; [exec]
; label loop10_group3_bb83
; [exec]
; __t55 := true
; [exec]
; _136 := _139.tuple_0
; [exec]
; label l131
; [exec]
; _134 := builtin$havoc_ref()
(declare-const ret@954@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_134.val_bool, write)
(declare-const $t@955@01 Bool)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@954@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _134.val_bool := _135 <= _136.val_int
; [eval] _135 <= _136.val_int
(declare-const val_bool@956@01 Bool)
(assert (= val_bool@956@01 (<= val_int@939@01 val_int@953@01)))
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@954@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t90 := _134.val_bool
; [eval] !__t90
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not val_bool@956@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not val_bool@956@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | !(val_bool@956@01) | live]
; [else-branch: 62 | val_bool@956@01 | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 62 | !(val_bool@956@01)]
(assert (not val_bool@956@01))
; [exec]
; label l133
; [exec]
; label loop10_group3_bb78
; [exec]
; __t58 := true
; [exec]
; _133 := builtin$havoc_ref()
(declare-const ret@957@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_133.val_bool, write)
(declare-const $t@958@01 Bool)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@957@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _133.val_bool := false
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@957@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; label loop10_group3_bb80
; [exec]
; __t59 := true
; [exec]
; _15 := _133
; [exec]
; label l137
; [exec]
; _23 := builtin$havoc_ref()
(declare-const ret@959@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_23), write)
(declare-const $t@960@01 $Snap)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@927@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@913@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@899@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@959@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb84
; [exec]
; __t60 := true
; [exec]
; label loop10_group3_bb85
; [exec]
; __t61 := true
; [exec]
; label loop10_group4_bb10
; [exec]
; __t7 := true
; [exec]
; _22 := builtin$havoc_ref()
(declare-const ret@961@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_22.val_bool, write)
(declare-const $t@962@01 Bool)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@957@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@961@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _22.val_bool := _15.val_bool
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@957@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@961@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l138
; [exec]
; __t92 := _22.val_bool
; [then-branch: 63 | False | dead]
; [else-branch: 63 | True | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 63 | True]
(pop) ; 17
; [eval] !__t92
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | True | live]
; [else-branch: 64 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 64 | True]
; [exec]
; label l139
; [exec]
; label l156
; [exec]
; label bb11
; [exec]
; __t63 := true
; [exec]
; _21 := builtin$havoc_ref()
(declare-const ret@963@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_21), write)
(declare-const $t@964@01 $Snap)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@959@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@927@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@913@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@899@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@963@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _142 := builtin$havoc_ref()
(declare-const ret@965@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_142.val_bool, write)
(declare-const $t@966@01 Bool)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@961@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@957@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@965@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _142.val_bool := _8.val_bool
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@961@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@957@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@965@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l141
; [exec]
; __t94 := _142.val_bool
; [eval] !__t94
; [then-branch: 65 | False | dead]
; [else-branch: 65 | True | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 65 | True]
(pop) ; 18
; [eval] !!__t94
; [eval] !__t94
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | True | live]
; [else-branch: 66 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 66 | True]
; [exec]
; label l142
; [exec]
; label bb86
; [exec]
; __t64 := true
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@967@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_0), write)
(declare-const $t@968@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_0) ==
;   0
(declare-const $t@969@01 $Snap)
(assert (= $t@969@01 $Snap.unit))
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_0) == 0
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_0)
(set-option :timeout 0)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@968@01 ret@967@01))
(pop) ; 19
; Joined path conditions
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@968@01 ret@967@01))
(assert (=
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ $t@968@01 ret@967@01)
  0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb91
; [exec]
; __t65 := true
; [exec]
; label l157
; [exec]
; label bb89
; [exec]
; __t69 := true
; [exec]
; label return
; [exec]
; assert true
; [exec]
; exhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 18
(pop) ; 17
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 62 | val_bool@956@01]
(assert val_bool@956@01)
(pop) ; 16
; [eval] !!__t90
; [eval] !__t90
(push) ; 16
(set-option :timeout 10)
(assert (not (not val_bool@956@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not val_bool@956@01))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | val_bool@956@01 | live]
; [else-branch: 67 | !(val_bool@956@01) | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 67 | val_bool@956@01]
(assert val_bool@956@01)
; [exec]
; label l132
; [exec]
; label loop10_group3_bb79
; [exec]
; __t56 := true
; [exec]
; _141 := builtin$havoc_ref()
(declare-const ret@970@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_141.val_bool, write)
(declare-const $t@971@01 Bool)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@970@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _141.val_bool := _8.val_bool
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@970@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l134
; [exec]
; _140 := builtin$havoc_ref()
(declare-const ret@972@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_140.val_bool, write)
(declare-const $t@973@01 Bool)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@970@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@972@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _140.val_bool := !_141.val_bool
; [eval] !_141.val_bool
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@970@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@972@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t91 := _140.val_bool
; [eval] !__t91
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | True | live]
; [else-branch: 68 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 68 | True]
; [exec]
; label l136
; [exec]
; label l154
; [exec]
; label loop10_group3_bb78
; [exec]
; __t58 := true
; [exec]
; _133 := builtin$havoc_ref()
(declare-const ret@974@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_133.val_bool, write)
(declare-const $t@975@01 Bool)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@972@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@970@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@974@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _133.val_bool := false
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@972@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@970@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@974@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [exec]
; label loop10_group3_bb80
; [exec]
; __t59 := true
; [exec]
; _15 := _133
; [exec]
; label l137
; [exec]
; _23 := builtin$havoc_ref()
(declare-const ret@976@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_23), write)
(declare-const $t@977@01 $Snap)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@927@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@913@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@899@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@976@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb84
; [exec]
; __t60 := true
; [exec]
; label loop10_group3_bb85
; [exec]
; __t61 := true
; [exec]
; label loop10_group4_bb10
; [exec]
; __t7 := true
; [exec]
; _22 := builtin$havoc_ref()
(declare-const ret@978@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_22.val_bool, write)
(declare-const $t@979@01 Bool)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@974@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@972@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@970@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@978@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _22.val_bool := _15.val_bool
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@974@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@972@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@970@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@978@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l138
; [exec]
; __t92 := _22.val_bool
; [then-branch: 69 | False | dead]
; [else-branch: 69 | True | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 69 | True]
(pop) ; 18
; [eval] !__t92
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | True | live]
; [else-branch: 70 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 70 | True]
; [exec]
; label l139
; [exec]
; label l156
; [exec]
; label bb11
; [exec]
; __t63 := true
; [exec]
; _21 := builtin$havoc_ref()
(declare-const ret@980@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_21), write)
(declare-const $t@981@01 $Snap)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@976@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@927@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@913@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@899@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@980@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _142 := builtin$havoc_ref()
(declare-const ret@982@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_142.val_bool, write)
(declare-const $t@983@01 Bool)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@978@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@974@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@972@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@970@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@982@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _142.val_bool := _8.val_bool
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@978@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@974@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@972@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@970@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@954@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@951@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@937@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@417@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@982@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l141
; [exec]
; __t94 := _142.val_bool
; [eval] !__t94
; [then-branch: 71 | False | dead]
; [else-branch: 71 | True | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 71 | True]
(pop) ; 19
; [eval] !!__t94
; [eval] !__t94
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | True | live]
; [else-branch: 72 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 72 | True]
; [exec]
; label l142
; [exec]
; label bb86
; [exec]
; __t64 := true
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@984@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_0), write)
(declare-const $t@985@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_0) ==
;   0
(declare-const $t@986@01 $Snap)
(assert (= $t@986@01 $Snap.unit))
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_0) == 0
; [eval] m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$(_0)
(set-option :timeout 0)
(push) ; 20
; [eval] read$()
(push) ; 21
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@985@01 ret@984@01))
(pop) ; 20
; Joined path conditions
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$%precondition $t@985@01 ret@984@01))
(assert (=
  (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$discriminant$$__$TY$__m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_$$int$ $t@985@01 ret@984@01)
  0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb91
; [exec]
; __t65 := true
; [exec]
; label l157
; [exec]
; label bb89
; [exec]
; __t69 := true
; [exec]
; label return
; [exec]
; assert true
; [exec]
; exhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 19
(pop) ; 18
(pop) ; 17
; [eval] !!__t91
; [eval] !__t91
; [then-branch: 73 | False | dead]
; [else-branch: 73 | True | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 73 | True]
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 67 | !(val_bool@956@01)]
(assert (not val_bool@956@01))
(pop) ; 16
(pop) ; 15
; [eval] !__t45
; [then-branch: 74 | False | dead]
; [else-branch: 74 | True | live]
(push) ; 15
; [else-branch: 74 | True]
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 54 | _125@910@01 != 0]
(assert (not (= _125@910@01 0)))
(pop) ; 14
; [eval] !(__t87 == 0)
; [eval] __t87 == 0
(push) ; 14
(set-option :timeout 10)
(assert (not (= _125@910@01 0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= _125@910@01 0))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | _125@910@01 != 0 | live]
; [else-branch: 75 | _125@910@01 == 0 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 75 | _125@910@01 != 0]
(assert (not (= _125@910@01 0)))
; [exec]
; label l114
; [exec]
; label loop10_group3_bb68
; [exec]
; __t46 := true
; [exec]
; label l116
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | True | live]
; [else-branch: 76 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 76 | True]
; [exec]
; exhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_123.val_ref), read$())
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_88), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(declare-const $t@987@01 $Snap)
(declare-const $t@988@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@988@01 $t@907@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@988@01 $t@987@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop10_group3_bb72
; [exec]
; __t47 := true
; [exec]
; unfold acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_(_88), write)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (= $t@988@01 ($Snap.combine ($Snap.first $t@988@01) ($Snap.second $t@988@01))))
(assert (not (= ret@822@01 $Ref.null)))
(assert (=
  ($Snap.second $t@988@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@988@01))
    ($Snap.second ($Snap.second $t@988@01)))))
(assert (= ($Snap.first ($Snap.second $t@988@01)) $Snap.unit))
; [eval] 0 <= self.discriminant
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@988@01))))
(assert (=
  ($Snap.second ($Snap.second $t@988@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@988@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@988@01))) $Snap.unit))
; [eval] self.discriminant <= 1
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@988@01)) 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@988@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@988@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
; [eval] self.discriminant == 1
(push) ; 16
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@988@01)) 1))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@988@01)) 1)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | First:($t@988@01) == 1 | live]
; [else-branch: 77 | First:($t@988@01) != 1 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 77 | First:($t@988@01) == 1]
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@988@01)) 1))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger $t@988@01 ret@822@01))
; [exec]
; unfold acc(m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_Some(_88.enum_Some), write)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))
    $Ref.null)))
; State saturation: after unfold
(check-sat)
; unknown
(assert (m_core$$option$opensqu$0$closesqu$$$Option$opensqu$0$closesqu$$_beg_$tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_$_end_Some%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
; [exec]
; unfold acc(tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_88.enum_Some.f$0), write)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@876@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@857@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@802@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@751@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@448@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@435@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@876@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@857@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@802@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@751@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@448@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@435@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@859@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@730@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@466@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tuple2$i32$m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))
; [exec]
; _124 := _88.enum_Some.f$0.tuple_1
(declare-const _124@989@01 $Ref)
(assert (=
  _124@989@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))
; [exec]
; label l117
; [exec]
; _126 := _124
; [exec]
; label l118
; [exec]
; _4 := _126
; [exec]
; label l119
; [exec]
; _121 := builtin$havoc_ref()
(declare-const ret@990@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_121), write)
(declare-const $t@991@01 $Snap)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@899@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@990@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l152
; [exec]
; unfold acc(bool(_8), write)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@897@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@790@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@879@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@871@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@808@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@805@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@772@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@655@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@754@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@744@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@658@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@457@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@451@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@438@01 ret@417@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bool%trigger ($Snap.first $t@626@01) ret@417@01))
; [exec]
; label loop10_group3_bb73
; [exec]
; __t50 := true
; [exec]
; _128 := builtin$havoc_ref()
(declare-const ret@992@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_128.val_ref, write)
(declare-const $t@993@01 $Ref)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@904@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@884@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@992@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_(_3), write)
(assert (= $t@745@01 ($Snap.combine ($Snap.first $t@745@01) ($Snap.second $t@745@01))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Board$opensqu$0$closesqu$$_beg_$_end_%trigger $t@745@01 ret@402@01))
; [exec]
; _128.val_ref := _3.f$field
(declare-const val_ref@994@01 $Ref)
(assert (= val_ref@994@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@745@01))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@904@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@884@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@780@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@759@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@726@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@645@01 ret@992@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l120
; [exec]
; _129 := builtin$havoc_ref()
(declare-const ret@995@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_129.val_int, write)
(declare-const $t@996@01 Int)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@995@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_(_4), write)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
  _124@989@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
(assert (not (= _124@989@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@612@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Knights_tour$$Point$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))) _124@989@01))
; [exec]
; unfold acc(i32(_4.f$x), write)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@995@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  $t@877@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@814@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@829@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@799@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@796@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  $t@752@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
; [exec]
; _129.val_int := _4.f$x.val_int
(declare-const val_int@997@01 Int)
(assert (=
  val_int@997@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l121
; [exec]
; _130 := builtin$havoc_ref()
(declare-const ret@998@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_130.val_int, write)
(declare-const $t@999@01 Int)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@995@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@998@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_4.f$y), write)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@998@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@995@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  $t@877@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@814@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@829@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@799@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@796@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  $t@752@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@693@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  $t@449@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@445@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@442@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ret@415@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  _2@287@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  _1@286@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
    $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))))
; [exec]
; _130.val_int := _4.f$y.val_int
(declare-const val_int@1000@01 Int)
(assert (=
  val_int@1000@01
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
  ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@995@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l122
; [exec]
; _131 := builtin$havoc_ref()
(declare-const ret@1001@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_131.val_int, write)
(declare-const $t@1002@01 Int)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@998@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
  ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@995@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@1001@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_7), write)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@1001@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@998@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
  ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@995@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@612@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@612@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first ($Snap.second ($Snap.second $t@626@01))) ret@612@01))
; [exec]
; _131.val_int := _7.val_int
(declare-const val_int@1003@01 Int)
(assert (=
  val_int@1003@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@626@01))))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@612@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@998@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))))
  ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@995@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01))))))))))
  ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@877@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@814@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@859@01)) ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@829@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@799@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@796@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@752@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@693@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@449@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@445@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@442@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _2@287@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= _1@286@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l123
; [exec]
; label l124
; [exec]
; assert 0 <= _129.val_int &&
;   (_129.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;   (0 <= _130.val_int &&
;   _130.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()))
; [eval] 0 <= _129.val_int
(set-option :timeout 0)
(push) ; 17
(assert (not (<= 0 val_int@997@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@997@01))
; [eval] _129.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (<
  val_int@997@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@997@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] 0 <= _130.val_int
(push) ; 17
(assert (not (<= 0 val_int@1000@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@1000@01))
; [eval] _130.val_int < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (<
  val_int@1000@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@1000@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [exec]
; fold acc(i32(_130), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@1000@01) ret@998@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
  ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@998@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_129), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@997@01) ret@995@01))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@998@01 ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
  ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@995@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(i32(_131), write)
(assert (i32%trigger ($SortWrappers.IntTo$Snap val_int@1003@01) ret@1001@01))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@995@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@998@01 ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@988@01)))))))
  ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@414@01))))
  ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@414@01)) ret@1001@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert true
; [exec]
; exhale acc(_128.val_ref, write) &&
;   (acc(m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_128.val_ref), write) &&
;   (acc(i32(_129), write) &&
;   (acc(i32(_130), write) && acc(i32(_131), write))))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@745@01)) val_ref@994@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [exec]
; _127 := builtin$havoc_ref()
(declare-const ret@1004@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(old[l124](_128.val_ref)), write)
; [eval] old[l124](_128.val_ref)
(declare-const $t@1005@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_127), write)
(declare-const $t@1006@01 $Snap)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@990@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@899@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@895@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@874@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@850@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@774@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@770@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@749@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@712@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@629@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@428@01 ret@1004@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@1007@01 $Snap)
(assert (= $t@1007@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref),
;   old[l124](_129.val_int), old[l124](_130.val_int)) ==
;   old[l124](_131.val_int) &&
;   (forall px: Int, py: Int ::
;     { m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref),
;     px, py) }
;     { old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref,
;     px, py)) }
;     0 <= px &&
;     (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;     (!(px == old[l124](_129.val_int)) &&
;     (0 <= py &&
;     (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() &&
;     !(py == old[l124](_130.val_int)))))) ==>
;     m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref),
;     px, py) ==
;     old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref,
;     px, py)))
(declare-const $t@1008@01 $Snap)
(assert (= $t@1008@01 ($Snap.combine ($Snap.first $t@1008@01) ($Snap.second $t@1008@01))))
(assert (= ($Snap.first $t@1008@01) $Snap.unit))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), old[l124](_129.val_int), old[l124](_130.val_int)) == old[l124](_131.val_int)
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), old[l124](_129.val_int), old[l124](_130.val_int))
; [eval] old[l124](_128.val_ref)
; [eval] old[l124](_129.val_int)
; [eval] old[l124](_130.val_int)
(set-option :timeout 0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 18
(pop) ; 18
; Joined path conditions
; [eval] 0 <= _pure_3
; [eval] _pure_3 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@1005@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@994@01 val_int@997@01 val_int@1000@01))
(pop) ; 17
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@1005@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@994@01 val_int@997@01 val_int@1000@01))
; [eval] old[l124](_131.val_int)
(assert (=
  (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$ ($Snap.combine
    $t@1005@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@994@01 val_int@997@01 val_int@1000@01)
  val_int@1003@01))
(assert (= ($Snap.second $t@1008@01) $Snap.unit))
; [eval] (forall px: Int, py: Int :: { m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py) } { old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py)) } 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l124](_129.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l124](_130.val_int)))))) ==> m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py) == old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py)))
(declare-const px@1009@01 Int)
(declare-const py@1010@01 Int)
(push) ; 17
; [eval] 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l124](_129.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l124](_130.val_int)))))) ==> m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py) == old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py))
; [eval] 0 <= px && (px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && (!(px == old[l124](_129.val_int)) && (0 <= py && (py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$() && !(py == old[l124](_130.val_int))))))
; [eval] 0 <= px
(push) ; 18
; [then-branch: 78 | !(0 <= px@1009@01) | live]
; [else-branch: 78 | 0 <= px@1009@01 | live]
(push) ; 19
; [then-branch: 78 | !(0 <= px@1009@01)]
(assert (not (<= 0 px@1009@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 78 | 0 <= px@1009@01]
(assert (<= 0 px@1009@01))
; [eval] px < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
; [then-branch: 79 | !(px@1009@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 79 | px@1009@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 21
; [then-branch: 79 | !(px@1009@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    px@1009@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 21
(push) ; 21
; [else-branch: 79 | px@1009@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  px@1009@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] !(px == old[l124](_129.val_int))
; [eval] px == old[l124](_129.val_int)
; [eval] old[l124](_129.val_int)
(push) ; 22
; [then-branch: 80 | px@1009@01 == val_int@997@01 | live]
; [else-branch: 80 | px@1009@01 != val_int@997@01 | live]
(push) ; 23
; [then-branch: 80 | px@1009@01 == val_int@997@01]
(assert (= px@1009@01 val_int@997@01))
(pop) ; 23
(push) ; 23
; [else-branch: 80 | px@1009@01 != val_int@997@01]
(assert (not (= px@1009@01 val_int@997@01)))
; [eval] 0 <= py
(push) ; 24
; [then-branch: 81 | !(0 <= py@1010@01) | live]
; [else-branch: 81 | 0 <= py@1010@01 | live]
(push) ; 25
; [then-branch: 81 | !(0 <= py@1010@01)]
(assert (not (<= 0 py@1010@01)))
(pop) ; 25
(push) ; 25
; [else-branch: 81 | 0 <= py@1010@01]
(assert (<= 0 py@1010@01))
; [eval] py < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
; [then-branch: 82 | !(py@1010@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))) | live]
; [else-branch: 82 | py@1010@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) | live]
(push) ; 27
; [then-branch: 82 | !(py@1010@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)))]
(assert (not
  (<
    py@1010@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))))
(pop) ; 27
(push) ; 27
; [else-branch: 82 | py@1010@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _))]
(assert (<
  py@1010@01
  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
    $Snap.unit
    $Snap.unit))))
; [eval] !(py == old[l124](_130.val_int))
; [eval] py == old[l124](_130.val_int)
; [eval] old[l124](_130.val_int)
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    py@1010@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      py@1010@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 py@1010@01)
  (and
    (<= 0 py@1010@01)
    (or
      (<
        py@1010@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          py@1010@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or (<= 0 py@1010@01) (not (<= 0 py@1010@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= px@1009@01 val_int@997@01))
  (and
    (not (= px@1009@01 val_int@997@01))
    (=>
      (<= 0 py@1010@01)
      (and
        (<= 0 py@1010@01)
        (or
          (<
            py@1010@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not
            (<
              py@1010@01
              (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                $Snap.unit
                $Snap.unit)))))))
    (or (<= 0 py@1010@01) (not (<= 0 py@1010@01))))))
(assert (or (not (= px@1009@01 val_int@997@01)) (= px@1009@01 val_int@997@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    px@1009@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (and
    (<
      px@1009@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (=>
      (not (= px@1009@01 val_int@997@01))
      (and
        (not (= px@1009@01 val_int@997@01))
        (=>
          (<= 0 py@1010@01)
          (and
            (<= 0 py@1010@01)
            (or
              (<
                py@1010@01
                (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                  $Snap.unit
                  $Snap.unit)))
              (not
                (<
                  py@1010@01
                  (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                    $Snap.unit
                    $Snap.unit)))))))
        (or (<= 0 py@1010@01) (not (<= 0 py@1010@01)))))
    (or (not (= px@1009@01 val_int@997@01)) (= px@1009@01 val_int@997@01)))))
(assert (or
  (<
    px@1009@01
    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
      $Snap.unit
      $Snap.unit)))
  (not
    (<
      px@1009@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 px@1009@01)
  (and
    (<= 0 px@1009@01)
    (=>
      (<
        px@1009@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (and
        (<
          px@1009@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit)))
        (=>
          (not (= px@1009@01 val_int@997@01))
          (and
            (not (= px@1009@01 val_int@997@01))
            (=>
              (<= 0 py@1010@01)
              (and
                (<= 0 py@1010@01)
                (or
                  (<
                    py@1010@01
                    (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                      $Snap.unit
                      $Snap.unit)))
                  (not
                    (<
                      py@1010@01
                      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
                        $Snap.unit
                        $Snap.unit)))))))
            (or (<= 0 py@1010@01) (not (<= 0 py@1010@01)))))
        (or (not (= px@1009@01 val_int@997@01)) (= px@1009@01 val_int@997@01))))
    (or
      (<
        px@1009@01
        (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
          $Snap.unit
          $Snap.unit)))
      (not
        (<
          px@1009@01
          (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
            $Snap.unit
            $Snap.unit))))))))
(assert (or (<= 0 px@1009@01) (not (<= 0 px@1009@01))))
(push) ; 18
; [then-branch: 83 | 0 <= px@1009@01 && px@1009@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@1009@01 != val_int@997@01 && 0 <= py@1010@01 && py@1010@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@1010@01 != val_int@1000@01 | live]
; [else-branch: 83 | !(0 <= px@1009@01 && px@1009@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@1009@01 != val_int@997@01 && 0 <= py@1010@01 && py@1010@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@1010@01 != val_int@1000@01) | live]
(push) ; 19
; [then-branch: 83 | 0 <= px@1009@01 && px@1009@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && px@1009@01 != val_int@997@01 && 0 <= py@1010@01 && py@1010@01 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$((_, _)) && py@1010@01 != val_int@1000@01]
(assert (and
  (<= 0 px@1009@01)
  (and
    (<
      px@1009@01
      (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
        $Snap.unit
        $Snap.unit)))
    (and
      (not (= px@1009@01 val_int@997@01))
      (and
        (<= 0 py@1010@01)
        (and
          (<
            py@1010@01
            (m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$ ($Snap.combine
              $Snap.unit
              $Snap.unit)))
          (not (= py@1010@01 val_int@1000@01))))))))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py) == old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(old[l124](_128.val_ref), px, py)
; [eval] old[l124](_128.val_ref)
(push) ; 20
; [eval] read$()
(push) ; 21
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 21
(pop) ; 21
; Joined path conditions
; [eval] 0 <= _pure_3
; [eval] _pure_3 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@1005@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@994@01 px@1009@01 py@1010@01))
(pop) ; 20
; Joined path conditions
(assert (m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$%precondition ($Snap.combine
  $t@1005@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) val_ref@994@01 px@1009@01 py@1010@01))
; [eval] old[l124](m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py))
; [eval] m_Knights_tour$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$5$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Knights_tour$$VecVecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$$$int$(_128.val_ref, px, py)
(push) ; 20
; [eval] read$()
(push) ; 21
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@745@01)) val_ref@994@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
; [eval] m_Knights_tour$$size$opensqu$0$closesqu$__$TY$__$int$()
(set-option :timeout 0)
(push) ; 21
(pop) ; 21
; Joined path conditions
